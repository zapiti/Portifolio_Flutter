define(['dart_sdk', 'packages/flutter_web_ui/ui', 'packages/flutter_web/src/foundation/assertions', 'packages/vector_math/vector_math_64', 'packages/flutter_web/src/physics/clamped_simulation'], function(dart_sdk, packages__flutter_web_ui__ui, packages__flutter_web__src__foundation__assertions, packages__vector_math__vector_math_64, packages__flutter_web__src__physics__clamped_simulation) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const math = dart_sdk.math;
  const collection = dart_sdk.collection;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const ui = packages__flutter_web_ui__ui.ui;
  const engine = packages__flutter_web_ui__ui.src__engine;
  const assertions = packages__flutter_web__src__foundation__assertions.src__foundation__assertions;
  const serialization = packages__flutter_web__src__foundation__assertions.src__foundation__serialization;
  const diagnostics = packages__flutter_web__src__foundation__assertions.src__foundation__diagnostics;
  const change_notifier = packages__flutter_web__src__foundation__assertions.src__foundation__change_notifier;
  const observer_list = packages__flutter_web__src__foundation__assertions.src__foundation__observer_list;
  const print = packages__flutter_web__src__foundation__assertions.src__foundation__print;
  const binding = packages__flutter_web__src__foundation__assertions.src__foundation__binding;
  const debug = packages__flutter_web__src__foundation__assertions.src__foundation__debug;
  const collections = packages__flutter_web__src__foundation__assertions.src__foundation__collections;
  const vector_math_64 = packages__vector_math__vector_math_64.vector_math_64;
  const tolerance = packages__flutter_web__src__physics__clamped_simulation.src__physics__tolerance;
  const friction_simulation = packages__flutter_web__src__physics__clamped_simulation.src__physics__friction_simulation;
  const spring_simulation = packages__flutter_web__src__physics__clamped_simulation.src__physics__spring_simulation;
  const simulation = packages__flutter_web__src__physics__clamped_simulation.src__physics__simulation;
  const text_editing = Object.create(dart.library);
  const alignment = Object.create(dart.library);
  const basic_types = Object.create(dart.library);
  const system_chrome = Object.create(dart.library);
  const system_channels = Object.create(dart.library);
  const platform_channel = Object.create(dart.library);
  const platform_messages = Object.create(dart.library);
  const message_codecs = Object.create(dart.library);
  const message_codec = Object.create(dart.library);
  const animations = Object.create(dart.library);
  const listener_helpers = Object.create(dart.library);
  const animation$ = Object.create(dart.library);
  const tween = Object.create(dart.library);
  const curves = Object.create(dart.library);
  const eager = Object.create(dart.library);
  const recognizer = Object.create(dart.library);
  const pointer_router = Object.create(dart.library);
  const events = Object.create(dart.library);
  const team = Object.create(dart.library);
  const binding$ = Object.create(dart.library);
  const pointer_signal_resolver = Object.create(dart.library);
  const hit_test = Object.create(dart.library);
  const debug$ = Object.create(dart.library);
  const converter = Object.create(dart.library);
  const arena = Object.create(dart.library);
  const util = Object.create(dart.library);
  const constants = Object.create(dart.library);
  const system_sound = Object.create(dart.library);
  const gradient = Object.create(dart.library);
  const raw_keyboard_fuchsia = Object.create(dart.library);
  const raw_keyboard = Object.create(dart.library);
  const raw_keyboard_linux = Object.create(dart.library);
  const keyboard_maps = Object.create(dart.library);
  const keyboard_key = Object.create(dart.library);
  const raw_keyboard_macos = Object.create(dart.library);
  const raw_keyboard_android = Object.create(dart.library);
  const drag$ = Object.create(dart.library);
  const drag_details = Object.create(dart.library);
  const velocity_tracker = Object.create(dart.library);
  const lsq_solver = Object.create(dart.library);
  const matrix_utils = Object.create(dart.library);
  const clipboard = Object.create(dart.library);
  const system_navigator = Object.create(dart.library);
  const icon_data = Object.create(dart.library);
  const multidrag = Object.create(dart.library);
  const colors = Object.create(dart.library);
  const clip = Object.create(dart.library);
  const scroll_simulation = Object.create(dart.library);
  const tween_sequence = Object.create(dart.library);
  const scale = Object.create(dart.library);
  const border_radius = Object.create(dart.library);
  const paint_utilities = Object.create(dart.library);
  const tap = Object.create(dart.library);
  const debug$0 = Object.create(dart.library);
  const notched_shapes = Object.create(dart.library);
  const geometry = Object.create(dart.library);
  const force_press = Object.create(dart.library);
  const long_press = Object.create(dart.library);
  const strut_style = Object.create(dart.library);
  const text_style = Object.create(dart.library);
  const priority = Object.create(dart.library);
  const icon_theme_data = Object.create(dart.library);
  const debug$1 = Object.create(dart.library);
  const multitap = Object.create(dart.library);
  const binding$0 = Object.create(dart.library);
  const debug$2 = Object.create(dart.library);
  const fractional_offset = Object.create(dart.library);
  const haptic_feedback = Object.create(dart.library);
  const box_shadow = Object.create(dart.library);
  const box_fit = Object.create(dart.library);
  const monodrag = Object.create(dart.library);
  const $substring = dartx.substring;
  const $hashCode = dartx.hashCode;
  const $runtimeType = dartx.runtimeType;
  const $truncate = dartx.truncate;
  const $toDouble = dartx.toDouble;
  const $modulo = dartx['%'];
  const $toStringAsFixed = dartx.toStringAsFixed;
  const $toString = dartx.toString;
  const $add = dartx.add;
  const $cast = dartx.cast;
  const $_get = dartx._get;
  const $remove = dartx.remove;
  const $_set = dartx._set;
  const $buffer = dartx.buffer;
  const $offsetInBytes = dartx.offsetInBytes;
  const $lengthInBytes = dartx.lengthInBytes;
  const $asUint8List = dartx.asUint8List;
  const $asByteData = dartx.asByteData;
  const $length = dartx.length;
  const $forEach = dartx.forEach;
  const $round = dartx.round;
  const $floor = dartx.floor;
  const $truncateToDouble = dartx.truncateToDouble;
  const $clamp = dartx.clamp;
  const $abs = dartx.abs;
  const $values = dartx.values;
  const $clear = dartx.clear;
  const $isEmpty = dartx.isEmpty;
  const $containsValue = dartx.containsValue;
  const $containsKey = dartx.containsKey;
  const $times = dartx['*'];
  const $isNotEmpty = dartx.isNotEmpty;
  const $putIfAbsent = dartx.putIfAbsent;
  const $any = dartx.any;
  const $leftShift = dartx['<<'];
  const $noSuchMethod = dartx.noSuchMethod;
  const $last = dartx.last;
  const $every = dartx.every;
  const $join = dartx.join;
  const $map = dartx.map;
  const $first = dartx.first;
  const $contains = dartx.contains;
  const $padRight = dartx.padRight;
  const $toList = dartx.toList;
  const $lastIndexWhere = dartx.lastIndexWhere;
  const $toUpperCase = dartx.toUpperCase;
  const $toRadixString = dartx.toRadixString;
  const $padLeft = dartx.padLeft;
  const $codeUnitAt = dartx.codeUnitAt;
  const $keys = dartx.keys;
  const $isNaN = dartx.isNaN;
  const $isFinite = dartx.isFinite;
  const $sign = dartx.sign;
  const $addAll = dartx.addAll;
  let IdentityMapOfString$dynamic = () => (IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))();
  let VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  let JSArrayOfString = () => (JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))();
  let BasicMessageChannelOfString = () => (BasicMessageChannelOfString = dart.constFn(platform_channel.BasicMessageChannel$(core.String)))();
  let FutureOfByteData = () => (FutureOfByteData = dart.constFn(async.Future$(typed_data.ByteData)))();
  let ByteDataToFutureOfByteData = () => (ByteDataToFutureOfByteData = dart.constFn(dart.fnType(FutureOfByteData(), [typed_data.ByteData])))();
  let FutureOrOfByteData = () => (FutureOrOfByteData = dart.constFn(async.FutureOr$(typed_data.ByteData)))();
  let FutureOfNull = () => (FutureOfNull = dart.constFn(async.Future$(core.Null)))();
  let VoidToFutureOfNull = () => (VoidToFutureOfNull = dart.constFn(dart.fnType(FutureOfNull(), [])))();
  let CompleterOfByteData = () => (CompleterOfByteData = dart.constFn(async.Completer$(typed_data.ByteData)))();
  let ByteDataToNull = () => (ByteDataToNull = dart.constFn(dart.fnType(core.Null, [typed_data.ByteData])))();
  let IdentityMapOfString$ByteDataToFutureOfByteData = () => (IdentityMapOfString$ByteDataToFutureOfByteData = dart.constFn(_js_helper.IdentityMap$(core.String, ByteDataToFutureOfByteData())))();
  let dynamicAnddynamicToNull = () => (dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))();
  let AnimationOfdouble = () => (AnimationOfdouble = dart.constFn(animation$.Animation$(core.double)))();
  let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  let ObserverListOfVoidTovoid = () => (ObserverListOfVoidTovoid = dart.constFn(observer_list.ObserverList$(VoidTovoid())))();
  let ListOfVoidTovoid = () => (ListOfVoidTovoid = dart.constFn(core.List$(VoidTovoid())))();
  let DiagnosticsPropertyOfAnimationLocalListenersMixin = () => (DiagnosticsPropertyOfAnimationLocalListenersMixin = dart.constFn(diagnostics.DiagnosticsProperty$(listener_helpers.AnimationLocalListenersMixin)))();
  let SyncIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = () => (SyncIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfAnimationLocalListenersMixin())))();
  let IterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = () => (IterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = dart.constFn(core.Iterable$(DiagnosticsPropertyOfAnimationLocalListenersMixin())))();
  let VoidToIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = () => (VoidToIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin(), [])))();
  let AnimationStatusTovoid = () => (AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [animation$.AnimationStatus])))();
  let ObserverListOfAnimationStatusTovoid = () => (ObserverListOfAnimationStatusTovoid = dart.constFn(observer_list.ObserverList$(AnimationStatusTovoid())))();
  let ListOfAnimationStatusTovoid = () => (ListOfAnimationStatusTovoid = dart.constFn(core.List$(AnimationStatusTovoid())))();
  let DiagnosticsPropertyOfAnimationLocalStatusListenersMixin = () => (DiagnosticsPropertyOfAnimationLocalStatusListenersMixin = dart.constFn(diagnostics.DiagnosticsProperty$(listener_helpers.AnimationLocalStatusListenersMixin)))();
  let SyncIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = () => (SyncIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfAnimationLocalStatusListenersMixin())))();
  let IterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = () => (IterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = dart.constFn(core.Iterable$(DiagnosticsPropertyOfAnimationLocalStatusListenersMixin())))();
  let VoidToIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = () => (VoidToIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin(), [])))();
  let VoidTobool = () => (VoidTobool = dart.constFn(dart.fnType(core.bool, [])))();
  let IdentityMapOfint$GestureArenaEntry = () => (IdentityMapOfint$GestureArenaEntry = dart.constFn(_js_helper.IdentityMap$(core.int, arena.GestureArenaEntry)))();
  let _IdentityHashSetOfint = () => (_IdentityHashSetOfint = dart.constFn(collection._IdentityHashSet$(core.int)))();
  let ListOfGestureArenaEntry = () => (ListOfGestureArenaEntry = dart.constFn(core.List$(arena.GestureArenaEntry)))();
  let IdentityMapOfint$PointerDeviceKind = () => (IdentityMapOfint$PointerDeviceKind = dart.constFn(_js_helper.IdentityMap$(core.int, ui.PointerDeviceKind)))();
  let DiagnosticsPropertyOfGestureRecognizer = () => (DiagnosticsPropertyOfGestureRecognizer = dart.constFn(diagnostics.DiagnosticsProperty$(recognizer.GestureRecognizer)))();
  let SyncIterableOfDiagnosticsNode = () => (SyncIterableOfDiagnosticsNode = dart.constFn(_js_helper.SyncIterable$(diagnostics.DiagnosticsNode)))();
  let IterableOfDiagnosticsNode = () => (IterableOfDiagnosticsNode = dart.constFn(core.Iterable$(diagnostics.DiagnosticsNode)))();
  let VoidToIterableOfDiagnosticsNode = () => (VoidToIterableOfDiagnosticsNode = dart.constFn(dart.fnType(IterableOfDiagnosticsNode(), [])))();
  let DiagnosticsPropertyOfObject = () => (DiagnosticsPropertyOfObject = dart.constFn(diagnostics.DiagnosticsProperty$(core.Object)))();
  let EnumPropertyOfGestureRecognizerState = () => (EnumPropertyOfGestureRecognizerState = dart.constFn(diagnostics.EnumProperty$(recognizer.GestureRecognizerState)))();
  let LinkedHashSetOf_RouteEntry = () => (LinkedHashSetOf_RouteEntry = dart.constFn(collection.LinkedHashSet$(pointer_router._RouteEntry)))();
  let IdentityMapOfint$LinkedHashSetOf_RouteEntry = () => (IdentityMapOfint$LinkedHashSetOf_RouteEntry = dart.constFn(_js_helper.IdentityMap$(core.int, LinkedHashSetOf_RouteEntry())))();
  let _HashSetOf_RouteEntry = () => (_HashSetOf_RouteEntry = dart.constFn(collection._HashSet$(pointer_router._RouteEntry)))();
  let VoidToLinkedHashSetOf_RouteEntry = () => (VoidToLinkedHashSetOf_RouteEntry = dart.constFn(dart.fnType(LinkedHashSetOf_RouteEntry(), [])))();
  let DiagnosticsPropertyOfPointerEvent = () => (DiagnosticsPropertyOfPointerEvent = dart.constFn(diagnostics.DiagnosticsProperty$(events.PointerEvent)))();
  let SyncIterableOfDiagnosticsPropertyOfPointerEvent = () => (SyncIterableOfDiagnosticsPropertyOfPointerEvent = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfPointerEvent())))();
  let IterableOfDiagnosticsPropertyOfPointerEvent = () => (IterableOfDiagnosticsPropertyOfPointerEvent = dart.constFn(core.Iterable$(DiagnosticsPropertyOfPointerEvent())))();
  let VoidToIterableOfDiagnosticsPropertyOfPointerEvent = () => (VoidToIterableOfDiagnosticsPropertyOfPointerEvent = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfPointerEvent(), [])))();
  let ListOf_RouteEntry = () => (ListOf_RouteEntry = dart.constFn(core.List$(pointer_router._RouteEntry)))();
  let _RouteEntryTobool = () => (_RouteEntryTobool = dart.constFn(dart.fnType(core.bool, [pointer_router._RouteEntry])))();
  let DiagnosticsPropertyOfOffset = () => (DiagnosticsPropertyOfOffset = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Offset)))();
  let DiagnosticsPropertyOfDuration = () => (DiagnosticsPropertyOfDuration = dart.constFn(diagnostics.DiagnosticsProperty$(core.Duration)))();
  let EnumPropertyOfPointerDeviceKind = () => (EnumPropertyOfPointerDeviceKind = dart.constFn(diagnostics.EnumProperty$(ui.PointerDeviceKind)))();
  let DiagnosticsPropertyOfbool = () => (DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))();
  let JSArrayOfGestureArenaMember = () => (JSArrayOfGestureArenaMember = dart.constFn(_interceptors.JSArray$(arena.GestureArenaMember)))();
  let IdentityMapOfint$_CombiningGestureArenaMember = () => (IdentityMapOfint$_CombiningGestureArenaMember = dart.constFn(_js_helper.IdentityMap$(core.int, team._CombiningGestureArenaMember)))();
  let VoidTo_CombiningGestureArenaMember = () => (VoidTo_CombiningGestureArenaMember = dart.constFn(dart.fnType(team._CombiningGestureArenaMember, [])))();
  let ListQueueOfPointerEvent = () => (ListQueueOfPointerEvent = dart.constFn(collection.ListQueue$(events.PointerEvent)))();
  let IdentityMapOfint$HitTestResult = () => (IdentityMapOfint$HitTestResult = dart.constFn(_js_helper.IdentityMap$(core.int, hit_test.HitTestResult)))();
  let DiagnosticsPropertyOfHitTestTarget = () => (DiagnosticsPropertyOfHitTestTarget = dart.constFn(diagnostics.DiagnosticsProperty$(hit_test.HitTestTarget)))();
  let SyncIterableOfDiagnosticsPropertyOfObject = () => (SyncIterableOfDiagnosticsPropertyOfObject = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfObject())))();
  let IterableOfDiagnosticsPropertyOfObject = () => (IterableOfDiagnosticsPropertyOfObject = dart.constFn(core.Iterable$(DiagnosticsPropertyOfObject())))();
  let VoidToIterableOfDiagnosticsPropertyOfObject = () => (VoidToIterableOfDiagnosticsPropertyOfObject = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfObject(), [])))();
  let DiagnosticsPropertyOfPointerSignalEvent = () => (DiagnosticsPropertyOfPointerSignalEvent = dart.constFn(diagnostics.DiagnosticsProperty$(events.PointerSignalEvent)))();
  let SyncIterableOfDiagnosticsPropertyOfPointerSignalEvent = () => (SyncIterableOfDiagnosticsPropertyOfPointerSignalEvent = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfPointerSignalEvent())))();
  let IterableOfDiagnosticsPropertyOfPointerSignalEvent = () => (IterableOfDiagnosticsPropertyOfPointerSignalEvent = dart.constFn(core.Iterable$(DiagnosticsPropertyOfPointerSignalEvent())))();
  let VoidToIterableOfDiagnosticsPropertyOfPointerSignalEvent = () => (VoidToIterableOfDiagnosticsPropertyOfPointerSignalEvent = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfPointerSignalEvent(), [])))();
  let JSArrayOfHitTestEntry = () => (JSArrayOfHitTestEntry = dart.constFn(_interceptors.JSArray$(hit_test.HitTestEntry)))();
  let ListQueueOfMatrix4 = () => (ListQueueOfMatrix4 = dart.constFn(collection.ListQueue$(vector_math_64.Matrix4)))();
  let doubleTobool = () => (doubleTobool = dart.constFn(dart.fnType(core.bool, [core.double])))();
  let VoidTo_PointerState = () => (VoidTo_PointerState = dart.constFn(dart.fnType(converter._PointerState, [])))();
  let SyncIterableOfPointerEvent = () => (SyncIterableOfPointerEvent = dart.constFn(_js_helper.SyncIterable$(events.PointerEvent)))();
  let IdentityMapOfint$_PointerState = () => (IdentityMapOfint$_PointerState = dart.constFn(_js_helper.IdentityMap$(core.int, converter._PointerState)))();
  let GestureArenaMemberToString = () => (GestureArenaMemberToString = dart.constFn(dart.fnType(core.String, [arena.GestureArenaMember])))();
  let IdentityMapOfint$_GestureArena = () => (IdentityMapOfint$_GestureArena = dart.constFn(_js_helper.IdentityMap$(core.int, arena._GestureArena)))();
  let VoidTo_GestureArena = () => (VoidTo_GestureArena = dart.constFn(dart.fnType(arena._GestureArena, [])))();
  let ListOfdouble = () => (ListOfdouble = dart.constFn(core.List$(core.double)))();
  let intTodouble = () => (intTodouble = dart.constFn(dart.fnType(core.double, [core.int])))();
  let ColorToColor = () => (ColorToColor = dart.constFn(dart.fnType(ui.Color, [ui.Color])))();
  let SplayTreeSetOfdouble = () => (SplayTreeSetOfdouble = dart.constFn(collection.SplayTreeSet$(core.double)))();
  let doubleToColor = () => (doubleToColor = dart.constFn(dart.fnType(ui.Color, [core.double])))();
  let intAndintAndintToKeyboardSide = () => (intAndintAndintToKeyboardSide = dart.constFn(dart.fnType(raw_keyboard.KeyboardSide, [core.int, core.int, core.int])))();
  let LinkedMapOfModifierKey$KeyboardSide = () => (LinkedMapOfModifierKey$KeyboardSide = dart.constFn(_js_helper.LinkedMap$(raw_keyboard.ModifierKey, raw_keyboard.KeyboardSide)))();
  let RawKeyEventTovoid = () => (RawKeyEventTovoid = dart.constFn(dart.fnType(dart.void, [raw_keyboard.RawKeyEvent])))();
  let JSArrayOfRawKeyEventTovoid = () => (JSArrayOfRawKeyEventTovoid = dart.constFn(_interceptors.JSArray$(RawKeyEventTovoid())))();
  let LinkedHashSetOfLogicalKeyboardKey = () => (LinkedHashSetOfLogicalKeyboardKey = dart.constFn(collection.LinkedHashSet$(keyboard_key.LogicalKeyboardKey)))();
  let MapOfString$dynamic = () => (MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))();
  let ListOfRawKeyEventTovoid = () => (ListOfRawKeyEventTovoid = dart.constFn(core.List$(RawKeyEventTovoid())))();
  let intAndintToKeyboardSide = () => (intAndintToKeyboardSide = dart.constFn(dart.fnType(raw_keyboard.KeyboardSide, [core.int, core.int])))();
  let ListOf_PointAtTime = () => (ListOf_PointAtTime = dart.constFn(core.List$(velocity_tracker._PointAtTime)))();
  let JSArrayOfdouble = () => (JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))();
  let OffsetToDrag = () => (OffsetToDrag = dart.constFn(dart.fnType(drag$.Drag, [ui.Offset])))();
  let VoidToDrag = () => (VoidToDrag = dart.constFn(dart.fnType(drag$.Drag, [])))();
  let IdentityMapOfString$Object = () => (IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))();
  let boolTovoid = () => (boolTovoid = dart.constFn(dart.fnType(dart.void, [core.bool])))();
  let JSArrayOf_Interval = () => (JSArrayOf_Interval = dart.constFn(_interceptors.JSArray$(tween_sequence._Interval)))();
  let IdentityMapOfint$VelocityTracker = () => (IdentityMapOfint$VelocityTracker = dart.constFn(_js_helper.IdentityMap$(core.int, velocity_tracker.VelocityTracker)))();
  let IdentityMapOfint$Offset = () => (IdentityMapOfint$Offset = dart.constFn(_js_helper.IdentityMap$(core.int, ui.Offset)))();
  let JSArrayOfint = () => (JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))();
  let ListOfOffset = () => (ListOfOffset = dart.constFn(core.List$(ui.Offset)))();
  let doubleAnddoubleAnddoubleTodouble = () => (doubleAnddoubleAnddoubleTodouble = dart.constFn(dart.fnType(core.double, [core.double, core.double, core.double])))();
  let StringToString = () => (StringToString = dart.constFn(dart.fnType(core.String, [core.String])))();
  let JSArrayOfDiagnosticsNode = () => (JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))();
  let IterablePropertyOfString = () => (IterablePropertyOfString = dart.constFn(diagnostics.IterableProperty$(core.String)))();
  let DiagnosticsPropertyOfFontWeight = () => (DiagnosticsPropertyOfFontWeight = dart.constFn(diagnostics.DiagnosticsProperty$(ui.FontWeight)))();
  let EnumPropertyOfFontStyle = () => (EnumPropertyOfFontStyle = dart.constFn(diagnostics.EnumProperty$(ui.FontStyle)))();
  let DiagnosticsNodeTobool = () => (DiagnosticsNodeTobool = dart.constFn(dart.fnType(core.bool, [diagnostics.DiagnosticsNode])))();
  let DiagnosticsPropertyOfColor = () => (DiagnosticsPropertyOfColor = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Color)))();
  let EnumPropertyOfTextBaseline = () => (EnumPropertyOfTextBaseline = dart.constFn(diagnostics.EnumProperty$(ui.TextBaseline)))();
  let DiagnosticsPropertyOfLocale = () => (DiagnosticsPropertyOfLocale = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Locale)))();
  let DiagnosticsPropertyOfPaint = () => (DiagnosticsPropertyOfPaint = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Paint)))();
  let DiagnosticsPropertyOfTextDecoration = () => (DiagnosticsPropertyOfTextDecoration = dart.constFn(diagnostics.DiagnosticsProperty$(ui.TextDecoration)))();
  let IdentityMapOfint$_TapTracker = () => (IdentityMapOfint$_TapTracker = dart.constFn(_js_helper.IdentityMap$(core.int, multitap._TapTracker)))();
  let IdentityMapOfint$_TapGesture = () => (IdentityMapOfint$_TapGesture = dart.constFn(_js_helper.IdentityMap$(core.int, multitap._TapGesture)))();
  let ListOf_TapGesture = () => (ListOf_TapGesture = dart.constFn(core.List$(multitap._TapGesture)))();
  let JSArrayOfBoxShadow = () => (JSArrayOfBoxShadow = dart.constFn(_interceptors.JSArray$(box_shadow.BoxShadow)))();
  let VoidToString = () => (VoidToString = dart.constFn(dart.fnType(core.String, [])))();
  let EnumPropertyOfDragStartBehavior = () => (EnumPropertyOfDragStartBehavior = dart.constFn(diagnostics.EnumProperty$(recognizer.DragStartBehavior)))();
  const CT = Object.create(null);
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: text_editing.TextRange.prototype,
        end: -1,
        start: -1
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: alignment.Alignment.prototype,
        y: -1,
        x: -1
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: alignment.Alignment.prototype,
        y: -1,
        x: 0
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: alignment.Alignment.prototype,
        y: -1,
        x: 1
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: alignment.Alignment.prototype,
        y: 0,
        x: -1
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: alignment.Alignment.prototype,
        y: 0,
        x: 0
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: alignment.Alignment.prototype,
        y: 0,
        x: 1
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: alignment.Alignment.prototype,
        y: 1,
        x: -1
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: alignment.Alignment.prototype,
        y: 1,
        x: 0
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: alignment.Alignment.prototype,
        y: 1,
        x: 1
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C13() {
      return C13 = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        y: -1,
        start: -1
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        y: -1,
        start: 0
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        y: -1,
        start: 1
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        y: 0,
        start: -1
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        y: 0,
        start: 0
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        y: 0,
        start: 1
      });
    },
    get C19() {
      return C19 = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        y: 1,
        start: -1
      });
    },
    get C20() {
      return C20 = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        y: 1,
        start: 0
      });
    },
    get C21() {
      return C21 = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        y: 1,
        start: 1
      });
    },
    get C22() {
      return C22 = dart.const({
        __proto__: alignment.TextAlignVertical.prototype,
        y: -1
      });
    },
    get C23() {
      return C23 = dart.const({
        __proto__: alignment.TextAlignVertical.prototype,
        y: 0
      });
    },
    get C24() {
      return C24 = dart.const({
        __proto__: alignment.TextAlignVertical.prototype,
        y: 1
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: basic_types.RenderComparison.prototype,
        [_name$]: "RenderComparison.identical",
        index: 0
      });
    },
    get C26() {
      return C26 = dart.const({
        __proto__: basic_types.RenderComparison.prototype,
        [_name$]: "RenderComparison.metadata",
        index: 1
      });
    },
    get C27() {
      return C27 = dart.const({
        __proto__: basic_types.RenderComparison.prototype,
        [_name$]: "RenderComparison.paint",
        index: 2
      });
    },
    get C28() {
      return C28 = dart.const({
        __proto__: basic_types.RenderComparison.prototype,
        [_name$]: "RenderComparison.layout",
        index: 3
      });
    },
    get C29() {
      return C29 = dart.constList([C25 || CT.C25, C26 || CT.C26, C27 || CT.C27, C28 || CT.C28], basic_types.RenderComparison);
    },
    get C30() {
      return C30 = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$]: "Axis.horizontal",
        index: 0
      });
    },
    get C31() {
      return C31 = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name$]: "Axis.vertical",
        index: 1
      });
    },
    get C32() {
      return C32 = dart.constList([C30 || CT.C30, C31 || CT.C31], basic_types.Axis);
    },
    get C33() {
      return C33 = dart.const({
        __proto__: basic_types.VerticalDirection.prototype,
        [_name$]: "VerticalDirection.up",
        index: 0
      });
    },
    get C34() {
      return C34 = dart.const({
        __proto__: basic_types.VerticalDirection.prototype,
        [_name$]: "VerticalDirection.down",
        index: 1
      });
    },
    get C35() {
      return C35 = dart.constList([C33 || CT.C33, C34 || CT.C34], basic_types.VerticalDirection);
    },
    get C36() {
      return C36 = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name$]: "AxisDirection.up",
        index: 0
      });
    },
    get C37() {
      return C37 = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name$]: "AxisDirection.right",
        index: 1
      });
    },
    get C38() {
      return C38 = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name$]: "AxisDirection.down",
        index: 2
      });
    },
    get C39() {
      return C39 = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name$]: "AxisDirection.left",
        index: 3
      });
    },
    get C40() {
      return C40 = dart.constList([C36 || CT.C36, C37 || CT.C37, C38 || CT.C38, C39 || CT.C39], basic_types.AxisDirection);
    },
    get C41() {
      return C41 = dart.const({
        __proto__: system_chrome.DeviceOrientation.prototype,
        [_name$0]: "DeviceOrientation.portraitUp",
        index: 0
      });
    },
    get C42() {
      return C42 = dart.const({
        __proto__: system_chrome.DeviceOrientation.prototype,
        [_name$0]: "DeviceOrientation.landscapeLeft",
        index: 1
      });
    },
    get C43() {
      return C43 = dart.const({
        __proto__: system_chrome.DeviceOrientation.prototype,
        [_name$0]: "DeviceOrientation.portraitDown",
        index: 2
      });
    },
    get C44() {
      return C44 = dart.const({
        __proto__: system_chrome.DeviceOrientation.prototype,
        [_name$0]: "DeviceOrientation.landscapeRight",
        index: 3
      });
    },
    get C45() {
      return C45 = dart.constList([C41 || CT.C41, C42 || CT.C42, C43 || CT.C43, C44 || CT.C44], system_chrome.DeviceOrientation);
    },
    get C46() {
      return C46 = dart.const({
        __proto__: system_chrome.SystemUiOverlay.prototype,
        [_name$0]: "SystemUiOverlay.top",
        index: 0
      });
    },
    get C47() {
      return C47 = dart.const({
        __proto__: system_chrome.SystemUiOverlay.prototype,
        [_name$0]: "SystemUiOverlay.bottom",
        index: 1
      });
    },
    get C48() {
      return C48 = dart.constList([C46 || CT.C46, C47 || CT.C47], system_chrome.SystemUiOverlay);
    },
    get C50() {
      return C50 = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.light",
        index: 1
      });
    },
    get C51() {
      return C51 = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.dark",
        index: 0
      });
    },
    get C52() {
      return C52 = dart.const({
        __proto__: ui.Color.prototype,
        [_value]: 4278190080.0
      });
    },
    get C49() {
      return C49 = dart.const({
        __proto__: system_chrome.SystemUiOverlayStyle.prototype,
        statusBarIconBrightness: C50 || CT.C50,
        statusBarBrightness: C51 || CT.C51,
        statusBarColor: null,
        systemNavigationBarIconBrightness: C50 || CT.C50,
        systemNavigationBarDividerColor: null,
        systemNavigationBarColor: C52 || CT.C52
      });
    },
    get C53() {
      return C53 = dart.const({
        __proto__: system_chrome.SystemUiOverlayStyle.prototype,
        statusBarIconBrightness: C51 || CT.C51,
        statusBarBrightness: C50 || CT.C50,
        statusBarColor: null,
        systemNavigationBarIconBrightness: C50 || CT.C50,
        systemNavigationBarDividerColor: null,
        systemNavigationBarColor: C52 || CT.C52
      });
    },
    get C55() {
      return C55 = dart.const({
        __proto__: message_codecs.JSONMethodCodec.prototype
      });
    },
    get C54() {
      return C54 = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        codec: C55 || CT.C55,
        name: "flutter/navigation"
      });
    },
    get C56() {
      return C56 = dart.const({
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        codec: C55 || CT.C55,
        name: "flutter/platform"
      });
    },
    get C57() {
      return C57 = dart.const({
        __proto__: platform_channel.OptionalMethodChannel.prototype,
        codec: C55 || CT.C55,
        name: "flutter/textinput"
      });
    },
    get C59() {
      return C59 = dart.const({
        __proto__: message_codecs.JSONMessageCodec.prototype
      });
    },
    get C58() {
      return C58 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        codec: C59 || CT.C59,
        name: "flutter/keyevent"
      });
    },
    get C61() {
      return C61 = dart.const({
        __proto__: message_codecs.StringCodec.prototype
      });
    },
    get C60() {
      return C60 = dart.const({
        __proto__: BasicMessageChannelOfString().prototype,
        codec: C61 || CT.C61,
        name: "flutter/lifecycle"
      });
    },
    get C62() {
      return C62 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        codec: C59 || CT.C59,
        name: "flutter/system"
      });
    },
    get C64() {
      return C64 = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C63() {
      return C63 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        codec: C64 || CT.C64,
        name: "flutter/accessibility"
      });
    },
    get C66() {
      return C66 = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        messageCodec: C64 || CT.C64
      });
    },
    get C65() {
      return C65 = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        codec: C66 || CT.C66,
        name: "flutter/platform_views"
      });
    },
    get C67() {
      return C67 = dart.const({
        __proto__: core.FormatException.prototype,
        offset: null,
        source: null,
        message: "Message corrupted"
      });
    },
    get C68() {
      return C68 = dart.const({
        __proto__: core.FormatException.prototype,
        offset: null,
        source: null,
        message: "Invalid method call"
      });
    },
    get C69() {
      return C69 = dart.const({
        __proto__: core.FormatException.prototype,
        offset: null,
        source: null,
        message: "Expected envelope, got nothing"
      });
    },
    get C70() {
      return C70 = dart.const({
        __proto__: core.FormatException.prototype,
        offset: null,
        source: null,
        message: "Invalid envelope"
      });
    },
    get C71() {
      return C71 = dart.const({
        __proto__: animation$.AnimationStatus.prototype,
        [_name$1]: "AnimationStatus.forward",
        index: 1
      });
    },
    get C72() {
      return C72 = dart.const({
        __proto__: animation$.AnimationStatus.prototype,
        [_name$1]: "AnimationStatus.reverse",
        index: 2
      });
    },
    get C73() {
      return C73 = dart.const({
        __proto__: animation$.AnimationStatus.prototype,
        [_name$1]: "AnimationStatus.completed",
        index: 3
      });
    },
    get C74() {
      return C74 = dart.const({
        __proto__: animation$.AnimationStatus.prototype,
        [_name$1]: "AnimationStatus.dismissed",
        index: 0
      });
    },
    get C75() {
      return C75 = dart.const({
        __proto__: animations._TrainHoppingMode.prototype,
        [_name$2]: "_TrainHoppingMode.minimize",
        index: 0
      });
    },
    get C76() {
      return C76 = dart.const({
        __proto__: animations._TrainHoppingMode.prototype,
        [_name$2]: "_TrainHoppingMode.maximize",
        index: 1
      });
    },
    get C77() {
      return C77 = dart.constList([C75 || CT.C75, C76 || CT.C76], animations._TrainHoppingMode);
    },
    get C78() {
      return C78 = dart.const({
        __proto__: animations._AlwaysCompleteAnimation.prototype
      });
    },
    get C79() {
      return C79 = dart.const({
        __proto__: animations._AlwaysDismissedAnimation.prototype
      });
    },
    get C80() {
      return C80 = dart.constList([C74 || CT.C74, C71 || CT.C71, C72 || CT.C72, C73 || CT.C73], animation$.AnimationStatus);
    },
    get C81() {
      return C81 = dart.const({
        __proto__: curves._Linear.prototype
      });
    },
    get C82() {
      return C82 = dart.const({
        __proto__: curves._DecelerateCurve.prototype
      });
    },
    get C83() {
      return C83 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.04,
        b: 1,
        a: 0.18
      });
    },
    get C84() {
      return C84 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.25,
        b: 0.1,
        a: 0.25
      });
    },
    get C85() {
      return C85 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 1,
        b: 0,
        a: 0.42
      });
    },
    get C86() {
      return C86 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.09,
        c: 0.65,
        b: 0.03,
        a: 0.67
      });
    },
    get C87() {
      return C87 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.715,
        c: 0.745,
        b: 0,
        a: 0.47
      });
    },
    get C88() {
      return C88 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.53,
        c: 0.68,
        b: 0.085,
        a: 0.55
      });
    },
    get C89() {
      return C89 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.19,
        c: 0.675,
        b: 0.055,
        a: 0.55
      });
    },
    get C90() {
      return C90 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.22,
        c: 0.685,
        b: 0.03,
        a: 0.895
      });
    },
    get C91() {
      return C91 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.06,
        c: 0.855,
        b: 0.05,
        a: 0.755
      });
    },
    get C92() {
      return C92 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.035,
        c: 0.795,
        b: 0.05,
        a: 0.95
      });
    },
    get C93() {
      return C93 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.335,
        c: 0.98,
        b: 0.04,
        a: 0.6
      });
    },
    get C94() {
      return C94 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.045,
        c: 0.735,
        b: -0.28,
        a: 0.6
      });
    },
    get C95() {
      return C95 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.58,
        b: 0,
        a: 0
      });
    },
    get C96() {
      return C96 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.97,
        c: 0.33,
        b: 0.91,
        a: 0.35
      });
    },
    get C97() {
      return C97 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.565,
        b: 0.575,
        a: 0.39
      });
    },
    get C98() {
      return C98 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.94,
        c: 0.45,
        b: 0.46,
        a: 0.25
      });
    },
    get C99() {
      return C99 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.355,
        b: 0.61,
        a: 0.215
      });
    },
    get C100() {
      return C100 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.44,
        b: 0.84,
        a: 0.165
      });
    },
    get C101() {
      return C101 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.32,
        b: 1,
        a: 0.23
      });
    },
    get C102() {
      return C102 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.22,
        b: 1,
        a: 0.19
      });
    },
    get C103() {
      return C103 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.165,
        b: 0.82,
        a: 0.075
      });
    },
    get C104() {
      return C104 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1.275,
        c: 0.32,
        b: 0.885,
        a: 0.175
      });
    },
    get C105() {
      return C105 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.58,
        b: 0,
        a: 0.42
      });
    },
    get C106() {
      return C106 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.95,
        c: 0.55,
        b: 0.05,
        a: 0.445
      });
    },
    get C107() {
      return C107 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.955,
        c: 0.515,
        b: 0.03,
        a: 0.455
      });
    },
    get C108() {
      return C108 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.355,
        b: 0.045,
        a: 0.645
      });
    },
    get C109() {
      return C109 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.175,
        b: 0,
        a: 0.77
      });
    },
    get C110() {
      return C110 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.07,
        b: 0,
        a: 0.86
      });
    },
    get C111() {
      return C111 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0,
        b: 0,
        a: 1
      });
    },
    get C112() {
      return C112 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.86,
        c: 0.15,
        b: 0.135,
        a: 0.785
      });
    },
    get C113() {
      return C113 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1.55,
        c: 0.265,
        b: -0.55,
        a: 0.68
      });
    },
    get C114() {
      return C114 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 1,
        c: 0.2,
        b: 0,
        a: 0.4
      });
    },
    get C115() {
      return C115 = dart.const({
        __proto__: curves.Cubic.prototype,
        d: 0.15,
        c: 0.85,
        b: 0.85,
        a: 0.15
      });
    },
    get C116() {
      return C116 = dart.const({
        __proto__: curves._BounceInCurve.prototype
      });
    },
    get C117() {
      return C117 = dart.const({
        __proto__: curves._BounceOutCurve.prototype
      });
    },
    get C118() {
      return C118 = dart.const({
        __proto__: curves._BounceInOutCurve.prototype
      });
    },
    get C119() {
      return C119 = dart.const({
        __proto__: curves.ElasticInCurve.prototype,
        period: 0.4
      });
    },
    get C120() {
      return C120 = dart.const({
        __proto__: curves.ElasticOutCurve.prototype,
        period: 0.4
      });
    },
    get C121() {
      return C121 = dart.const({
        __proto__: curves.ElasticInOutCurve.prototype,
        period: 0.4
      });
    },
    get C122() {
      return C122 = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name$3]: "DragStartBehavior.down",
        index: 0
      });
    },
    get C123() {
      return C123 = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name$3]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C124() {
      return C124 = dart.constList([C122 || CT.C122, C123 || CT.C123], recognizer.DragStartBehavior);
    },
    get C125() {
      return C125 = dart.const({
        __proto__: recognizer.GestureRecognizerState.prototype,
        [_name$3]: "GestureRecognizerState.ready",
        index: 0
      });
    },
    get C126() {
      return C126 = dart.const({
        __proto__: recognizer.GestureRecognizerState.prototype,
        [_name$3]: "GestureRecognizerState.possible",
        index: 1
      });
    },
    get C127() {
      return C127 = dart.const({
        __proto__: recognizer.GestureRecognizerState.prototype,
        [_name$3]: "GestureRecognizerState.defunct",
        index: 2
      });
    },
    get C128() {
      return C128 = dart.constList([C125 || CT.C125, C126 || CT.C126, C127 || CT.C127], recognizer.GestureRecognizerState);
    },
    get C130() {
      return C130 = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy]: 0,
        [_dx]: 0
      });
    },
    get C129() {
      return C129 = dart.const({
        __proto__: recognizer.OffsetPair.prototype,
        global: C130 || CT.C130,
        local: C130 || CT.C130
      });
    },
    get C131() {
      return C131 = dart.const({
        __proto__: core.Duration.prototype,
        [_duration]: 0
      });
    },
    get C132() {
      return C132 = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.touch",
        index: 0
      });
    },
    get C133() {
      return C133 = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.mouse",
        index: 1
      });
    },
    get C134() {
      return C134 = dart.const(new _js_helper.PrivateSymbol.new('_member', _member));
    },
    get C135() {
      return C135 = dart.const(new _js_helper.PrivateSymbol.new('_arena', _arena));
    },
    get C136() {
      return C136 = dart.const(new _js_helper.PrivateSymbol.new('_pointer', _pointer$));
    },
    get C137() {
      return C137 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name]: "PointerChange.add",
        index: 1
      });
    },
    get C138() {
      return C138 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name]: "PointerChange.hover",
        index: 3
      });
    },
    get C139() {
      return C139 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name]: "PointerChange.down",
        index: 4
      });
    },
    get C140() {
      return C140 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name]: "PointerChange.move",
        index: 5
      });
    },
    get C141() {
      return C141 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name]: "PointerChange.up",
        index: 6
      });
    },
    get C142() {
      return C142 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name]: "PointerChange.cancel",
        index: 0
      });
    },
    get C143() {
      return C143 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name]: "PointerChange.remove",
        index: 2
      });
    },
    get C144() {
      return C144 = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name]: "PointerSignalKind.scroll",
        index: 1
      });
    },
    get C145() {
      return C145 = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name]: "PointerSignalKind.none",
        index: 0
      });
    },
    get C146() {
      return C146 = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name]: "PointerSignalKind.unknown",
        index: 2
      });
    },
    get C147() {
      return C147 = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.stylus",
        index: 2
      });
    },
    get C148() {
      return C148 = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name]: "PointerDeviceKind.invertedStylus",
        index: 3
      });
    },
    get C149() {
      return C149 = dart.const({
        __proto__: arena.GestureDisposition.prototype,
        [_name$4]: "GestureDisposition.accepted",
        index: 0
      });
    },
    get C150() {
      return C150 = dart.const({
        __proto__: arena.GestureDisposition.prototype,
        [_name$4]: "GestureDisposition.rejected",
        index: 1
      });
    },
    get C151() {
      return C151 = dart.constList([C149 || CT.C149, C150 || CT.C150], arena.GestureDisposition);
    },
    get C152() {
      return C152 = dart.const({
        __proto__: core.Duration.prototype,
        [_duration]: 100000
      });
    },
    get C153() {
      return C153 = dart.const({
        __proto__: core.Duration.prototype,
        [_duration]: 150000
      });
    },
    get C154() {
      return C154 = dart.const({
        __proto__: core.Duration.prototype,
        [_duration]: 500000
      });
    },
    get C155() {
      return C155 = dart.const({
        __proto__: core.Duration.prototype,
        [_duration]: 300000
      });
    },
    get C156() {
      return C156 = dart.const({
        __proto__: core.Duration.prototype,
        [_duration]: 40000
      });
    },
    get C157() {
      return C157 = dart.const({
        __proto__: core.Duration.prototype,
        [_duration]: 3000000
      });
    },
    get C158() {
      return C158 = dart.const({
        __proto__: system_sound.SystemSoundType.prototype,
        [_name$5]: "SystemSoundType.click",
        index: 0
      });
    },
    get C159() {
      return C159 = dart.constList([C158 || CT.C158], system_sound.SystemSoundType);
    },
    get C160() {
      return C160 = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name]: "TileMode.clamp",
        index: 0
      });
    },
    get C161() {
      return C161 = dart.const({
        __proto__: raw_keyboard.KeyboardSide.prototype,
        [_name$6]: "KeyboardSide.any",
        index: 0
      });
    },
    get C162() {
      return C162 = dart.const({
        __proto__: raw_keyboard.KeyboardSide.prototype,
        [_name$6]: "KeyboardSide.all",
        index: 3
      });
    },
    get C163() {
      return C163 = dart.const({
        __proto__: raw_keyboard.KeyboardSide.prototype,
        [_name$6]: "KeyboardSide.left",
        index: 1
      });
    },
    get C164() {
      return C164 = dart.const({
        __proto__: raw_keyboard.KeyboardSide.prototype,
        [_name$6]: "KeyboardSide.right",
        index: 2
      });
    },
    get C165() {
      return C165 = dart.const({
        __proto__: raw_keyboard.ModifierKey.prototype,
        [_name$6]: "ModifierKey.controlModifier",
        index: 0
      });
    },
    get C166() {
      return C166 = dart.const({
        __proto__: raw_keyboard.ModifierKey.prototype,
        [_name$6]: "ModifierKey.shiftModifier",
        index: 1
      });
    },
    get C167() {
      return C167 = dart.const({
        __proto__: raw_keyboard.ModifierKey.prototype,
        [_name$6]: "ModifierKey.altModifier",
        index: 2
      });
    },
    get C168() {
      return C168 = dart.const({
        __proto__: raw_keyboard.ModifierKey.prototype,
        [_name$6]: "ModifierKey.metaModifier",
        index: 3
      });
    },
    get C169() {
      return C169 = dart.const({
        __proto__: raw_keyboard.ModifierKey.prototype,
        [_name$6]: "ModifierKey.capsLockModifier",
        index: 4
      });
    },
    get C170() {
      return C170 = dart.const({
        __proto__: raw_keyboard.ModifierKey.prototype,
        [_name$6]: "ModifierKey.numLockModifier",
        index: 5
      });
    },
    get C171() {
      return C171 = dart.const({
        __proto__: raw_keyboard.ModifierKey.prototype,
        [_name$6]: "ModifierKey.scrollLockModifier",
        index: 6
      });
    },
    get C172() {
      return C172 = dart.const({
        __proto__: raw_keyboard.ModifierKey.prototype,
        [_name$6]: "ModifierKey.functionModifier",
        index: 7
      });
    },
    get C173() {
      return C173 = dart.const({
        __proto__: raw_keyboard.ModifierKey.prototype,
        [_name$6]: "ModifierKey.symbolModifier",
        index: 8
      });
    },
    get C174() {
      return C174 = dart.constList([C161 || CT.C161, C163 || CT.C163, C164 || CT.C164, C162 || CT.C162], raw_keyboard.KeyboardSide);
    },
    get C175() {
      return C175 = dart.constList([C165 || CT.C165, C166 || CT.C166, C167 || CT.C167, C168 || CT.C168, C169 || CT.C169, C170 || CT.C170, C171 || CT.C171, C172 || CT.C172, C173 || CT.C173], raw_keyboard.ModifierKey);
    },
    get C177() {
      return C177 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "None",
        keyId: 4294967296.0
      });
    },
    get C178() {
      return C178 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Fn",
        keyId: 4294967314.0
      });
    },
    get C179() {
      return C179 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Sleep",
        keyId: 4295032962.0
      });
    },
    get C180() {
      return C180 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Wake Up",
        keyId: 4295032963.0
      });
    },
    get C181() {
      return C181 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "a",
        debugName: "Key A",
        keyId: 97
      });
    },
    get C182() {
      return C182 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "b",
        debugName: "Key B",
        keyId: 98
      });
    },
    get C183() {
      return C183 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "c",
        debugName: "Key C",
        keyId: 99
      });
    },
    get C184() {
      return C184 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "d",
        debugName: "Key D",
        keyId: 100
      });
    },
    get C185() {
      return C185 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "e",
        debugName: "Key E",
        keyId: 101
      });
    },
    get C186() {
      return C186 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "f",
        debugName: "Key F",
        keyId: 102
      });
    },
    get C187() {
      return C187 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "g",
        debugName: "Key G",
        keyId: 103
      });
    },
    get C188() {
      return C188 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "h",
        debugName: "Key H",
        keyId: 104
      });
    },
    get C189() {
      return C189 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "i",
        debugName: "Key I",
        keyId: 105
      });
    },
    get C190() {
      return C190 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "j",
        debugName: "Key J",
        keyId: 106
      });
    },
    get C191() {
      return C191 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "k",
        debugName: "Key K",
        keyId: 107
      });
    },
    get C192() {
      return C192 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "l",
        debugName: "Key L",
        keyId: 108
      });
    },
    get C193() {
      return C193 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "m",
        debugName: "Key M",
        keyId: 109
      });
    },
    get C194() {
      return C194 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "n",
        debugName: "Key N",
        keyId: 110
      });
    },
    get C195() {
      return C195 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "o",
        debugName: "Key O",
        keyId: 111
      });
    },
    get C196() {
      return C196 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "p",
        debugName: "Key P",
        keyId: 112
      });
    },
    get C197() {
      return C197 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "q",
        debugName: "Key Q",
        keyId: 113
      });
    },
    get C198() {
      return C198 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "r",
        debugName: "Key R",
        keyId: 114
      });
    },
    get C199() {
      return C199 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "s",
        debugName: "Key S",
        keyId: 115
      });
    },
    get C200() {
      return C200 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "t",
        debugName: "Key T",
        keyId: 116
      });
    },
    get C201() {
      return C201 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "u",
        debugName: "Key U",
        keyId: 117
      });
    },
    get C202() {
      return C202 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "v",
        debugName: "Key V",
        keyId: 118
      });
    },
    get C203() {
      return C203 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "w",
        debugName: "Key W",
        keyId: 119
      });
    },
    get C204() {
      return C204 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "x",
        debugName: "Key X",
        keyId: 120
      });
    },
    get C205() {
      return C205 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "y",
        debugName: "Key Y",
        keyId: 121
      });
    },
    get C206() {
      return C206 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "z",
        debugName: "Key Z",
        keyId: 122
      });
    },
    get C207() {
      return C207 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "1",
        debugName: "Digit 1",
        keyId: 49
      });
    },
    get C208() {
      return C208 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "2",
        debugName: "Digit 2",
        keyId: 50
      });
    },
    get C209() {
      return C209 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "3",
        debugName: "Digit 3",
        keyId: 51
      });
    },
    get C210() {
      return C210 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "4",
        debugName: "Digit 4",
        keyId: 52
      });
    },
    get C211() {
      return C211 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "5",
        debugName: "Digit 5",
        keyId: 53
      });
    },
    get C212() {
      return C212 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "6",
        debugName: "Digit 6",
        keyId: 54
      });
    },
    get C213() {
      return C213 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "7",
        debugName: "Digit 7",
        keyId: 55
      });
    },
    get C214() {
      return C214 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "8",
        debugName: "Digit 8",
        keyId: 56
      });
    },
    get C215() {
      return C215 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "9",
        debugName: "Digit 9",
        keyId: 57
      });
    },
    get C216() {
      return C216 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "0",
        debugName: "Digit 0",
        keyId: 48
      });
    },
    get C217() {
      return C217 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Enter",
        keyId: 4295426088.0
      });
    },
    get C218() {
      return C218 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Escape",
        keyId: 4295426089.0
      });
    },
    get C219() {
      return C219 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Backspace",
        keyId: 4295426090.0
      });
    },
    get C220() {
      return C220 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Tab",
        keyId: 4295426091.0
      });
    },
    get C221() {
      return C221 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: " ",
        debugName: "Space",
        keyId: 32
      });
    },
    get C222() {
      return C222 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "-",
        debugName: "Minus",
        keyId: 45
      });
    },
    get C223() {
      return C223 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "=",
        debugName: "Equal",
        keyId: 61
      });
    },
    get C224() {
      return C224 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "[",
        debugName: "Bracket Left",
        keyId: 91
      });
    },
    get C225() {
      return C225 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "]",
        debugName: "Bracket Right",
        keyId: 93
      });
    },
    get C226() {
      return C226 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "\\",
        debugName: "Backslash",
        keyId: 92
      });
    },
    get C227() {
      return C227 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: ";",
        debugName: "Semicolon",
        keyId: 59
      });
    },
    get C228() {
      return C228 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "'",
        debugName: "Quote",
        keyId: 39
      });
    },
    get C229() {
      return C229 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "`",
        debugName: "Backquote",
        keyId: 96
      });
    },
    get C230() {
      return C230 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: ",",
        debugName: "Comma",
        keyId: 44
      });
    },
    get C231() {
      return C231 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: ".",
        debugName: "Period",
        keyId: 46
      });
    },
    get C232() {
      return C232 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "/",
        debugName: "Slash",
        keyId: 47
      });
    },
    get C233() {
      return C233 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Caps Lock",
        keyId: 4295426105.0
      });
    },
    get C234() {
      return C234 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F1",
        keyId: 4295426106.0
      });
    },
    get C235() {
      return C235 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F2",
        keyId: 4295426107.0
      });
    },
    get C236() {
      return C236 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F3",
        keyId: 4295426108.0
      });
    },
    get C237() {
      return C237 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F4",
        keyId: 4295426109.0
      });
    },
    get C238() {
      return C238 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F5",
        keyId: 4295426110.0
      });
    },
    get C239() {
      return C239 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F6",
        keyId: 4295426111.0
      });
    },
    get C240() {
      return C240 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F7",
        keyId: 4295426112.0
      });
    },
    get C241() {
      return C241 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F8",
        keyId: 4295426113.0
      });
    },
    get C242() {
      return C242 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F9",
        keyId: 4295426114.0
      });
    },
    get C243() {
      return C243 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F10",
        keyId: 4295426115.0
      });
    },
    get C244() {
      return C244 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F11",
        keyId: 4295426116.0
      });
    },
    get C245() {
      return C245 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F12",
        keyId: 4295426117.0
      });
    },
    get C246() {
      return C246 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Print Screen",
        keyId: 4295426118.0
      });
    },
    get C247() {
      return C247 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Scroll Lock",
        keyId: 4295426119.0
      });
    },
    get C248() {
      return C248 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Pause",
        keyId: 4295426120.0
      });
    },
    get C249() {
      return C249 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Insert",
        keyId: 4295426121.0
      });
    },
    get C250() {
      return C250 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Home",
        keyId: 4295426122.0
      });
    },
    get C251() {
      return C251 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Page Up",
        keyId: 4295426123.0
      });
    },
    get C252() {
      return C252 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Delete",
        keyId: 4295426124.0
      });
    },
    get C253() {
      return C253 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "End",
        keyId: 4295426125.0
      });
    },
    get C254() {
      return C254 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Page Down",
        keyId: 4295426126.0
      });
    },
    get C255() {
      return C255 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Arrow Right",
        keyId: 4295426127.0
      });
    },
    get C256() {
      return C256 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Arrow Left",
        keyId: 4295426128.0
      });
    },
    get C257() {
      return C257 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Arrow Down",
        keyId: 4295426129.0
      });
    },
    get C258() {
      return C258 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Arrow Up",
        keyId: 4295426130.0
      });
    },
    get C259() {
      return C259 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Num Lock",
        keyId: 4295426131.0
      });
    },
    get C260() {
      return C260 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "/",
        debugName: "Numpad Divide",
        keyId: 4295426132.0
      });
    },
    get C261() {
      return C261 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "*",
        debugName: "Numpad Multiply",
        keyId: 4295426133.0
      });
    },
    get C262() {
      return C262 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "-",
        debugName: "Numpad Subtract",
        keyId: 4295426134.0
      });
    },
    get C263() {
      return C263 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "+",
        debugName: "Numpad Add",
        keyId: 4295426135.0
      });
    },
    get C264() {
      return C264 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Enter",
        keyId: 4295426136.0
      });
    },
    get C265() {
      return C265 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "1",
        debugName: "Numpad 1",
        keyId: 4295426137.0
      });
    },
    get C266() {
      return C266 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "2",
        debugName: "Numpad 2",
        keyId: 4295426138.0
      });
    },
    get C267() {
      return C267 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "3",
        debugName: "Numpad 3",
        keyId: 4295426139.0
      });
    },
    get C268() {
      return C268 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "4",
        debugName: "Numpad 4",
        keyId: 4295426140.0
      });
    },
    get C269() {
      return C269 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "5",
        debugName: "Numpad 5",
        keyId: 4295426141.0
      });
    },
    get C270() {
      return C270 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "6",
        debugName: "Numpad 6",
        keyId: 4295426142.0
      });
    },
    get C271() {
      return C271 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "7",
        debugName: "Numpad 7",
        keyId: 4295426143.0
      });
    },
    get C272() {
      return C272 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "8",
        debugName: "Numpad 8",
        keyId: 4295426144.0
      });
    },
    get C273() {
      return C273 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "9",
        debugName: "Numpad 9",
        keyId: 4295426145.0
      });
    },
    get C274() {
      return C274 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "0",
        debugName: "Numpad 0",
        keyId: 4295426146.0
      });
    },
    get C275() {
      return C275 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: ".",
        debugName: "Numpad Decimal",
        keyId: 4295426147.0
      });
    },
    get C276() {
      return C276 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Context Menu",
        keyId: 4295426149.0
      });
    },
    get C277() {
      return C277 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Power",
        keyId: 4295426150.0
      });
    },
    get C278() {
      return C278 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "=",
        debugName: "Numpad Equal",
        keyId: 4295426151.0
      });
    },
    get C279() {
      return C279 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Help",
        keyId: 4295426165.0
      });
    },
    get C280() {
      return C280 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Cut",
        keyId: 4295426171.0
      });
    },
    get C281() {
      return C281 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Copy",
        keyId: 4295426172.0
      });
    },
    get C282() {
      return C282 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Paste",
        keyId: 4295426173.0
      });
    },
    get C283() {
      return C283 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Audio Volume Mute",
        keyId: 4295426175.0
      });
    },
    get C284() {
      return C284 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Audio Volume Up",
        keyId: 4295426176.0
      });
    },
    get C285() {
      return C285 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Audio Volume Down",
        keyId: 4295426177.0
      });
    },
    get C286() {
      return C286 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: ",",
        debugName: "Numpad Comma",
        keyId: 4295426181.0
      });
    },
    get C287() {
      return C287 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Convert",
        keyId: 4295426186.0
      });
    },
    get C288() {
      return C288 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Non Convert",
        keyId: 4295426187.0
      });
    },
    get C289() {
      return C289 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: "(",
        debugName: "Numpad Paren Left",
        keyId: 4295426230.0
      });
    },
    get C290() {
      return C290 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: ")",
        debugName: "Numpad Paren Right",
        keyId: 4295426231.0
      });
    },
    get C291() {
      return C291 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Control Left",
        keyId: 4295426272.0
      });
    },
    get C292() {
      return C292 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Shift Left",
        keyId: 4295426273.0
      });
    },
    get C293() {
      return C293 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Alt Left",
        keyId: 4295426274.0
      });
    },
    get C294() {
      return C294 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Meta Left",
        keyId: 4295426275.0
      });
    },
    get C295() {
      return C295 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Control Right",
        keyId: 4295426276.0
      });
    },
    get C296() {
      return C296 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Shift Right",
        keyId: 4295426277.0
      });
    },
    get C297() {
      return C297 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Alt Right",
        keyId: 4295426278.0
      });
    },
    get C298() {
      return C298 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Meta Right",
        keyId: 4295426279.0
      });
    },
    get C299() {
      return C299 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Info",
        keyId: 4295753824.0
      });
    },
    get C300() {
      return C300 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Closed Caption Toggle",
        keyId: 4295753825.0
      });
    },
    get C301() {
      return C301 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Brightness Up",
        keyId: 4295753839.0
      });
    },
    get C302() {
      return C302 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Brightness Down",
        keyId: 4295753840.0
      });
    },
    get C303() {
      return C303 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Last",
        keyId: 4295753859.0
      });
    },
    get C304() {
      return C304 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Channel Up",
        keyId: 4295753884.0
      });
    },
    get C305() {
      return C305 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Channel Down",
        keyId: 4295753885.0
      });
    },
    get C306() {
      return C306 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Play",
        keyId: 4295753904.0
      });
    },
    get C307() {
      return C307 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Record",
        keyId: 4295753906.0
      });
    },
    get C308() {
      return C308 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Fast Forward",
        keyId: 4295753907.0
      });
    },
    get C309() {
      return C309 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Rewind",
        keyId: 4295753908.0
      });
    },
    get C310() {
      return C310 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Track Next",
        keyId: 4295753909.0
      });
    },
    get C311() {
      return C311 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Track Previous",
        keyId: 4295753910.0
      });
    },
    get C312() {
      return C312 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Stop",
        keyId: 4295753911.0
      });
    },
    get C313() {
      return C313 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Eject",
        keyId: 4295753912.0
      });
    },
    get C314() {
      return C314 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Play Pause",
        keyId: 4295753933.0
      });
    },
    get C315() {
      return C315 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Mail",
        keyId: 4295754122.0
      });
    },
    get C316() {
      return C316 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Contacts",
        keyId: 4295754125.0
      });
    },
    get C317() {
      return C317 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Calendar",
        keyId: 4295754126.0
      });
    },
    get C318() {
      return C318 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Assistant",
        keyId: 4295754187.0
      });
    },
    get C319() {
      return C319 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Close",
        keyId: 4295754243.0
      });
    },
    get C320() {
      return C320 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Browser Search",
        keyId: 4295754273.0
      });
    },
    get C321() {
      return C321 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Browser Forward",
        keyId: 4295754277.0
      });
    },
    get C322() {
      return C322 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Browser Favorites",
        keyId: 4295754282.0
      });
    },
    get C323() {
      return C323 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Zoom In",
        keyId: 4295754285.0
      });
    },
    get C324() {
      return C324 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Zoom Out",
        keyId: 4295754286.0
      });
    },
    get C325() {
      return C325 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Zoom Toggle",
        keyId: 4295754290.0
      });
    },
    get C176() {
      return C176 = dart.constMap(core.int, keyboard_key.LogicalKeyboardKey, [0, C177 || CT.C177, 119, C178 || CT.C178, 223, C179 || CT.C179, 224, C180 || CT.C180, 29, C181 || CT.C181, 30, C182 || CT.C182, 31, C183 || CT.C183, 32, C184 || CT.C184, 33, C185 || CT.C185, 34, C186 || CT.C186, 35, C187 || CT.C187, 36, C188 || CT.C188, 37, C189 || CT.C189, 38, C190 || CT.C190, 39, C191 || CT.C191, 40, C192 || CT.C192, 41, C193 || CT.C193, 42, C194 || CT.C194, 43, C195 || CT.C195, 44, C196 || CT.C196, 45, C197 || CT.C197, 46, C198 || CT.C198, 47, C199 || CT.C199, 48, C200 || CT.C200, 49, C201 || CT.C201, 50, C202 || CT.C202, 51, C203 || CT.C203, 52, C204 || CT.C204, 53, C205 || CT.C205, 54, C206 || CT.C206, 8, C207 || CT.C207, 9, C208 || CT.C208, 10, C209 || CT.C209, 11, C210 || CT.C210, 12, C211 || CT.C211, 13, C212 || CT.C212, 14, C213 || CT.C213, 15, C214 || CT.C214, 16, C215 || CT.C215, 7, C216 || CT.C216, 66, C217 || CT.C217, 111, C218 || CT.C218, 67, C219 || CT.C219, 61, C220 || CT.C220, 62, C221 || CT.C221, 69, C222 || CT.C222, 70, C223 || CT.C223, 71, C224 || CT.C224, 72, C225 || CT.C225, 73, C226 || CT.C226, 74, C227 || CT.C227, 75, C228 || CT.C228, 68, C229 || CT.C229, 55, C230 || CT.C230, 56, C231 || CT.C231, 76, C232 || CT.C232, 115, C233 || CT.C233, 131, C234 || CT.C234, 132, C235 || CT.C235, 133, C236 || CT.C236, 134, C237 || CT.C237, 135, C238 || CT.C238, 136, C239 || CT.C239, 137, C240 || CT.C240, 138, C241 || CT.C241, 139, C242 || CT.C242, 140, C243 || CT.C243, 141, C244 || CT.C244, 142, C245 || CT.C245, 120, C246 || CT.C246, 116, C247 || CT.C247, 121, C248 || CT.C248, 124, C249 || CT.C249, 122, C250 || CT.C250, 92, C251 || CT.C251, 112, C252 || CT.C252, 123, C253 || CT.C253, 93, C254 || CT.C254, 22, C255 || CT.C255, 21, C256 || CT.C256, 20, C257 || CT.C257, 19, C258 || CT.C258, 143, C259 || CT.C259, 154, C260 || CT.C260, 155, C261 || CT.C261, 156, C262 || CT.C262, 157, C263 || CT.C263, 160, C264 || CT.C264, 145, C265 || CT.C265, 146, C266 || CT.C266, 147, C267 || CT.C267, 148, C268 || CT.C268, 149, C269 || CT.C269, 150, C270 || CT.C270, 151, C271 || CT.C271, 152, C272 || CT.C272, 153, C273 || CT.C273, 144, C274 || CT.C274, 158, C275 || CT.C275, 82, C276 || CT.C276, 26, C277 || CT.C277, 161, C278 || CT.C278, 259, C279 || CT.C279, 277, C280 || CT.C280, 278, C281 || CT.C281, 279, C282 || CT.C282, 164, C283 || CT.C283, 24, C284 || CT.C284, 25, C285 || CT.C285, 159, C286 || CT.C286, 214, C287 || CT.C287, 213, C288 || CT.C288, 162, C289 || CT.C289, 163, C290 || CT.C290, 113, C291 || CT.C291, 59, C292 || CT.C292, 57, C293 || CT.C293, 117, C294 || CT.C294, 114, C295 || CT.C295, 60, C296 || CT.C296, 58, C297 || CT.C297, 118, C298 || CT.C298, 165, C299 || CT.C299, 175, C300 || CT.C300, 221, C301 || CT.C301, 220, C302 || CT.C302, 229, C303 || CT.C303, 166, C304 || CT.C304, 167, C305 || CT.C305, 126, C306 || CT.C306, 130, C307 || CT.C307, 90, C308 || CT.C308, 89, C309 || CT.C309, 87, C310 || CT.C310, 88, C311 || CT.C311, 86, C312 || CT.C312, 129, C313 || CT.C313, 85, C314 || CT.C314, 65, C315 || CT.C315, 207, C316 || CT.C316, 208, C317 || CT.C317, 219, C318 || CT.C318, 128, C319 || CT.C319, 84, C320 || CT.C320, 125, C321 || CT.C321, 174, C322 || CT.C322, 168, C323 || CT.C323, 169, C324 || CT.C324, 255, C325 || CT.C325]);
    },
    get C327() {
      return C327 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Fn",
        usbHidUsage: 18
      });
    },
    get C328() {
      return C328 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Suspend",
        usbHidUsage: 20
      });
    },
    get C329() {
      return C329 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Sleep",
        usbHidUsage: 65666
      });
    },
    get C330() {
      return C330 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Wake Up",
        usbHidUsage: 65667
      });
    },
    get C331() {
      return C331 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key A",
        usbHidUsage: 458756
      });
    },
    get C332() {
      return C332 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key B",
        usbHidUsage: 458757
      });
    },
    get C333() {
      return C333 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key C",
        usbHidUsage: 458758
      });
    },
    get C334() {
      return C334 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key D",
        usbHidUsage: 458759
      });
    },
    get C335() {
      return C335 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key E",
        usbHidUsage: 458760
      });
    },
    get C336() {
      return C336 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key F",
        usbHidUsage: 458761
      });
    },
    get C337() {
      return C337 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key G",
        usbHidUsage: 458762
      });
    },
    get C338() {
      return C338 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key H",
        usbHidUsage: 458763
      });
    },
    get C339() {
      return C339 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key I",
        usbHidUsage: 458764
      });
    },
    get C340() {
      return C340 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key J",
        usbHidUsage: 458765
      });
    },
    get C341() {
      return C341 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key K",
        usbHidUsage: 458766
      });
    },
    get C342() {
      return C342 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key L",
        usbHidUsage: 458767
      });
    },
    get C343() {
      return C343 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key M",
        usbHidUsage: 458768
      });
    },
    get C344() {
      return C344 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key N",
        usbHidUsage: 458769
      });
    },
    get C345() {
      return C345 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key O",
        usbHidUsage: 458770
      });
    },
    get C346() {
      return C346 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key P",
        usbHidUsage: 458771
      });
    },
    get C347() {
      return C347 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key Q",
        usbHidUsage: 458772
      });
    },
    get C348() {
      return C348 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key R",
        usbHidUsage: 458773
      });
    },
    get C349() {
      return C349 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key S",
        usbHidUsage: 458774
      });
    },
    get C350() {
      return C350 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key T",
        usbHidUsage: 458775
      });
    },
    get C351() {
      return C351 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key U",
        usbHidUsage: 458776
      });
    },
    get C352() {
      return C352 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key V",
        usbHidUsage: 458777
      });
    },
    get C353() {
      return C353 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key W",
        usbHidUsage: 458778
      });
    },
    get C354() {
      return C354 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key X",
        usbHidUsage: 458779
      });
    },
    get C355() {
      return C355 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key Y",
        usbHidUsage: 458780
      });
    },
    get C356() {
      return C356 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Key Z",
        usbHidUsage: 458781
      });
    },
    get C357() {
      return C357 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 1",
        usbHidUsage: 458782
      });
    },
    get C358() {
      return C358 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 2",
        usbHidUsage: 458783
      });
    },
    get C359() {
      return C359 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 3",
        usbHidUsage: 458784
      });
    },
    get C360() {
      return C360 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 4",
        usbHidUsage: 458785
      });
    },
    get C361() {
      return C361 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 5",
        usbHidUsage: 458786
      });
    },
    get C362() {
      return C362 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 6",
        usbHidUsage: 458787
      });
    },
    get C363() {
      return C363 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 7",
        usbHidUsage: 458788
      });
    },
    get C364() {
      return C364 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 8",
        usbHidUsage: 458789
      });
    },
    get C365() {
      return C365 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 9",
        usbHidUsage: 458790
      });
    },
    get C366() {
      return C366 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Digit 0",
        usbHidUsage: 458791
      });
    },
    get C367() {
      return C367 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Enter",
        usbHidUsage: 458792
      });
    },
    get C368() {
      return C368 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Escape",
        usbHidUsage: 458793
      });
    },
    get C369() {
      return C369 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Backspace",
        usbHidUsage: 458794
      });
    },
    get C370() {
      return C370 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Tab",
        usbHidUsage: 458795
      });
    },
    get C371() {
      return C371 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Space",
        usbHidUsage: 458796
      });
    },
    get C372() {
      return C372 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Minus",
        usbHidUsage: 458797
      });
    },
    get C373() {
      return C373 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Equal",
        usbHidUsage: 458798
      });
    },
    get C374() {
      return C374 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Bracket Left",
        usbHidUsage: 458799
      });
    },
    get C375() {
      return C375 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Bracket Right",
        usbHidUsage: 458800
      });
    },
    get C376() {
      return C376 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Backslash",
        usbHidUsage: 458801
      });
    },
    get C377() {
      return C377 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Semicolon",
        usbHidUsage: 458803
      });
    },
    get C378() {
      return C378 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Quote",
        usbHidUsage: 458804
      });
    },
    get C379() {
      return C379 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Backquote",
        usbHidUsage: 458805
      });
    },
    get C380() {
      return C380 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Comma",
        usbHidUsage: 458806
      });
    },
    get C381() {
      return C381 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Period",
        usbHidUsage: 458807
      });
    },
    get C382() {
      return C382 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Slash",
        usbHidUsage: 458808
      });
    },
    get C383() {
      return C383 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Caps Lock",
        usbHidUsage: 458809
      });
    },
    get C384() {
      return C384 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F1",
        usbHidUsage: 458810
      });
    },
    get C385() {
      return C385 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F2",
        usbHidUsage: 458811
      });
    },
    get C386() {
      return C386 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F3",
        usbHidUsage: 458812
      });
    },
    get C387() {
      return C387 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F4",
        usbHidUsage: 458813
      });
    },
    get C388() {
      return C388 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F5",
        usbHidUsage: 458814
      });
    },
    get C389() {
      return C389 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F6",
        usbHidUsage: 458815
      });
    },
    get C390() {
      return C390 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F7",
        usbHidUsage: 458816
      });
    },
    get C391() {
      return C391 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F8",
        usbHidUsage: 458817
      });
    },
    get C392() {
      return C392 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F9",
        usbHidUsage: 458818
      });
    },
    get C393() {
      return C393 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F10",
        usbHidUsage: 458819
      });
    },
    get C394() {
      return C394 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F11",
        usbHidUsage: 458820
      });
    },
    get C395() {
      return C395 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F12",
        usbHidUsage: 458821
      });
    },
    get C396() {
      return C396 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Print Screen",
        usbHidUsage: 458822
      });
    },
    get C397() {
      return C397 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Scroll Lock",
        usbHidUsage: 458823
      });
    },
    get C398() {
      return C398 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Pause",
        usbHidUsage: 458824
      });
    },
    get C399() {
      return C399 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Insert",
        usbHidUsage: 458825
      });
    },
    get C400() {
      return C400 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Home",
        usbHidUsage: 458826
      });
    },
    get C401() {
      return C401 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Page Up",
        usbHidUsage: 458827
      });
    },
    get C402() {
      return C402 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Delete",
        usbHidUsage: 458828
      });
    },
    get C403() {
      return C403 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "End",
        usbHidUsage: 458829
      });
    },
    get C404() {
      return C404 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Page Down",
        usbHidUsage: 458830
      });
    },
    get C405() {
      return C405 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Arrow Right",
        usbHidUsage: 458831
      });
    },
    get C406() {
      return C406 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Arrow Left",
        usbHidUsage: 458832
      });
    },
    get C407() {
      return C407 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Arrow Down",
        usbHidUsage: 458833
      });
    },
    get C408() {
      return C408 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Arrow Up",
        usbHidUsage: 458834
      });
    },
    get C409() {
      return C409 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Num Lock",
        usbHidUsage: 458835
      });
    },
    get C410() {
      return C410 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Divide",
        usbHidUsage: 458836
      });
    },
    get C411() {
      return C411 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Multiply",
        usbHidUsage: 458837
      });
    },
    get C412() {
      return C412 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Subtract",
        usbHidUsage: 458838
      });
    },
    get C413() {
      return C413 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Add",
        usbHidUsage: 458839
      });
    },
    get C414() {
      return C414 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Enter",
        usbHidUsage: 458840
      });
    },
    get C415() {
      return C415 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 1",
        usbHidUsage: 458841
      });
    },
    get C416() {
      return C416 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 2",
        usbHidUsage: 458842
      });
    },
    get C417() {
      return C417 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 3",
        usbHidUsage: 458843
      });
    },
    get C418() {
      return C418 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 4",
        usbHidUsage: 458844
      });
    },
    get C419() {
      return C419 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 5",
        usbHidUsage: 458845
      });
    },
    get C420() {
      return C420 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 6",
        usbHidUsage: 458846
      });
    },
    get C421() {
      return C421 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 7",
        usbHidUsage: 458847
      });
    },
    get C422() {
      return C422 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 8",
        usbHidUsage: 458848
      });
    },
    get C423() {
      return C423 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 9",
        usbHidUsage: 458849
      });
    },
    get C424() {
      return C424 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad 0",
        usbHidUsage: 458850
      });
    },
    get C425() {
      return C425 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Decimal",
        usbHidUsage: 458851
      });
    },
    get C426() {
      return C426 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Context Menu",
        usbHidUsage: 458853
      });
    },
    get C427() {
      return C427 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Power",
        usbHidUsage: 458854
      });
    },
    get C428() {
      return C428 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Equal",
        usbHidUsage: 458855
      });
    },
    get C429() {
      return C429 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F13",
        usbHidUsage: 458856
      });
    },
    get C430() {
      return C430 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F14",
        usbHidUsage: 458857
      });
    },
    get C431() {
      return C431 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F15",
        usbHidUsage: 458858
      });
    },
    get C432() {
      return C432 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F16",
        usbHidUsage: 458859
      });
    },
    get C433() {
      return C433 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F17",
        usbHidUsage: 458860
      });
    },
    get C434() {
      return C434 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F18",
        usbHidUsage: 458861
      });
    },
    get C435() {
      return C435 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F19",
        usbHidUsage: 458862
      });
    },
    get C436() {
      return C436 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F20",
        usbHidUsage: 458863
      });
    },
    get C437() {
      return C437 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F21",
        usbHidUsage: 458864
      });
    },
    get C438() {
      return C438 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F22",
        usbHidUsage: 458865
      });
    },
    get C439() {
      return C439 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F23",
        usbHidUsage: 458866
      });
    },
    get C440() {
      return C440 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "F24",
        usbHidUsage: 458867
      });
    },
    get C441() {
      return C441 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Open",
        usbHidUsage: 458868
      });
    },
    get C442() {
      return C442 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Help",
        usbHidUsage: 458869
      });
    },
    get C443() {
      return C443 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Again",
        usbHidUsage: 458873
      });
    },
    get C444() {
      return C444 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Undo",
        usbHidUsage: 458874
      });
    },
    get C445() {
      return C445 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Cut",
        usbHidUsage: 458875
      });
    },
    get C446() {
      return C446 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Copy",
        usbHidUsage: 458876
      });
    },
    get C447() {
      return C447 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Paste",
        usbHidUsage: 458877
      });
    },
    get C448() {
      return C448 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Find",
        usbHidUsage: 458878
      });
    },
    get C449() {
      return C449 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Audio Volume Mute",
        usbHidUsage: 458879
      });
    },
    get C450() {
      return C450 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Audio Volume Up",
        usbHidUsage: 458880
      });
    },
    get C451() {
      return C451 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Audio Volume Down",
        usbHidUsage: 458881
      });
    },
    get C452() {
      return C452 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Comma",
        usbHidUsage: 458885
      });
    },
    get C453() {
      return C453 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Convert",
        usbHidUsage: 458890
      });
    },
    get C454() {
      return C454 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Non Convert",
        usbHidUsage: 458891
      });
    },
    get C455() {
      return C455 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Lang 3",
        usbHidUsage: 458898
      });
    },
    get C456() {
      return C456 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Lang 4",
        usbHidUsage: 458899
      });
    },
    get C457() {
      return C457 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Props",
        usbHidUsage: 458915
      });
    },
    get C458() {
      return C458 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Paren Left",
        usbHidUsage: 458934
      });
    },
    get C459() {
      return C459 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Paren Right",
        usbHidUsage: 458935
      });
    },
    get C460() {
      return C460 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Control Left",
        usbHidUsage: 458976
      });
    },
    get C461() {
      return C461 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Shift Left",
        usbHidUsage: 458977
      });
    },
    get C462() {
      return C462 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Alt Left",
        usbHidUsage: 458978
      });
    },
    get C463() {
      return C463 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Meta Left",
        usbHidUsage: 458979
      });
    },
    get C464() {
      return C464 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Control Right",
        usbHidUsage: 458980
      });
    },
    get C465() {
      return C465 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Shift Right",
        usbHidUsage: 458981
      });
    },
    get C466() {
      return C466 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Alt Right",
        usbHidUsage: 458982
      });
    },
    get C467() {
      return C467 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Meta Right",
        usbHidUsage: 458983
      });
    },
    get C468() {
      return C468 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Info",
        usbHidUsage: 786528
      });
    },
    get C469() {
      return C469 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Brightness Up",
        usbHidUsage: 786543
      });
    },
    get C470() {
      return C470 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Brightness Down",
        usbHidUsage: 786544
      });
    },
    get C471() {
      return C471 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Exit",
        usbHidUsage: 786580
      });
    },
    get C472() {
      return C472 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Channel Up",
        usbHidUsage: 786588
      });
    },
    get C473() {
      return C473 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Channel Down",
        usbHidUsage: 786589
      });
    },
    get C474() {
      return C474 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Play",
        usbHidUsage: 786608
      });
    },
    get C475() {
      return C475 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Record",
        usbHidUsage: 786610
      });
    },
    get C476() {
      return C476 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Fast Forward",
        usbHidUsage: 786611
      });
    },
    get C477() {
      return C477 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Rewind",
        usbHidUsage: 786612
      });
    },
    get C478() {
      return C478 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Track Next",
        usbHidUsage: 786613
      });
    },
    get C479() {
      return C479 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Track Previous",
        usbHidUsage: 786614
      });
    },
    get C480() {
      return C480 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Stop",
        usbHidUsage: 786615
      });
    },
    get C481() {
      return C481 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Eject",
        usbHidUsage: 786616
      });
    },
    get C482() {
      return C482 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Play Pause",
        usbHidUsage: 786637
      });
    },
    get C483() {
      return C483 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Bass Boost",
        usbHidUsage: 786661
      });
    },
    get C484() {
      return C484 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Mail",
        usbHidUsage: 786826
      });
    },
    get C485() {
      return C485 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Contacts",
        usbHidUsage: 786829
      });
    },
    get C486() {
      return C486 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Calendar",
        usbHidUsage: 786830
      });
    },
    get C487() {
      return C487 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "New Key",
        usbHidUsage: 786945
      });
    },
    get C488() {
      return C488 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Close",
        usbHidUsage: 786947
      });
    },
    get C489() {
      return C489 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Print",
        usbHidUsage: 786952
      });
    },
    get C490() {
      return C490 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Browser Search",
        usbHidUsage: 786977
      });
    },
    get C491() {
      return C491 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Browser Forward",
        usbHidUsage: 786981
      });
    },
    get C492() {
      return C492 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Browser Favorites",
        usbHidUsage: 786986
      });
    },
    get C493() {
      return C493 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Redo",
        usbHidUsage: 787065
      });
    },
    get C326() {
      return C326 = dart.constMap(core.int, keyboard_key.PhysicalKeyboardKey, [464, C327 || CT.C327, 205, C328 || CT.C328, 142, C329 || CT.C329, 143, C330 || CT.C330, 30, C331 || CT.C331, 48, C332 || CT.C332, 46, C333 || CT.C333, 32, C334 || CT.C334, 18, C335 || CT.C335, 33, C336 || CT.C336, 34, C337 || CT.C337, 35, C338 || CT.C338, 23, C339 || CT.C339, 36, C340 || CT.C340, 37, C341 || CT.C341, 38, C342 || CT.C342, 50, C343 || CT.C343, 49, C344 || CT.C344, 24, C345 || CT.C345, 25, C346 || CT.C346, 16, C347 || CT.C347, 19, C348 || CT.C348, 31, C349 || CT.C349, 20, C350 || CT.C350, 22, C351 || CT.C351, 47, C352 || CT.C352, 17, C353 || CT.C353, 45, C354 || CT.C354, 21, C355 || CT.C355, 44, C356 || CT.C356, 2, C357 || CT.C357, 3, C358 || CT.C358, 4, C359 || CT.C359, 5, C360 || CT.C360, 6, C361 || CT.C361, 7, C362 || CT.C362, 8, C363 || CT.C363, 9, C364 || CT.C364, 10, C365 || CT.C365, 11, C366 || CT.C366, 28, C367 || CT.C367, 1, C368 || CT.C368, 14, C369 || CT.C369, 15, C370 || CT.C370, 57, C371 || CT.C371, 12, C372 || CT.C372, 13, C373 || CT.C373, 26, C374 || CT.C374, 27, C375 || CT.C375, 43, C376 || CT.C376, 86, C376 || CT.C376, 39, C377 || CT.C377, 40, C378 || CT.C378, 41, C379 || CT.C379, 51, C380 || CT.C380, 52, C381 || CT.C381, 53, C382 || CT.C382, 58, C383 || CT.C383, 59, C384 || CT.C384, 60, C385 || CT.C385, 61, C386 || CT.C386, 62, C387 || CT.C387, 63, C388 || CT.C388, 64, C389 || CT.C389, 65, C390 || CT.C390, 66, C391 || CT.C391, 67, C392 || CT.C392, 68, C393 || CT.C393, 87, C394 || CT.C394, 88, C395 || CT.C395, 99, C396 || CT.C396, 70, C397 || CT.C397, 119, C398 || CT.C398, 411, C398 || CT.C398, 110, C399 || CT.C399, 102, C400 || CT.C400, 104, C401 || CT.C401, 177, C401 || CT.C401, 111, C402 || CT.C402, 107, C403 || CT.C403, 109, C404 || CT.C404, 178, C404 || CT.C404, 106, C405 || CT.C405, 105, C406 || CT.C406, 108, C407 || CT.C407, 103, C408 || CT.C408, 69, C409 || CT.C409, 98, C410 || CT.C410, 55, C411 || CT.C411, 74, C412 || CT.C412, 78, C413 || CT.C413, 96, C414 || CT.C414, 79, C415 || CT.C415, 80, C416 || CT.C416, 81, C417 || CT.C417, 75, C418 || CT.C418, 76, C419 || CT.C419, 77, C420 || CT.C420, 71, C421 || CT.C421, 72, C422 || CT.C422, 73, C423 || CT.C423, 82, C424 || CT.C424, 83, C425 || CT.C425, 127, C426 || CT.C426, 139, C426 || CT.C426, 116, C427 || CT.C427, 152, C427 || CT.C427, 117, C428 || CT.C428, 183, C429 || CT.C429, 184, C430 || CT.C430, 185, C431 || CT.C431, 186, C432 || CT.C432, 187, C433 || CT.C433, 188, C434 || CT.C434, 189, C435 || CT.C435, 190, C436 || CT.C436, 191, C437 || CT.C437, 192, C438 || CT.C438, 193, C439 || CT.C439, 194, C440 || CT.C440, 134, C441 || CT.C441, 138, C442 || CT.C442, 129, C443 || CT.C443, 131, C444 || CT.C444, 137, C445 || CT.C445, 133, C446 || CT.C446, 135, C447 || CT.C447, 136, C448 || CT.C448, 113, C449 || CT.C449, 115, C450 || CT.C450, 114, C451 || CT.C451, 95, C452 || CT.C452, 121, C452 || CT.C452, 92, C453 || CT.C453, 94, C454 || CT.C454, 90, C455 || CT.C455, 91, C456 || CT.C456, 130, C457 || CT.C457, 179, C458 || CT.C458, 180, C459 || CT.C459, 29, C460 || CT.C460, 42, C461 || CT.C461, 56, C462 || CT.C462, 125, C463 || CT.C463, 97, C464 || CT.C464, 54, C465 || CT.C465, 100, C466 || CT.C466, 126, C467 || CT.C467, 358, C468 || CT.C468, 225, C469 || CT.C469, 224, C470 || CT.C470, 174, C471 || CT.C471, 402, C472 || CT.C472, 403, C473 || CT.C473, 200, C474 || CT.C474, 207, C474 || CT.C474, 167, C475 || CT.C475, 208, C476 || CT.C476, 168, C477 || CT.C477, 163, C478 || CT.C478, 165, C479 || CT.C479, 128, C480 || CT.C480, 166, C480 || CT.C480, 161, C481 || CT.C481, 162, C481 || CT.C481, 164, C482 || CT.C482, 209, C483 || CT.C483, 155, C484 || CT.C484, 215, C484 || CT.C484, 429, C485 || CT.C485, 397, C486 || CT.C486, 181, C487 || CT.C487, 160, C488 || CT.C488, 206, C488 || CT.C488, 210, C489 || CT.C489, 217, C490 || CT.C490, 159, C491 || CT.C491, 156, C492 || CT.C492, 182, C493 || CT.C493]);
    },
    get C494() {
      return C494 = dart.constMap(core.int, keyboard_key.LogicalKeyboardKey, [154, C260 || CT.C260, 155, C261 || CT.C261, 156, C262 || CT.C262, 157, C263 || CT.C263, 145, C265 || CT.C265, 146, C266 || CT.C266, 147, C267 || CT.C267, 148, C268 || CT.C268, 149, C269 || CT.C269, 150, C270 || CT.C270, 151, C271 || CT.C271, 152, C272 || CT.C272, 153, C273 || CT.C273, 144, C274 || CT.C274, 158, C275 || CT.C275, 161, C278 || CT.C278, 159, C286 || CT.C286, 162, C289 || CT.C289, 163, C290 || CT.C290]);
    },
    get C496() {
      return C496 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Hyper",
        keyId: 4294967312.0
      });
    },
    get C497() {
      return C497 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Super Key",
        keyId: 4294967313.0
      });
    },
    get C498() {
      return C498 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Fn Lock",
        keyId: 4294967315.0
      });
    },
    get C499() {
      return C499 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Suspend",
        keyId: 4294967316.0
      });
    },
    get C500() {
      return C500 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Resume",
        keyId: 4294967317.0
      });
    },
    get C501() {
      return C501 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Turbo",
        keyId: 4294967318.0
      });
    },
    get C502() {
      return C502 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Display Toggle Int Ext",
        keyId: 4295033013.0
      });
    },
    get C503() {
      return C503 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Usb Reserved",
        keyId: 4295426048.0
      });
    },
    get C504() {
      return C504 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Usb Error Roll Over",
        keyId: 4295426049.0
      });
    },
    get C505() {
      return C505 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Usb Post Fail",
        keyId: 4295426050.0
      });
    },
    get C506() {
      return C506 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Usb Error Undefined",
        keyId: 4295426051.0
      });
    },
    get C507() {
      return C507 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Intl Backslash",
        keyId: 4295426148.0
      });
    },
    get C508() {
      return C508 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F13",
        keyId: 4295426152.0
      });
    },
    get C509() {
      return C509 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F14",
        keyId: 4295426153.0
      });
    },
    get C510() {
      return C510 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F15",
        keyId: 4295426154.0
      });
    },
    get C511() {
      return C511 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F16",
        keyId: 4295426155.0
      });
    },
    get C512() {
      return C512 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F17",
        keyId: 4295426156.0
      });
    },
    get C513() {
      return C513 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F18",
        keyId: 4295426157.0
      });
    },
    get C514() {
      return C514 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F19",
        keyId: 4295426158.0
      });
    },
    get C515() {
      return C515 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F20",
        keyId: 4295426159.0
      });
    },
    get C516() {
      return C516 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F21",
        keyId: 4295426160.0
      });
    },
    get C517() {
      return C517 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F22",
        keyId: 4295426161.0
      });
    },
    get C518() {
      return C518 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F23",
        keyId: 4295426162.0
      });
    },
    get C519() {
      return C519 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "F24",
        keyId: 4295426163.0
      });
    },
    get C520() {
      return C520 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Open",
        keyId: 4295426164.0
      });
    },
    get C521() {
      return C521 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Select",
        keyId: 4295426167.0
      });
    },
    get C522() {
      return C522 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Again",
        keyId: 4295426169.0
      });
    },
    get C523() {
      return C523 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Undo",
        keyId: 4295426170.0
      });
    },
    get C524() {
      return C524 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Find",
        keyId: 4295426174.0
      });
    },
    get C525() {
      return C525 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Intl Ro",
        keyId: 4295426183.0
      });
    },
    get C526() {
      return C526 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Kana Mode",
        keyId: 4295426184.0
      });
    },
    get C527() {
      return C527 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Intl Yen",
        keyId: 4295426185.0
      });
    },
    get C528() {
      return C528 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Lang 1",
        keyId: 4295426192.0
      });
    },
    get C529() {
      return C529 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Lang 2",
        keyId: 4295426193.0
      });
    },
    get C530() {
      return C530 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Lang 3",
        keyId: 4295426194.0
      });
    },
    get C531() {
      return C531 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Lang 4",
        keyId: 4295426195.0
      });
    },
    get C532() {
      return C532 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Lang 5",
        keyId: 4295426196.0
      });
    },
    get C533() {
      return C533 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Abort",
        keyId: 4295426203.0
      });
    },
    get C534() {
      return C534 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Props",
        keyId: 4295426211.0
      });
    },
    get C535() {
      return C535 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Backspace",
        keyId: 4295426235.0
      });
    },
    get C536() {
      return C536 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Memory Store",
        keyId: 4295426256.0
      });
    },
    get C537() {
      return C537 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Memory Recall",
        keyId: 4295426257.0
      });
    },
    get C538() {
      return C538 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Memory Clear",
        keyId: 4295426258.0
      });
    },
    get C539() {
      return C539 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Memory Add",
        keyId: 4295426259.0
      });
    },
    get C540() {
      return C540 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Memory Subtract",
        keyId: 4295426260.0
      });
    },
    get C541() {
      return C541 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Sign Change",
        keyId: 4295426263.0
      });
    },
    get C542() {
      return C542 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Clear",
        keyId: 4295426264.0
      });
    },
    get C543() {
      return C543 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Numpad Clear Entry",
        keyId: 4295426265.0
      });
    },
    get C544() {
      return C544 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Brightness Toggle",
        keyId: 4295753842.0
      });
    },
    get C545() {
      return C545 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Brightness Minimum",
        keyId: 4295753843.0
      });
    },
    get C546() {
      return C546 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Brightness Maximum",
        keyId: 4295753844.0
      });
    },
    get C547() {
      return C547 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Brightness Auto",
        keyId: 4295753845.0
      });
    },
    get C548() {
      return C548 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Phone",
        keyId: 4295753868.0
      });
    },
    get C549() {
      return C549 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Program Guide",
        keyId: 4295753869.0
      });
    },
    get C550() {
      return C550 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Exit",
        keyId: 4295753876.0
      });
    },
    get C551() {
      return C551 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Speech Input Toggle",
        keyId: 4295753935.0
      });
    },
    get C552() {
      return C552 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Bass Boost",
        keyId: 4295753957.0
      });
    },
    get C553() {
      return C553 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Media Select",
        keyId: 4295754115.0
      });
    },
    get C554() {
      return C554 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Word Processor",
        keyId: 4295754116.0
      });
    },
    get C555() {
      return C555 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Spreadsheet",
        keyId: 4295754118.0
      });
    },
    get C556() {
      return C556 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch App2",
        keyId: 4295754130.0
      });
    },
    get C557() {
      return C557 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch App1",
        keyId: 4295754132.0
      });
    },
    get C558() {
      return C558 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Internet Browser",
        keyId: 4295754134.0
      });
    },
    get C559() {
      return C559 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Log Off",
        keyId: 4295754140.0
      });
    },
    get C560() {
      return C560 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Lock Screen",
        keyId: 4295754142.0
      });
    },
    get C561() {
      return C561 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Control Panel",
        keyId: 4295754143.0
      });
    },
    get C562() {
      return C562 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Select Task",
        keyId: 4295754146.0
      });
    },
    get C563() {
      return C563 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Documents",
        keyId: 4295754151.0
      });
    },
    get C564() {
      return C564 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Spell Check",
        keyId: 4295754155.0
      });
    },
    get C565() {
      return C565 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Keyboard Layout",
        keyId: 4295754158.0
      });
    },
    get C566() {
      return C566 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Screen Saver",
        keyId: 4295754161.0
      });
    },
    get C567() {
      return C567 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Launch Audio Browser",
        keyId: 4295754167.0
      });
    },
    get C568() {
      return C568 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "New Key",
        keyId: 4295754241.0
      });
    },
    get C569() {
      return C569 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Save",
        keyId: 4295754247.0
      });
    },
    get C570() {
      return C570 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Print",
        keyId: 4295754248.0
      });
    },
    get C571() {
      return C571 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Browser Home",
        keyId: 4295754275.0
      });
    },
    get C572() {
      return C572 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Browser Back",
        keyId: 4295754276.0
      });
    },
    get C573() {
      return C573 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Browser Stop",
        keyId: 4295754278.0
      });
    },
    get C574() {
      return C574 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Browser Refresh",
        keyId: 4295754279.0
      });
    },
    get C575() {
      return C575 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Redo",
        keyId: 4295754361.0
      });
    },
    get C576() {
      return C576 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Mail Reply",
        keyId: 4295754377.0
      });
    },
    get C577() {
      return C577 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Mail Forward",
        keyId: 4295754379.0
      });
    },
    get C578() {
      return C578 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Mail Send",
        keyId: 4295754380.0
      });
    },
    get C579() {
      return C579 = dart.const({
        __proto__: keyboard_key.LogicalKeyboardKey.prototype,
        keyLabel: null,
        debugName: "Show All Windows",
        keyId: 4295754399.0
      });
    },
    get C495() {
      return C495 = dart.constMap(core.int, keyboard_key.LogicalKeyboardKey, [4294967296.0, C177 || CT.C177, 4294967312.0, C496 || CT.C496, 4294967313.0, C497 || CT.C497, 4294967314.0, C178 || CT.C178, 4294967315.0, C498 || CT.C498, 4294967316.0, C499 || CT.C499, 4294967317.0, C500 || CT.C500, 4294967318.0, C501 || CT.C501, 4295032962.0, C179 || CT.C179, 4295032963.0, C180 || CT.C180, 4295033013.0, C502 || CT.C502, 4295426048.0, C503 || CT.C503, 4295426049.0, C504 || CT.C504, 4295426050.0, C505 || CT.C505, 4295426051.0, C506 || CT.C506, 97, C181 || CT.C181, 98, C182 || CT.C182, 99, C183 || CT.C183, 100, C184 || CT.C184, 101, C185 || CT.C185, 102, C186 || CT.C186, 103, C187 || CT.C187, 104, C188 || CT.C188, 105, C189 || CT.C189, 106, C190 || CT.C190, 107, C191 || CT.C191, 108, C192 || CT.C192, 109, C193 || CT.C193, 110, C194 || CT.C194, 111, C195 || CT.C195, 112, C196 || CT.C196, 113, C197 || CT.C197, 114, C198 || CT.C198, 115, C199 || CT.C199, 116, C200 || CT.C200, 117, C201 || CT.C201, 118, C202 || CT.C202, 119, C203 || CT.C203, 120, C204 || CT.C204, 121, C205 || CT.C205, 122, C206 || CT.C206, 49, C207 || CT.C207, 50, C208 || CT.C208, 51, C209 || CT.C209, 52, C210 || CT.C210, 53, C211 || CT.C211, 54, C212 || CT.C212, 55, C213 || CT.C213, 56, C214 || CT.C214, 57, C215 || CT.C215, 48, C216 || CT.C216, 4295426088.0, C217 || CT.C217, 4295426089.0, C218 || CT.C218, 4295426090.0, C219 || CT.C219, 4295426091.0, C220 || CT.C220, 32, C221 || CT.C221, 45, C222 || CT.C222, 61, C223 || CT.C223, 91, C224 || CT.C224, 93, C225 || CT.C225, 92, C226 || CT.C226, 59, C227 || CT.C227, 39, C228 || CT.C228, 96, C229 || CT.C229, 44, C230 || CT.C230, 46, C231 || CT.C231, 47, C232 || CT.C232, 4295426105.0, C233 || CT.C233, 4295426106.0, C234 || CT.C234, 4295426107.0, C235 || CT.C235, 4295426108.0, C236 || CT.C236, 4295426109.0, C237 || CT.C237, 4295426110.0, C238 || CT.C238, 4295426111.0, C239 || CT.C239, 4295426112.0, C240 || CT.C240, 4295426113.0, C241 || CT.C241, 4295426114.0, C242 || CT.C242, 4295426115.0, C243 || CT.C243, 4295426116.0, C244 || CT.C244, 4295426117.0, C245 || CT.C245, 4295426118.0, C246 || CT.C246, 4295426119.0, C247 || CT.C247, 4295426120.0, C248 || CT.C248, 4295426121.0, C249 || CT.C249, 4295426122.0, C250 || CT.C250, 4295426123.0, C251 || CT.C251, 4295426124.0, C252 || CT.C252, 4295426125.0, C253 || CT.C253, 4295426126.0, C254 || CT.C254, 4295426127.0, C255 || CT.C255, 4295426128.0, C256 || CT.C256, 4295426129.0, C257 || CT.C257, 4295426130.0, C258 || CT.C258, 4295426131.0, C259 || CT.C259, 4295426132.0, C260 || CT.C260, 4295426133.0, C261 || CT.C261, 4295426134.0, C262 || CT.C262, 4295426135.0, C263 || CT.C263, 4295426136.0, C264 || CT.C264, 4295426137.0, C265 || CT.C265, 4295426138.0, C266 || CT.C266, 4295426139.0, C267 || CT.C267, 4295426140.0, C268 || CT.C268, 4295426141.0, C269 || CT.C269, 4295426142.0, C270 || CT.C270, 4295426143.0, C271 || CT.C271, 4295426144.0, C272 || CT.C272, 4295426145.0, C273 || CT.C273, 4295426146.0, C274 || CT.C274, 4295426147.0, C275 || CT.C275, 4295426148.0, C507 || CT.C507, 4295426149.0, C276 || CT.C276, 4295426150.0, C277 || CT.C277, 4295426151.0, C278 || CT.C278, 4295426152.0, C508 || CT.C508, 4295426153.0, C509 || CT.C509, 4295426154.0, C510 || CT.C510, 4295426155.0, C511 || CT.C511, 4295426156.0, C512 || CT.C512, 4295426157.0, C513 || CT.C513, 4295426158.0, C514 || CT.C514, 4295426159.0, C515 || CT.C515, 4295426160.0, C516 || CT.C516, 4295426161.0, C517 || CT.C517, 4295426162.0, C518 || CT.C518, 4295426163.0, C519 || CT.C519, 4295426164.0, C520 || CT.C520, 4295426165.0, C279 || CT.C279, 4295426167.0, C521 || CT.C521, 4295426169.0, C522 || CT.C522, 4295426170.0, C523 || CT.C523, 4295426171.0, C280 || CT.C280, 4295426172.0, C281 || CT.C281, 4295426173.0, C282 || CT.C282, 4295426174.0, C524 || CT.C524, 4295426175.0, C283 || CT.C283, 4295426176.0, C284 || CT.C284, 4295426177.0, C285 || CT.C285, 4295426181.0, C286 || CT.C286, 4295426183.0, C525 || CT.C525, 4295426184.0, C526 || CT.C526, 4295426185.0, C527 || CT.C527, 4295426186.0, C287 || CT.C287, 4295426187.0, C288 || CT.C288, 4295426192.0, C528 || CT.C528, 4295426193.0, C529 || CT.C529, 4295426194.0, C530 || CT.C530, 4295426195.0, C531 || CT.C531, 4295426196.0, C532 || CT.C532, 4295426203.0, C533 || CT.C533, 4295426211.0, C534 || CT.C534, 4295426230.0, C289 || CT.C289, 4295426231.0, C290 || CT.C290, 4295426235.0, C535 || CT.C535, 4295426256.0, C536 || CT.C536, 4295426257.0, C537 || CT.C537, 4295426258.0, C538 || CT.C538, 4295426259.0, C539 || CT.C539, 4295426260.0, C540 || CT.C540, 4295426263.0, C541 || CT.C541, 4295426264.0, C542 || CT.C542, 4295426265.0, C543 || CT.C543, 4295426272.0, C291 || CT.C291, 4295426273.0, C292 || CT.C292, 4295426274.0, C293 || CT.C293, 4295426275.0, C294 || CT.C294, 4295426276.0, C295 || CT.C295, 4295426277.0, C296 || CT.C296, 4295426278.0, C297 || CT.C297, 4295426279.0, C298 || CT.C298, 4295753824.0, C299 || CT.C299, 4295753825.0, C300 || CT.C300, 4295753839.0, C301 || CT.C301, 4295753840.0, C302 || CT.C302, 4295753842.0, C544 || CT.C544, 4295753843.0, C545 || CT.C545, 4295753844.0, C546 || CT.C546, 4295753845.0, C547 || CT.C547, 4295753859.0, C303 || CT.C303, 4295753868.0, C548 || CT.C548, 4295753869.0, C549 || CT.C549, 4295753876.0, C550 || CT.C550, 4295753884.0, C304 || CT.C304, 4295753885.0, C305 || CT.C305, 4295753904.0, C306 || CT.C306, 4295753906.0, C307 || CT.C307, 4295753907.0, C308 || CT.C308, 4295753908.0, C309 || CT.C309, 4295753909.0, C310 || CT.C310, 4295753910.0, C311 || CT.C311, 4295753911.0, C312 || CT.C312, 4295753912.0, C313 || CT.C313, 4295753933.0, C314 || CT.C314, 4295753935.0, C551 || CT.C551, 4295753957.0, C552 || CT.C552, 4295754115.0, C553 || CT.C553, 4295754116.0, C554 || CT.C554, 4295754118.0, C555 || CT.C555, 4295754122.0, C315 || CT.C315, 4295754125.0, C316 || CT.C316, 4295754126.0, C317 || CT.C317, 4295754130.0, C556 || CT.C556, 4295754132.0, C557 || CT.C557, 4295754134.0, C558 || CT.C558, 4295754140.0, C559 || CT.C559, 4295754142.0, C560 || CT.C560, 4295754143.0, C561 || CT.C561, 4295754146.0, C562 || CT.C562, 4295754151.0, C563 || CT.C563, 4295754155.0, C564 || CT.C564, 4295754158.0, C565 || CT.C565, 4295754161.0, C566 || CT.C566, 4295754187.0, C318 || CT.C318, 4295754167.0, C567 || CT.C567, 4295754241.0, C568 || CT.C568, 4295754243.0, C319 || CT.C319, 4295754247.0, C569 || CT.C569, 4295754248.0, C570 || CT.C570, 4295754273.0, C320 || CT.C320, 4295754275.0, C571 || CT.C571, 4295754276.0, C572 || CT.C572, 4295754277.0, C321 || CT.C321, 4295754278.0, C573 || CT.C573, 4295754279.0, C574 || CT.C574, 4295754282.0, C322 || CT.C322, 4295754285.0, C323 || CT.C323, 4295754286.0, C324 || CT.C324, 4295754290.0, C325 || CT.C325, 4295754361.0, C575 || CT.C575, 4295754377.0, C576 || CT.C576, 4295754379.0, C577 || CT.C577, 4295754380.0, C578 || CT.C578, 4295754399.0, C579 || CT.C579]);
    },
    get C581() {
      return C581 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "None",
        usbHidUsage: 0
      });
    },
    get C582() {
      return C582 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Hyper",
        usbHidUsage: 16
      });
    },
    get C583() {
      return C583 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Super Key",
        usbHidUsage: 17
      });
    },
    get C584() {
      return C584 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Fn Lock",
        usbHidUsage: 19
      });
    },
    get C585() {
      return C585 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Resume",
        usbHidUsage: 21
      });
    },
    get C586() {
      return C586 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Turbo",
        usbHidUsage: 22
      });
    },
    get C587() {
      return C587 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Display Toggle Int Ext",
        usbHidUsage: 65717
      });
    },
    get C588() {
      return C588 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Usb Reserved",
        usbHidUsage: 458752
      });
    },
    get C589() {
      return C589 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Usb Error Roll Over",
        usbHidUsage: 458753
      });
    },
    get C590() {
      return C590 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Usb Post Fail",
        usbHidUsage: 458754
      });
    },
    get C591() {
      return C591 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Usb Error Undefined",
        usbHidUsage: 458755
      });
    },
    get C592() {
      return C592 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Intl Backslash",
        usbHidUsage: 458852
      });
    },
    get C593() {
      return C593 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Select",
        usbHidUsage: 458871
      });
    },
    get C594() {
      return C594 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Intl Ro",
        usbHidUsage: 458887
      });
    },
    get C595() {
      return C595 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Kana Mode",
        usbHidUsage: 458888
      });
    },
    get C596() {
      return C596 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Intl Yen",
        usbHidUsage: 458889
      });
    },
    get C597() {
      return C597 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Lang 1",
        usbHidUsage: 458896
      });
    },
    get C598() {
      return C598 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Lang 2",
        usbHidUsage: 458897
      });
    },
    get C599() {
      return C599 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Lang 5",
        usbHidUsage: 458900
      });
    },
    get C600() {
      return C600 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Abort",
        usbHidUsage: 458907
      });
    },
    get C601() {
      return C601 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Backspace",
        usbHidUsage: 458939
      });
    },
    get C602() {
      return C602 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Memory Store",
        usbHidUsage: 458960
      });
    },
    get C603() {
      return C603 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Memory Recall",
        usbHidUsage: 458961
      });
    },
    get C604() {
      return C604 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Memory Clear",
        usbHidUsage: 458962
      });
    },
    get C605() {
      return C605 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Memory Add",
        usbHidUsage: 458963
      });
    },
    get C606() {
      return C606 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Memory Subtract",
        usbHidUsage: 458964
      });
    },
    get C607() {
      return C607 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Sign Change",
        usbHidUsage: 458967
      });
    },
    get C608() {
      return C608 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Clear",
        usbHidUsage: 458968
      });
    },
    get C609() {
      return C609 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Numpad Clear Entry",
        usbHidUsage: 458969
      });
    },
    get C610() {
      return C610 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Closed Caption Toggle",
        usbHidUsage: 786529
      });
    },
    get C611() {
      return C611 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Brightness Toggle",
        usbHidUsage: 786546
      });
    },
    get C612() {
      return C612 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Brightness Minimum",
        usbHidUsage: 786547
      });
    },
    get C613() {
      return C613 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Brightness Maximum",
        usbHidUsage: 786548
      });
    },
    get C614() {
      return C614 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Brightness Auto",
        usbHidUsage: 786549
      });
    },
    get C615() {
      return C615 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Last",
        usbHidUsage: 786563
      });
    },
    get C616() {
      return C616 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Phone",
        usbHidUsage: 786572
      });
    },
    get C617() {
      return C617 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Program Guide",
        usbHidUsage: 786573
      });
    },
    get C618() {
      return C618 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Speech Input Toggle",
        usbHidUsage: 786639
      });
    },
    get C619() {
      return C619 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Media Select",
        usbHidUsage: 786819
      });
    },
    get C620() {
      return C620 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Word Processor",
        usbHidUsage: 786820
      });
    },
    get C621() {
      return C621 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Spreadsheet",
        usbHidUsage: 786822
      });
    },
    get C622() {
      return C622 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch App2",
        usbHidUsage: 786834
      });
    },
    get C623() {
      return C623 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch App1",
        usbHidUsage: 786836
      });
    },
    get C624() {
      return C624 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Internet Browser",
        usbHidUsage: 786838
      });
    },
    get C625() {
      return C625 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Log Off",
        usbHidUsage: 786844
      });
    },
    get C626() {
      return C626 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Lock Screen",
        usbHidUsage: 786846
      });
    },
    get C627() {
      return C627 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Control Panel",
        usbHidUsage: 786847
      });
    },
    get C628() {
      return C628 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Select Task",
        usbHidUsage: 786850
      });
    },
    get C629() {
      return C629 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Documents",
        usbHidUsage: 786855
      });
    },
    get C630() {
      return C630 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Spell Check",
        usbHidUsage: 786859
      });
    },
    get C631() {
      return C631 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Keyboard Layout",
        usbHidUsage: 786862
      });
    },
    get C632() {
      return C632 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Screen Saver",
        usbHidUsage: 786865
      });
    },
    get C633() {
      return C633 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Assistant",
        usbHidUsage: 786891
      });
    },
    get C634() {
      return C634 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Launch Audio Browser",
        usbHidUsage: 786871
      });
    },
    get C635() {
      return C635 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Save",
        usbHidUsage: 786951
      });
    },
    get C636() {
      return C636 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Browser Home",
        usbHidUsage: 786979
      });
    },
    get C637() {
      return C637 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Browser Back",
        usbHidUsage: 786980
      });
    },
    get C638() {
      return C638 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Browser Stop",
        usbHidUsage: 786982
      });
    },
    get C639() {
      return C639 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Browser Refresh",
        usbHidUsage: 786983
      });
    },
    get C640() {
      return C640 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Zoom In",
        usbHidUsage: 786989
      });
    },
    get C641() {
      return C641 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Zoom Out",
        usbHidUsage: 786990
      });
    },
    get C642() {
      return C642 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Zoom Toggle",
        usbHidUsage: 786994
      });
    },
    get C643() {
      return C643 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Mail Reply",
        usbHidUsage: 787081
      });
    },
    get C644() {
      return C644 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Mail Forward",
        usbHidUsage: 787083
      });
    },
    get C645() {
      return C645 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Mail Send",
        usbHidUsage: 787084
      });
    },
    get C646() {
      return C646 = dart.const({
        __proto__: keyboard_key.PhysicalKeyboardKey.prototype,
        debugName: "Show All Windows",
        usbHidUsage: 787103
      });
    },
    get C580() {
      return C580 = dart.constMap(core.int, keyboard_key.PhysicalKeyboardKey, [0, C581 || CT.C581, 16, C582 || CT.C582, 17, C583 || CT.C583, 18, C327 || CT.C327, 19, C584 || CT.C584, 20, C328 || CT.C328, 21, C585 || CT.C585, 22, C586 || CT.C586, 65666, C329 || CT.C329, 65667, C330 || CT.C330, 65717, C587 || CT.C587, 458752, C588 || CT.C588, 458753, C589 || CT.C589, 458754, C590 || CT.C590, 458755, C591 || CT.C591, 458756, C331 || CT.C331, 458757, C332 || CT.C332, 458758, C333 || CT.C333, 458759, C334 || CT.C334, 458760, C335 || CT.C335, 458761, C336 || CT.C336, 458762, C337 || CT.C337, 458763, C338 || CT.C338, 458764, C339 || CT.C339, 458765, C340 || CT.C340, 458766, C341 || CT.C341, 458767, C342 || CT.C342, 458768, C343 || CT.C343, 458769, C344 || CT.C344, 458770, C345 || CT.C345, 458771, C346 || CT.C346, 458772, C347 || CT.C347, 458773, C348 || CT.C348, 458774, C349 || CT.C349, 458775, C350 || CT.C350, 458776, C351 || CT.C351, 458777, C352 || CT.C352, 458778, C353 || CT.C353, 458779, C354 || CT.C354, 458780, C355 || CT.C355, 458781, C356 || CT.C356, 458782, C357 || CT.C357, 458783, C358 || CT.C358, 458784, C359 || CT.C359, 458785, C360 || CT.C360, 458786, C361 || CT.C361, 458787, C362 || CT.C362, 458788, C363 || CT.C363, 458789, C364 || CT.C364, 458790, C365 || CT.C365, 458791, C366 || CT.C366, 458792, C367 || CT.C367, 458793, C368 || CT.C368, 458794, C369 || CT.C369, 458795, C370 || CT.C370, 458796, C371 || CT.C371, 458797, C372 || CT.C372, 458798, C373 || CT.C373, 458799, C374 || CT.C374, 458800, C375 || CT.C375, 458801, C376 || CT.C376, 458803, C377 || CT.C377, 458804, C378 || CT.C378, 458805, C379 || CT.C379, 458806, C380 || CT.C380, 458807, C381 || CT.C381, 458808, C382 || CT.C382, 458809, C383 || CT.C383, 458810, C384 || CT.C384, 458811, C385 || CT.C385, 458812, C386 || CT.C386, 458813, C387 || CT.C387, 458814, C388 || CT.C388, 458815, C389 || CT.C389, 458816, C390 || CT.C390, 458817, C391 || CT.C391, 458818, C392 || CT.C392, 458819, C393 || CT.C393, 458820, C394 || CT.C394, 458821, C395 || CT.C395, 458822, C396 || CT.C396, 458823, C397 || CT.C397, 458824, C398 || CT.C398, 458825, C399 || CT.C399, 458826, C400 || CT.C400, 458827, C401 || CT.C401, 458828, C402 || CT.C402, 458829, C403 || CT.C403, 458830, C404 || CT.C404, 458831, C405 || CT.C405, 458832, C406 || CT.C406, 458833, C407 || CT.C407, 458834, C408 || CT.C408, 458835, C409 || CT.C409, 458836, C410 || CT.C410, 458837, C411 || CT.C411, 458838, C412 || CT.C412, 458839, C413 || CT.C413, 458840, C414 || CT.C414, 458841, C415 || CT.C415, 458842, C416 || CT.C416, 458843, C417 || CT.C417, 458844, C418 || CT.C418, 458845, C419 || CT.C419, 458846, C420 || CT.C420, 458847, C421 || CT.C421, 458848, C422 || CT.C422, 458849, C423 || CT.C423, 458850, C424 || CT.C424, 458851, C425 || CT.C425, 458852, C592 || CT.C592, 458853, C426 || CT.C426, 458854, C427 || CT.C427, 458855, C428 || CT.C428, 458856, C429 || CT.C429, 458857, C430 || CT.C430, 458858, C431 || CT.C431, 458859, C432 || CT.C432, 458860, C433 || CT.C433, 458861, C434 || CT.C434, 458862, C435 || CT.C435, 458863, C436 || CT.C436, 458864, C437 || CT.C437, 458865, C438 || CT.C438, 458866, C439 || CT.C439, 458867, C440 || CT.C440, 458868, C441 || CT.C441, 458869, C442 || CT.C442, 458871, C593 || CT.C593, 458873, C443 || CT.C443, 458874, C444 || CT.C444, 458875, C445 || CT.C445, 458876, C446 || CT.C446, 458877, C447 || CT.C447, 458878, C448 || CT.C448, 458879, C449 || CT.C449, 458880, C450 || CT.C450, 458881, C451 || CT.C451, 458885, C452 || CT.C452, 458887, C594 || CT.C594, 458888, C595 || CT.C595, 458889, C596 || CT.C596, 458890, C453 || CT.C453, 458891, C454 || CT.C454, 458896, C597 || CT.C597, 458897, C598 || CT.C598, 458898, C455 || CT.C455, 458899, C456 || CT.C456, 458900, C599 || CT.C599, 458907, C600 || CT.C600, 458915, C457 || CT.C457, 458934, C458 || CT.C458, 458935, C459 || CT.C459, 458939, C601 || CT.C601, 458960, C602 || CT.C602, 458961, C603 || CT.C603, 458962, C604 || CT.C604, 458963, C605 || CT.C605, 458964, C606 || CT.C606, 458967, C607 || CT.C607, 458968, C608 || CT.C608, 458969, C609 || CT.C609, 458976, C460 || CT.C460, 458977, C461 || CT.C461, 458978, C462 || CT.C462, 458979, C463 || CT.C463, 458980, C464 || CT.C464, 458981, C465 || CT.C465, 458982, C466 || CT.C466, 458983, C467 || CT.C467, 786528, C468 || CT.C468, 786529, C610 || CT.C610, 786543, C469 || CT.C469, 786544, C470 || CT.C470, 786546, C611 || CT.C611, 786547, C612 || CT.C612, 786548, C613 || CT.C613, 786549, C614 || CT.C614, 786563, C615 || CT.C615, 786572, C616 || CT.C616, 786573, C617 || CT.C617, 786580, C471 || CT.C471, 786588, C472 || CT.C472, 786589, C473 || CT.C473, 786608, C474 || CT.C474, 786610, C475 || CT.C475, 786611, C476 || CT.C476, 786612, C477 || CT.C477, 786613, C478 || CT.C478, 786614, C479 || CT.C479, 786615, C480 || CT.C480, 786616, C481 || CT.C481, 786637, C482 || CT.C482, 786639, C618 || CT.C618, 786661, C483 || CT.C483, 786819, C619 || CT.C619, 786820, C620 || CT.C620, 786822, C621 || CT.C621, 786826, C484 || CT.C484, 786829, C485 || CT.C485, 786830, C486 || CT.C486, 786834, C622 || CT.C622, 786836, C623 || CT.C623, 786838, C624 || CT.C624, 786844, C625 || CT.C625, 786846, C626 || CT.C626, 786847, C627 || CT.C627, 786850, C628 || CT.C628, 786855, C629 || CT.C629, 786859, C630 || CT.C630, 786862, C631 || CT.C631, 786865, C632 || CT.C632, 786891, C633 || CT.C633, 786871, C634 || CT.C634, 786945, C487 || CT.C487, 786947, C488 || CT.C488, 786951, C635 || CT.C635, 786952, C489 || CT.C489, 786977, C490 || CT.C490, 786979, C636 || CT.C636, 786980, C637 || CT.C637, 786981, C491 || CT.C491, 786982, C638 || CT.C638, 786983, C639 || CT.C639, 786986, C492 || CT.C492, 786989, C640 || CT.C640, 786990, C641 || CT.C641, 786994, C642 || CT.C642, 787065, C493 || CT.C493, 787081, C643 || CT.C643, 787083, C644 || CT.C644, 787084, C645 || CT.C645, 787103, C646 || CT.C646]);
    },
    get C647() {
      return C647 = dart.constMap(core.int, keyboard_key.PhysicalKeyboardKey, [0, C331 || CT.C331, 11, C332 || CT.C332, 8, C333 || CT.C333, 2, C334 || CT.C334, 14, C335 || CT.C335, 3, C336 || CT.C336, 5, C337 || CT.C337, 4, C338 || CT.C338, 34, C339 || CT.C339, 38, C340 || CT.C340, 40, C341 || CT.C341, 37, C342 || CT.C342, 46, C343 || CT.C343, 45, C344 || CT.C344, 31, C345 || CT.C345, 35, C346 || CT.C346, 12, C347 || CT.C347, 15, C348 || CT.C348, 1, C349 || CT.C349, 17, C350 || CT.C350, 32, C351 || CT.C351, 9, C352 || CT.C352, 13, C353 || CT.C353, 7, C354 || CT.C354, 16, C355 || CT.C355, 6, C356 || CT.C356, 18, C357 || CT.C357, 19, C358 || CT.C358, 20, C359 || CT.C359, 21, C360 || CT.C360, 23, C361 || CT.C361, 22, C362 || CT.C362, 26, C363 || CT.C363, 28, C364 || CT.C364, 25, C365 || CT.C365, 29, C366 || CT.C366, 36, C367 || CT.C367, 53, C368 || CT.C368, 51, C369 || CT.C369, 48, C370 || CT.C370, 49, C371 || CT.C371, 27, C372 || CT.C372, 24, C373 || CT.C373, 33, C374 || CT.C374, 30, C375 || CT.C375, 42, C376 || CT.C376, 41, C377 || CT.C377, 39, C378 || CT.C378, 50, C379 || CT.C379, 43, C380 || CT.C380, 47, C381 || CT.C381, 44, C382 || CT.C382, 57, C383 || CT.C383, 122, C384 || CT.C384, 120, C385 || CT.C385, 99, C386 || CT.C386, 118, C387 || CT.C387, 96, C388 || CT.C388, 97, C389 || CT.C389, 98, C390 || CT.C390, 100, C391 || CT.C391, 101, C392 || CT.C392, 109, C393 || CT.C393, 103, C394 || CT.C394, 111, C395 || CT.C395, 114, C399 || CT.C399, 115, C400 || CT.C400, 116, C401 || CT.C401, 117, C402 || CT.C402, 119, C403 || CT.C403, 121, C404 || CT.C404, 124, C405 || CT.C405, 123, C406 || CT.C406, 125, C407 || CT.C407, 126, C408 || CT.C408, 71, C409 || CT.C409, 75, C410 || CT.C410, 67, C411 || CT.C411, 78, C412 || CT.C412, 69, C413 || CT.C413, 76, C414 || CT.C414, 83, C415 || CT.C415, 84, C416 || CT.C416, 85, C417 || CT.C417, 86, C418 || CT.C418, 87, C419 || CT.C419, 88, C420 || CT.C420, 89, C421 || CT.C421, 91, C422 || CT.C422, 92, C423 || CT.C423, 82, C424 || CT.C424, 65, C425 || CT.C425, 10, C592 || CT.C592, 110, C426 || CT.C426, 81, C428 || CT.C428, 105, C429 || CT.C429, 107, C430 || CT.C430, 113, C431 || CT.C431, 106, C432 || CT.C432, 64, C433 || CT.C433, 79, C434 || CT.C434, 80, C435 || CT.C435, 90, C436 || CT.C436, 74, C449 || CT.C449, 72, C450 || CT.C450, 73, C451 || CT.C451, 95, C452 || CT.C452, 94, C594 || CT.C594, 104, C595 || CT.C595, 93, C596 || CT.C596, 59, C460 || CT.C460, 56, C461 || CT.C461, 58, C462 || CT.C462, 55, C463 || CT.C463, 62, C464 || CT.C464, 60, C465 || CT.C465, 61, C466 || CT.C466, 54, C467 || CT.C467]);
    },
    get C648() {
      return C648 = dart.constMap(core.int, keyboard_key.LogicalKeyboardKey, [75, C260 || CT.C260, 67, C261 || CT.C261, 78, C262 || CT.C262, 69, C263 || CT.C263, 83, C265 || CT.C265, 84, C266 || CT.C266, 85, C267 || CT.C267, 86, C268 || CT.C268, 87, C269 || CT.C269, 88, C270 || CT.C270, 89, C271 || CT.C271, 91, C272 || CT.C272, 92, C273 || CT.C273, 82, C274 || CT.C274, 65, C275 || CT.C275, 81, C278 || CT.C278, 95, C286 || CT.C286]);
    },
    get C649() {
      return C649 = dart.constMap(core.int, keyboard_key.LogicalKeyboardKey, [65, C181 || CT.C181, 66, C182 || CT.C182, 67, C183 || CT.C183, 68, C184 || CT.C184, 69, C185 || CT.C185, 70, C186 || CT.C186, 71, C187 || CT.C187, 72, C188 || CT.C188, 73, C189 || CT.C189, 74, C190 || CT.C190, 75, C191 || CT.C191, 76, C192 || CT.C192, 77, C193 || CT.C193, 78, C194 || CT.C194, 79, C195 || CT.C195, 80, C196 || CT.C196, 81, C197 || CT.C197, 82, C198 || CT.C198, 83, C199 || CT.C199, 84, C200 || CT.C200, 85, C201 || CT.C201, 86, C202 || CT.C202, 87, C203 || CT.C203, 88, C204 || CT.C204, 89, C205 || CT.C205, 90, C206 || CT.C206, 49, C207 || CT.C207, 50, C208 || CT.C208, 51, C209 || CT.C209, 52, C210 || CT.C210, 53, C211 || CT.C211, 54, C212 || CT.C212, 55, C213 || CT.C213, 56, C214 || CT.C214, 57, C215 || CT.C215, 48, C216 || CT.C216, 257, C217 || CT.C217, 256, C218 || CT.C218, 259, C219 || CT.C219, 258, C220 || CT.C220, 32, C221 || CT.C221, 45, C222 || CT.C222, 61, C223 || CT.C223, 91, C224 || CT.C224, 93, C225 || CT.C225, 92, C226 || CT.C226, 59, C227 || CT.C227, 39, C228 || CT.C228, 96, C229 || CT.C229, 44, C230 || CT.C230, 46, C231 || CT.C231, 47, C232 || CT.C232, 280, C233 || CT.C233, 290, C234 || CT.C234, 291, C235 || CT.C235, 292, C236 || CT.C236, 293, C237 || CT.C237, 294, C238 || CT.C238, 295, C239 || CT.C239, 296, C240 || CT.C240, 297, C241 || CT.C241, 298, C242 || CT.C242, 299, C243 || CT.C243, 300, C244 || CT.C244, 301, C245 || CT.C245, 283, C246 || CT.C246, 284, C248 || CT.C248, 260, C249 || CT.C249, 268, C250 || CT.C250, 266, C251 || CT.C251, 261, C252 || CT.C252, 269, C253 || CT.C253, 267, C254 || CT.C254, 262, C255 || CT.C255, 263, C256 || CT.C256, 264, C257 || CT.C257, 265, C258 || CT.C258, 282, C259 || CT.C259, 331, C260 || CT.C260, 332, C261 || CT.C261, 334, C263 || CT.C263, 335, C264 || CT.C264, 321, C265 || CT.C265, 322, C266 || CT.C266, 323, C267 || CT.C267, 324, C268 || CT.C268, 325, C269 || CT.C269, 326, C270 || CT.C270, 327, C271 || CT.C271, 328, C272 || CT.C272, 329, C273 || CT.C273, 320, C274 || CT.C274, 330, C275 || CT.C275, 348, C276 || CT.C276, 336, C278 || CT.C278, 302, C508 || CT.C508, 303, C509 || CT.C509, 304, C510 || CT.C510, 305, C511 || CT.C511, 306, C512 || CT.C512, 307, C513 || CT.C513, 308, C514 || CT.C514, 309, C515 || CT.C515, 310, C516 || CT.C516, 311, C517 || CT.C517, 312, C518 || CT.C518, 341, C291 || CT.C291, 340, C292 || CT.C292, 342, C293 || CT.C293, 345, C295 || CT.C295, 344, C296 || CT.C296, 346, C297 || CT.C297]);
    },
    get C650() {
      return C650 = dart.constMap(core.int, keyboard_key.LogicalKeyboardKey, [331, C260 || CT.C260, 332, C261 || CT.C261, 334, C263 || CT.C263, 321, C265 || CT.C265, 322, C266 || CT.C266, 323, C267 || CT.C267, 324, C268 || CT.C268, 325, C269 || CT.C269, 326, C270 || CT.C270, 327, C271 || CT.C271, 328, C272 || CT.C272, 329, C273 || CT.C273, 320, C274 || CT.C274, 330, C275 || CT.C275, 336, C278 || CT.C278]);
    },
    get C651() {
      return C651 = dart.constMap(core.int, keyboard_key.PhysicalKeyboardKey, [150, C329 || CT.C329, 151, C330 || CT.C330, 235, C587 || CT.C587, 38, C331 || CT.C331, 56, C332 || CT.C332, 54, C333 || CT.C333, 40, C334 || CT.C334, 26, C335 || CT.C335, 41, C336 || CT.C336, 42, C337 || CT.C337, 43, C338 || CT.C338, 31, C339 || CT.C339, 44, C340 || CT.C340, 45, C341 || CT.C341, 46, C342 || CT.C342, 58, C343 || CT.C343, 57, C344 || CT.C344, 32, C345 || CT.C345, 33, C346 || CT.C346, 24, C347 || CT.C347, 27, C348 || CT.C348, 39, C349 || CT.C349, 28, C350 || CT.C350, 30, C351 || CT.C351, 55, C352 || CT.C352, 25, C353 || CT.C353, 53, C354 || CT.C354, 29, C355 || CT.C355, 52, C356 || CT.C356, 10, C357 || CT.C357, 11, C358 || CT.C358, 12, C359 || CT.C359, 13, C360 || CT.C360, 14, C361 || CT.C361, 15, C362 || CT.C362, 16, C363 || CT.C363, 17, C364 || CT.C364, 18, C365 || CT.C365, 19, C366 || CT.C366, 36, C367 || CT.C367, 9, C368 || CT.C368, 22, C369 || CT.C369, 23, C370 || CT.C370, 65, C371 || CT.C371, 20, C372 || CT.C372, 21, C373 || CT.C373, 34, C374 || CT.C374, 35, C375 || CT.C375, 51, C376 || CT.C376, 47, C377 || CT.C377, 48, C378 || CT.C378, 49, C379 || CT.C379, 59, C380 || CT.C380, 60, C381 || CT.C381, 61, C382 || CT.C382, 66, C383 || CT.C383, 67, C384 || CT.C384, 68, C385 || CT.C385, 69, C386 || CT.C386, 70, C387 || CT.C387, 71, C388 || CT.C388, 72, C389 || CT.C389, 73, C390 || CT.C390, 74, C391 || CT.C391, 75, C392 || CT.C392, 76, C393 || CT.C393, 95, C394 || CT.C394, 96, C395 || CT.C395, 107, C396 || CT.C396, 78, C397 || CT.C397, 127, C398 || CT.C398, 118, C399 || CT.C399, 110, C400 || CT.C400, 112, C401 || CT.C401, 119, C402 || CT.C402, 115, C403 || CT.C403, 117, C404 || CT.C404, 114, C405 || CT.C405, 113, C406 || CT.C406, 116, C407 || CT.C407, 111, C408 || CT.C408, 77, C409 || CT.C409, 106, C410 || CT.C410, 63, C411 || CT.C411, 82, C412 || CT.C412, 86, C413 || CT.C413, 104, C414 || CT.C414, 87, C415 || CT.C415, 88, C416 || CT.C416, 89, C417 || CT.C417, 83, C418 || CT.C418, 84, C419 || CT.C419, 85, C420 || CT.C420, 79, C421 || CT.C421, 80, C422 || CT.C422, 81, C423 || CT.C423, 90, C424 || CT.C424, 91, C425 || CT.C425, 94, C592 || CT.C592, 135, C426 || CT.C426, 124, C427 || CT.C427, 125, C428 || CT.C428, 191, C429 || CT.C429, 192, C430 || CT.C430, 193, C431 || CT.C431, 194, C432 || CT.C432, 195, C433 || CT.C433, 196, C434 || CT.C434, 197, C435 || CT.C435, 198, C436 || CT.C436, 199, C437 || CT.C437, 200, C438 || CT.C438, 201, C439 || CT.C439, 202, C440 || CT.C440, 142, C441 || CT.C441, 146, C442 || CT.C442, 140, C593 || CT.C593, 137, C443 || CT.C443, 139, C444 || CT.C444, 145, C445 || CT.C445, 141, C446 || CT.C446, 143, C447 || CT.C447, 144, C448 || CT.C448, 121, C449 || CT.C449, 123, C450 || CT.C450, 122, C451 || CT.C451, 129, C452 || CT.C452, 97, C594 || CT.C594, 101, C595 || CT.C595, 132, C596 || CT.C596, 100, C453 || CT.C453, 102, C454 || CT.C454, 130, C597 || CT.C597, 131, C598 || CT.C598, 98, C455 || CT.C455, 99, C456 || CT.C456, 93, C599 || CT.C599, 187, C458 || CT.C458, 188, C459 || CT.C459, 126, C607 || CT.C607, 37, C460 || CT.C460, 50, C461 || CT.C461, 64, C462 || CT.C462, 133, C463 || CT.C463, 105, C464 || CT.C464, 62, C465 || CT.C465, 108, C466 || CT.C466, 134, C467 || CT.C467, 366, C468 || CT.C468, 378, C610 || CT.C610, 233, C469 || CT.C469, 232, C470 || CT.C470, 439, C611 || CT.C611, 600, C612 || CT.C612, 601, C613 || CT.C613, 252, C614 || CT.C614, 413, C615 || CT.C615, 177, C616 || CT.C616, 370, C617 || CT.C617, 182, C471 || CT.C471, 418, C472 || CT.C472, 419, C473 || CT.C473, 215, C474 || CT.C474, 175, C475 || CT.C475, 216, C476 || CT.C476, 176, C477 || CT.C477, 171, C478 || CT.C478, 173, C479 || CT.C479, 174, C480 || CT.C480, 169, C481 || CT.C481, 172, C482 || CT.C482, 590, C618 || CT.C618, 217, C483 || CT.C483, 179, C619 || CT.C619, 429, C620 || CT.C620, 431, C621 || CT.C621, 163, C484 || CT.C484, 437, C485 || CT.C485, 405, C486 || CT.C486, 148, C622 || CT.C622, 152, C623 || CT.C623, 158, C624 || CT.C624, 441, C625 || CT.C625, 160, C626 || CT.C626, 587, C627 || CT.C627, 588, C628 || CT.C628, 243, C629 || CT.C629, 440, C630 || CT.C630, 382, C631 || CT.C631, 589, C632 || CT.C632, 591, C633 || CT.C633, 400, C634 || CT.C634, 189, C487 || CT.C487, 214, C488 || CT.C488, 242, C635 || CT.C635, 218, C489 || CT.C489, 225, C490 || CT.C490, 180, C636 || CT.C636, 166, C637 || CT.C637, 167, C491 || CT.C491, 136, C638 || CT.C638, 181, C639 || CT.C639, 164, C492 || CT.C492, 426, C640 || CT.C640, 427, C641 || CT.C641, 380, C642 || CT.C642, 190, C493 || CT.C493, 240, C643 || CT.C643, 241, C644 || CT.C644, 239, C645 || CT.C645, 128, C646 || CT.C646]);
    },
    get C652() {
      return C652 = dart.const({
        __proto__: velocity_tracker.Velocity.prototype,
        pixelsPerSecond: C130 || CT.C130
      });
    },
    get C653() {
      return C653 = dart.const({
        __proto__: diagnostics._NoDefaultValue.prototype
      });
    },
    get C654() {
      return C654 = dart.const({
        __proto__: diagnostics.DiagnosticLevel.prototype,
        [_name$7]: "DiagnosticLevel.info",
        index: 3
      });
    },
    get C655() {
      return C655 = dart.constList(["null"], core.String);
    },
    get C656() {
      return C656 = dart.const({
        __proto__: diagnostics.DiagnosticsTreeStyle.prototype,
        [_name$7]: "DiagnosticsTreeStyle.singleLine",
        index: 8
      });
    },
    get C657() {
      return C657 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.none",
        index: 0
      });
    },
    get C658() {
      return C658 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.hardEdge",
        index: 1
      });
    },
    get C659() {
      return C659 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.antiAlias",
        index: 2
      });
    },
    get C660() {
      return C660 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.antiAliasWithSaveLayer",
        index: 3
      });
    },
    get C661() {
      return C661 = dart.const({
        __proto__: tolerance.Tolerance.prototype,
        velocity: 0.001,
        time: 0.001,
        distance: 0.001
      });
    },
    get C662() {
      return C662 = dart.const({
        __proto__: scale._ScaleState.prototype,
        [_name$8]: "_ScaleState.ready",
        index: 0
      });
    },
    get C663() {
      return C663 = dart.const({
        __proto__: scale._ScaleState.prototype,
        [_name$8]: "_ScaleState.possible",
        index: 1
      });
    },
    get C664() {
      return C664 = dart.const({
        __proto__: scale._ScaleState.prototype,
        [_name$8]: "_ScaleState.accepted",
        index: 2
      });
    },
    get C665() {
      return C665 = dart.const({
        __proto__: scale._ScaleState.prototype,
        [_name$8]: "_ScaleState.started",
        index: 3
      });
    },
    get C666() {
      return C666 = dart.constList([C662 || CT.C662, C663 || CT.C663, C664 || CT.C664, C665 || CT.C665], scale._ScaleState);
    },
    get C667() {
      return C667 = dart.const({
        __proto__: ui.Radius.prototype,
        y: 0,
        x: 0
      });
    },
    get C668() {
      return C668 = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        bottomRight: C667 || CT.C667,
        bottomLeft: C667 || CT.C667,
        topRight: C667 || CT.C667,
        topLeft: C667 || CT.C667
      });
    },
    get C669() {
      return C669 = dart.const({
        __proto__: border_radius.BorderRadiusDirectional.prototype,
        bottomEnd: C667 || CT.C667,
        bottomStart: C667 || CT.C667,
        topEnd: C667 || CT.C667,
        topStart: C667 || CT.C667
      });
    },
    get C670() {
      return C670 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$9]: "_ForceState.ready",
        index: 0
      });
    },
    get C671() {
      return C671 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$9]: "_ForceState.possible",
        index: 1
      });
    },
    get C672() {
      return C672 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$9]: "_ForceState.accepted",
        index: 2
      });
    },
    get C673() {
      return C673 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$9]: "_ForceState.started",
        index: 3
      });
    },
    get C674() {
      return C674 = dart.const({
        __proto__: force_press._ForceState.prototype,
        [_name$9]: "_ForceState.peaked",
        index: 4
      });
    },
    get C675() {
      return C675 = dart.constList([C670 || CT.C670, C671 || CT.C671, C672 || CT.C672, C673 || CT.C673, C674 || CT.C674], force_press._ForceState);
    },
    get C676() {
      return C676 = dart.fn(force_press.ForcePressGestureRecognizer._inverseLerp, doubleAnddoubleAnddoubleTodouble());
    },
    get C677() {
      return C677 = dart.const({
        __proto__: strut_style.StrutStyle.prototype,
        debugLabel: null,
        forceStrutHeight: null,
        leading: 0,
        fontStyle: null,
        fontWeight: null,
        height: 0,
        fontSize: null,
        [_package]: null,
        [_fontFamilyFallback]: null,
        fontFamily: null
      });
    },
    get C678() {
      return C678 = dart.const({
        __proto__: priority.Priority.prototype,
        [_value$0]: 0
      });
    },
    get C679() {
      return C679 = dart.const({
        __proto__: priority.Priority.prototype,
        [_value$0]: 100000
      });
    },
    get C680() {
      return C680 = dart.const({
        __proto__: priority.Priority.prototype,
        [_value$0]: 200000
      });
    },
    get C681() {
      return C681 = dart.const({
        __proto__: fractional_offset.FractionalOffset.prototype,
        y: -1,
        x: -1
      });
    },
    get C682() {
      return C682 = dart.const({
        __proto__: fractional_offset.FractionalOffset.prototype,
        y: -1,
        x: 0
      });
    },
    get C683() {
      return C683 = dart.const({
        __proto__: fractional_offset.FractionalOffset.prototype,
        y: -1,
        x: 1
      });
    },
    get C684() {
      return C684 = dart.const({
        __proto__: fractional_offset.FractionalOffset.prototype,
        y: 0,
        x: -1
      });
    },
    get C685() {
      return C685 = dart.const({
        __proto__: fractional_offset.FractionalOffset.prototype,
        y: 0,
        x: 0
      });
    },
    get C686() {
      return C686 = dart.const({
        __proto__: fractional_offset.FractionalOffset.prototype,
        y: 0,
        x: 1
      });
    },
    get C687() {
      return C687 = dart.const({
        __proto__: fractional_offset.FractionalOffset.prototype,
        y: 1,
        x: -1
      });
    },
    get C688() {
      return C688 = dart.const({
        __proto__: fractional_offset.FractionalOffset.prototype,
        y: 1,
        x: 0
      });
    },
    get C689() {
      return C689 = dart.const({
        __proto__: fractional_offset.FractionalOffset.prototype,
        y: 1,
        x: 1
      });
    },
    get C690() {
      return C690 = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [_name$10]: "BoxFit.fill",
        index: 0
      });
    },
    get C691() {
      return C691 = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [_name$10]: "BoxFit.contain",
        index: 1
      });
    },
    get C692() {
      return C692 = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [_name$10]: "BoxFit.cover",
        index: 2
      });
    },
    get C693() {
      return C693 = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [_name$10]: "BoxFit.fitWidth",
        index: 3
      });
    },
    get C694() {
      return C694 = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [_name$10]: "BoxFit.fitHeight",
        index: 4
      });
    },
    get C695() {
      return C695 = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [_name$10]: "BoxFit.none",
        index: 5
      });
    },
    get C696() {
      return C696 = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [_name$10]: "BoxFit.scaleDown",
        index: 6
      });
    },
    get C697() {
      return C697 = dart.constList([C690 || CT.C690, C691 || CT.C691, C692 || CT.C692, C693 || CT.C693, C694 || CT.C694, C695 || CT.C695, C696 || CT.C696], box_fit.BoxFit);
    },
    get C699() {
      return C699 = dart.const({
        __proto__: ui.Size.prototype,
        [_dy]: 0,
        [_dx]: 0
      });
    },
    get C698() {
      return C698 = dart.const({
        __proto__: box_fit.FittedSizes.prototype,
        destination: C699 || CT.C699,
        source: C699 || CT.C699
      });
    },
    get C700() {
      return C700 = dart.const({
        __proto__: monodrag._DragState.prototype,
        [_name$11]: "_DragState.ready",
        index: 0
      });
    },
    get C701() {
      return C701 = dart.const({
        __proto__: monodrag._DragState.prototype,
        [_name$11]: "_DragState.possible",
        index: 1
      });
    },
    get C702() {
      return C702 = dart.const({
        __proto__: monodrag._DragState.prototype,
        [_name$11]: "_DragState.accepted",
        index: 2
      });
    },
    get C703() {
      return C703 = dart.constList([C700 || CT.C700, C701 || CT.C701, C702 || CT.C702], monodrag._DragState);
    }
  });
  let C0;
  text_editing.TextRange = class TextRange extends core.Object {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get isValid() {
      return dart.notNull(this.start) >= 0 && dart.notNull(this.end) >= 0;
    }
    get isCollapsed() {
      return this.start == this.end;
    }
    get isNormalized() {
      return dart.notNull(this.end) >= dart.notNull(this.start);
    }
    textBefore(text) {
      if (!dart.test(this.isNormalized)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 58, 12, "isNormalized");
      return text[$substring](0, this.start);
    }
    textAfter(text) {
      if (!dart.test(this.isNormalized)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 64, 12, "isNormalized");
      return text[$substring](this.end);
    }
    textInside(text) {
      if (!dart.test(this.isNormalized)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 70, 12, "isNormalized");
      return text[$substring](this.start, this.end);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!text_editing.TextRange.is(other)) return false;
      let typedOther = text_editing.TextRange._check(other);
      return typedOther.start == this.start && typedOther.end == this.end;
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.start), dart.hashCode(this.end));
    }
    toString() {
      return "TextRange(start: " + dart.str(this.start) + ", end: " + dart.str(this.end) + ")";
    }
  };
  (text_editing.TextRange.new = function(opts) {
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    this[start$] = start;
    this[end$] = end;
    if (!(start != null && dart.notNull(start) >= -1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 23, 16, "start != null && start >= -1");
    if (!(end != null && dart.notNull(end) >= -1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 24, 16, "end != null && end >= -1");
    ;
  }).prototype = text_editing.TextRange.prototype;
  (text_editing.TextRange.collapsed = function(offset) {
    if (!(offset != null && dart.notNull(offset) >= -1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 30, 16, "offset != null && offset >= -1");
    this[start$] = offset;
    this[end$] = offset;
    ;
  }).prototype = text_editing.TextRange.prototype;
  dart.addTypeTests(text_editing.TextRange);
  const start$ = Symbol("TextRange.start");
  const end$ = Symbol("TextRange.end");
  dart.setMethodSignature(text_editing.TextRange, () => ({
    __proto__: dart.getMethods(text_editing.TextRange.__proto__),
    textBefore: dart.fnType(core.String, [core.String]),
    textAfter: dart.fnType(core.String, [core.String]),
    textInside: dart.fnType(core.String, [core.String])
  }));
  dart.setGetterSignature(text_editing.TextRange, () => ({
    __proto__: dart.getGetters(text_editing.TextRange.__proto__),
    isValid: core.bool,
    isCollapsed: core.bool,
    isNormalized: core.bool
  }));
  dart.setLibraryUri(text_editing.TextRange, "package:flutter_web/src/services/text_editing.dart");
  dart.setFieldSignature(text_editing.TextRange, () => ({
    __proto__: dart.getFields(text_editing.TextRange.__proto__),
    start: dart.finalFieldType(core.int),
    end: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(text_editing.TextRange, ['_equals', 'toString']);
  dart.defineExtensionAccessors(text_editing.TextRange, ['hashCode']);
  dart.defineLazy(text_editing.TextRange, {
    /*text_editing.TextRange.empty*/get empty() {
      return C0 || CT.C0;
    }
  });
  const _name = dart.privateName(ui, "_name");
  let C1;
  text_editing.TextSelection = class TextSelection extends text_editing.TextRange {
    get baseOffset() {
      return this[baseOffset$];
    }
    set baseOffset(value) {
      super.baseOffset = value;
    }
    get extentOffset() {
      return this[extentOffset$];
    }
    set extentOffset(value) {
      super.extentOffset = value;
    }
    get affinity() {
      return this[affinity$];
    }
    set affinity(value) {
      super.affinity = value;
    }
    get isDirectional() {
      return this[isDirectional$];
    }
    set isDirectional(value) {
      super.isDirectional = value;
    }
    get base() {
      return new ui.TextPosition.new({offset: this.baseOffset, affinity: this.affinity});
    }
    get extent() {
      return new ui.TextPosition.new({offset: this.extentOffset, affinity: this.affinity});
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(baseOffset: " + dart.str(this.baseOffset) + ", extentOffset: " + dart.str(this.extentOffset) + ", affinity: " + dart.str(this.affinity) + ", isDirectional: " + dart.str(this.isDirectional) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!text_editing.TextSelection.is(other)) return false;
      let typedOther = text_editing.TextSelection._check(other);
      return typedOther.baseOffset == this.baseOffset && typedOther.extentOffset == this.extentOffset && dart.equals(typedOther.affinity, this.affinity) && dart.equals(typedOther.isDirectional, this.isDirectional);
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.baseOffset), dart.hashCode(this.extentOffset), dart.hashCode(this.affinity), dart.hashCode(this.isDirectional));
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1;
      let baseOffset = opts && 'baseOffset' in opts ? opts.baseOffset : null;
      let extentOffset = opts && 'extentOffset' in opts ? opts.extentOffset : null;
      let affinity = opts && 'affinity' in opts ? opts.affinity : null;
      let isDirectional = opts && 'isDirectional' in opts ? opts.isDirectional : null;
      return new text_editing.TextSelection.new({baseOffset: (t0 = baseOffset, t0 == null ? this.baseOffset : t0), extentOffset: (t0$ = extentOffset, t0$ == null ? this.extentOffset : t0$), affinity: (t0$0 = affinity, t0$0 == null ? this.affinity : t0$0), isDirectional: (t0$1 = isDirectional, t0$1 == null ? this.isDirectional : t0$1)});
    }
  };
  (text_editing.TextSelection.new = function(opts) {
    let baseOffset = opts && 'baseOffset' in opts ? opts.baseOffset : null;
    let extentOffset = opts && 'extentOffset' in opts ? opts.extentOffset : null;
    let affinity = opts && 'affinity' in opts ? opts.affinity : C1 || CT.C1;
    let isDirectional = opts && 'isDirectional' in opts ? opts.isDirectional : false;
    this[baseOffset$] = baseOffset;
    this[extentOffset$] = extentOffset;
    this[affinity$] = affinity;
    this[isDirectional$] = isDirectional;
    text_editing.TextSelection.__proto__.new.call(this, {start: dart.notNull(baseOffset) < dart.notNull(extentOffset) ? baseOffset : extentOffset, end: dart.notNull(baseOffset) < dart.notNull(extentOffset) ? extentOffset : baseOffset});
    ;
  }).prototype = text_editing.TextSelection.prototype;
  (text_editing.TextSelection.collapsed = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let affinity = opts && 'affinity' in opts ? opts.affinity : C1 || CT.C1;
    this[affinity$] = affinity;
    this[baseOffset$] = offset;
    this[extentOffset$] = offset;
    this[isDirectional$] = false;
    text_editing.TextSelection.__proto__.collapsed.call(this, offset);
    ;
  }).prototype = text_editing.TextSelection.prototype;
  (text_editing.TextSelection.fromPosition = function(position) {
    this[baseOffset$] = position.offset;
    this[extentOffset$] = position.offset;
    this[affinity$] = position.affinity;
    this[isDirectional$] = false;
    text_editing.TextSelection.__proto__.collapsed.call(this, position.offset);
    ;
  }).prototype = text_editing.TextSelection.prototype;
  dart.addTypeTests(text_editing.TextSelection);
  const baseOffset$ = Symbol("TextSelection.baseOffset");
  const extentOffset$ = Symbol("TextSelection.extentOffset");
  const affinity$ = Symbol("TextSelection.affinity");
  const isDirectional$ = Symbol("TextSelection.isDirectional");
  dart.setMethodSignature(text_editing.TextSelection, () => ({
    __proto__: dart.getMethods(text_editing.TextSelection.__proto__),
    copyWith: dart.fnType(text_editing.TextSelection, [], {affinity: ui.TextAffinity, baseOffset: core.int, extentOffset: core.int, isDirectional: core.bool})
  }));
  dart.setGetterSignature(text_editing.TextSelection, () => ({
    __proto__: dart.getGetters(text_editing.TextSelection.__proto__),
    base: ui.TextPosition,
    extent: ui.TextPosition
  }));
  dart.setLibraryUri(text_editing.TextSelection, "package:flutter_web/src/services/text_editing.dart");
  dart.setFieldSignature(text_editing.TextSelection, () => ({
    __proto__: dart.getFields(text_editing.TextSelection.__proto__),
    baseOffset: dart.finalFieldType(core.int),
    extentOffset: dart.finalFieldType(core.int),
    affinity: dart.finalFieldType(ui.TextAffinity),
    isDirectional: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(text_editing.TextSelection, ['toString', '_equals']);
  dart.defineExtensionAccessors(text_editing.TextSelection, ['hashCode']);
  const _x = dart.privateName(alignment, "_x");
  const _start = dart.privateName(alignment, "_start");
  const _y = dart.privateName(alignment, "_y");
  alignment.AlignmentGeometry = class AlignmentGeometry extends core.Object {
    add(other) {
      return new alignment._MixedAlignment.new(dart.notNull(this[_x]) + dart.notNull(other[_x]), dart.notNull(this[_start]) + dart.notNull(other[_start]), dart.notNull(this[_y]) + dart.notNull(other[_y]));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 91, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      if (alignment.Alignment.is(a) && alignment.Alignment.is(b)) return alignment.Alignment.lerp(a, b, t);
      if (alignment.AlignmentDirectional.is(a) && alignment.AlignmentDirectional.is(b)) return alignment.AlignmentDirectional.lerp(a, b, t);
      return new alignment._MixedAlignment.new(ui.lerpDouble(a[_x], b[_x], t), ui.lerpDouble(a[_start], b[_start], t), ui.lerpDouble(a[_y], b[_y], t));
    }
    toString() {
      if (this[_start] === 0.0) return alignment.Alignment._stringify(this[_x], this[_y]);
      if (this[_x] === 0.0) return alignment.AlignmentDirectional._stringify(this[_start], this[_y]);
      return dart.notNull(alignment.Alignment._stringify(this[_x], this[_y])) + " + " + dart.notNull(alignment.AlignmentDirectional._stringify(this[_start], 0.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (!alignment.AlignmentGeometry.is(other)) return false;
      let typedOther = alignment.AlignmentGeometry._check(other);
      return this[_x] == typedOther[_x] && this[_start] == typedOther[_start] && this[_y] == typedOther[_y];
    }
    get hashCode() {
      return ui.hashValues(this[_x], this[_start], this[_y]);
    }
  };
  (alignment.AlignmentGeometry.new = function() {
    ;
  }).prototype = alignment.AlignmentGeometry.prototype;
  dart.addTypeTests(alignment.AlignmentGeometry);
  dart.setMethodSignature(alignment.AlignmentGeometry, () => ({
    __proto__: dart.getMethods(alignment.AlignmentGeometry.__proto__),
    add: dart.fnType(alignment.AlignmentGeometry, [alignment.AlignmentGeometry])
  }));
  dart.setLibraryUri(alignment.AlignmentGeometry, "package:flutter_web/src/painting/alignment.dart");
  dart.defineExtensionMethods(alignment.AlignmentGeometry, ['toString', '_equals']);
  dart.defineExtensionAccessors(alignment.AlignmentGeometry, ['hashCode']);
  let C2;
  let C3;
  let C4;
  let C5;
  let C6;
  let C7;
  let C8;
  let C9;
  let C10;
  alignment.Alignment = class Alignment extends alignment.AlignmentGeometry {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    get [_x]() {
      return this.x;
    }
    get [_start]() {
      return 0.0;
    }
    get [_y]() {
      return this.y;
    }
    add(other) {
      if (alignment.Alignment.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new alignment.Alignment.new(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['+'](other) {
      return new alignment.Alignment.new(dart.notNull(this.x) + dart.notNull(other.x), dart.notNull(this.y) + dart.notNull(other.y));
    }
    _negate() {
      return new alignment.Alignment.new(-dart.notNull(this.x), -dart.notNull(this.y));
    }
    ['*'](other) {
      return new alignment.Alignment.new(dart.notNull(this.x) * dart.notNull(other), dart.notNull(this.y) * dart.notNull(other));
    }
    ['/'](other) {
      return new alignment.Alignment.new(dart.notNull(this.x) / dart.notNull(other), dart.notNull(this.y) / dart.notNull(other));
    }
    ['~/'](other) {
      return new alignment.Alignment.new((dart.notNull(this.x) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this.y) / dart.notNull(other))[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new alignment.Alignment.new(this.x[$modulo](other), this.y[$modulo](other));
    }
    alongOffset(other) {
      let centerX = dart.notNull(other.dx) / 2.0;
      let centerY = dart.notNull(other.dy) / 2.0;
      return new ui.Offset.new(centerX + dart.notNull(this.x) * centerX, centerY + dart.notNull(this.y) * centerY);
    }
    alongSize(other) {
      let centerX = dart.notNull(other.width) / 2.0;
      let centerY = dart.notNull(other.height) / 2.0;
      return new ui.Offset.new(centerX + dart.notNull(this.x) * centerX, centerY + dart.notNull(this.y) * centerY);
    }
    withinRect(rect) {
      let halfWidth = dart.notNull(rect.width) / 2.0;
      let halfHeight = dart.notNull(rect.height) / 2.0;
      return new ui.Offset.new(dart.notNull(rect.left) + halfWidth + dart.notNull(this.x) * halfWidth, dart.notNull(rect.top) + halfHeight + dart.notNull(this.y) * halfHeight);
    }
    inscribe(size, rect) {
      let halfWidthDelta = (dart.notNull(rect.width) - dart.notNull(size.width)) / 2.0;
      let halfHeightDelta = (dart.notNull(rect.height) - dart.notNull(size.height)) / 2.0;
      return new ui.Rect.fromLTWH(dart.notNull(rect.left) + halfWidthDelta + dart.notNull(this.x) * halfWidthDelta, dart.notNull(rect.top) + halfHeightDelta + dart.notNull(this.y) * halfHeightDelta, size.width, size.height);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 338, 12, "ert(t != ");
      if (a == null && b == null) return null;
      if (a == null) return new alignment.Alignment.new(ui.lerpDouble(0.0, b.x, t), ui.lerpDouble(0.0, b.y, t));
      if (b == null) return new alignment.Alignment.new(ui.lerpDouble(a.x, 0.0, t), ui.lerpDouble(a.y, 0.0, t));
      return new alignment.Alignment.new(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t));
    }
    resolve(direction) {
      return this;
    }
    static _stringify(x, y) {
      if (x === -1.0 && y === -1.0) return "topLeft";
      if (x === 0.0 && y === -1.0) return "topCenter";
      if (x === 1.0 && y === -1.0) return "topRight";
      if (x === -1.0 && y === 0.0) return "centerLeft";
      if (x === 0.0 && y === 0.0) return "center";
      if (x === 1.0 && y === 0.0) return "centerRight";
      if (x === -1.0 && y === 1.0) return "bottomLeft";
      if (x === 0.0 && y === 1.0) return "bottomCenter";
      if (x === 1.0 && y === 1.0) return "bottomRight";
      return "Alignment(" + x[$toStringAsFixed](1) + ", " + y[$toStringAsFixed](1) + ")";
    }
    toString() {
      return alignment.Alignment._stringify(this.x, this.y);
    }
  };
  (alignment.Alignment.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    if (!(x != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 188, 14, "x != null");
    if (!(y != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 189, 14, "y != null");
    alignment.Alignment.__proto__.new.call(this);
    ;
  }).prototype = alignment.Alignment.prototype;
  dart.addTypeTests(alignment.Alignment);
  const x$ = Symbol("Alignment.x");
  const y$ = Symbol("Alignment.y");
  dart.setMethodSignature(alignment.Alignment, () => ({
    __proto__: dart.getMethods(alignment.Alignment.__proto__),
    '-': dart.fnType(alignment.Alignment, [alignment.Alignment]),
    '+': dart.fnType(alignment.Alignment, [alignment.Alignment]),
    _negate: dart.fnType(alignment.Alignment, []),
    '*': dart.fnType(alignment.Alignment, [core.double]),
    '/': dart.fnType(alignment.Alignment, [core.double]),
    '~/': dart.fnType(alignment.Alignment, [core.double]),
    '%': dart.fnType(alignment.Alignment, [core.double]),
    alongOffset: dart.fnType(ui.Offset, [ui.Offset]),
    alongSize: dart.fnType(ui.Offset, [ui.Size]),
    withinRect: dart.fnType(ui.Offset, [ui.Rect]),
    inscribe: dart.fnType(ui.Rect, [ui.Size, ui.Rect]),
    resolve: dart.fnType(alignment.Alignment, [ui.TextDirection])
  }));
  dart.setGetterSignature(alignment.Alignment, () => ({
    __proto__: dart.getGetters(alignment.Alignment.__proto__),
    [_x]: core.double,
    [_start]: core.double,
    [_y]: core.double
  }));
  dart.setLibraryUri(alignment.Alignment, "package:flutter_web/src/painting/alignment.dart");
  dart.setFieldSignature(alignment.Alignment, () => ({
    __proto__: dart.getFields(alignment.Alignment.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(alignment.Alignment, ['toString']);
  dart.defineLazy(alignment.Alignment, {
    /*alignment.Alignment.topLeft*/get topLeft() {
      return C2 || CT.C2;
    },
    /*alignment.Alignment.topCenter*/get topCenter() {
      return C3 || CT.C3;
    },
    /*alignment.Alignment.topRight*/get topRight() {
      return C4 || CT.C4;
    },
    /*alignment.Alignment.centerLeft*/get centerLeft() {
      return C5 || CT.C5;
    },
    /*alignment.Alignment.center*/get center() {
      return C6 || CT.C6;
    },
    /*alignment.Alignment.centerRight*/get centerRight() {
      return C7 || CT.C7;
    },
    /*alignment.Alignment.bottomLeft*/get bottomLeft() {
      return C8 || CT.C8;
    },
    /*alignment.Alignment.bottomCenter*/get bottomCenter() {
      return C9 || CT.C9;
    },
    /*alignment.Alignment.bottomRight*/get bottomRight() {
      return C10 || CT.C10;
    }
  });
  let C11;
  let C12;
  let C13;
  let C14;
  let C15;
  let C16;
  let C17;
  let C18;
  let C19;
  let C20;
  let C21;
  alignment.AlignmentDirectional = class AlignmentDirectional extends alignment.AlignmentGeometry {
    get start() {
      return this[start$0];
    }
    set start(value) {
      super.start = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    get [_x]() {
      return 0.0;
    }
    get [_start]() {
      return this.start;
    }
    get [_y]() {
      return this.y;
    }
    add(other) {
      if (alignment.AlignmentDirectional.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new alignment.AlignmentDirectional.new(dart.notNull(this.start) - dart.notNull(other.start), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['+'](other) {
      return new alignment.AlignmentDirectional.new(dart.notNull(this.start) + dart.notNull(other.start), dart.notNull(this.y) + dart.notNull(other.y));
    }
    _negate() {
      return new alignment.AlignmentDirectional.new(-dart.notNull(this.start), -dart.notNull(this.y));
    }
    ['*'](other) {
      return new alignment.AlignmentDirectional.new(dart.notNull(this.start) * dart.notNull(other), dart.notNull(this.y) * dart.notNull(other));
    }
    ['/'](other) {
      return new alignment.AlignmentDirectional.new(dart.notNull(this.start) / dart.notNull(other), dart.notNull(this.y) / dart.notNull(other));
    }
    ['~/'](other) {
      return new alignment.AlignmentDirectional.new((dart.notNull(this.start) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this.y) / dart.notNull(other))[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new alignment.AlignmentDirectional.new(this.start[$modulo](other), this.y[$modulo](other));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 519, 12, "ert(t != ");
      if (a == null && b == null) return null;
      if (a == null) return new alignment.AlignmentDirectional.new(ui.lerpDouble(0.0, b.start, t), ui.lerpDouble(0.0, b.y, t));
      if (b == null) return new alignment.AlignmentDirectional.new(ui.lerpDouble(a.start, 0.0, t), ui.lerpDouble(a.y, 0.0, t));
      return new alignment.AlignmentDirectional.new(ui.lerpDouble(a.start, b.start, t), ui.lerpDouble(a.y, b.y, t));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 531, 12, "ert(direction != ");
      switch (direction) {
        case C11 || CT.C11:
        {
          return new alignment.Alignment.new(-dart.notNull(this.start), this.y);
        }
        case C12 || CT.C12:
        {
          return new alignment.Alignment.new(this.start, this.y);
        }
      }
      return null;
    }
    static _stringify(start, y) {
      if (start === -1.0 && y === -1.0) return "AlignmentDirectional.topStart";
      if (start === 0.0 && y === -1.0) return "AlignmentDirectional.topCenter";
      if (start === 1.0 && y === -1.0) return "AlignmentDirectional.topEnd";
      if (start === -1.0 && y === 0.0) return "AlignmentDirectional.centerStart";
      if (start === 0.0 && y === 0.0) return "AlignmentDirectional.center";
      if (start === 1.0 && y === 0.0) return "AlignmentDirectional.centerEnd";
      if (start === -1.0 && y === 1.0) return "AlignmentDirectional.bottomStart";
      if (start === 0.0 && y === 1.0) return "AlignmentDirectional.bottomCenter";
      if (start === 1.0 && y === 1.0) return "AlignmentDirectional.bottomEnd";
      return "AlignmentDirectional(" + start[$toStringAsFixed](1) + ", " + y[$toStringAsFixed](1) + ")";
    }
    toString() {
      return alignment.AlignmentDirectional._stringify(this.start, this.y);
    }
  };
  (alignment.AlignmentDirectional.new = function(start, y) {
    this[start$0] = start;
    this[y$0] = y;
    if (!(start != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 394, 14, "ert(start != ");
    if (!(y != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 395, 14, "ert(y != ");
    alignment.AlignmentDirectional.__proto__.new.call(this);
    ;
  }).prototype = alignment.AlignmentDirectional.prototype;
  dart.addTypeTests(alignment.AlignmentDirectional);
  const start$0 = Symbol("AlignmentDirectional.start");
  const y$0 = Symbol("AlignmentDirectional.y");
  dart.setMethodSignature(alignment.AlignmentDirectional, () => ({
    __proto__: dart.getMethods(alignment.AlignmentDirectional.__proto__),
    '-': dart.fnType(alignment.AlignmentDirectional, [alignment.AlignmentDirectional]),
    '+': dart.fnType(alignment.AlignmentDirectional, [alignment.AlignmentDirectional]),
    _negate: dart.fnType(alignment.AlignmentDirectional, []),
    '*': dart.fnType(alignment.AlignmentDirectional, [core.double]),
    '/': dart.fnType(alignment.AlignmentDirectional, [core.double]),
    '~/': dart.fnType(alignment.AlignmentDirectional, [core.double]),
    '%': dart.fnType(alignment.AlignmentDirectional, [core.double]),
    resolve: dart.fnType(alignment.Alignment, [ui.TextDirection])
  }));
  dart.setGetterSignature(alignment.AlignmentDirectional, () => ({
    __proto__: dart.getGetters(alignment.AlignmentDirectional.__proto__),
    [_x]: core.double,
    [_start]: core.double,
    [_y]: core.double
  }));
  dart.setLibraryUri(alignment.AlignmentDirectional, "package:flutter_web/src/painting/alignment.dart");
  dart.setFieldSignature(alignment.AlignmentDirectional, () => ({
    __proto__: dart.getFields(alignment.AlignmentDirectional.__proto__),
    start: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(alignment.AlignmentDirectional, ['toString']);
  dart.defineLazy(alignment.AlignmentDirectional, {
    /*alignment.AlignmentDirectional.topStart*/get topStart() {
      return C13 || CT.C13;
    },
    /*alignment.AlignmentDirectional.topCenter*/get topCenter() {
      return C14 || CT.C14;
    },
    /*alignment.AlignmentDirectional.topEnd*/get topEnd() {
      return C15 || CT.C15;
    },
    /*alignment.AlignmentDirectional.centerStart*/get centerStart() {
      return C16 || CT.C16;
    },
    /*alignment.AlignmentDirectional.center*/get center() {
      return C17 || CT.C17;
    },
    /*alignment.AlignmentDirectional.centerEnd*/get centerEnd() {
      return C18 || CT.C18;
    },
    /*alignment.AlignmentDirectional.bottomStart*/get bottomStart() {
      return C19 || CT.C19;
    },
    /*alignment.AlignmentDirectional.bottomCenter*/get bottomCenter() {
      return C20 || CT.C20;
    },
    /*alignment.AlignmentDirectional.bottomEnd*/get bottomEnd() {
      return C21 || CT.C21;
    }
  });
  alignment._MixedAlignment = class _MixedAlignment extends alignment.AlignmentGeometry {
    get [_x]() {
      return this[_x$];
    }
    set [_x](value) {
      super[_x] = value;
    }
    get [_start]() {
      return this[_start$];
    }
    set [_start](value) {
      super[_start] = value;
    }
    get [_y]() {
      return this[_y$];
    }
    set [_y](value) {
      super[_y] = value;
    }
    _negate() {
      return new alignment._MixedAlignment.new(-dart.notNull(this[_x]), -dart.notNull(this[_start]), -dart.notNull(this[_y]));
    }
    ['*'](other) {
      return new alignment._MixedAlignment.new(dart.notNull(this[_x]) * dart.notNull(other), dart.notNull(this[_start]) * dart.notNull(other), dart.notNull(this[_y]) * dart.notNull(other));
    }
    ['/'](other) {
      return new alignment._MixedAlignment.new(dart.notNull(this[_x]) / dart.notNull(other), dart.notNull(this[_start]) / dart.notNull(other), dart.notNull(this[_y]) / dart.notNull(other));
    }
    ['~/'](other) {
      return new alignment._MixedAlignment.new((dart.notNull(this[_x]) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this[_start]) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this[_y]) / dart.notNull(other))[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new alignment._MixedAlignment.new(this[_x][$modulo](other), this[_start][$modulo](other), this[_y][$modulo](other));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 627, 12, "ert(direction != ");
      switch (direction) {
        case C11 || CT.C11:
        {
          return new alignment.Alignment.new(dart.notNull(this[_x]) - dart.notNull(this[_start]), this[_y]);
        }
        case C12 || CT.C12:
        {
          return new alignment.Alignment.new(dart.notNull(this[_x]) + dart.notNull(this[_start]), this[_y]);
        }
      }
      return null;
    }
  };
  (alignment._MixedAlignment.new = function(_x, _start, _y) {
    this[_x$] = _x;
    this[_start$] = _start;
    this[_y$] = _y;
    alignment._MixedAlignment.__proto__.new.call(this);
    ;
  }).prototype = alignment._MixedAlignment.prototype;
  dart.addTypeTests(alignment._MixedAlignment);
  const _x$ = Symbol("_MixedAlignment._x");
  const _start$ = Symbol("_MixedAlignment._start");
  const _y$ = Symbol("_MixedAlignment._y");
  dart.setMethodSignature(alignment._MixedAlignment, () => ({
    __proto__: dart.getMethods(alignment._MixedAlignment.__proto__),
    _negate: dart.fnType(alignment._MixedAlignment, []),
    '*': dart.fnType(alignment._MixedAlignment, [core.double]),
    '/': dart.fnType(alignment._MixedAlignment, [core.double]),
    '~/': dart.fnType(alignment._MixedAlignment, [core.double]),
    '%': dart.fnType(alignment._MixedAlignment, [core.double]),
    resolve: dart.fnType(alignment.Alignment, [ui.TextDirection])
  }));
  dart.setLibraryUri(alignment._MixedAlignment, "package:flutter_web/src/painting/alignment.dart");
  dart.setFieldSignature(alignment._MixedAlignment, () => ({
    __proto__: dart.getFields(alignment._MixedAlignment.__proto__),
    [_x]: dart.finalFieldType(core.double),
    [_start]: dart.finalFieldType(core.double),
    [_y]: dart.finalFieldType(core.double)
  }));
  let C22;
  let C23;
  let C24;
  alignment.TextAlignVertical = class TextAlignVertical extends core.Object {
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(y: " + dart.str(this.y) + ")";
    }
  };
  (alignment.TextAlignVertical.new = function(opts) {
    let y = opts && 'y' in opts ? opts.y : null;
    this[y$1] = y;
    if (!(y != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 657, 15, "ert(y != ");
    if (!(dart.notNull(y) >= -1.0 && dart.notNull(y) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 658, 15, "ert(y >= -1.0 && y <=");
    ;
  }).prototype = alignment.TextAlignVertical.prototype;
  dart.addTypeTests(alignment.TextAlignVertical);
  const y$1 = Symbol("TextAlignVertical.y");
  dart.setLibraryUri(alignment.TextAlignVertical, "package:flutter_web/src/painting/alignment.dart");
  dart.setFieldSignature(alignment.TextAlignVertical, () => ({
    __proto__: dart.getFields(alignment.TextAlignVertical.__proto__),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(alignment.TextAlignVertical, ['toString']);
  dart.defineLazy(alignment.TextAlignVertical, {
    /*alignment.TextAlignVertical.top*/get top() {
      return C22 || CT.C22;
    },
    /*alignment.TextAlignVertical.center*/get center() {
      return C23 || CT.C23;
    },
    /*alignment.TextAlignVertical.bottom*/get bottom() {
      return C24 || CT.C24;
    }
  });
  const _name$ = dart.privateName(basic_types, "_name");
  let C25;
  let C26;
  let C27;
  let C28;
  let C29;
  basic_types.RenderComparison = class RenderComparison extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (basic_types.RenderComparison.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = basic_types.RenderComparison.prototype;
  dart.addTypeTests(basic_types.RenderComparison);
  dart.setLibraryUri(basic_types.RenderComparison, "package:flutter_web/src/painting/basic_types.dart");
  dart.setFieldSignature(basic_types.RenderComparison, () => ({
    __proto__: dart.getFields(basic_types.RenderComparison.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(basic_types.RenderComparison, ['toString']);
  basic_types.RenderComparison.identical = C25 || CT.C25;
  basic_types.RenderComparison.metadata = C26 || CT.C26;
  basic_types.RenderComparison.paint = C27 || CT.C27;
  basic_types.RenderComparison.layout = C28 || CT.C28;
  basic_types.RenderComparison.values = C29 || CT.C29;
  let C30;
  let C31;
  let C32;
  basic_types.Axis = class Axis extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (basic_types.Axis.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = basic_types.Axis.prototype;
  dart.addTypeTests(basic_types.Axis);
  dart.setLibraryUri(basic_types.Axis, "package:flutter_web/src/painting/basic_types.dart");
  dart.setFieldSignature(basic_types.Axis, () => ({
    __proto__: dart.getFields(basic_types.Axis.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(basic_types.Axis, ['toString']);
  basic_types.Axis.horizontal = C30 || CT.C30;
  basic_types.Axis.vertical = C31 || CT.C31;
  basic_types.Axis.values = C32 || CT.C32;
  let C33;
  let C34;
  let C35;
  basic_types.VerticalDirection = class VerticalDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (basic_types.VerticalDirection.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = basic_types.VerticalDirection.prototype;
  dart.addTypeTests(basic_types.VerticalDirection);
  dart.setLibraryUri(basic_types.VerticalDirection, "package:flutter_web/src/painting/basic_types.dart");
  dart.setFieldSignature(basic_types.VerticalDirection, () => ({
    __proto__: dart.getFields(basic_types.VerticalDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(basic_types.VerticalDirection, ['toString']);
  basic_types.VerticalDirection.up = C33 || CT.C33;
  basic_types.VerticalDirection.down = C34 || CT.C34;
  basic_types.VerticalDirection.values = C35 || CT.C35;
  let C36;
  let C37;
  let C38;
  let C39;
  let C40;
  basic_types.AxisDirection = class AxisDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (basic_types.AxisDirection.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = basic_types.AxisDirection.prototype;
  dart.addTypeTests(basic_types.AxisDirection);
  dart.setLibraryUri(basic_types.AxisDirection, "package:flutter_web/src/painting/basic_types.dart");
  dart.setFieldSignature(basic_types.AxisDirection, () => ({
    __proto__: dart.getFields(basic_types.AxisDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(basic_types.AxisDirection, ['toString']);
  basic_types.AxisDirection.up = C36 || CT.C36;
  basic_types.AxisDirection.right = C37 || CT.C37;
  basic_types.AxisDirection.down = C38 || CT.C38;
  basic_types.AxisDirection.left = C39 || CT.C39;
  basic_types.AxisDirection.values = C40 || CT.C40;
  basic_types.flipAxis = function flipAxis(direction) {
    if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 143, 10, "direction != null");
    switch (direction) {
      case C30 || CT.C30:
      {
        return basic_types.Axis.vertical;
      }
      case C31 || CT.C31:
      {
        return basic_types.Axis.horizontal;
      }
    }
    return null;
  };
  basic_types.axisDirectionToAxis = function axisDirectionToAxis(axisDirection) {
    if (!(axisDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 214, 10, " assert(axisDirection");
    switch (axisDirection) {
      case C36 || CT.C36:
      case C38 || CT.C38:
      {
        return basic_types.Axis.vertical;
      }
      case C39 || CT.C39:
      case C37 || CT.C37:
      {
        return basic_types.Axis.horizontal;
      }
    }
    return null;
  };
  basic_types.textDirectionToAxisDirection = function textDirectionToAxisDirection(textDirection) {
    if (!(textDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 232, 10, " assert(textDirection");
    switch (textDirection) {
      case C11 || CT.C11:
      {
        return basic_types.AxisDirection.left;
      }
      case C12 || CT.C12:
      {
        return basic_types.AxisDirection.right;
      }
    }
    return null;
  };
  basic_types.flipAxisDirection = function flipAxisDirection(axisDirection) {
    if (!(axisDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 252, 10, " assert(axisDirection");
    switch (axisDirection) {
      case C36 || CT.C36:
      {
        return basic_types.AxisDirection.down;
      }
      case C37 || CT.C37:
      {
        return basic_types.AxisDirection.left;
      }
      case C38 || CT.C38:
      {
        return basic_types.AxisDirection.up;
      }
      case C39 || CT.C39:
      {
        return basic_types.AxisDirection.right;
      }
    }
    return null;
  };
  basic_types.axisDirectionIsReversed = function axisDirectionIsReversed(axisDirection) {
    if (!(axisDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 272, 10, " assert(axisDirection");
    switch (axisDirection) {
      case C36 || CT.C36:
      case C39 || CT.C39:
      {
        return true;
      }
      case C38 || CT.C38:
      case C37 || CT.C37:
      {
        return false;
      }
    }
    return null;
  };
  const _name$0 = dart.privateName(system_chrome, "_name");
  let C41;
  let C42;
  let C43;
  let C44;
  let C45;
  system_chrome.DeviceOrientation = class DeviceOrientation extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (system_chrome.DeviceOrientation.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = system_chrome.DeviceOrientation.prototype;
  dart.addTypeTests(system_chrome.DeviceOrientation);
  dart.setLibraryUri(system_chrome.DeviceOrientation, "package:flutter_web/src/services/system_chrome.dart");
  dart.setFieldSignature(system_chrome.DeviceOrientation, () => ({
    __proto__: dart.getFields(system_chrome.DeviceOrientation.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(system_chrome.DeviceOrientation, ['toString']);
  system_chrome.DeviceOrientation.portraitUp = C41 || CT.C41;
  system_chrome.DeviceOrientation.landscapeLeft = C42 || CT.C42;
  system_chrome.DeviceOrientation.portraitDown = C43 || CT.C43;
  system_chrome.DeviceOrientation.landscapeRight = C44 || CT.C44;
  system_chrome.DeviceOrientation.values = C45 || CT.C45;
  system_chrome.ApplicationSwitcherDescription = class ApplicationSwitcherDescription extends core.Object {
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get primaryColor() {
      return this[primaryColor$];
    }
    set primaryColor(value) {
      super.primaryColor = value;
    }
  };
  (system_chrome.ApplicationSwitcherDescription.new = function(opts) {
    let label = opts && 'label' in opts ? opts.label : null;
    let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
    this[label$] = label;
    this[primaryColor$] = primaryColor;
    ;
  }).prototype = system_chrome.ApplicationSwitcherDescription.prototype;
  dart.addTypeTests(system_chrome.ApplicationSwitcherDescription);
  const label$ = Symbol("ApplicationSwitcherDescription.label");
  const primaryColor$ = Symbol("ApplicationSwitcherDescription.primaryColor");
  dart.setLibraryUri(system_chrome.ApplicationSwitcherDescription, "package:flutter_web/src/services/system_chrome.dart");
  dart.setFieldSignature(system_chrome.ApplicationSwitcherDescription, () => ({
    __proto__: dart.getFields(system_chrome.ApplicationSwitcherDescription.__proto__),
    label: dart.finalFieldType(core.String),
    primaryColor: dart.finalFieldType(core.int)
  }));
  let C46;
  let C47;
  let C48;
  system_chrome.SystemUiOverlay = class SystemUiOverlay extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (system_chrome.SystemUiOverlay.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = system_chrome.SystemUiOverlay.prototype;
  dart.addTypeTests(system_chrome.SystemUiOverlay);
  dart.setLibraryUri(system_chrome.SystemUiOverlay, "package:flutter_web/src/services/system_chrome.dart");
  dart.setFieldSignature(system_chrome.SystemUiOverlay, () => ({
    __proto__: dart.getFields(system_chrome.SystemUiOverlay.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(system_chrome.SystemUiOverlay, ['toString']);
  system_chrome.SystemUiOverlay.top = C46 || CT.C46;
  system_chrome.SystemUiOverlay.bottom = C47 || CT.C47;
  system_chrome.SystemUiOverlay.values = C48 || CT.C48;
  const _toMap = dart.privateName(system_chrome, "_toMap");
  let C50;
  let C51;
  const _value = dart.privateName(ui, "_value");
  let C52;
  let C49;
  let C53;
  system_chrome.SystemUiOverlayStyle = class SystemUiOverlayStyle extends core.Object {
    get systemNavigationBarColor() {
      return this[systemNavigationBarColor$];
    }
    set systemNavigationBarColor(value) {
      super.systemNavigationBarColor = value;
    }
    get systemNavigationBarDividerColor() {
      return this[systemNavigationBarDividerColor$];
    }
    set systemNavigationBarDividerColor(value) {
      super.systemNavigationBarDividerColor = value;
    }
    get systemNavigationBarIconBrightness() {
      return this[systemNavigationBarIconBrightness$];
    }
    set systemNavigationBarIconBrightness(value) {
      super.systemNavigationBarIconBrightness = value;
    }
    get statusBarColor() {
      return this[statusBarColor$];
    }
    set statusBarColor(value) {
      super.statusBarColor = value;
    }
    get statusBarBrightness() {
      return this[statusBarBrightness$];
    }
    set statusBarBrightness(value) {
      super.statusBarBrightness = value;
    }
    get statusBarIconBrightness() {
      return this[statusBarIconBrightness$];
    }
    set statusBarIconBrightness(value) {
      super.statusBarIconBrightness = value;
    }
    [_toMap]() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      return new (IdentityMapOfString$dynamic()).from(["systemNavigationBarColor", (t0 = this.systemNavigationBarColor, t0 == null ? null : t0.value), "systemNavigationBarDividerColor", (t0$ = this.systemNavigationBarDividerColor, t0$ == null ? null : t0$.value), "statusBarColor", (t0$0 = this.statusBarColor, t0$0 == null ? null : t0$0.value), "statusBarBrightness", (t0$1 = this.statusBarBrightness, t0$1 == null ? null : dart.toString(t0$1)), "statusBarIconBrightness", (t0$2 = this.statusBarIconBrightness, t0$2 == null ? null : dart.toString(t0$2)), "systemNavigationBarIconBrightness", (t0$3 = this.systemNavigationBarIconBrightness, t0$3 == null ? null : dart.toString(t0$3))]);
    }
    toString() {
      return dart.toString(this[_toMap]());
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let systemNavigationBarColor = opts && 'systemNavigationBarColor' in opts ? opts.systemNavigationBarColor : null;
      let systemNavigationBarDividerColor = opts && 'systemNavigationBarDividerColor' in opts ? opts.systemNavigationBarDividerColor : null;
      let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
      let statusBarBrightness = opts && 'statusBarBrightness' in opts ? opts.statusBarBrightness : null;
      let statusBarIconBrightness = opts && 'statusBarIconBrightness' in opts ? opts.statusBarIconBrightness : null;
      let systemNavigationBarIconBrightness = opts && 'systemNavigationBarIconBrightness' in opts ? opts.systemNavigationBarIconBrightness : null;
      return new system_chrome.SystemUiOverlayStyle.new({systemNavigationBarColor: (t0 = systemNavigationBarColor, t0 == null ? this.systemNavigationBarColor : t0), systemNavigationBarDividerColor: (t0$ = systemNavigationBarDividerColor, t0$ == null ? this.systemNavigationBarDividerColor : t0$), statusBarColor: (t0$0 = statusBarColor, t0$0 == null ? this.statusBarColor : t0$0), statusBarIconBrightness: (t0$1 = statusBarIconBrightness, t0$1 == null ? this.statusBarIconBrightness : t0$1), statusBarBrightness: (t0$2 = statusBarBrightness, t0$2 == null ? this.statusBarBrightness : t0$2), systemNavigationBarIconBrightness: (t0$3 = systemNavigationBarIconBrightness, t0$3 == null ? this.systemNavigationBarIconBrightness : t0$3)});
    }
    get hashCode() {
      return ui.hashValues(this.systemNavigationBarColor, this.systemNavigationBarDividerColor, this.statusBarColor, this.statusBarBrightness, this.statusBarIconBrightness, this.systemNavigationBarIconBrightness);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = system_chrome.SystemUiOverlayStyle._check(other);
      return dart.equals(typedOther.systemNavigationBarColor, this.systemNavigationBarColor) && dart.equals(typedOther.systemNavigationBarDividerColor, this.systemNavigationBarDividerColor) && dart.equals(typedOther.statusBarColor, this.statusBarColor) && dart.equals(typedOther.statusBarIconBrightness, this.statusBarIconBrightness) && dart.equals(typedOther.statusBarBrightness, this.statusBarBrightness) && dart.equals(typedOther.systemNavigationBarIconBrightness, this.systemNavigationBarIconBrightness);
    }
  };
  (system_chrome.SystemUiOverlayStyle.new = function(opts) {
    let systemNavigationBarColor = opts && 'systemNavigationBarColor' in opts ? opts.systemNavigationBarColor : null;
    let systemNavigationBarDividerColor = opts && 'systemNavigationBarDividerColor' in opts ? opts.systemNavigationBarDividerColor : null;
    let systemNavigationBarIconBrightness = opts && 'systemNavigationBarIconBrightness' in opts ? opts.systemNavigationBarIconBrightness : null;
    let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
    let statusBarBrightness = opts && 'statusBarBrightness' in opts ? opts.statusBarBrightness : null;
    let statusBarIconBrightness = opts && 'statusBarIconBrightness' in opts ? opts.statusBarIconBrightness : null;
    this[systemNavigationBarColor$] = systemNavigationBarColor;
    this[systemNavigationBarDividerColor$] = systemNavigationBarDividerColor;
    this[systemNavigationBarIconBrightness$] = systemNavigationBarIconBrightness;
    this[statusBarColor$] = statusBarColor;
    this[statusBarBrightness$] = statusBarBrightness;
    this[statusBarIconBrightness$] = statusBarIconBrightness;
    ;
  }).prototype = system_chrome.SystemUiOverlayStyle.prototype;
  dart.addTypeTests(system_chrome.SystemUiOverlayStyle);
  const systemNavigationBarColor$ = Symbol("SystemUiOverlayStyle.systemNavigationBarColor");
  const systemNavigationBarDividerColor$ = Symbol("SystemUiOverlayStyle.systemNavigationBarDividerColor");
  const systemNavigationBarIconBrightness$ = Symbol("SystemUiOverlayStyle.systemNavigationBarIconBrightness");
  const statusBarColor$ = Symbol("SystemUiOverlayStyle.statusBarColor");
  const statusBarBrightness$ = Symbol("SystemUiOverlayStyle.statusBarBrightness");
  const statusBarIconBrightness$ = Symbol("SystemUiOverlayStyle.statusBarIconBrightness");
  dart.setMethodSignature(system_chrome.SystemUiOverlayStyle, () => ({
    __proto__: dart.getMethods(system_chrome.SystemUiOverlayStyle.__proto__),
    [_toMap]: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copyWith: dart.fnType(system_chrome.SystemUiOverlayStyle, [], {statusBarBrightness: ui.Brightness, statusBarColor: ui.Color, statusBarIconBrightness: ui.Brightness, systemNavigationBarColor: ui.Color, systemNavigationBarDividerColor: ui.Color, systemNavigationBarIconBrightness: ui.Brightness})
  }));
  dart.setLibraryUri(system_chrome.SystemUiOverlayStyle, "package:flutter_web/src/services/system_chrome.dart");
  dart.setFieldSignature(system_chrome.SystemUiOverlayStyle, () => ({
    __proto__: dart.getFields(system_chrome.SystemUiOverlayStyle.__proto__),
    systemNavigationBarColor: dart.finalFieldType(ui.Color),
    systemNavigationBarDividerColor: dart.finalFieldType(ui.Color),
    systemNavigationBarIconBrightness: dart.finalFieldType(ui.Brightness),
    statusBarColor: dart.finalFieldType(ui.Color),
    statusBarBrightness: dart.finalFieldType(ui.Brightness),
    statusBarIconBrightness: dart.finalFieldType(ui.Brightness)
  }));
  dart.defineExtensionMethods(system_chrome.SystemUiOverlayStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(system_chrome.SystemUiOverlayStyle, ['hashCode']);
  dart.defineLazy(system_chrome.SystemUiOverlayStyle, {
    /*system_chrome.SystemUiOverlayStyle.light*/get light() {
      return C49 || CT.C49;
    },
    /*system_chrome.SystemUiOverlayStyle.dark*/get dark() {
      return C53 || CT.C53;
    }
  });
  system_chrome.SystemChrome = class SystemChrome extends core.Object {
    static setPreferredOrientations(orientations) {
      return async.async(dart.void, function* setPreferredOrientations() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setPreferredOrientations", system_chrome._stringify(orientations));
      });
    }
    static setApplicationSwitcherDescription(description) {
      return async.async(dart.void, function* setApplicationSwitcherDescription() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setApplicationSwitcherDescription", new (IdentityMapOfString$dynamic()).from(["label", description.label, "primaryColor", description.primaryColor]));
      });
    }
    static setEnabledSystemUIOverlays(overlays) {
      return async.async(dart.void, function* setEnabledSystemUIOverlays() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setEnabledSystemUIOverlays", system_chrome._stringify(overlays));
      });
    }
    static restoreSystemUIOverlays() {
      return async.async(dart.void, function* restoreSystemUIOverlays() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.restoreSystemUIOverlays", null);
      });
    }
    static setSystemUIOverlayStyle(style) {
      if (!(style != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/system_chrome.dart", 377, 12, "style != null");
      if (system_chrome.SystemChrome._pendingStyle != null) {
        system_chrome.SystemChrome._pendingStyle = style;
        return;
      }
      if (dart.equals(style, system_chrome.SystemChrome._latestStyle)) {
        return;
      }
      system_chrome.SystemChrome._pendingStyle = style;
      async.scheduleMicrotask(dart.fn(() => {
        if (!(system_chrome.SystemChrome._pendingStyle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/system_chrome.dart", 390, 14, "_pendingStyle != null");
        if (!dart.equals(system_chrome.SystemChrome._pendingStyle, system_chrome.SystemChrome._latestStyle)) {
          system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setSystemUIOverlayStyle", system_chrome.SystemChrome._pendingStyle[_toMap]());
          system_chrome.SystemChrome._latestStyle = system_chrome.SystemChrome._pendingStyle;
        }
        system_chrome.SystemChrome._pendingStyle = null;
      }, VoidToNull()));
    }
    static get latestStyle() {
      return system_chrome.SystemChrome._latestStyle;
    }
  };
  (system_chrome.SystemChrome.__ = function() {
    ;
  }).prototype = system_chrome.SystemChrome.prototype;
  dart.addTypeTests(system_chrome.SystemChrome);
  dart.setLibraryUri(system_chrome.SystemChrome, "package:flutter_web/src/services/system_chrome.dart");
  dart.defineLazy(system_chrome.SystemChrome, {
    /*system_chrome.SystemChrome._pendingStyle*/get _pendingStyle() {
      return null;
    },
    set _pendingStyle(_) {},
    /*system_chrome.SystemChrome._latestStyle*/get _latestStyle() {
      return null;
    },
    set _latestStyle(_) {}
  });
  system_chrome._stringify = function _stringify(list) {
    let result = JSArrayOfString().of([]);
    for (let item of list)
      result[$add](dart.toString(item));
    return result;
  };
  let C55;
  let C54;
  let C56;
  let C57;
  let C59;
  let C58;
  let C61;
  let C60;
  let C62;
  let C64;
  let C63;
  let C66;
  let C65;
  system_channels.SystemChannels = class SystemChannels extends core.Object {};
  (system_channels.SystemChannels.__ = function() {
    ;
  }).prototype = system_channels.SystemChannels.prototype;
  dart.addTypeTests(system_channels.SystemChannels);
  dart.setLibraryUri(system_channels.SystemChannels, "package:flutter_web/src/services/system_channels.dart");
  dart.defineLazy(system_channels.SystemChannels, {
    /*system_channels.SystemChannels.navigation*/get navigation() {
      return C54 || CT.C54;
    },
    /*system_channels.SystemChannels.platform*/get platform() {
      return C56 || CT.C56;
    },
    /*system_channels.SystemChannels.textInput*/get textInput() {
      return C57 || CT.C57;
    },
    /*system_channels.SystemChannels.keyEvent*/get keyEvent() {
      return C58 || CT.C58;
    },
    /*system_channels.SystemChannels.lifecycle*/get lifecycle() {
      return C60 || CT.C60;
    },
    /*system_channels.SystemChannels.system*/get system() {
      return C62 || CT.C62;
    },
    /*system_channels.SystemChannels.accessibility*/get accessibility() {
      return C63 || CT.C63;
    },
    /*system_channels.SystemChannels.platform_views*/get platform_views() {
      return C65 || CT.C65;
    }
  });
  const _is_BasicMessageChannel_default = Symbol('_is_BasicMessageChannel_default');
  platform_channel.BasicMessageChannel$ = dart.generic(T => {
    let FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    let TToFutureOfT = () => (TToFutureOfT = dart.constFn(dart.fnType(FutureOfT(), [T])))();
    class BasicMessageChannel extends core.Object {
      get name() {
        return this[name$];
      }
      set name(value) {
        super.name = value;
      }
      get codec() {
        return this[codec$];
      }
      set codec(value) {
        super.codec = value;
      }
      send(message) {
        T._check(message);
        return async.async(T, (function* send() {
          return this.codec.decodeMessage(yield platform_messages.BinaryMessages.send(this.name, this.codec.encodeMessage(message)));
        }).bind(this));
      }
      setMessageHandler(handler) {
        TToFutureOfT()._check(handler);
        if (handler == null) {
          platform_messages.BinaryMessages.setMessageHandler(this.name, null);
        } else {
          platform_messages.BinaryMessages.setMessageHandler(this.name, dart.fn(message => async.async(typed_data.ByteData, (function*() {
            return this.codec.encodeMessage(yield handler(this.codec.decodeMessage(message)));
          }).bind(this)), ByteDataToFutureOfByteData()));
        }
      }
      setMockMessageHandler(handler) {
        TToFutureOfT()._check(handler);
        if (handler == null) {
          platform_messages.BinaryMessages.setMockMessageHandler(this.name, null);
        } else {
          platform_messages.BinaryMessages.setMockMessageHandler(this.name, dart.fn(message => async.async(typed_data.ByteData, (function*() {
            return this.codec.encodeMessage(yield handler(this.codec.decodeMessage(message)));
          }).bind(this)), ByteDataToFutureOfByteData()));
        }
      }
    }
    (BasicMessageChannel.new = function(name, codec) {
      this[name$] = name;
      this[codec$] = codec;
      ;
    }).prototype = BasicMessageChannel.prototype;
    dart.addTypeTests(BasicMessageChannel);
    BasicMessageChannel.prototype[_is_BasicMessageChannel_default] = true;
    const name$ = Symbol("BasicMessageChannel.name");
    const codec$ = Symbol("BasicMessageChannel.codec");
    dart.setMethodSignature(BasicMessageChannel, () => ({
      __proto__: dart.getMethods(BasicMessageChannel.__proto__),
      send: dart.fnType(async.Future$(T), [core.Object]),
      setMessageHandler: dart.fnType(dart.void, [core.Object]),
      setMockMessageHandler: dart.fnType(dart.void, [core.Object])
    }));
    dart.setLibraryUri(BasicMessageChannel, "package:flutter_web/src/services/platform_channel.dart");
    dart.setFieldSignature(BasicMessageChannel, () => ({
      __proto__: dart.getFields(BasicMessageChannel.__proto__),
      name: dart.finalFieldType(core.String),
      codec: dart.finalFieldType(message_codec.MessageCodec$(T))
    }));
    return BasicMessageChannel;
  });
  platform_channel.BasicMessageChannel = platform_channel.BasicMessageChannel$();
  dart.addTypeTests(platform_channel.BasicMessageChannel, _is_BasicMessageChannel_default);
  const _handleAsMethodCall = dart.privateName(platform_channel, "_handleAsMethodCall");
  platform_channel.MethodChannel = class MethodChannel extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$];
    }
    set codec(value) {
      super.codec = value;
    }
    invokeMethod(T, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(T, (function* invokeMethod() {
        if (!(method != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_channel.dart", 296, 12, "method != null");
        let result = (yield platform_messages.BinaryMessages.send(this.name, this.codec.encodeMethodCall(new message_codec.MethodCall.new(method, arguments$0))));
        if (result == null) {
          dart.throw(new message_codec.MissingPluginException.new("No implementation found for method " + dart.str(method) + " on channel " + dart.str(this.name)));
        }
        let typedResult = T._check(this.codec.decodeEnvelope(result));
        return typedResult;
      }).bind(this));
    }
    invokeListMethod(T, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(core.List$(T), (function* invokeListMethod() {
        let result = (yield this.invokeMethod(core.List, method, arguments$0));
        return result[$cast](T);
      }).bind(this));
    }
    invokeMapMethod(K, V, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(core.Map$(K, V), (function* invokeMapMethod() {
        let result = (yield this.invokeMethod(core.Map, method, arguments$0));
        return result[$cast](K, V);
      }).bind(this));
    }
    setMethodCallHandler(handler) {
      platform_messages.BinaryMessages.setMessageHandler(this.name, handler == null ? null : dart.fn(message => this[_handleAsMethodCall](message, handler), ByteDataToFutureOfByteData()));
    }
    setMockMethodCallHandler(handler) {
      platform_messages.BinaryMessages.setMockMessageHandler(this.name, handler == null ? null : dart.fn(message => this[_handleAsMethodCall](message, handler), ByteDataToFutureOfByteData()));
    }
    [_handleAsMethodCall](message, handler) {
      return async.async(typed_data.ByteData, (function* _handleAsMethodCall() {
        let call = this.codec.decodeMethodCall(message);
        try {
          return this.codec.encodeSuccessEnvelope(yield handler(call));
        } catch (e$) {
          let ex = dart.getThrown(e$);
          if (message_codec.PlatformException.is(ex)) {
            let e = ex;
            return this.codec.encodeErrorEnvelope({code: e.code, message: e.message, details: e.details});
          } else if (message_codec.MissingPluginException.is(ex)) {
            return null;
          } else {
            let e = ex;
            return this.codec.encodeErrorEnvelope({code: "error", message: dart.toString(e), details: null});
          }
        }
      }).bind(this));
    }
  };
  (platform_channel.MethodChannel.new = function(name, codec) {
    if (codec === void 0) codec = C66 || CT.C66;
    this[name$] = name;
    this[codec$] = codec;
    ;
  }).prototype = platform_channel.MethodChannel.prototype;
  dart.addTypeTests(platform_channel.MethodChannel);
  const name$ = Symbol("MethodChannel.name");
  const codec$ = Symbol("MethodChannel.codec");
  dart.setMethodSignature(platform_channel.MethodChannel, () => ({
    __proto__: dart.getMethods(platform_channel.MethodChannel.__proto__),
    invokeMethod: dart.gFnType(T => [async.Future$(T), [core.String], [dart.dynamic]]),
    invokeListMethod: dart.gFnType(T => [async.Future$(core.List$(T)), [core.String], [dart.dynamic]]),
    invokeMapMethod: dart.gFnType((K, V) => [async.Future$(core.Map$(K, V)), [core.String], [dart.dynamic]]),
    setMethodCallHandler: dart.fnType(dart.void, [dart.fnType(async.Future, [message_codec.MethodCall])]),
    setMockMethodCallHandler: dart.fnType(dart.void, [dart.fnType(async.Future, [message_codec.MethodCall])]),
    [_handleAsMethodCall]: dart.fnType(async.Future$(typed_data.ByteData), [typed_data.ByteData, dart.fnType(async.Future, [message_codec.MethodCall])])
  }));
  dart.setLibraryUri(platform_channel.MethodChannel, "package:flutter_web/src/services/platform_channel.dart");
  dart.setFieldSignature(platform_channel.MethodChannel, () => ({
    __proto__: dart.getFields(platform_channel.MethodChannel.__proto__),
    name: dart.finalFieldType(core.String),
    codec: dart.finalFieldType(message_codec.MethodCodec)
  }));
  const invokeMethod = Symbol("invokeMethod");
  platform_channel.OptionalMethodChannel = class OptionalMethodChannel extends platform_channel.MethodChannel {
    invokeMethod(T, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(T, (function* invokeMethod$() {
        try {
          let result = (yield this[invokeMethod](T, method, arguments$0));
          return result;
        } catch (e) {
          let ex = dart.getThrown(e);
          if (message_codec.MissingPluginException.is(ex)) {
            return null;
          } else
            throw e;
        }
      }).bind(this));
    }
    invokeListMethod(T, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(core.List$(T), (function* invokeListMethod() {
        let result = (yield this.invokeMethod(core.List, method, arguments$0));
        return result[$cast](T);
      }).bind(this));
    }
    invokeMapMethod(K, V, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(core.Map$(K, V), (function* invokeMapMethod() {
        let result = (yield this.invokeMethod(core.Map, method, arguments$0));
        return result[$cast](K, V);
      }).bind(this));
    }
    [invokeMethod](T, method, arguments$0) {
      return super.invokeMethod(T, method, arguments$0);
    }
  };
  (platform_channel.OptionalMethodChannel.new = function(name, codec) {
    if (codec === void 0) codec = C66 || CT.C66;
    platform_channel.OptionalMethodChannel.__proto__.new.call(this, name, codec);
    ;
  }).prototype = platform_channel.OptionalMethodChannel.prototype;
  dart.addTypeTests(platform_channel.OptionalMethodChannel);
  dart.setLibraryUri(platform_channel.OptionalMethodChannel, "package:flutter_web/src/services/platform_channel.dart");
  platform_channel.EventChannel = class EventChannel extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$0];
    }
    set codec(value) {
      super.codec = value;
    }
    receiveBroadcastStream(arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      let methodChannel = new platform_channel.MethodChannel.new(this.name, this.codec);
      let controller = null;
      controller = async.StreamController.broadcast({onListen: dart.fn(() => async.async(core.Null, (function*() {
          platform_messages.BinaryMessages.setMessageHandler(this.name, dart.fn(reply => async.async(typed_data.ByteData, (function*() {
            if (reply == null) {
              controller.close();
            } else {
              try {
                controller.add(this.codec.decodeEnvelope(reply));
              } catch (e$) {
                let e = dart.getThrown(e$);
                if (message_codec.PlatformException.is(e)) {
                  controller.addError(e);
                } else
                  throw e$;
              }
            }
            return FutureOrOfByteData()._check(async.Future.value(null));
          }).bind(this)), ByteDataToFutureOfByteData()));
          try {
            yield methodChannel.invokeMethod(dart.dynamic, "listen", arguments$0);
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while activating platform stream on channel " + dart.str(this.name))}));
          }
        }).bind(this)), VoidToFutureOfNull()), onCancel: dart.fn(() => async.async(core.Null, (function*() {
          platform_messages.BinaryMessages.setMessageHandler(this.name, null);
          try {
            yield methodChannel.invokeMethod(dart.dynamic, "cancel", arguments$0);
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("while de-activating platform stream on channel " + dart.str(this.name))}));
          }
        }).bind(this)), VoidToFutureOfNull())});
      return controller.stream;
    }
  };
  (platform_channel.EventChannel.new = function(name, codec) {
    if (codec === void 0) codec = C66 || CT.C66;
    this[name$0] = name;
    this[codec$0] = codec;
    ;
  }).prototype = platform_channel.EventChannel.prototype;
  dart.addTypeTests(platform_channel.EventChannel);
  const name$0 = Symbol("EventChannel.name");
  const codec$0 = Symbol("EventChannel.codec");
  dart.setMethodSignature(platform_channel.EventChannel, () => ({
    __proto__: dart.getMethods(platform_channel.EventChannel.__proto__),
    receiveBroadcastStream: dart.fnType(async.Stream, [], [dart.dynamic])
  }));
  dart.setLibraryUri(platform_channel.EventChannel, "package:flutter_web/src/services/platform_channel.dart");
  dart.setFieldSignature(platform_channel.EventChannel, () => ({
    __proto__: dart.getFields(platform_channel.EventChannel.__proto__),
    name: dart.finalFieldType(core.String),
    codec: dart.finalFieldType(message_codec.MethodCodec)
  }));
  platform_messages.BinaryMessages = class BinaryMessages extends core.Object {
    static _sendPlatformMessage(channel, message) {
      let completer = CompleterOfByteData().new();
      ui.window.sendPlatformMessage(channel, message, dart.fn(reply => {
        try {
          completer.complete(reply);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("during a platform message response callback")}));
        }
      }, ByteDataToNull()));
      return completer.future;
    }
    static handlePlatformMessage(channel, data, callback) {
      return async.async(dart.void, function* handlePlatformMessage() {
        let response = null;
        try {
          let handler = platform_messages.BinaryMessages._handlers[$_get](channel);
          if (handler != null) {
            response = (yield handler(data));
          }
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new assertions.ErrorDescription.new("during a platform message callback")}));
        } finally {
          callback(response);
        }
      });
    }
    static send(channel, message) {
      let handler = platform_messages.BinaryMessages._mockHandlers[$_get](channel);
      if (handler != null) return handler(message);
      return platform_messages.BinaryMessages._sendPlatformMessage(channel, message);
    }
    static setMessageHandler(channel, handler) {
      if (handler == null)
        platform_messages.BinaryMessages._handlers[$remove](channel);
      else
        platform_messages.BinaryMessages._handlers[$_set](channel, handler);
    }
    static setMockMessageHandler(channel, handler) {
      if (handler == null)
        platform_messages.BinaryMessages._mockHandlers[$remove](channel);
      else
        platform_messages.BinaryMessages._mockHandlers[$_set](channel, handler);
    }
  };
  (platform_messages.BinaryMessages.__ = function() {
    ;
  }).prototype = platform_messages.BinaryMessages.prototype;
  dart.addTypeTests(platform_messages.BinaryMessages);
  dart.setLibraryUri(platform_messages.BinaryMessages, "package:flutter_web/src/services/platform_messages.dart");
  dart.defineLazy(platform_messages.BinaryMessages, {
    /*platform_messages.BinaryMessages._handlers*/get _handlers() {
      return new (IdentityMapOfString$ByteDataToFutureOfByteData()).new();
    },
    /*platform_messages.BinaryMessages._mockHandlers*/get _mockHandlers() {
      return new (IdentityMapOfString$ByteDataToFutureOfByteData()).new();
    }
  });
  message_codecs.BinaryCodec = class BinaryCodec extends core.Object {
    decodeMessage(message) {
      return message;
    }
    encodeMessage(message) {
      typed_data.ByteData._check(message);
      return message;
    }
  };
  (message_codecs.BinaryCodec.new = function() {
    ;
  }).prototype = message_codecs.BinaryCodec.prototype;
  dart.addTypeTests(message_codecs.BinaryCodec);
  message_codecs.BinaryCodec[dart.implements] = () => [message_codec.MessageCodec$(typed_data.ByteData)];
  dart.setMethodSignature(message_codecs.BinaryCodec, () => ({
    __proto__: dart.getMethods(message_codecs.BinaryCodec.__proto__),
    decodeMessage: dart.fnType(typed_data.ByteData, [typed_data.ByteData]),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object])
  }));
  dart.setLibraryUri(message_codecs.BinaryCodec, "package:flutter_web/src/services/message_codecs.dart");
  message_codecs.StringCodec = class StringCodec extends core.Object {
    decodeMessage(message) {
      if (message == null) return null;
      return convert.utf8.decoder.convert(message[$buffer][$asUint8List](message[$offsetInBytes], message[$lengthInBytes]));
    }
    encodeMessage(message) {
      core.String._check(message);
      if (message == null) return null;
      let encoded = convert.utf8.encoder.convert(message);
      return encoded[$buffer][$asByteData]();
    }
  };
  (message_codecs.StringCodec.new = function() {
    ;
  }).prototype = message_codecs.StringCodec.prototype;
  dart.addTypeTests(message_codecs.StringCodec);
  message_codecs.StringCodec[dart.implements] = () => [message_codec.MessageCodec$(core.String)];
  dart.setMethodSignature(message_codecs.StringCodec, () => ({
    __proto__: dart.getMethods(message_codecs.StringCodec.__proto__),
    decodeMessage: dart.fnType(core.String, [typed_data.ByteData]),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object])
  }));
  dart.setLibraryUri(message_codecs.StringCodec, "package:flutter_web/src/services/message_codecs.dart");
  message_codecs.JSONMessageCodec = class JSONMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) return null;
      return (C61 || CT.C61).encodeMessage(convert.json.encode(message));
    }
    decodeMessage(message) {
      if (message == null) return message;
      return convert.json.decode((C61 || CT.C61).decodeMessage(message));
    }
  };
  (message_codecs.JSONMessageCodec.new = function() {
    ;
  }).prototype = message_codecs.JSONMessageCodec.prototype;
  dart.addTypeTests(message_codecs.JSONMessageCodec);
  message_codecs.JSONMessageCodec[dart.implements] = () => [message_codec.MessageCodec];
  dart.setMethodSignature(message_codecs.JSONMessageCodec, () => ({
    __proto__: dart.getMethods(message_codecs.JSONMessageCodec.__proto__),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object]),
    decodeMessage: dart.fnType(dart.dynamic, [typed_data.ByteData])
  }));
  dart.setLibraryUri(message_codecs.JSONMessageCodec, "package:flutter_web/src/services/message_codecs.dart");
  message_codecs.JSONMethodCodec = class JSONMethodCodec extends core.Object {
    encodeMethodCall(call) {
      return (C59 || CT.C59).encodeMessage(new (IdentityMapOfString$dynamic()).from(["method", call.method, "args", call.arguments]));
    }
    decodeMethodCall(methodCall) {
      let decoded = (C59 || CT.C59).decodeMessage(methodCall);
      if (!core.Map.is(decoded)) dart.throw(new core.FormatException.new("Expected method call Map, got " + dart.str(decoded)));
      let method = dart.dsend(decoded, '_get', ["method"]);
      let arguments$0 = dart.dsend(decoded, '_get', ["args"]);
      if (typeof method == 'string') return new message_codec.MethodCall.new(method, arguments$0);
      dart.throw(new core.FormatException.new("Invalid method call: " + dart.str(decoded)));
    }
    decodeEnvelope(envelope) {
      let decoded = (C59 || CT.C59).decodeMessage(envelope);
      if (!core.List.is(decoded)) dart.throw(new core.FormatException.new("Expected envelope List, got " + dart.str(decoded)));
      if (dart.equals(dart.dload(decoded, 'length'), 1)) return dart.dsend(decoded, '_get', [0]);
      if (dart.equals(dart.dload(decoded, 'length'), 3) && typeof dart.dsend(decoded, '_get', [0]) == 'string' && (dart.dsend(decoded, '_get', [1]) == null || typeof dart.dsend(decoded, '_get', [1]) == 'string')) dart.throw(new message_codec.PlatformException.new({code: core.String._check(dart.dsend(decoded, '_get', [0])), message: core.String._check(dart.dsend(decoded, '_get', [1])), details: dart.dsend(decoded, '_get', [2])}));
      dart.throw(new core.FormatException.new("Invalid envelope: " + dart.str(decoded)));
    }
    encodeSuccessEnvelope(result) {
      return (C59 || CT.C59).encodeMessage([result]);
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      if (!(code != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/message_codecs.dart", 164, 12, "code != null");
      return (C59 || CT.C59).encodeMessage([code, message, details]);
    }
  };
  (message_codecs.JSONMethodCodec.new = function() {
    ;
  }).prototype = message_codecs.JSONMethodCodec.prototype;
  dart.addTypeTests(message_codecs.JSONMethodCodec);
  message_codecs.JSONMethodCodec[dart.implements] = () => [message_codec.MethodCodec];
  dart.setMethodSignature(message_codecs.JSONMethodCodec, () => ({
    __proto__: dart.getMethods(message_codecs.JSONMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [message_codec.MethodCall]),
    decodeMethodCall: dart.fnType(message_codec.MethodCall, [typed_data.ByteData]),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.dynamic]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {code: core.String, details: dart.dynamic, message: core.String})
  }));
  dart.setLibraryUri(message_codecs.JSONMethodCodec, "package:flutter_web/src/services/message_codecs.dart");
  let C67;
  message_codecs.StandardMessageCodec = class StandardMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) return null;
      let buffer = new serialization.WriteBuffer.new();
      this.writeValue(buffer, message);
      return buffer.done();
    }
    decodeMessage(message) {
      if (message == null) return null;
      let buffer = new serialization.ReadBuffer.new(message);
      let result = this.readValue(buffer);
      if (dart.test(buffer.hasRemaining)) dart.throw(C67 || CT.C67);
      return result;
    }
    writeValue(buffer, value) {
      if (value == null) {
        buffer.putUint8(0);
      } else if (typeof value == 'boolean') {
        buffer.putUint8(dart.test(value) ? 1 : 2);
      } else if (typeof value == 'number') {
        buffer.putUint8(6);
        buffer.putFloat64(value);
      } else if (core.int.is(value)) {
        if (-2147483647 - 1 <= dart.notNull(value) && dart.notNull(value) <= 2147483647) {
          buffer.putUint8(3);
          buffer.putInt32(value);
        } else {
          buffer.putUint8(4);
          buffer.putInt64(value);
        }
      } else if (typeof value == 'string') {
        buffer.putUint8(7);
        let bytes = convert.utf8.encoder.convert(value);
        this.writeSize(buffer, bytes[$length]);
        buffer.putUint8List(typed_data.Uint8List._check(bytes));
      } else if (typed_data.Uint8List.is(value)) {
        buffer.putUint8(8);
        this.writeSize(buffer, value[$length]);
        buffer.putUint8List(value);
      } else if (typed_data.Int32List.is(value)) {
        buffer.putUint8(9);
        this.writeSize(buffer, value[$length]);
        buffer.putInt32List(value);
      } else if (typed_data.Int64List.is(value)) {
        buffer.putUint8(10);
        this.writeSize(buffer, value[$length]);
        buffer.putInt64List(value);
      } else if (typed_data.Float64List.is(value)) {
        buffer.putUint8(11);
        this.writeSize(buffer, value[$length]);
        buffer.putFloat64List(value);
      } else if (core.List.is(value)) {
        buffer.putUint8(12);
        this.writeSize(buffer, value[$length]);
        for (let item of value) {
          this.writeValue(buffer, item);
        }
      } else if (core.Map.is(value)) {
        buffer.putUint8(13);
        this.writeSize(buffer, value[$length]);
        value[$forEach](dart.fn((key, value) => {
          this.writeValue(buffer, key);
          this.writeValue(buffer, value);
        }, dynamicAnddynamicToNull()));
      } else {
        dart.throw(new core.ArgumentError.value(value));
      }
    }
    readValue(buffer) {
      if (!dart.test(buffer.hasRemaining)) dart.throw(C67 || CT.C67);
      let type = buffer.getUint8();
      return this.readValueOfType(type, buffer);
    }
    readValueOfType(type, buffer) {
      switch (type) {
        case 0:
        {
          return null;
        }
        case 1:
        {
          return true;
        }
        case 2:
        {
          return false;
        }
        case 3:
        {
          return buffer.getInt32();
        }
        case 4:
        {
          return buffer.getInt64();
        }
        case 6:
        {
          return buffer.getFloat64();
        }
        case 5:
        case 7:
        {
          let length = this.readSize(buffer);
          return convert.utf8.decoder.convert(buffer.getUint8List(length));
        }
        case 8:
        {
          let length = this.readSize(buffer);
          return buffer.getUint8List(length);
        }
        case 9:
        {
          let length = this.readSize(buffer);
          return buffer.getInt32List(length);
        }
        case 10:
        {
          let length = this.readSize(buffer);
          return buffer.getInt64List(length);
        }
        case 11:
        {
          let length = this.readSize(buffer);
          return buffer.getFloat64List(length);
        }
        case 12:
        {
          let length = this.readSize(buffer);
          let result = core.List.new(length);
          for (let i = 0; i < dart.notNull(length); i = i + 1)
            dart.dsend(result, '_set', [i, this.readValue(buffer)]);
          return result;
        }
        case 13:
        {
          let length = this.readSize(buffer);
          let result = new _js_helper.LinkedMap.new();
          for (let i = 0; i < dart.notNull(length); i = i + 1)
            dart.dsend(result, '_set', [this.readValue(buffer), this.readValue(buffer)]);
          return result;
        }
        default:
        {
          dart.throw(C67 || CT.C67);
        }
      }
    }
    writeSize(buffer, value) {
      if (!(0 <= dart.notNull(value) && dart.notNull(value) <= 4294967295)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/message_codecs.dart", 460, 12, "0 <= value && value <= 0xffffffff");
      if (dart.notNull(value) < 254) {
        buffer.putUint8(value);
      } else if (dart.notNull(value) <= 65535) {
        buffer.putUint8(254);
        buffer.putUint16(value);
      } else {
        buffer.putUint8(255);
        buffer.putUint32(value);
      }
    }
    readSize(buffer) {
      let value = buffer.getUint8();
      switch (value) {
        case 254:
        {
          return buffer.getUint16();
        }
        case 255:
        {
          return buffer.getUint32();
        }
        default:
        {
          return value;
        }
      }
    }
  };
  (message_codecs.StandardMessageCodec.new = function() {
    ;
  }).prototype = message_codecs.StandardMessageCodec.prototype;
  dart.addTypeTests(message_codecs.StandardMessageCodec);
  message_codecs.StandardMessageCodec[dart.implements] = () => [message_codec.MessageCodec];
  dart.setMethodSignature(message_codecs.StandardMessageCodec, () => ({
    __proto__: dart.getMethods(message_codecs.StandardMessageCodec.__proto__),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object]),
    decodeMessage: dart.fnType(dart.dynamic, [typed_data.ByteData]),
    writeValue: dart.fnType(dart.void, [serialization.WriteBuffer, dart.dynamic]),
    readValue: dart.fnType(dart.dynamic, [serialization.ReadBuffer]),
    readValueOfType: dart.fnType(dart.dynamic, [core.int, serialization.ReadBuffer]),
    writeSize: dart.fnType(dart.void, [serialization.WriteBuffer, core.int]),
    readSize: dart.fnType(core.int, [serialization.ReadBuffer])
  }));
  dart.setLibraryUri(message_codecs.StandardMessageCodec, "package:flutter_web/src/services/message_codecs.dart");
  dart.defineLazy(message_codecs.StandardMessageCodec, {
    /*message_codecs.StandardMessageCodec._valueNull*/get _valueNull() {
      return 0;
    },
    /*message_codecs.StandardMessageCodec._valueTrue*/get _valueTrue() {
      return 1;
    },
    /*message_codecs.StandardMessageCodec._valueFalse*/get _valueFalse() {
      return 2;
    },
    /*message_codecs.StandardMessageCodec._valueInt32*/get _valueInt32() {
      return 3;
    },
    /*message_codecs.StandardMessageCodec._valueInt64*/get _valueInt64() {
      return 4;
    },
    /*message_codecs.StandardMessageCodec._valueLargeInt*/get _valueLargeInt() {
      return 5;
    },
    /*message_codecs.StandardMessageCodec._valueFloat64*/get _valueFloat64() {
      return 6;
    },
    /*message_codecs.StandardMessageCodec._valueString*/get _valueString() {
      return 7;
    },
    /*message_codecs.StandardMessageCodec._valueUint8List*/get _valueUint8List() {
      return 8;
    },
    /*message_codecs.StandardMessageCodec._valueInt32List*/get _valueInt32List() {
      return 9;
    },
    /*message_codecs.StandardMessageCodec._valueInt64List*/get _valueInt64List() {
      return 10;
    },
    /*message_codecs.StandardMessageCodec._valueFloat64List*/get _valueFloat64List() {
      return 11;
    },
    /*message_codecs.StandardMessageCodec._valueList*/get _valueList() {
      return 12;
    },
    /*message_codecs.StandardMessageCodec._valueMap*/get _valueMap() {
      return 13;
    }
  });
  let C68;
  let C69;
  let C70;
  message_codecs.StandardMethodCodec = class StandardMethodCodec extends core.Object {
    get messageCodec() {
      return this[messageCodec$];
    }
    set messageCodec(value) {
      super.messageCodec = value;
    }
    encodeMethodCall(call) {
      let buffer = new serialization.WriteBuffer.new();
      this.messageCodec.writeValue(buffer, call.method);
      this.messageCodec.writeValue(buffer, call.arguments);
      return buffer.done();
    }
    decodeMethodCall(methodCall) {
      let buffer = new serialization.ReadBuffer.new(methodCall);
      let method = this.messageCodec.readValue(buffer);
      let arguments$0 = this.messageCodec.readValue(buffer);
      if (typeof method == 'string' && !dart.test(buffer.hasRemaining))
        return new message_codec.MethodCall.new(method, arguments$0);
      else
        dart.throw(C68 || CT.C68);
    }
    encodeSuccessEnvelope(result) {
      let buffer = new serialization.WriteBuffer.new();
      buffer.putUint8(0);
      this.messageCodec.writeValue(buffer, result);
      return buffer.done();
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      let buffer = new serialization.WriteBuffer.new();
      buffer.putUint8(1);
      this.messageCodec.writeValue(buffer, code);
      this.messageCodec.writeValue(buffer, message);
      this.messageCodec.writeValue(buffer, details);
      return buffer.done();
    }
    decodeEnvelope(envelope) {
      if (envelope[$lengthInBytes] === 0) dart.throw(C69 || CT.C69);
      let buffer = new serialization.ReadBuffer.new(envelope);
      if (buffer.getUint8() === 0) return this.messageCodec.readValue(buffer);
      let errorCode = this.messageCodec.readValue(buffer);
      let errorMessage = this.messageCodec.readValue(buffer);
      let errorDetails = this.messageCodec.readValue(buffer);
      if (typeof errorCode == 'string' && (errorMessage == null || typeof errorMessage == 'string') && !dart.test(buffer.hasRemaining))
        dart.throw(new message_codec.PlatformException.new({code: errorCode, message: core.String._check(errorMessage), details: errorDetails}));
      else
        dart.throw(C70 || CT.C70);
    }
  };
  (message_codecs.StandardMethodCodec.new = function(messageCodec) {
    if (messageCodec === void 0) messageCodec = C64 || CT.C64;
    this[messageCodec$] = messageCodec;
    ;
  }).prototype = message_codecs.StandardMethodCodec.prototype;
  dart.addTypeTests(message_codecs.StandardMethodCodec);
  const messageCodec$ = Symbol("StandardMethodCodec.messageCodec");
  message_codecs.StandardMethodCodec[dart.implements] = () => [message_codec.MethodCodec];
  dart.setMethodSignature(message_codecs.StandardMethodCodec, () => ({
    __proto__: dart.getMethods(message_codecs.StandardMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [message_codec.MethodCall]),
    decodeMethodCall: dart.fnType(message_codec.MethodCall, [typed_data.ByteData]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.dynamic]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {code: core.String, details: dart.dynamic, message: core.String}),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData])
  }));
  dart.setLibraryUri(message_codecs.StandardMethodCodec, "package:flutter_web/src/services/message_codecs.dart");
  dart.setFieldSignature(message_codecs.StandardMethodCodec, () => ({
    __proto__: dart.getFields(message_codecs.StandardMethodCodec.__proto__),
    messageCodec: dart.finalFieldType(message_codecs.StandardMessageCodec)
  }));
  const _is_MessageCodec_default = Symbol('_is_MessageCodec_default');
  message_codec.MessageCodec$ = dart.generic(T => {
    class MessageCodec extends core.Object {}
    (MessageCodec.new = function() {
      ;
    }).prototype = MessageCodec.prototype;
    dart.addTypeTests(MessageCodec);
    MessageCodec.prototype[_is_MessageCodec_default] = true;
    dart.setLibraryUri(MessageCodec, "package:flutter_web/src/services/message_codec.dart");
    return MessageCodec;
  });
  message_codec.MessageCodec = message_codec.MessageCodec$();
  dart.addTypeTests(message_codec.MessageCodec, _is_MessageCodec_default);
  message_codec.MethodCall = class MethodCall extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get arguments() {
      return this[arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.method) + ", " + dart.str(this.arguments) + ")";
    }
  };
  (message_codec.MethodCall.new = function(method, arguments$0) {
    if (arguments$0 === void 0) arguments$0 = null;
    this[method$] = method;
    this[arguments$] = arguments$0;
    if (!(method != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/message_codec.dart", 39, 60, "method != null");
    ;
  }).prototype = message_codec.MethodCall.prototype;
  dart.addTypeTests(message_codec.MethodCall);
  const method$ = Symbol("MethodCall.method");
  const arguments$ = Symbol("MethodCall.arguments");
  dart.setLibraryUri(message_codec.MethodCall, "package:flutter_web/src/services/message_codec.dart");
  dart.setFieldSignature(message_codec.MethodCall, () => ({
    __proto__: dart.getFields(message_codec.MethodCall.__proto__),
    method: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(message_codec.MethodCall, ['toString']);
  message_codec.MethodCodec = class MethodCodec extends core.Object {};
  (message_codec.MethodCodec.new = function() {
    ;
  }).prototype = message_codec.MethodCodec.prototype;
  dart.addTypeTests(message_codec.MethodCodec);
  dart.setLibraryUri(message_codec.MethodCodec, "package:flutter_web/src/services/message_codec.dart");
  message_codec.PlatformException = class PlatformException extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
    toString() {
      return "PlatformException(" + dart.str(this.code) + ", " + dart.str(this.message) + ", " + dart.str(this.details) + ")";
    }
  };
  (message_codec.PlatformException.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let details = opts && 'details' in opts ? opts.details : null;
    this[code$] = code;
    this[message$] = message;
    this[details$] = details;
    if (!(code != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/message_codec.dart", 108, 15, "code != null");
    ;
  }).prototype = message_codec.PlatformException.prototype;
  dart.addTypeTests(message_codec.PlatformException);
  const code$ = Symbol("PlatformException.code");
  const message$ = Symbol("PlatformException.message");
  const details$ = Symbol("PlatformException.details");
  message_codec.PlatformException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(message_codec.PlatformException, "package:flutter_web/src/services/message_codec.dart");
  dart.setFieldSignature(message_codec.PlatformException, () => ({
    __proto__: dart.getFields(message_codec.PlatformException.__proto__),
    code: dart.finalFieldType(core.String),
    message: dart.finalFieldType(core.String),
    details: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(message_codec.PlatformException, ['toString']);
  message_codec.MissingPluginException = class MissingPluginException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "MissingPluginException(" + dart.str(this.message) + ")";
    }
  };
  (message_codec.MissingPluginException.new = function(message) {
    if (message === void 0) message = null;
    this[message$0] = message;
    ;
  }).prototype = message_codec.MissingPluginException.prototype;
  dart.addTypeTests(message_codec.MissingPluginException);
  const message$0 = Symbol("MissingPluginException.message");
  message_codec.MissingPluginException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(message_codec.MissingPluginException, "package:flutter_web/src/services/message_codec.dart");
  dart.setFieldSignature(message_codec.MissingPluginException, () => ({
    __proto__: dart.getFields(message_codec.MissingPluginException.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(message_codec.MissingPluginException, ['toString']);
  const _name$1 = dart.privateName(animation$, "_name");
  let C71;
  let C72;
  let C73;
  let C74;
  const _is_Animation_default = Symbol('_is_Animation_default');
  animation$.Animation$ = dart.generic(T => {
    class Animation extends change_notifier.Listenable {
      get isDismissed() {
        return dart.equals(this.status, animation$.AnimationStatus.dismissed);
      }
      get isCompleted() {
        return dart.equals(this.status, animation$.AnimationStatus.completed);
      }
      drive(U, child) {
        if (!AnimationOfdouble().is(this)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animation.dart", 162, 12, "this is Animation<double>");
        return child.animate(AnimationOfdouble()._check(this));
      }
      toString() {
        return dart.str(diagnostics.describeIdentity(this)) + "(" + dart.str(this.toStringDetails()) + ")";
      }
      toStringDetails() {
        if (!(this.status != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animation.dart", 186, 12, "status != null");
        let icon = null;
        switch (this.status) {
          case C71 || CT.C71:
          {
            icon = "▶";
            break;
          }
          case C72 || CT.C72:
          {
            icon = "◀";
            break;
          }
          case C73 || CT.C73:
          {
            icon = "⏭";
            break;
          }
          case C74 || CT.C74:
          {
            icon = "⏮";
            break;
          }
        }
        if (!(icon != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animation.dart", 202, 12, "icon != null");
        return dart.str(icon);
      }
    }
    (Animation.new = function() {
      Animation.__proto__.new.call(this);
      ;
    }).prototype = Animation.prototype;
    dart.addTypeTests(Animation);
    Animation.prototype[_is_Animation_default] = true;
    Animation[dart.implements] = () => [change_notifier.ValueListenable$(T)];
    dart.setMethodSignature(Animation, () => ({
      __proto__: dart.getMethods(Animation.__proto__),
      drive: dart.gFnType(U => [animation$.Animation$(U), [tween.Animatable$(U)]]),
      toStringDetails: dart.fnType(core.String, [])
    }));
    dart.setGetterSignature(Animation, () => ({
      __proto__: dart.getGetters(Animation.__proto__),
      isDismissed: core.bool,
      isCompleted: core.bool
    }));
    dart.setLibraryUri(Animation, "package:flutter_web/src/animation/animation.dart");
    dart.defineExtensionMethods(Animation, ['toString']);
    return Animation;
  });
  animation$.Animation = animation$.Animation$();
  dart.addTypeTests(animation$.Animation, _is_Animation_default);
  animations._AlwaysCompleteAnimation = class _AlwaysCompleteAnimation extends animation$.Animation$(core.double) {
    addListener(listener) {
    }
    removeListener(listener) {
    }
    addStatusListener(listener) {
    }
    removeStatusListener(listener) {
    }
    get status() {
      return animation$.AnimationStatus.completed;
    }
    get value() {
      return 1.0;
    }
    toString() {
      return "kAlwaysCompleteAnimation";
    }
  };
  (animations._AlwaysCompleteAnimation.new = function() {
    animations._AlwaysCompleteAnimation.__proto__.new.call(this);
    ;
  }).prototype = animations._AlwaysCompleteAnimation.prototype;
  dart.addTypeTests(animations._AlwaysCompleteAnimation);
  dart.setMethodSignature(animations._AlwaysCompleteAnimation, () => ({
    __proto__: dart.getMethods(animations._AlwaysCompleteAnimation.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])]),
    removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])])
  }));
  dart.setGetterSignature(animations._AlwaysCompleteAnimation, () => ({
    __proto__: dart.getGetters(animations._AlwaysCompleteAnimation.__proto__),
    status: animation$.AnimationStatus,
    value: core.double
  }));
  dart.setLibraryUri(animations._AlwaysCompleteAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.defineExtensionMethods(animations._AlwaysCompleteAnimation, ['toString']);
  animations._AlwaysDismissedAnimation = class _AlwaysDismissedAnimation extends animation$.Animation$(core.double) {
    addListener(listener) {
    }
    removeListener(listener) {
    }
    addStatusListener(listener) {
    }
    removeStatusListener(listener) {
    }
    get status() {
      return animation$.AnimationStatus.dismissed;
    }
    get value() {
      return 0.0;
    }
    toString() {
      return "kAlwaysDismissedAnimation";
    }
  };
  (animations._AlwaysDismissedAnimation.new = function() {
    animations._AlwaysDismissedAnimation.__proto__.new.call(this);
    ;
  }).prototype = animations._AlwaysDismissedAnimation.prototype;
  dart.addTypeTests(animations._AlwaysDismissedAnimation);
  dart.setMethodSignature(animations._AlwaysDismissedAnimation, () => ({
    __proto__: dart.getMethods(animations._AlwaysDismissedAnimation.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])]),
    removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])])
  }));
  dart.setGetterSignature(animations._AlwaysDismissedAnimation, () => ({
    __proto__: dart.getGetters(animations._AlwaysDismissedAnimation.__proto__),
    status: animation$.AnimationStatus,
    value: core.double
  }));
  dart.setLibraryUri(animations._AlwaysDismissedAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.defineExtensionMethods(animations._AlwaysDismissedAnimation, ['toString']);
  const _is_AlwaysStoppedAnimation_default = Symbol('_is_AlwaysStoppedAnimation_default');
  animations.AlwaysStoppedAnimation$ = dart.generic(T => {
    class AlwaysStoppedAnimation extends animation$.Animation$(T) {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      addListener(listener) {
      }
      removeListener(listener) {
      }
      addStatusListener(listener) {
      }
      removeStatusListener(listener) {
      }
      get status() {
        return animation$.AnimationStatus.forward;
      }
      toStringDetails() {
        return dart.str(super.toStringDetails()) + " " + dart.str(this.value) + "; paused";
      }
    }
    (AlwaysStoppedAnimation.new = function(value) {
      this[value$] = value;
      AlwaysStoppedAnimation.__proto__.new.call(this);
      ;
    }).prototype = AlwaysStoppedAnimation.prototype;
    dart.addTypeTests(AlwaysStoppedAnimation);
    AlwaysStoppedAnimation.prototype[_is_AlwaysStoppedAnimation_default] = true;
    const value$ = Symbol("AlwaysStoppedAnimation.value");
    dart.setMethodSignature(AlwaysStoppedAnimation, () => ({
      __proto__: dart.getMethods(AlwaysStoppedAnimation.__proto__),
      addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])]),
      removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])])
    }));
    dart.setGetterSignature(AlwaysStoppedAnimation, () => ({
      __proto__: dart.getGetters(AlwaysStoppedAnimation.__proto__),
      status: animation$.AnimationStatus
    }));
    dart.setLibraryUri(AlwaysStoppedAnimation, "package:flutter_web/src/animation/animations.dart");
    dart.setFieldSignature(AlwaysStoppedAnimation, () => ({
      __proto__: dart.getFields(AlwaysStoppedAnimation.__proto__),
      value: dart.finalFieldType(T)
    }));
    return AlwaysStoppedAnimation;
  });
  animations.AlwaysStoppedAnimation = animations.AlwaysStoppedAnimation$();
  dart.addTypeTests(animations.AlwaysStoppedAnimation, _is_AlwaysStoppedAnimation_default);
  const _is_AnimationWithParentMixin_default = Symbol('_is_AnimationWithParentMixin_default');
  animations.AnimationWithParentMixin$ = dart.generic(T => {
    class AnimationWithParentMixin extends core.Object {}
    AnimationWithParentMixin[dart.mixinOn] = Object => class AnimationWithParentMixin extends Object {
      addListener(listener) {
        return this.parent.addListener(listener);
      }
      removeListener(listener) {
        return this.parent.removeListener(listener);
      }
      addStatusListener(listener) {
        return this.parent.addStatusListener(listener);
      }
      removeStatusListener(listener) {
        return this.parent.removeStatusListener(listener);
      }
      get status() {
        return this.parent.status;
      }
    };
    (AnimationWithParentMixin[dart.mixinNew] = function() {
    }).prototype = AnimationWithParentMixin.prototype;
    dart.addTypeTests(AnimationWithParentMixin);
    AnimationWithParentMixin.prototype[_is_AnimationWithParentMixin_default] = true;
    AnimationWithParentMixin[dart.implements] = () => [core.Object];
    dart.setMethodSignature(AnimationWithParentMixin, () => ({
      __proto__: dart.getMethods(AnimationWithParentMixin.__proto__),
      addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])]),
      removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])])
    }));
    dart.setGetterSignature(AnimationWithParentMixin, () => ({
      __proto__: dart.getGetters(AnimationWithParentMixin.__proto__),
      status: animation$.AnimationStatus
    }));
    dart.setLibraryUri(AnimationWithParentMixin, "package:flutter_web/src/animation/animations.dart");
    return AnimationWithParentMixin;
  });
  animations.AnimationWithParentMixin = animations.AnimationWithParentMixin$();
  dart.addTypeTests(animations.AnimationWithParentMixin, _is_AnimationWithParentMixin_default);
  const _status = dart.privateName(animations, "_status");
  const _value$ = dart.privateName(animations, "_value");
  const _parent = dart.privateName(animations, "_parent");
  const _listenerCounter = dart.privateName(listener_helpers, "_listenerCounter");
  listener_helpers.AnimationLazyListenerMixin = class AnimationLazyListenerMixin extends core.Object {};
  listener_helpers.AnimationLazyListenerMixin[dart.mixinOn] = Object => class AnimationLazyListenerMixin extends Object {
    didRegisterListener() {
      if (!(dart.notNull(this[_listenerCounter]) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/listener_helpers.dart", 29, 12, "_listenerCounter >= 0");
      if (this[_listenerCounter] === 0) this.didStartListening();
      this[_listenerCounter] = dart.notNull(this[_listenerCounter]) + 1;
    }
    didUnregisterListener() {
      if (!(dart.notNull(this[_listenerCounter]) >= 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/listener_helpers.dart", 42, 12, "_listenerCounter >= 1");
      this[_listenerCounter] = dart.notNull(this[_listenerCounter]) - 1;
      if (this[_listenerCounter] === 0) this.didStopListening();
    }
    get isListening() {
      return dart.notNull(this[_listenerCounter]) > 0;
    }
  };
  (listener_helpers.AnimationLazyListenerMixin[dart.mixinNew] = function() {
    this[_listenerCounter] = 0;
  }).prototype = listener_helpers.AnimationLazyListenerMixin.prototype;
  dart.addTypeTests(listener_helpers.AnimationLazyListenerMixin);
  listener_helpers.AnimationLazyListenerMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(listener_helpers.AnimationLazyListenerMixin, () => ({
    __proto__: dart.getMethods(listener_helpers.AnimationLazyListenerMixin.__proto__),
    didRegisterListener: dart.fnType(dart.void, []),
    didUnregisterListener: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(listener_helpers.AnimationLazyListenerMixin, () => ({
    __proto__: dart.getGetters(listener_helpers.AnimationLazyListenerMixin.__proto__),
    isListening: core.bool
  }));
  dart.setLibraryUri(listener_helpers.AnimationLazyListenerMixin, "package:flutter_web/src/animation/listener_helpers.dart");
  dart.setFieldSignature(listener_helpers.AnimationLazyListenerMixin, () => ({
    __proto__: dart.getFields(listener_helpers.AnimationLazyListenerMixin.__proto__),
    [_listenerCounter]: dart.fieldType(core.int)
  }));
  const _listeners = dart.privateName(listener_helpers, "_listeners");
  listener_helpers.AnimationLocalListenersMixin = class AnimationLocalListenersMixin extends core.Object {};
  listener_helpers.AnimationLocalListenersMixin[dart.mixinOn] = Object => class AnimationLocalListenersMixin extends Object {
    addListener(listener) {
      this.didRegisterListener();
      this[_listeners].add(listener);
    }
    removeListener(listener) {
      let removed = this[_listeners].remove(listener);
      if (dart.test(removed)) {
        this.didUnregisterListener();
      }
    }
    notifyListeners() {
      let localListeners = ListOfVoidTovoid().from(this[_listeners]);
      for (let listener of localListeners) {
        try {
          if (dart.test(this[_listeners].contains(listener))) listener();
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "animation library", context: new assertions.ErrorDescription.new("while notifying listeners for " + dart.str(this[$runtimeType])), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin()).new((function*() {
              yield new (DiagnosticsPropertyOfAnimationLocalListenersMixin()).new("The " + dart.str(this[$runtimeType]) + " notifying listeners was", this, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
            }).bind(this)), VoidToIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin())}));
        }
      }
    }
  };
  (listener_helpers.AnimationLocalListenersMixin[dart.mixinNew] = function() {
    this[_listeners] = new (ObserverListOfVoidTovoid()).new();
  }).prototype = listener_helpers.AnimationLocalListenersMixin.prototype;
  dart.addTypeTests(listener_helpers.AnimationLocalListenersMixin);
  listener_helpers.AnimationLocalListenersMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(listener_helpers.AnimationLocalListenersMixin, () => ({
    __proto__: dart.getMethods(listener_helpers.AnimationLocalListenersMixin.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    notifyListeners: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(listener_helpers.AnimationLocalListenersMixin, "package:flutter_web/src/animation/listener_helpers.dart");
  dart.setFieldSignature(listener_helpers.AnimationLocalListenersMixin, () => ({
    __proto__: dart.getFields(listener_helpers.AnimationLocalListenersMixin.__proto__),
    [_listeners]: dart.finalFieldType(observer_list.ObserverList$(dart.fnType(dart.void, [])))
  }));
  const _statusListeners = dart.privateName(listener_helpers, "_statusListeners");
  listener_helpers.AnimationLocalStatusListenersMixin = class AnimationLocalStatusListenersMixin extends core.Object {};
  listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinOn] = Object => class AnimationLocalStatusListenersMixin extends Object {
    addStatusListener(listener) {
      this.didRegisterListener();
      this[_statusListeners].add(listener);
    }
    removeStatusListener(listener) {
      let removed = this[_statusListeners].remove(listener);
      if (dart.test(removed)) {
        this.didUnregisterListener();
      }
    }
    notifyStatusListeners(status) {
      let localListeners = ListOfAnimationStatusTovoid().from(this[_statusListeners]);
      for (let listener of localListeners) {
        try {
          if (dart.test(this[_statusListeners].contains(listener))) listener(status);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "animation library", context: new assertions.ErrorDescription.new("while notifying status listeners for " + dart.str(this[$runtimeType])), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin()).new((function*() {
              yield new (DiagnosticsPropertyOfAnimationLocalStatusListenersMixin()).new("The " + dart.str(this[$runtimeType]) + " notifying status listeners was", this, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
            }).bind(this)), VoidToIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin())}));
        }
      }
    }
  };
  (listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew] = function() {
    this[_statusListeners] = new (ObserverListOfAnimationStatusTovoid()).new();
  }).prototype = listener_helpers.AnimationLocalStatusListenersMixin.prototype;
  dart.addTypeTests(listener_helpers.AnimationLocalStatusListenersMixin);
  listener_helpers.AnimationLocalStatusListenersMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(listener_helpers.AnimationLocalStatusListenersMixin, () => ({
    __proto__: dart.getMethods(listener_helpers.AnimationLocalStatusListenersMixin.__proto__),
    addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])]),
    removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [animation$.AnimationStatus])]),
    notifyStatusListeners: dart.fnType(dart.void, [animation$.AnimationStatus])
  }));
  dart.setLibraryUri(listener_helpers.AnimationLocalStatusListenersMixin, "package:flutter_web/src/animation/listener_helpers.dart");
  dart.setFieldSignature(listener_helpers.AnimationLocalStatusListenersMixin, () => ({
    __proto__: dart.getFields(listener_helpers.AnimationLocalStatusListenersMixin.__proto__),
    [_statusListeners]: dart.finalFieldType(observer_list.ObserverList$(dart.fnType(dart.void, [animation$.AnimationStatus])))
  }));
  const Animation_AnimationLazyListenerMixin$ = class Animation_AnimationLazyListenerMixin extends animation$.Animation$(core.double) {};
  (Animation_AnimationLazyListenerMixin$.new = function() {
    listener_helpers.AnimationLazyListenerMixin[dart.mixinNew].call(this);
    Animation_AnimationLazyListenerMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLazyListenerMixin$.prototype;
  dart.applyMixin(Animation_AnimationLazyListenerMixin$, listener_helpers.AnimationLazyListenerMixin);
  const Animation_AnimationLocalListenersMixin$ = class Animation_AnimationLocalListenersMixin extends Animation_AnimationLazyListenerMixin$ {};
  (Animation_AnimationLocalListenersMixin$.new = function() {
    listener_helpers.AnimationLocalListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalListenersMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalListenersMixin$.prototype;
  dart.applyMixin(Animation_AnimationLocalListenersMixin$, listener_helpers.AnimationLocalListenersMixin);
  const Animation_AnimationLocalStatusListenersMixin$ = class Animation_AnimationLocalStatusListenersMixin extends Animation_AnimationLocalListenersMixin$ {};
  (Animation_AnimationLocalStatusListenersMixin$.new = function() {
    listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalStatusListenersMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalStatusListenersMixin$.prototype;
  dart.applyMixin(Animation_AnimationLocalStatusListenersMixin$, listener_helpers.AnimationLocalStatusListenersMixin);
  animations.ProxyAnimation = class ProxyAnimation extends Animation_AnimationLocalStatusListenersMixin$ {
    get parent() {
      return this[_parent];
    }
    set parent(value) {
      if (dart.equals(value, this[_parent])) return;
      if (this[_parent] != null) {
        this[_status] = this[_parent].status;
        this[_value$] = this[_parent].value;
        if (dart.test(this.isListening)) this.didStopListening();
      }
      this[_parent] = value;
      if (this[_parent] != null) {
        if (dart.test(this.isListening)) this.didStartListening();
        if (this[_value$] != this[_parent].value) this.notifyListeners();
        if (!dart.equals(this[_status], this[_parent].status)) this.notifyStatusListeners(this[_parent].status);
        this[_status] = null;
        this[_value$] = null;
      }
    }
    didStartListening() {
      if (this[_parent] != null) {
        this[_parent].addListener(dart.bind(this, 'notifyListeners'));
        this[_parent].addStatusListener(dart.bind(this, 'notifyStatusListeners'));
      }
    }
    didStopListening() {
      if (this[_parent] != null) {
        this[_parent].removeListener(dart.bind(this, 'notifyListeners'));
        this[_parent].removeStatusListener(dart.bind(this, 'notifyStatusListeners'));
      }
    }
    get status() {
      return this[_parent] != null ? this[_parent].status : this[_status];
    }
    get value() {
      return this[_parent] != null ? this[_parent].value : this[_value$];
    }
    toString() {
      if (this.parent == null) return dart.str(this[$runtimeType]) + "(null; " + dart.str(super.toStringDetails()) + " " + this.value[$toStringAsFixed](3) + ")";
      return dart.str(this.parent) + "➩" + dart.str(this[$runtimeType]);
    }
  };
  (animations.ProxyAnimation.new = function(animation) {
    if (animation === void 0) animation = null;
    this[_status] = null;
    this[_value$] = null;
    this[_parent] = null;
    animations.ProxyAnimation.__proto__.new.call(this);
    this[_parent] = animation;
    if (this[_parent] == null) {
      this[_status] = animation$.AnimationStatus.dismissed;
      this[_value$] = 0.0;
    }
  }).prototype = animations.ProxyAnimation.prototype;
  dart.addTypeTests(animations.ProxyAnimation);
  dart.setMethodSignature(animations.ProxyAnimation, () => ({
    __proto__: dart.getMethods(animations.ProxyAnimation.__proto__),
    didStartListening: dart.fnType(dart.void, []),
    didStopListening: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(animations.ProxyAnimation, () => ({
    __proto__: dart.getGetters(animations.ProxyAnimation.__proto__),
    parent: animation$.Animation$(core.double),
    status: animation$.AnimationStatus,
    value: core.double
  }));
  dart.setSetterSignature(animations.ProxyAnimation, () => ({
    __proto__: dart.getSetters(animations.ProxyAnimation.__proto__),
    parent: animation$.Animation$(core.double)
  }));
  dart.setLibraryUri(animations.ProxyAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(animations.ProxyAnimation, () => ({
    __proto__: dart.getFields(animations.ProxyAnimation.__proto__),
    [_status]: dart.fieldType(animation$.AnimationStatus),
    [_value$]: dart.fieldType(core.double),
    [_parent]: dart.fieldType(animation$.Animation$(core.double))
  }));
  dart.defineExtensionMethods(animations.ProxyAnimation, ['toString']);
  const _statusChangeHandler = dart.privateName(animations, "_statusChangeHandler");
  const _reverseStatus = dart.privateName(animations, "_reverseStatus");
  const Animation_AnimationLazyListenerMixin$$ = class Animation_AnimationLazyListenerMixin extends animation$.Animation$(core.double) {};
  (Animation_AnimationLazyListenerMixin$$.new = function() {
    listener_helpers.AnimationLazyListenerMixin[dart.mixinNew].call(this);
    Animation_AnimationLazyListenerMixin$$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLazyListenerMixin$$.prototype;
  dart.applyMixin(Animation_AnimationLazyListenerMixin$$, listener_helpers.AnimationLazyListenerMixin);
  const Animation_AnimationLocalStatusListenersMixin$$ = class Animation_AnimationLocalStatusListenersMixin extends Animation_AnimationLazyListenerMixin$$ {};
  (Animation_AnimationLocalStatusListenersMixin$$.new = function() {
    listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalStatusListenersMixin$$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalStatusListenersMixin$$.prototype;
  dart.applyMixin(Animation_AnimationLocalStatusListenersMixin$$, listener_helpers.AnimationLocalStatusListenersMixin);
  animations.ReverseAnimation = class ReverseAnimation extends Animation_AnimationLocalStatusListenersMixin$$ {
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    addListener(listener) {
      this.didRegisterListener();
      this.parent.addListener(listener);
    }
    removeListener(listener) {
      this.parent.removeListener(listener);
      this.didUnregisterListener();
    }
    didStartListening() {
      this.parent.addStatusListener(dart.bind(this, _statusChangeHandler));
    }
    didStopListening() {
      this.parent.removeStatusListener(dart.bind(this, _statusChangeHandler));
    }
    [_statusChangeHandler](status) {
      this.notifyStatusListeners(this[_reverseStatus](status));
    }
    get status() {
      return this[_reverseStatus](this.parent.status);
    }
    get value() {
      return 1.0 - dart.notNull(this.parent.value);
    }
    [_reverseStatus](status) {
      if (!(status != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 304, 12, "status != null");
      switch (status) {
        case C71 || CT.C71:
        {
          return animation$.AnimationStatus.reverse;
        }
        case C72 || CT.C72:
        {
          return animation$.AnimationStatus.forward;
        }
        case C73 || CT.C73:
        {
          return animation$.AnimationStatus.dismissed;
        }
        case C74 || CT.C74:
        {
          return animation$.AnimationStatus.completed;
        }
      }
      return null;
    }
    toString() {
      return dart.str(this.parent) + "➪" + dart.str(this[$runtimeType]);
    }
  };
  (animations.ReverseAnimation.new = function(parent) {
    this[parent$] = parent;
    if (!(parent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 266, 14, "parent != null");
    animations.ReverseAnimation.__proto__.new.call(this);
    ;
  }).prototype = animations.ReverseAnimation.prototype;
  dart.addTypeTests(animations.ReverseAnimation);
  const parent$ = Symbol("ReverseAnimation.parent");
  dart.setMethodSignature(animations.ReverseAnimation, () => ({
    __proto__: dart.getMethods(animations.ReverseAnimation.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    didStartListening: dart.fnType(dart.void, []),
    didStopListening: dart.fnType(dart.void, []),
    [_statusChangeHandler]: dart.fnType(dart.void, [animation$.AnimationStatus]),
    [_reverseStatus]: dart.fnType(animation$.AnimationStatus, [animation$.AnimationStatus])
  }));
  dart.setGetterSignature(animations.ReverseAnimation, () => ({
    __proto__: dart.getGetters(animations.ReverseAnimation.__proto__),
    status: animation$.AnimationStatus,
    value: core.double
  }));
  dart.setLibraryUri(animations.ReverseAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(animations.ReverseAnimation, () => ({
    __proto__: dart.getFields(animations.ReverseAnimation.__proto__),
    parent: dart.finalFieldType(animation$.Animation$(core.double))
  }));
  dart.defineExtensionMethods(animations.ReverseAnimation, ['toString']);
  const _curveDirection = dart.privateName(animations, "_curveDirection");
  const _updateCurveDirection = dart.privateName(animations, "_updateCurveDirection");
  const _useForwardCurve = dart.privateName(animations, "_useForwardCurve");
  const Animation_AnimationWithParentMixin$ = class Animation_AnimationWithParentMixin extends animation$.Animation$(core.double) {};
  (Animation_AnimationWithParentMixin$.new = function() {
    Animation_AnimationWithParentMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationWithParentMixin$.prototype;
  dart.applyMixin(Animation_AnimationWithParentMixin$, animations.AnimationWithParentMixin$(core.double));
  animations.CurvedAnimation = class CurvedAnimation extends Animation_AnimationWithParentMixin$ {
    get parent() {
      return this[parent$0];
    }
    set parent(value) {
      super.parent = value;
    }
    get curve() {
      return this[curve$];
    }
    set curve(value) {
      this[curve$] = value;
    }
    get reverseCurve() {
      return this[reverseCurve$];
    }
    set reverseCurve(value) {
      this[reverseCurve$] = value;
    }
    [_updateCurveDirection](status) {
      switch (status) {
        case C74 || CT.C74:
        case C73 || CT.C73:
        {
          this[_curveDirection] = null;
          break;
        }
        case C71 || CT.C71:
        {
          this[_curveDirection] == null ? this[_curveDirection] = animation$.AnimationStatus.forward : null;
          break;
        }
        case C72 || CT.C72:
        {
          this[_curveDirection] == null ? this[_curveDirection] = animation$.AnimationStatus.reverse : null;
          break;
        }
      }
    }
    get [_useForwardCurve]() {
      let t11;
      return this.reverseCurve == null || !dart.equals((t11 = this[_curveDirection], t11 == null ? this.parent.status : t11), animation$.AnimationStatus.reverse);
    }
    get value() {
      let activeCurve = dart.test(this[_useForwardCurve]) ? this.curve : this.reverseCurve;
      let t = this.parent.value;
      if (activeCurve == null) return t;
      if (t === 0.0 || t === 1.0) {
        if (!dart.test(dart.fn(() => {
          let transformedValue = activeCurve.transform(t);
          let roundedTransformedValue = transformedValue[$round]()[$toDouble]();
          if (roundedTransformedValue !== t) {
            dart.throw(assertions.FlutterError.new("Invalid curve endpoint at " + dart.str(t) + ".\n" + "Curves must map 0.0 to near zero and 1.0 to near one but " + dart.str(dart.runtimeType(activeCurve)) + " mapped " + dart.str(t) + " to " + dart.str(transformedValue) + ", which " + "is near " + dart.str(roundedTransformedValue) + "."));
          }
          return true;
        }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 441, 14, "() {\n        final double transformedValue = activeCurve.transform(t);\n        final double roundedTransformedValue = transformedValue.round().toDouble();\n        if (roundedTransformedValue != t) {\n          throw FlutterError(\n            'Invalid curve endpoint at $t.\\n'\n            'Curves must map 0.0 to near zero and 1.0 to near one but '\n            '${activeCurve.runtimeType} mapped $t to $transformedValue, which '\n            'is near $roundedTransformedValue.'\n          );\n        }\n        return true;\n      }()");
        return t;
      }
      return activeCurve.transform(t);
    }
    toString() {
      if (this.reverseCurve == null) return dart.str(this.parent) + "➩" + dart.str(this.curve);
      if (dart.test(this[_useForwardCurve])) return dart.str(this.parent) + "➩" + dart.str(this.curve) + "ₒₙ/" + dart.str(this.reverseCurve);
      return dart.str(this.parent) + "➩" + dart.str(this.curve) + "/" + dart.str(this.reverseCurve) + "ₒₙ";
    }
  };
  (animations.CurvedAnimation.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let curve = opts && 'curve' in opts ? opts.curve : null;
    let reverseCurve = opts && 'reverseCurve' in opts ? opts.reverseCurve : null;
    this[_curveDirection] = null;
    this[parent$0] = parent;
    this[curve$] = curve;
    this[reverseCurve$] = reverseCurve;
    if (!(parent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 379, 15, "parent != null");
    if (!(curve != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 380, 15, "curve != null");
    animations.CurvedAnimation.__proto__.new.call(this);
    this[_updateCurveDirection](this.parent.status);
    this.parent.addStatusListener(dart.bind(this, _updateCurveDirection));
  }).prototype = animations.CurvedAnimation.prototype;
  dart.addTypeTests(animations.CurvedAnimation);
  const parent$0 = Symbol("CurvedAnimation.parent");
  const curve$ = Symbol("CurvedAnimation.curve");
  const reverseCurve$ = Symbol("CurvedAnimation.reverseCurve");
  dart.setMethodSignature(animations.CurvedAnimation, () => ({
    __proto__: dart.getMethods(animations.CurvedAnimation.__proto__),
    [_updateCurveDirection]: dart.fnType(dart.void, [animation$.AnimationStatus])
  }));
  dart.setGetterSignature(animations.CurvedAnimation, () => ({
    __proto__: dart.getGetters(animations.CurvedAnimation.__proto__),
    [_useForwardCurve]: core.bool,
    value: core.double
  }));
  dart.setLibraryUri(animations.CurvedAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(animations.CurvedAnimation, () => ({
    __proto__: dart.getFields(animations.CurvedAnimation.__proto__),
    parent: dart.finalFieldType(animation$.Animation$(core.double)),
    curve: dart.fieldType(curves.Curve),
    reverseCurve: dart.fieldType(curves.Curve),
    [_curveDirection]: dart.fieldType(animation$.AnimationStatus)
  }));
  dart.defineExtensionMethods(animations.CurvedAnimation, ['toString']);
  const _name$2 = dart.privateName(animations, "_name");
  let C75;
  let C76;
  let C77;
  animations._TrainHoppingMode = class _TrainHoppingMode extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (animations._TrainHoppingMode.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = animations._TrainHoppingMode.prototype;
  dart.addTypeTests(animations._TrainHoppingMode);
  dart.setLibraryUri(animations._TrainHoppingMode, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(animations._TrainHoppingMode, () => ({
    __proto__: dart.getFields(animations._TrainHoppingMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$2]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(animations._TrainHoppingMode, ['toString']);
  animations._TrainHoppingMode.minimize = C75 || CT.C75;
  animations._TrainHoppingMode.maximize = C76 || CT.C76;
  animations._TrainHoppingMode.values = C77 || CT.C77;
  const _mode = dart.privateName(animations, "_mode");
  const _lastStatus = dart.privateName(animations, "_lastStatus");
  const _lastValue = dart.privateName(animations, "_lastValue");
  const _currentTrain$ = dart.privateName(animations, "_currentTrain");
  const _nextTrain$ = dart.privateName(animations, "_nextTrain");
  const _valueChangeHandler = dart.privateName(animations, "_valueChangeHandler");
  listener_helpers.AnimationEagerListenerMixin = class AnimationEagerListenerMixin extends core.Object {};
  listener_helpers.AnimationEagerListenerMixin[dart.mixinOn] = Object => class AnimationEagerListenerMixin extends Object {
    didRegisterListener() {
    }
    didUnregisterListener() {
    }
    dispose() {
    }
  };
  (listener_helpers.AnimationEagerListenerMixin[dart.mixinNew] = function() {
  }).prototype = listener_helpers.AnimationEagerListenerMixin.prototype;
  dart.addTypeTests(listener_helpers.AnimationEagerListenerMixin);
  listener_helpers.AnimationEagerListenerMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(listener_helpers.AnimationEagerListenerMixin, () => ({
    __proto__: dart.getMethods(listener_helpers.AnimationEagerListenerMixin.__proto__),
    didRegisterListener: dart.fnType(dart.void, []),
    didUnregisterListener: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(listener_helpers.AnimationEagerListenerMixin, "package:flutter_web/src/animation/listener_helpers.dart");
  const Animation_AnimationEagerListenerMixin$ = class Animation_AnimationEagerListenerMixin extends animation$.Animation$(core.double) {};
  (Animation_AnimationEagerListenerMixin$.new = function() {
    Animation_AnimationEagerListenerMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationEagerListenerMixin$.prototype;
  dart.applyMixin(Animation_AnimationEagerListenerMixin$, listener_helpers.AnimationEagerListenerMixin);
  const Animation_AnimationLocalListenersMixin$$ = class Animation_AnimationLocalListenersMixin extends Animation_AnimationEagerListenerMixin$ {};
  (Animation_AnimationLocalListenersMixin$$.new = function() {
    listener_helpers.AnimationLocalListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalListenersMixin$$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalListenersMixin$$.prototype;
  dart.applyMixin(Animation_AnimationLocalListenersMixin$$, listener_helpers.AnimationLocalListenersMixin);
  const Animation_AnimationLocalStatusListenersMixin$$0 = class Animation_AnimationLocalStatusListenersMixin extends Animation_AnimationLocalListenersMixin$$ {};
  (Animation_AnimationLocalStatusListenersMixin$$0.new = function() {
    listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalStatusListenersMixin$$0.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalStatusListenersMixin$$0.prototype;
  dart.applyMixin(Animation_AnimationLocalStatusListenersMixin$$0, listener_helpers.AnimationLocalStatusListenersMixin);
  animations.TrainHoppingAnimation = class TrainHoppingAnimation extends Animation_AnimationLocalStatusListenersMixin$$0 {
    get onSwitchedTrain() {
      return this[onSwitchedTrain$];
    }
    set onSwitchedTrain(value) {
      this[onSwitchedTrain$] = value;
    }
    get currentTrain() {
      return this[_currentTrain$];
    }
    [_statusChangeHandler](status) {
      if (!(this[_currentTrain$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 534, 12, "_currentTrain != null");
      if (!dart.equals(status, this[_lastStatus])) {
        this.notifyListeners();
        this[_lastStatus] = status;
      }
      if (!(this[_lastStatus] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 539, 12, "_lastStatus != null");
    }
    get status() {
      return this[_currentTrain$].status;
    }
    [_valueChangeHandler]() {
      let t11;
      if (!(this[_currentTrain$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 547, 12, "_currentTrain != null");
      let hop = false;
      if (this[_nextTrain$] != null) {
        if (!(this[_mode] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 550, 14, "_mode != null");
        switch (this[_mode]) {
          case C75 || CT.C75:
          {
            hop = dart.notNull(this[_nextTrain$].value) <= dart.notNull(this[_currentTrain$].value);
            break;
          }
          case C76 || CT.C76:
          {
            hop = dart.notNull(this[_nextTrain$].value) >= dart.notNull(this[_currentTrain$].value);
            break;
          }
        }
        if (hop) {
          t11 = this[_currentTrain$];
          t11.removeStatusListener(dart.bind(this, _statusChangeHandler));
          t11.removeListener(dart.bind(this, _valueChangeHandler));
          t11;
          this[_currentTrain$] = this[_nextTrain$];
          this[_nextTrain$] = null;
          this[_currentTrain$].addStatusListener(dart.bind(this, _statusChangeHandler));
          this[_statusChangeHandler](this[_currentTrain$].status);
        }
      }
      let newValue = this.value;
      if (newValue != this[_lastValue]) {
        this.notifyListeners();
        this[_lastValue] = newValue;
      }
      if (!(this[_lastValue] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 574, 12, "_lastValue != null");
      if (hop && this.onSwitchedTrain != null) this.onSwitchedTrain();
    }
    get value() {
      return this[_currentTrain$].value;
    }
    dispose() {
      let t11;
      if (!(this[_currentTrain$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 586, 12, "_currentTrain != null");
      this[_currentTrain$].removeStatusListener(dart.bind(this, _statusChangeHandler));
      this[_currentTrain$].removeListener(dart.bind(this, _valueChangeHandler));
      this[_currentTrain$] = null;
      t11 = this[_nextTrain$];
      t11 == null ? null : t11.removeListener(dart.bind(this, _valueChangeHandler));
      this[_nextTrain$] = null;
      super.dispose();
    }
    toString() {
      if (this[_nextTrain$] != null) return dart.str(this.currentTrain) + "➩" + dart.str(this[$runtimeType]) + "(next: " + dart.str(this[_nextTrain$]) + ")";
      return dart.str(this.currentTrain) + "➩" + dart.str(this[$runtimeType]) + "(no next)";
    }
  };
  (animations.TrainHoppingAnimation.new = function(_currentTrain, _nextTrain, opts) {
    let t11;
    let onSwitchedTrain = opts && 'onSwitchedTrain' in opts ? opts.onSwitchedTrain : null;
    this[_mode] = null;
    this[_lastStatus] = null;
    this[_lastValue] = null;
    this[_currentTrain$] = _currentTrain;
    this[_nextTrain$] = _nextTrain;
    this[onSwitchedTrain$] = onSwitchedTrain;
    if (!(_currentTrain != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 498, 16, "_currentTrain != null");
    animations.TrainHoppingAnimation.__proto__.new.call(this);
    if (this[_nextTrain$] != null) {
      if (this[_currentTrain$].value == this[_nextTrain$].value) {
        this[_currentTrain$] = this[_nextTrain$];
        this[_nextTrain$] = null;
      } else if (dart.notNull(this[_currentTrain$].value) > dart.notNull(this[_nextTrain$].value)) {
        this[_mode] = animations._TrainHoppingMode.maximize;
      } else {
        if (!(dart.notNull(this[_currentTrain$].value) < dart.notNull(this[_nextTrain$].value))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 506, 16, "_currentTrain.value < _nextTrain.value");
        this[_mode] = animations._TrainHoppingMode.minimize;
      }
    }
    this[_currentTrain$].addStatusListener(dart.bind(this, _statusChangeHandler));
    this[_currentTrain$].addListener(dart.bind(this, _valueChangeHandler));
    t11 = this[_nextTrain$];
    t11 == null ? null : t11.addListener(dart.bind(this, _valueChangeHandler));
    if (!(this[_mode] != null || this[_nextTrain$] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 513, 12, "_mode != null || _nextTrain == null");
  }).prototype = animations.TrainHoppingAnimation.prototype;
  dart.addTypeTests(animations.TrainHoppingAnimation);
  const onSwitchedTrain$ = Symbol("TrainHoppingAnimation.onSwitchedTrain");
  dart.setMethodSignature(animations.TrainHoppingAnimation, () => ({
    __proto__: dart.getMethods(animations.TrainHoppingAnimation.__proto__),
    [_statusChangeHandler]: dart.fnType(dart.void, [animation$.AnimationStatus]),
    [_valueChangeHandler]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(animations.TrainHoppingAnimation, () => ({
    __proto__: dart.getGetters(animations.TrainHoppingAnimation.__proto__),
    currentTrain: animation$.Animation$(core.double),
    status: animation$.AnimationStatus,
    value: core.double
  }));
  dart.setLibraryUri(animations.TrainHoppingAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(animations.TrainHoppingAnimation, () => ({
    __proto__: dart.getFields(animations.TrainHoppingAnimation.__proto__),
    [_currentTrain$]: dart.fieldType(animation$.Animation$(core.double)),
    [_nextTrain$]: dart.fieldType(animation$.Animation$(core.double)),
    [_mode]: dart.fieldType(animations._TrainHoppingMode),
    onSwitchedTrain: dart.fieldType(dart.fnType(dart.void, [])),
    [_lastStatus]: dart.fieldType(animation$.AnimationStatus),
    [_lastValue]: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(animations.TrainHoppingAnimation, ['toString']);
  const _maybeNotifyListeners = dart.privateName(animations, "_maybeNotifyListeners");
  const _maybeNotifyStatusListeners = dart.privateName(animations, "_maybeNotifyStatusListeners");
  const _is_CompoundAnimation_default = Symbol('_is_CompoundAnimation_default');
  animations.CompoundAnimation$ = dart.generic(T => {
    const Animation_AnimationLazyListenerMixin$ = class Animation_AnimationLazyListenerMixin extends animation$.Animation$(T) {};
    (Animation_AnimationLazyListenerMixin$.new = function() {
      listener_helpers.AnimationLazyListenerMixin[dart.mixinNew].call(this);
      Animation_AnimationLazyListenerMixin$.__proto__.new.call(this);
    }).prototype = Animation_AnimationLazyListenerMixin$.prototype;
    dart.applyMixin(Animation_AnimationLazyListenerMixin$, listener_helpers.AnimationLazyListenerMixin);
    const Animation_AnimationLocalListenersMixin$ = class Animation_AnimationLocalListenersMixin extends Animation_AnimationLazyListenerMixin$ {};
    (Animation_AnimationLocalListenersMixin$.new = function() {
      listener_helpers.AnimationLocalListenersMixin[dart.mixinNew].call(this);
      Animation_AnimationLocalListenersMixin$.__proto__.new.call(this);
    }).prototype = Animation_AnimationLocalListenersMixin$.prototype;
    dart.applyMixin(Animation_AnimationLocalListenersMixin$, listener_helpers.AnimationLocalListenersMixin);
    const Animation_AnimationLocalStatusListenersMixin$ = class Animation_AnimationLocalStatusListenersMixin extends Animation_AnimationLocalListenersMixin$ {};
    (Animation_AnimationLocalStatusListenersMixin$.new = function() {
      listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew].call(this);
      Animation_AnimationLocalStatusListenersMixin$.__proto__.new.call(this);
    }).prototype = Animation_AnimationLocalStatusListenersMixin$.prototype;
    dart.applyMixin(Animation_AnimationLocalStatusListenersMixin$, listener_helpers.AnimationLocalStatusListenersMixin);
    class CompoundAnimation extends Animation_AnimationLocalStatusListenersMixin$ {
      get first() {
        return this[first$];
      }
      set first(value) {
        super.first = value;
      }
      get next() {
        return this[next$];
      }
      set next(value) {
        super.next = value;
      }
      didStartListening() {
        this.first.addListener(dart.bind(this, _maybeNotifyListeners));
        this.first.addStatusListener(dart.bind(this, _maybeNotifyStatusListeners));
        this.next.addListener(dart.bind(this, _maybeNotifyListeners));
        this.next.addStatusListener(dart.bind(this, _maybeNotifyStatusListeners));
      }
      didStopListening() {
        this.first.removeListener(dart.bind(this, _maybeNotifyListeners));
        this.first.removeStatusListener(dart.bind(this, _maybeNotifyStatusListeners));
        this.next.removeListener(dart.bind(this, _maybeNotifyListeners));
        this.next.removeStatusListener(dart.bind(this, _maybeNotifyStatusListeners));
      }
      get status() {
        if (dart.equals(this.next.status, animation$.AnimationStatus.forward) || dart.equals(this.next.status, animation$.AnimationStatus.reverse)) return this.next.status;
        return this.first.status;
      }
      toString() {
        return dart.str(this[$runtimeType]) + "(" + dart.str(this.first) + ", " + dart.str(this.next) + ")";
      }
      [_maybeNotifyStatusListeners](_) {
        if (!dart.equals(this.status, this[_lastStatus])) {
          this[_lastStatus] = this.status;
          this.notifyStatusListeners(this.status);
        }
      }
      [_maybeNotifyListeners]() {
        if (!dart.equals(this.value, this[_lastValue])) {
          this[_lastValue] = this.value;
          this.notifyListeners();
        }
      }
    }
    (CompoundAnimation.new = function(opts) {
      let first = opts && 'first' in opts ? opts.first : null;
      let next = opts && 'next' in opts ? opts.next : null;
      this[_lastStatus] = null;
      this[_lastValue] = null;
      this[first$] = first;
      this[next$] = next;
      if (!(first != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 620, 15, "first != null");
      if (!(next != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 621, 15, "next != null");
      CompoundAnimation.__proto__.new.call(this);
      ;
    }).prototype = CompoundAnimation.prototype;
    dart.addTypeTests(CompoundAnimation);
    CompoundAnimation.prototype[_is_CompoundAnimation_default] = true;
    const first$ = Symbol("CompoundAnimation.first");
    const next$ = Symbol("CompoundAnimation.next");
    dart.setMethodSignature(CompoundAnimation, () => ({
      __proto__: dart.getMethods(CompoundAnimation.__proto__),
      didStartListening: dart.fnType(dart.void, []),
      didStopListening: dart.fnType(dart.void, []),
      [_maybeNotifyStatusListeners]: dart.fnType(dart.void, [animation$.AnimationStatus]),
      [_maybeNotifyListeners]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(CompoundAnimation, () => ({
      __proto__: dart.getGetters(CompoundAnimation.__proto__),
      status: animation$.AnimationStatus
    }));
    dart.setLibraryUri(CompoundAnimation, "package:flutter_web/src/animation/animations.dart");
    dart.setFieldSignature(CompoundAnimation, () => ({
      __proto__: dart.getFields(CompoundAnimation.__proto__),
      first: dart.finalFieldType(animation$.Animation$(T)),
      next: dart.finalFieldType(animation$.Animation$(T)),
      [_lastStatus]: dart.fieldType(animation$.AnimationStatus),
      [_lastValue]: dart.fieldType(T)
    }));
    dart.defineExtensionMethods(CompoundAnimation, ['toString']);
    return CompoundAnimation;
  });
  animations.CompoundAnimation = animations.CompoundAnimation$();
  dart.addTypeTests(animations.CompoundAnimation, _is_CompoundAnimation_default);
  animations.AnimationMean = class AnimationMean extends animations.CompoundAnimation$(core.double) {
    get value() {
      return (dart.notNull(this.first.value) + dart.notNull(this.next.value)) / 2.0;
    }
  };
  (animations.AnimationMean.new = function(opts) {
    let left = opts && 'left' in opts ? opts.left : null;
    let right = opts && 'right' in opts ? opts.right : null;
    animations.AnimationMean.__proto__.new.call(this, {first: left, next: right});
    ;
  }).prototype = animations.AnimationMean.prototype;
  dart.addTypeTests(animations.AnimationMean);
  dart.setGetterSignature(animations.AnimationMean, () => ({
    __proto__: dart.getGetters(animations.AnimationMean.__proto__),
    value: core.double
  }));
  dart.setLibraryUri(animations.AnimationMean, "package:flutter_web/src/animation/animations.dart");
  const _is_AnimationMax_default = Symbol('_is_AnimationMax_default');
  animations.AnimationMax$ = dart.generic(T => {
    class AnimationMax extends animations.CompoundAnimation$(T) {
      get value() {
        return math.max(T, this.first.value, this.next.value);
      }
    }
    (AnimationMax.new = function(first, next) {
      AnimationMax.__proto__.new.call(this, {first: first, next: next});
      ;
    }).prototype = AnimationMax.prototype;
    dart.addTypeTests(AnimationMax);
    AnimationMax.prototype[_is_AnimationMax_default] = true;
    dart.setGetterSignature(AnimationMax, () => ({
      __proto__: dart.getGetters(AnimationMax.__proto__),
      value: T
    }));
    dart.setLibraryUri(AnimationMax, "package:flutter_web/src/animation/animations.dart");
    return AnimationMax;
  });
  animations.AnimationMax = animations.AnimationMax$();
  dart.addTypeTests(animations.AnimationMax, _is_AnimationMax_default);
  const _is_AnimationMin_default = Symbol('_is_AnimationMin_default');
  animations.AnimationMin$ = dart.generic(T => {
    class AnimationMin extends animations.CompoundAnimation$(T) {
      get value() {
        return math.min(T, this.first.value, this.next.value);
      }
    }
    (AnimationMin.new = function(first, next) {
      AnimationMin.__proto__.new.call(this, {first: first, next: next});
      ;
    }).prototype = AnimationMin.prototype;
    dart.addTypeTests(AnimationMin);
    AnimationMin.prototype[_is_AnimationMin_default] = true;
    dart.setGetterSignature(AnimationMin, () => ({
      __proto__: dart.getGetters(AnimationMin.__proto__),
      value: T
    }));
    dart.setLibraryUri(AnimationMin, "package:flutter_web/src/animation/animations.dart");
    return AnimationMin;
  });
  animations.AnimationMin = animations.AnimationMin$();
  dart.addTypeTests(animations.AnimationMin, _is_AnimationMin_default);
  let C78;
  let C79;
  dart.defineLazy(animations, {
    /*animations.kAlwaysCompleteAnimation*/get kAlwaysCompleteAnimation() {
      return C78 || CT.C78;
    },
    /*animations.kAlwaysDismissedAnimation*/get kAlwaysDismissedAnimation() {
      return C79 || CT.C79;
    }
  });
  let C80;
  animation$.AnimationStatus = class AnimationStatus extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (animation$.AnimationStatus.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = animation$.AnimationStatus.prototype;
  dart.addTypeTests(animation$.AnimationStatus);
  dart.setLibraryUri(animation$.AnimationStatus, "package:flutter_web/src/animation/animation.dart");
  dart.setFieldSignature(animation$.AnimationStatus, () => ({
    __proto__: dart.getFields(animation$.AnimationStatus.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(animation$.AnimationStatus, ['toString']);
  animation$.AnimationStatus.dismissed = C74 || CT.C74;
  animation$.AnimationStatus.forward = C71 || CT.C71;
  animation$.AnimationStatus.reverse = C72 || CT.C72;
  animation$.AnimationStatus.completed = C73 || CT.C73;
  animation$.AnimationStatus.values = C80 || CT.C80;
  const _is_Animatable_default = Symbol('_is_Animatable_default');
  tween.Animatable$ = dart.generic(T => {
    let _AnimatedEvaluationOfT = () => (_AnimatedEvaluationOfT = dart.constFn(tween._AnimatedEvaluation$(T)))();
    let _ChainedEvaluationOfT = () => (_ChainedEvaluationOfT = dart.constFn(tween._ChainedEvaluation$(T)))();
    class Animatable extends core.Object {
      evaluate(animation) {
        return this.transform(animation.value);
      }
      animate(parent) {
        return new (_AnimatedEvaluationOfT()).new(parent, this);
      }
      chain(parent) {
        return new (_ChainedEvaluationOfT()).new(parent, this);
      }
    }
    (Animatable.new = function() {
      ;
    }).prototype = Animatable.prototype;
    dart.addTypeTests(Animatable);
    Animatable.prototype[_is_Animatable_default] = true;
    dart.setMethodSignature(Animatable, () => ({
      __proto__: dart.getMethods(Animatable.__proto__),
      evaluate: dart.fnType(T, [animation$.Animation$(core.double)]),
      animate: dart.fnType(animation$.Animation$(T), [animation$.Animation$(core.double)]),
      chain: dart.fnType(tween.Animatable$(T), [tween.Animatable$(core.double)])
    }));
    dart.setLibraryUri(Animatable, "package:flutter_web/src/animation/tween.dart");
    return Animatable;
  });
  tween.Animatable = tween.Animatable$();
  dart.addTypeTests(tween.Animatable, _is_Animatable_default);
  const _evaluatable$ = dart.privateName(tween, "_evaluatable");
  const _is__AnimatedEvaluation_default = Symbol('_is__AnimatedEvaluation_default');
  tween._AnimatedEvaluation$ = dart.generic(T => {
    const Animation_AnimationWithParentMixin$ = class Animation_AnimationWithParentMixin extends animation$.Animation$(T) {};
    (Animation_AnimationWithParentMixin$.new = function() {
      Animation_AnimationWithParentMixin$.__proto__.new.call(this);
    }).prototype = Animation_AnimationWithParentMixin$.prototype;
    dart.applyMixin(Animation_AnimationWithParentMixin$, animations.AnimationWithParentMixin$(core.double));
    class _AnimatedEvaluation extends Animation_AnimationWithParentMixin$ {
      get parent() {
        return this[parent$];
      }
      set parent(value) {
        super.parent = value;
      }
      get value() {
        return this[_evaluatable$].evaluate(this.parent);
      }
      toString() {
        return dart.str(this.parent) + "➩" + dart.str(this[_evaluatable$]) + "➩" + dart.str(this.value);
      }
      toStringDetails() {
        return dart.str(super.toStringDetails()) + " " + dart.str(this[_evaluatable$]);
      }
    }
    (_AnimatedEvaluation.new = function(parent, _evaluatable) {
      this[parent$] = parent;
      this[_evaluatable$] = _evaluatable;
      _AnimatedEvaluation.__proto__.new.call(this);
      ;
    }).prototype = _AnimatedEvaluation.prototype;
    dart.addTypeTests(_AnimatedEvaluation);
    _AnimatedEvaluation.prototype[_is__AnimatedEvaluation_default] = true;
    const parent$ = Symbol("_AnimatedEvaluation.parent");
    dart.setGetterSignature(_AnimatedEvaluation, () => ({
      __proto__: dart.getGetters(_AnimatedEvaluation.__proto__),
      value: T
    }));
    dart.setLibraryUri(_AnimatedEvaluation, "package:flutter_web/src/animation/tween.dart");
    dart.setFieldSignature(_AnimatedEvaluation, () => ({
      __proto__: dart.getFields(_AnimatedEvaluation.__proto__),
      parent: dart.finalFieldType(animation$.Animation$(core.double)),
      [_evaluatable$]: dart.finalFieldType(tween.Animatable$(T))
    }));
    dart.defineExtensionMethods(_AnimatedEvaluation, ['toString']);
    return _AnimatedEvaluation;
  });
  tween._AnimatedEvaluation = tween._AnimatedEvaluation$();
  dart.addTypeTests(tween._AnimatedEvaluation, _is__AnimatedEvaluation_default);
  const _parent$ = dart.privateName(tween, "_parent");
  const _is__ChainedEvaluation_default = Symbol('_is__ChainedEvaluation_default');
  tween._ChainedEvaluation$ = dart.generic(T => {
    class _ChainedEvaluation extends tween.Animatable$(T) {
      transform(t) {
        return this[_evaluatable$].transform(this[_parent$].transform(t));
      }
      toString() {
        return dart.str(this[_parent$]) + "➩" + dart.str(this[_evaluatable$]);
      }
    }
    (_ChainedEvaluation.new = function(_parent, _evaluatable) {
      this[_parent$] = _parent;
      this[_evaluatable$] = _evaluatable;
      _ChainedEvaluation.__proto__.new.call(this);
      ;
    }).prototype = _ChainedEvaluation.prototype;
    dart.addTypeTests(_ChainedEvaluation);
    _ChainedEvaluation.prototype[_is__ChainedEvaluation_default] = true;
    dart.setMethodSignature(_ChainedEvaluation, () => ({
      __proto__: dart.getMethods(_ChainedEvaluation.__proto__),
      transform: dart.fnType(T, [core.double])
    }));
    dart.setLibraryUri(_ChainedEvaluation, "package:flutter_web/src/animation/tween.dart");
    dart.setFieldSignature(_ChainedEvaluation, () => ({
      __proto__: dart.getFields(_ChainedEvaluation.__proto__),
      [_parent$]: dart.finalFieldType(tween.Animatable$(core.double)),
      [_evaluatable$]: dart.finalFieldType(tween.Animatable$(T))
    }));
    dart.defineExtensionMethods(_ChainedEvaluation, ['toString']);
    return _ChainedEvaluation;
  });
  tween._ChainedEvaluation = tween._ChainedEvaluation$();
  dart.addTypeTests(tween._ChainedEvaluation, _is__ChainedEvaluation_default);
  const _is_Tween_default = Symbol('_is_Tween_default');
  tween.Tween$ = dart.generic(T => {
    class Tween extends tween.Animatable$(T) {
      get begin() {
        return this[begin$];
      }
      set begin(value) {
        this[begin$] = T._check(value);
      }
      get end() {
        return this[end$];
      }
      set end(value) {
        this[end$] = T._check(value);
      }
      lerp(t) {
        if (!(this.begin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 237, 12, "ssert(begin !");
        if (!(this.end != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 238, 12, "ssert(end !");
        return T._check(dart.dsend(this.begin, '+', [dart.dsend(dart.dsend(this.end, '-', [this.begin]), '*', [t])]));
      }
      transform(t) {
        if (t === 0.0) return this.begin;
        if (t === 1.0) return this.end;
        return this.lerp(t);
      }
      toString() {
        return dart.str(this[$runtimeType]) + "(" + dart.str(this.begin) + " → " + dart.str(this.end) + ")";
      }
    }
    (Tween.new = function(opts) {
      let begin = opts && 'begin' in opts ? opts.begin : null;
      let end = opts && 'end' in opts ? opts.end : null;
      this[begin$] = begin;
      this[end$] = end;
      Tween.__proto__.new.call(this);
      ;
    }).prototype = Tween.prototype;
    dart.addTypeTests(Tween);
    Tween.prototype[_is_Tween_default] = true;
    const begin$ = Symbol("Tween.begin");
    const end$ = Symbol("Tween.end");
    dart.setMethodSignature(Tween, () => ({
      __proto__: dart.getMethods(Tween.__proto__),
      lerp: dart.fnType(T, [core.double]),
      transform: dart.fnType(T, [core.double])
    }));
    dart.setLibraryUri(Tween, "package:flutter_web/src/animation/tween.dart");
    dart.setFieldSignature(Tween, () => ({
      __proto__: dart.getFields(Tween.__proto__),
      begin: dart.fieldType(T),
      end: dart.fieldType(T)
    }));
    dart.defineExtensionMethods(Tween, ['toString']);
    return Tween;
  });
  tween.Tween = tween.Tween$();
  dart.addTypeTests(tween.Tween, _is_Tween_default);
  const _is_ReverseTween_default = Symbol('_is_ReverseTween_default');
  tween.ReverseTween$ = dart.generic(T => {
    class ReverseTween extends tween.Tween$(T) {
      get parent() {
        return this[parent$];
      }
      set parent(value) {
        super.parent = value;
      }
      lerp(t) {
        return this.parent.lerp(1.0 - dart.notNull(t));
      }
    }
    (ReverseTween.new = function(parent) {
      this[parent$] = parent;
      if (!(parent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 271, 14, "ssert(parent !");
      ReverseTween.__proto__.new.call(this, {begin: parent.end, end: parent.begin});
      ;
    }).prototype = ReverseTween.prototype;
    dart.addTypeTests(ReverseTween);
    ReverseTween.prototype[_is_ReverseTween_default] = true;
    const parent$ = Symbol("ReverseTween.parent");
    dart.setLibraryUri(ReverseTween, "package:flutter_web/src/animation/tween.dart");
    dart.setFieldSignature(ReverseTween, () => ({
      __proto__: dart.getFields(ReverseTween.__proto__),
      parent: dart.finalFieldType(tween.Tween$(T))
    }));
    return ReverseTween;
  });
  tween.ReverseTween = tween.ReverseTween$();
  dart.addTypeTests(tween.ReverseTween, _is_ReverseTween_default);
  tween.ColorTween = class ColorTween extends tween.Tween$(ui.Color) {
    lerp(t) {
      return ui.Color.lerp(this.begin, this.end, t);
    }
  };
  (tween.ColorTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    tween.ColorTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = tween.ColorTween.prototype;
  dart.addTypeTests(tween.ColorTween);
  dart.setLibraryUri(tween.ColorTween, "package:flutter_web/src/animation/tween.dart");
  tween.SizeTween = class SizeTween extends tween.Tween$(ui.Size) {
    lerp(t) {
      return ui.Size.lerp(this.begin, this.end, t);
    }
  };
  (tween.SizeTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    tween.SizeTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = tween.SizeTween.prototype;
  dart.addTypeTests(tween.SizeTween);
  dart.setLibraryUri(tween.SizeTween, "package:flutter_web/src/animation/tween.dart");
  tween.RectTween = class RectTween extends tween.Tween$(ui.Rect) {
    lerp(t) {
      return ui.Rect.lerp(this.begin, this.end, t);
    }
  };
  (tween.RectTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    tween.RectTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = tween.RectTween.prototype;
  dart.addTypeTests(tween.RectTween);
  dart.setLibraryUri(tween.RectTween, "package:flutter_web/src/animation/tween.dart");
  tween.IntTween = class IntTween extends tween.Tween$(core.int) {
    lerp(t) {
      return (dart.notNull(this.begin) + (dart.notNull(this.end) - dart.notNull(this.begin)) * dart.notNull(t))[$round]();
    }
  };
  (tween.IntTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    tween.IntTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = tween.IntTween.prototype;
  dart.addTypeTests(tween.IntTween);
  dart.setLibraryUri(tween.IntTween, "package:flutter_web/src/animation/tween.dart");
  tween.StepTween = class StepTween extends tween.Tween$(core.int) {
    lerp(t) {
      return (dart.notNull(this.begin) + (dart.notNull(this.end) - dart.notNull(this.begin)) * dart.notNull(t))[$floor]();
    }
  };
  (tween.StepTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    tween.StepTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = tween.StepTween.prototype;
  dart.addTypeTests(tween.StepTween);
  dart.setLibraryUri(tween.StepTween, "package:flutter_web/src/animation/tween.dart");
  const _is_ConstantTween_default = Symbol('_is_ConstantTween_default');
  tween.ConstantTween$ = dart.generic(T => {
    class ConstantTween extends tween.Tween$(T) {
      lerp(t) {
        return this.begin;
      }
      toString() {
        return dart.str(this[$runtimeType]) + "(value: begin)";
      }
    }
    (ConstantTween.new = function(value) {
      ConstantTween.__proto__.new.call(this, {begin: value, end: value});
      ;
    }).prototype = ConstantTween.prototype;
    dart.addTypeTests(ConstantTween);
    ConstantTween.prototype[_is_ConstantTween_default] = true;
    dart.setLibraryUri(ConstantTween, "package:flutter_web/src/animation/tween.dart");
    dart.defineExtensionMethods(ConstantTween, ['toString']);
    return ConstantTween;
  });
  tween.ConstantTween = tween.ConstantTween$();
  dart.addTypeTests(tween.ConstantTween, _is_ConstantTween_default);
  tween.CurveTween = class CurveTween extends tween.Animatable$(core.double) {
    get curve() {
      return this[curve$0];
    }
    set curve(value) {
      this[curve$0] = value;
    }
    transform(t) {
      if (t === 0.0 || t === 1.0) {
        if (!(this.curve.transform(t)[$round]() === t)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 446, 14, "ssert(curve.transform(t).round(");
        return t;
      }
      return this.curve.transform(t);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(curve: " + dart.str(this.curve) + ")";
    }
  };
  (tween.CurveTween.new = function(opts) {
    let curve = opts && 'curve' in opts ? opts.curve : null;
    this[curve$0] = curve;
    if (!(curve != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 438, 14, "ssert(curve !");
    tween.CurveTween.__proto__.new.call(this);
    ;
  }).prototype = tween.CurveTween.prototype;
  dart.addTypeTests(tween.CurveTween);
  const curve$0 = Symbol("CurveTween.curve");
  dart.setMethodSignature(tween.CurveTween, () => ({
    __proto__: dart.getMethods(tween.CurveTween.__proto__),
    transform: dart.fnType(core.double, [core.double])
  }));
  dart.setLibraryUri(tween.CurveTween, "package:flutter_web/src/animation/tween.dart");
  dart.setFieldSignature(tween.CurveTween, () => ({
    __proto__: dart.getFields(tween.CurveTween.__proto__),
    curve: dart.fieldType(curves.Curve)
  }));
  dart.defineExtensionMethods(tween.CurveTween, ['toString']);
  curves.Curve = class Curve extends core.Object {
    transform(t) {
      if (!(dart.notNull(t) >= 0.0 && dart.notNull(t) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 44, 12, "t >= 0.0 && t <= 1.0");
      if (t === 0.0 || t === 1.0) {
        return t;
      }
      return this.transformInternal(t);
    }
    transformInternal(t) {
      dart.throw(new core.UnimplementedError.new());
    }
    get flipped() {
      return new curves.FlippedCurve.new(this);
    }
    toString() {
      return dart.str(this[$runtimeType]);
    }
  };
  (curves.Curve.new = function() {
    ;
  }).prototype = curves.Curve.prototype;
  dart.addTypeTests(curves.Curve);
  dart.setMethodSignature(curves.Curve, () => ({
    __proto__: dart.getMethods(curves.Curve.__proto__),
    transform: dart.fnType(core.double, [core.double]),
    transformInternal: dart.fnType(core.double, [core.double])
  }));
  dart.setGetterSignature(curves.Curve, () => ({
    __proto__: dart.getGetters(curves.Curve.__proto__),
    flipped: curves.Curve
  }));
  dart.setLibraryUri(curves.Curve, "package:flutter_web/src/animation/curves.dart");
  dart.defineExtensionMethods(curves.Curve, ['toString']);
  curves._Linear = class _Linear extends curves.Curve {
    transformInternal(t) {
      return t;
    }
  };
  (curves._Linear.__ = function() {
    curves._Linear.__proto__.new.call(this);
    ;
  }).prototype = curves._Linear.prototype;
  dart.addTypeTests(curves._Linear);
  dart.setLibraryUri(curves._Linear, "package:flutter_web/src/animation/curves.dart");
  curves.SawTooth = class SawTooth extends curves.Curve {
    get count() {
      return this[count$];
    }
    set count(value) {
      super.count = value;
    }
    transformInternal(t) {
      t = dart.notNull(t) * dart.notNull(this.count);
      return dart.notNull(t) - t[$truncateToDouble]();
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.count) + ")";
    }
  };
  (curves.SawTooth.new = function(count) {
    this[count$] = count;
    if (!(count != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 98, 39, "count != null");
    curves.SawTooth.__proto__.new.call(this);
    ;
  }).prototype = curves.SawTooth.prototype;
  dart.addTypeTests(curves.SawTooth);
  const count$ = Symbol("SawTooth.count");
  dart.setLibraryUri(curves.SawTooth, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(curves.SawTooth, () => ({
    __proto__: dart.getFields(curves.SawTooth.__proto__),
    count: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(curves.SawTooth, ['toString']);
  let C81;
  curves.Interval = class Interval extends curves.Curve {
    get begin() {
      return this[begin$];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$0];
    }
    set end(value) {
      super.end = value;
    }
    get curve() {
      return this[curve$1];
    }
    set curve(value) {
      super.curve = value;
    }
    transformInternal(t) {
      if (!(dart.notNull(this.begin) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 148, 12, "begin >= 0.0");
      if (!(dart.notNull(this.begin) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 149, 12, "begin <= 1.0");
      if (!(dart.notNull(this.end) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 150, 12, "end >= 0.0");
      if (!(dart.notNull(this.end) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 151, 12, "end <= 1.0");
      if (!(dart.notNull(this.end) >= dart.notNull(this.begin))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 152, 12, "end >= begin");
      t = ((dart.notNull(t) - dart.notNull(this.begin)) / (dart.notNull(this.end) - dart.notNull(this.begin)))[$clamp](0.0, 1.0);
      if (t === 0.0 || t === 1.0) return t;
      return this.curve.transform(t);
    }
    toString() {
      if (!curves._Linear.is(this.curve)) return dart.str(this[$runtimeType]) + "(" + dart.str(this.begin) + "⋯" + dart.str(this.end) + ")➩" + dart.str(this.curve);
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.begin) + "⋯" + dart.str(this.end) + ")";
    }
  };
  (curves.Interval.new = function(begin, end, opts) {
    let curve = opts && 'curve' in opts ? opts.curve : C81 || CT.C81;
    this[begin$] = begin;
    this[end$0] = end;
    this[curve$1] = curve;
    if (!(begin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 129, 14, "begin != null");
    if (!(end != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 130, 14, "end != null");
    if (!(curve != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 131, 14, "curve != null");
    curves.Interval.__proto__.new.call(this);
    ;
  }).prototype = curves.Interval.prototype;
  dart.addTypeTests(curves.Interval);
  const begin$ = Symbol("Interval.begin");
  const end$0 = Symbol("Interval.end");
  const curve$1 = Symbol("Interval.curve");
  dart.setLibraryUri(curves.Interval, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(curves.Interval, () => ({
    __proto__: dart.getFields(curves.Interval.__proto__),
    begin: dart.finalFieldType(core.double),
    end: dart.finalFieldType(core.double),
    curve: dart.finalFieldType(curves.Curve)
  }));
  dart.defineExtensionMethods(curves.Interval, ['toString']);
  curves.Threshold = class Threshold extends curves.Curve {
    get threshold() {
      return this[threshold$];
    }
    set threshold(value) {
      super.threshold = value;
    }
    transformInternal(t) {
      if (!(dart.notNull(this.threshold) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 183, 12, "threshold >= 0.0");
      if (!(dart.notNull(this.threshold) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 184, 12, "threshold <= 1.0");
      return dart.notNull(t) < dart.notNull(this.threshold) ? 0.0 : 1.0;
    }
  };
  (curves.Threshold.new = function(threshold) {
    this[threshold$] = threshold;
    if (!(threshold != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 174, 44, "threshold != null");
    curves.Threshold.__proto__.new.call(this);
    ;
  }).prototype = curves.Threshold.prototype;
  dart.addTypeTests(curves.Threshold);
  const threshold$ = Symbol("Threshold.threshold");
  dart.setLibraryUri(curves.Threshold, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(curves.Threshold, () => ({
    __proto__: dart.getFields(curves.Threshold.__proto__),
    threshold: dart.finalFieldType(core.double)
  }));
  const _evaluateCubic = dart.privateName(curves, "_evaluateCubic");
  curves.Cubic = class Cubic extends curves.Curve {
    get a() {
      return this[a$];
    }
    set a(value) {
      super.a = value;
    }
    get b() {
      return this[b$];
    }
    set b(value) {
      super.b = value;
    }
    get c() {
      return this[c$];
    }
    set c(value) {
      super.c = value;
    }
    get d() {
      return this[d$];
    }
    set d(value) {
      super.d = value;
    }
    [_evaluateCubic](a, b, m) {
      return 3 * dart.notNull(a) * (1 - dart.notNull(m)) * (1 - dart.notNull(m)) * dart.notNull(m) + 3 * dart.notNull(b) * (1 - dart.notNull(m)) * dart.notNull(m) * dart.notNull(m) + dart.notNull(m) * dart.notNull(m) * dart.notNull(m);
    }
    transformInternal(t) {
      let start = 0.0;
      let end = 1.0;
      while (true) {
        let midpoint = (start + end) / 2;
        let estimate = this[_evaluateCubic](this.a, this.c, midpoint);
        if ((dart.notNull(t) - dart.notNull(estimate))[$abs]() < 0.001) return this[_evaluateCubic](this.b, this.d, midpoint);
        if (dart.notNull(estimate) < dart.notNull(t))
          start = midpoint;
        else
          end = midpoint;
      }
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + this.a[$toStringAsFixed](2) + ", " + this.b[$toStringAsFixed](2) + ", " + this.c[$toStringAsFixed](2) + ", " + this.d[$toStringAsFixed](2) + ")";
    }
  };
  (curves.Cubic.new = function(a, b, c, d) {
    this[a$] = a;
    this[b$] = b;
    this[c$] = c;
    this[d$] = d;
    if (!(a != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 212, 14, "(a != nul");
    if (!(b != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 213, 14, "(b != nul");
    if (!(c != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 214, 14, "(c != nul");
    if (!(d != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 215, 14, "(d != nul");
    curves.Cubic.__proto__.new.call(this);
    ;
  }).prototype = curves.Cubic.prototype;
  dart.addTypeTests(curves.Cubic);
  const a$ = Symbol("Cubic.a");
  const b$ = Symbol("Cubic.b");
  const c$ = Symbol("Cubic.c");
  const d$ = Symbol("Cubic.d");
  dart.setMethodSignature(curves.Cubic, () => ({
    __proto__: dart.getMethods(curves.Cubic.__proto__),
    [_evaluateCubic]: dart.fnType(core.double, [core.double, core.double, core.double])
  }));
  dart.setLibraryUri(curves.Cubic, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(curves.Cubic, () => ({
    __proto__: dart.getFields(curves.Cubic.__proto__),
    a: dart.finalFieldType(core.double),
    b: dart.finalFieldType(core.double),
    c: dart.finalFieldType(core.double),
    d: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(curves.Cubic, ['toString']);
  dart.defineLazy(curves.Cubic, {
    /*curves.Cubic._cubicErrorBound*/get _cubicErrorBound() {
      return 0.001;
    }
  });
  curves.FlippedCurve = class FlippedCurve extends curves.Curve {
    get curve() {
      return this[curve$2];
    }
    set curve(value) {
      super.curve = value;
    }
    transformInternal(t) {
      return 1.0 - dart.notNull(this.curve.transform(1.0 - dart.notNull(t)));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.curve) + ")";
    }
  };
  (curves.FlippedCurve.new = function(curve) {
    this[curve$2] = curve;
    if (!(curve != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 293, 43, "(curve != nul");
    curves.FlippedCurve.__proto__.new.call(this);
    ;
  }).prototype = curves.FlippedCurve.prototype;
  dart.addTypeTests(curves.FlippedCurve);
  const curve$2 = Symbol("FlippedCurve.curve");
  dart.setLibraryUri(curves.FlippedCurve, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(curves.FlippedCurve, () => ({
    __proto__: dart.getFields(curves.FlippedCurve.__proto__),
    curve: dart.finalFieldType(curves.Curve)
  }));
  dart.defineExtensionMethods(curves.FlippedCurve, ['toString']);
  curves._DecelerateCurve = class _DecelerateCurve extends curves.Curve {
    transformInternal(t) {
      t = 1.0 - dart.notNull(t);
      return 1.0 - dart.notNull(t) * dart.notNull(t);
    }
  };
  (curves._DecelerateCurve.__ = function() {
    curves._DecelerateCurve.__proto__.new.call(this);
    ;
  }).prototype = curves._DecelerateCurve.prototype;
  dart.addTypeTests(curves._DecelerateCurve);
  dart.setLibraryUri(curves._DecelerateCurve, "package:flutter_web/src/animation/curves.dart");
  curves._BounceInCurve = class _BounceInCurve extends curves.Curve {
    transformInternal(t) {
      return 1.0 - dart.notNull(curves._bounce(1.0 - dart.notNull(t)));
    }
  };
  (curves._BounceInCurve.__ = function() {
    curves._BounceInCurve.__proto__.new.call(this);
    ;
  }).prototype = curves._BounceInCurve.prototype;
  dart.addTypeTests(curves._BounceInCurve);
  dart.setLibraryUri(curves._BounceInCurve, "package:flutter_web/src/animation/curves.dart");
  curves._BounceOutCurve = class _BounceOutCurve extends curves.Curve {
    transformInternal(t) {
      return curves._bounce(t);
    }
  };
  (curves._BounceOutCurve.__ = function() {
    curves._BounceOutCurve.__proto__.new.call(this);
    ;
  }).prototype = curves._BounceOutCurve.prototype;
  dart.addTypeTests(curves._BounceOutCurve);
  dart.setLibraryUri(curves._BounceOutCurve, "package:flutter_web/src/animation/curves.dart");
  curves._BounceInOutCurve = class _BounceInOutCurve extends curves.Curve {
    transformInternal(t) {
      if (dart.notNull(t) < 0.5)
        return (1.0 - dart.notNull(curves._bounce(1.0 - dart.notNull(t) * 2.0))) * 0.5;
      else
        return dart.notNull(curves._bounce(dart.notNull(t) * 2.0 - 1.0)) * 0.5 + 0.5;
    }
  };
  (curves._BounceInOutCurve.__ = function() {
    curves._BounceInOutCurve.__proto__.new.call(this);
    ;
  }).prototype = curves._BounceInOutCurve.prototype;
  dart.addTypeTests(curves._BounceInOutCurve);
  dart.setLibraryUri(curves._BounceInOutCurve, "package:flutter_web/src/animation/curves.dart");
  curves.ElasticInCurve = class ElasticInCurve extends curves.Curve {
    get period() {
      return this[period$];
    }
    set period(value) {
      super.period = value;
    }
    transformInternal(t) {
      let s = dart.notNull(this.period) / 4.0;
      t = dart.notNull(t) - 1.0;
      return -math.pow(2.0, 10.0 * dart.notNull(t)) * math.sin((dart.notNull(t) - s) * (3.141592653589793 * 2.0) / dart.notNull(this.period));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.period) + ")";
    }
  };
  (curves.ElasticInCurve.new = function(period) {
    if (period === void 0) period = 0.4;
    this[period$] = period;
    curves.ElasticInCurve.__proto__.new.call(this);
    ;
  }).prototype = curves.ElasticInCurve.prototype;
  dart.addTypeTests(curves.ElasticInCurve);
  const period$ = Symbol("ElasticInCurve.period");
  dart.setLibraryUri(curves.ElasticInCurve, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(curves.ElasticInCurve, () => ({
    __proto__: dart.getFields(curves.ElasticInCurve.__proto__),
    period: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(curves.ElasticInCurve, ['toString']);
  curves.ElasticOutCurve = class ElasticOutCurve extends curves.Curve {
    get period() {
      return this[period$0];
    }
    set period(value) {
      super.period = value;
    }
    transformInternal(t) {
      let s = dart.notNull(this.period) / 4.0;
      return math.pow(2.0, -10 * dart.notNull(t)) * math.sin((dart.notNull(t) - s) * (3.141592653589793 * 2.0) / dart.notNull(this.period)) + 1.0;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.period) + ")";
    }
  };
  (curves.ElasticOutCurve.new = function(period) {
    if (period === void 0) period = 0.4;
    this[period$0] = period;
    curves.ElasticOutCurve.__proto__.new.call(this);
    ;
  }).prototype = curves.ElasticOutCurve.prototype;
  dart.addTypeTests(curves.ElasticOutCurve);
  const period$0 = Symbol("ElasticOutCurve.period");
  dart.setLibraryUri(curves.ElasticOutCurve, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(curves.ElasticOutCurve, () => ({
    __proto__: dart.getFields(curves.ElasticOutCurve.__proto__),
    period: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(curves.ElasticOutCurve, ['toString']);
  curves.ElasticInOutCurve = class ElasticInOutCurve extends curves.Curve {
    get period() {
      return this[period$1];
    }
    set period(value) {
      super.period = value;
    }
    transformInternal(t) {
      let s = dart.notNull(this.period) / 4.0;
      t = 2.0 * dart.notNull(t) - 1.0;
      if (dart.notNull(t) < 0.0)
        return -0.5 * math.pow(2.0, 10.0 * dart.notNull(t)) * math.sin((dart.notNull(t) - s) * (3.141592653589793 * 2.0) / dart.notNull(this.period));
      else
        return math.pow(2.0, -10.0 * dart.notNull(t)) * math.sin((dart.notNull(t) - s) * (3.141592653589793 * 2.0) / dart.notNull(this.period)) * 0.5 + 1.0;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.period) + ")";
    }
  };
  (curves.ElasticInOutCurve.new = function(period) {
    if (period === void 0) period = 0.4;
    this[period$1] = period;
    curves.ElasticInOutCurve.__proto__.new.call(this);
    ;
  }).prototype = curves.ElasticInOutCurve.prototype;
  dart.addTypeTests(curves.ElasticInOutCurve);
  const period$1 = Symbol("ElasticInOutCurve.period");
  dart.setLibraryUri(curves.ElasticInOutCurve, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(curves.ElasticInOutCurve, () => ({
    __proto__: dart.getFields(curves.ElasticInOutCurve.__proto__),
    period: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(curves.ElasticInOutCurve, ['toString']);
  let C82;
  let C83;
  let C84;
  let C85;
  let C86;
  let C87;
  let C88;
  let C89;
  let C90;
  let C91;
  let C92;
  let C93;
  let C94;
  let C95;
  let C96;
  let C97;
  let C98;
  let C99;
  let C100;
  let C101;
  let C102;
  let C103;
  let C104;
  let C105;
  let C106;
  let C107;
  let C108;
  let C109;
  let C110;
  let C111;
  let C112;
  let C113;
  let C114;
  let C115;
  let C116;
  let C117;
  let C118;
  let C119;
  let C120;
  let C121;
  curves.Curves = class Curves extends core.Object {};
  (curves.Curves.__ = function() {
    ;
  }).prototype = curves.Curves.prototype;
  dart.addTypeTests(curves.Curves);
  dart.setLibraryUri(curves.Curves, "package:flutter_web/src/animation/curves.dart");
  dart.defineLazy(curves.Curves, {
    /*curves.Curves.linear*/get linear() {
      return C81 || CT.C81;
    },
    /*curves.Curves.decelerate*/get decelerate() {
      return C82 || CT.C82;
    },
    /*curves.Curves.fastLinearToSlowEaseIn*/get fastLinearToSlowEaseIn() {
      return C83 || CT.C83;
    },
    /*curves.Curves.ease*/get ease() {
      return C84 || CT.C84;
    },
    /*curves.Curves.easeIn*/get easeIn() {
      return C85 || CT.C85;
    },
    /*curves.Curves.easeInToLinear*/get easeInToLinear() {
      return C86 || CT.C86;
    },
    /*curves.Curves.easeInSine*/get easeInSine() {
      return C87 || CT.C87;
    },
    /*curves.Curves.easeInQuad*/get easeInQuad() {
      return C88 || CT.C88;
    },
    /*curves.Curves.easeInCubic*/get easeInCubic() {
      return C89 || CT.C89;
    },
    /*curves.Curves.easeInQuart*/get easeInQuart() {
      return C90 || CT.C90;
    },
    /*curves.Curves.easeInQuint*/get easeInQuint() {
      return C91 || CT.C91;
    },
    /*curves.Curves.easeInExpo*/get easeInExpo() {
      return C92 || CT.C92;
    },
    /*curves.Curves.easeInCirc*/get easeInCirc() {
      return C93 || CT.C93;
    },
    /*curves.Curves.easeInBack*/get easeInBack() {
      return C94 || CT.C94;
    },
    /*curves.Curves.easeOut*/get easeOut() {
      return C95 || CT.C95;
    },
    /*curves.Curves.linearToEaseOut*/get linearToEaseOut() {
      return C96 || CT.C96;
    },
    /*curves.Curves.easeOutSine*/get easeOutSine() {
      return C97 || CT.C97;
    },
    /*curves.Curves.easeOutQuad*/get easeOutQuad() {
      return C98 || CT.C98;
    },
    /*curves.Curves.easeOutCubic*/get easeOutCubic() {
      return C99 || CT.C99;
    },
    /*curves.Curves.easeOutQuart*/get easeOutQuart() {
      return C100 || CT.C100;
    },
    /*curves.Curves.easeOutQuint*/get easeOutQuint() {
      return C101 || CT.C101;
    },
    /*curves.Curves.easeOutExpo*/get easeOutExpo() {
      return C102 || CT.C102;
    },
    /*curves.Curves.easeOutCirc*/get easeOutCirc() {
      return C103 || CT.C103;
    },
    /*curves.Curves.easeOutBack*/get easeOutBack() {
      return C104 || CT.C104;
    },
    /*curves.Curves.easeInOut*/get easeInOut() {
      return C105 || CT.C105;
    },
    /*curves.Curves.easeInOutSine*/get easeInOutSine() {
      return C106 || CT.C106;
    },
    /*curves.Curves.easeInOutQuad*/get easeInOutQuad() {
      return C107 || CT.C107;
    },
    /*curves.Curves.easeInOutCubic*/get easeInOutCubic() {
      return C108 || CT.C108;
    },
    /*curves.Curves.easeInOutQuart*/get easeInOutQuart() {
      return C109 || CT.C109;
    },
    /*curves.Curves.easeInOutQuint*/get easeInOutQuint() {
      return C110 || CT.C110;
    },
    /*curves.Curves.easeInOutExpo*/get easeInOutExpo() {
      return C111 || CT.C111;
    },
    /*curves.Curves.easeInOutCirc*/get easeInOutCirc() {
      return C112 || CT.C112;
    },
    /*curves.Curves.easeInOutBack*/get easeInOutBack() {
      return C113 || CT.C113;
    },
    /*curves.Curves.fastOutSlowIn*/get fastOutSlowIn() {
      return C114 || CT.C114;
    },
    /*curves.Curves.slowMiddle*/get slowMiddle() {
      return C115 || CT.C115;
    },
    /*curves.Curves.bounceIn*/get bounceIn() {
      return C116 || CT.C116;
    },
    /*curves.Curves.bounceOut*/get bounceOut() {
      return C117 || CT.C117;
    },
    /*curves.Curves.bounceInOut*/get bounceInOut() {
      return C118 || CT.C118;
    },
    /*curves.Curves.elasticIn*/get elasticIn() {
      return C119 || CT.C119;
    },
    /*curves.Curves.elasticOut*/get elasticOut() {
      return C120 || CT.C120;
    },
    /*curves.Curves.elasticInOut*/get elasticInOut() {
      return C121 || CT.C121;
    }
  });
  curves._bounce = function _bounce(t) {
    if (dart.notNull(t) < 1.0 / 2.75) {
      return 7.5625 * dart.notNull(t) * dart.notNull(t);
    } else if (dart.notNull(t) < 2 / 2.75) {
      t = dart.notNull(t) - 1.5 / 2.75;
      return 7.5625 * dart.notNull(t) * dart.notNull(t) + 0.75;
    } else if (dart.notNull(t) < 2.5 / 2.75) {
      t = dart.notNull(t) - 2.25 / 2.75;
      return 7.5625 * dart.notNull(t) * dart.notNull(t) + 0.9375;
    }
    t = dart.notNull(t) - 2.625 / 2.75;
    return 7.5625 * dart.notNull(t) * dart.notNull(t) + 0.984375;
  };
  const _entries = dart.privateName(recognizer, "_entries");
  const _trackedPointers = dart.privateName(recognizer, "_trackedPointers");
  const _team = dart.privateName(recognizer, "_team");
  const _addPointerToArena = dart.privateName(recognizer, "_addPointerToArena");
  const _pointerToKind = dart.privateName(recognizer, "_pointerToKind");
  const _kindFilter = dart.privateName(recognizer, "_kindFilter");
  arena.GestureArenaMember = class GestureArenaMember extends core.Object {};
  (arena.GestureArenaMember.new = function() {
    ;
  }).prototype = arena.GestureArenaMember.prototype;
  dart.addTypeTests(arena.GestureArenaMember);
  dart.setLibraryUri(arena.GestureArenaMember, "package:flutter_web/src/gestures/arena.dart");
  const GestureArenaMember_DiagnosticableTreeMixin$ = class GestureArenaMember_DiagnosticableTreeMixin extends arena.GestureArenaMember {};
  (GestureArenaMember_DiagnosticableTreeMixin$.new = function() {
  }).prototype = GestureArenaMember_DiagnosticableTreeMixin$.prototype;
  dart.applyMixin(GestureArenaMember_DiagnosticableTreeMixin$, diagnostics.DiagnosticableTreeMixin);
  recognizer.GestureRecognizer = class GestureRecognizer extends GestureArenaMember_DiagnosticableTreeMixin$ {
    get debugOwner() {
      return this[debugOwner$];
    }
    set debugOwner(value) {
      super.debugOwner = value;
    }
    addPointer(event) {
      this[_pointerToKind][$_set](event.pointer, event.kind);
      if (dart.test(this.isPointerAllowed(event))) {
        this.addAllowedPointer(event);
      } else {
        this.handleNonAllowedPointer(event);
      }
    }
    addAllowedPointer(event) {
    }
    handleNonAllowedPointer(event) {
    }
    isPointerAllowed(event) {
      return this[_kindFilter] == null || dart.equals(this[_kindFilter], event.kind);
    }
    getKindForPointer(pointer) {
      if (!dart.test(this[_pointerToKind][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 141, 12, "_pointerToKind.containsKey(pointer)");
      return this[_pointerToKind][$_get](pointer);
    }
    dispose() {
    }
    invokeCallback(T, name, callback, opts) {
      let debugReport = opts && 'debugReport' in opts ? opts.debugReport : null;
      if (!(callback != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 169, 12, "callback != null");
      let result = null;
      try {
        if (!dart.test(dart.fn(() => {
          let t11;
          if (dart.test(debug$.debugPrintRecognizerCallbacksTrace)) {
            let report = debugReport != null ? debugReport() : null;
            let prefix = dart.test(debug$.debugPrintGestureArenaDiagnostics) ? " "[$times](19) + "❙ " : "";
            print.debugPrint(prefix + dart.str(this) + " calling " + dart.str(name) + " callback." + (dart.equals((t11 = report, t11 == null ? null : t11[$isNotEmpty]), true) ? " " + dart.str(report) : ""));
          }
          return true;
        }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 172, 14, "() {\n        if (debugPrintRecognizerCallbacksTrace) {\n          final String report = debugReport != null ? debugReport() : null;\n          // The 19 in the line below is the width of the prefix used by\n          // _debugLogDiagnostic in arena.dart.\n          final String prefix = debugPrintGestureArenaDiagnostics ? ' ' * 19 + '❙ ' : '';\n          debugPrint('$prefix$this calling $name callback.${ report?.isNotEmpty == true ? \" $report\" : \"\" }');\n        }\n        return true;\n      }");
        result = callback();
      } catch (e) {
        let exception = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "gesture", context: new assertions.ErrorDescription.new("while handling a gesture"), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsNode()).new((function*() {
            yield new diagnostics.StringProperty.new("Handler", name);
            yield new (DiagnosticsPropertyOfGestureRecognizer()).new("Recognizer", this, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
          }).bind(this)), VoidToIterableOfDiagnosticsNode())}));
      }
      return result;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfObject()).new("debugOwner", this.debugOwner, {defaultValue: null}));
    }
  };
  (recognizer.GestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[_pointerToKind] = new (IdentityMapOfint$PointerDeviceKind()).new();
    this[debugOwner$] = debugOwner;
    this[_kindFilter] = kind;
    ;
  }).prototype = recognizer.GestureRecognizer.prototype;
  dart.addTypeTests(recognizer.GestureRecognizer);
  const debugOwner$ = Symbol("GestureRecognizer.debugOwner");
  dart.setMethodSignature(recognizer.GestureRecognizer, () => ({
    __proto__: dart.getMethods(recognizer.GestureRecognizer.__proto__),
    addPointer: dart.fnType(dart.void, [events.PointerDownEvent]),
    addAllowedPointer: dart.fnType(dart.void, [events.PointerDownEvent]),
    handleNonAllowedPointer: dart.fnType(dart.void, [events.PointerDownEvent]),
    isPointerAllowed: dart.fnType(core.bool, [events.PointerDownEvent]),
    getKindForPointer: dart.fnType(ui.PointerDeviceKind, [core.int]),
    dispose: dart.fnType(dart.void, []),
    invokeCallback: dart.gFnType(T => [T, [core.String, dart.fnType(T, [])], {debugReport: dart.fnType(core.String, [])}])
  }));
  dart.setLibraryUri(recognizer.GestureRecognizer, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(recognizer.GestureRecognizer, () => ({
    __proto__: dart.getFields(recognizer.GestureRecognizer.__proto__),
    debugOwner: dart.finalFieldType(core.Object),
    [_kindFilter]: dart.finalFieldType(ui.PointerDeviceKind),
    [_pointerToKind]: dart.finalFieldType(core.Map$(core.int, ui.PointerDeviceKind))
  }));
  recognizer.OneSequenceGestureRecognizer = class OneSequenceGestureRecognizer extends recognizer.GestureRecognizer {
    handleNonAllowedPointer(event) {
      this.resolve(arena.GestureDisposition.rejected);
    }
    acceptGesture(pointer) {
    }
    rejectGesture(pointer) {
    }
    resolve(disposition) {
      let localEntries = ListOfGestureArenaEntry().from(this[_entries][$values]);
      this[_entries][$clear]();
      for (let entry of localEntries)
        entry.resolve(disposition);
    }
    dispose() {
      this.resolve(arena.GestureDisposition.rejected);
      for (let pointer of this[_trackedPointers])
        binding$.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, 'handleEvent'));
      this[_trackedPointers].clear();
      if (!dart.test(this[_entries][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 264, 12, "t(_entries.isEmp");
      super.dispose();
    }
    get team() {
      return this[_team];
    }
    set team(value) {
      if (!(value != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 282, 12, "t(value != nu");
      if (!dart.test(this[_entries][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 283, 12, "t(_entries.isEmp");
      if (!dart.test(this[_trackedPointers][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 284, 12, "t(_trackedPointers.isEmp");
      if (!(this[_team] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 285, 12, "t(_team == nu");
      this[_team] = value;
    }
    [_addPointerToArena](pointer) {
      if (this[_team] != null) return this[_team].add(pointer, this);
      return binding$.GestureBinding.instance.gestureArena.add(pointer, this);
    }
    startTrackingPointer(pointer, transform) {
      if (transform === void 0) transform = null;
      binding$.GestureBinding.instance.pointerRouter.addRoute(pointer, dart.bind(this, 'handleEvent'), transform);
      this[_trackedPointers].add(pointer);
      if (!!dart.test(this[_entries][$containsValue](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 308, 12, "t(!_entries.containsValue(pointe");
      this[_entries][$_set](pointer, this[_addPointerToArena](pointer));
    }
    stopTrackingPointer(pointer) {
      if (dart.test(this[_trackedPointers].contains(pointer))) {
        binding$.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, 'handleEvent'));
        this[_trackedPointers].remove(pointer);
        if (dart.test(this[_trackedPointers][$isEmpty])) this.didStopTrackingLastPointer(pointer);
      }
    }
    stopTrackingIfPointerNoLongerDown(event) {
      if (events.PointerUpEvent.is(event) || events.PointerCancelEvent.is(event)) this.stopTrackingPointer(event.pointer);
    }
  };
  (recognizer.OneSequenceGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[_entries] = new (IdentityMapOfint$GestureArenaEntry()).new();
    this[_trackedPointers] = new (_IdentityHashSetOfint()).new();
    this[_team] = null;
    recognizer.OneSequenceGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = recognizer.OneSequenceGestureRecognizer.prototype;
  dart.addTypeTests(recognizer.OneSequenceGestureRecognizer);
  dart.setMethodSignature(recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getMethods(recognizer.OneSequenceGestureRecognizer.__proto__),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    resolve: dart.fnType(dart.void, [arena.GestureDisposition]),
    [_addPointerToArena]: dart.fnType(arena.GestureArenaEntry, [core.int]),
    startTrackingPointer: dart.fnType(dart.void, [core.int], [vector_math_64.Matrix4]),
    stopTrackingPointer: dart.fnType(dart.void, [core.int]),
    stopTrackingIfPointerNoLongerDown: dart.fnType(dart.void, [events.PointerEvent])
  }));
  dart.setGetterSignature(recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getGetters(recognizer.OneSequenceGestureRecognizer.__proto__),
    team: team.GestureArenaTeam
  }));
  dart.setSetterSignature(recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getSetters(recognizer.OneSequenceGestureRecognizer.__proto__),
    team: team.GestureArenaTeam
  }));
  dart.setLibraryUri(recognizer.OneSequenceGestureRecognizer, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getFields(recognizer.OneSequenceGestureRecognizer.__proto__),
    [_entries]: dart.finalFieldType(core.Map$(core.int, arena.GestureArenaEntry)),
    [_trackedPointers]: dart.finalFieldType(core.Set$(core.int)),
    [_team]: dart.fieldType(team.GestureArenaTeam)
  }));
  eager.EagerGestureRecognizer = class EagerGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer, event.transform);
      this.resolve(arena.GestureDisposition.accepted);
      this.stopTrackingPointer(event.pointer);
    }
    get debugDescription() {
      return "eager";
    }
    didStopTrackingLastPointer(pointer) {
    }
    handleEvent(event) {
    }
  };
  (eager.EagerGestureRecognizer.new = function(opts) {
    let kind = opts && 'kind' in opts ? opts.kind : null;
    eager.EagerGestureRecognizer.__proto__.new.call(this, {kind: kind});
    ;
  }).prototype = eager.EagerGestureRecognizer.prototype;
  dart.addTypeTests(eager.EagerGestureRecognizer);
  dart.setMethodSignature(eager.EagerGestureRecognizer, () => ({
    __proto__: dart.getMethods(eager.EagerGestureRecognizer.__proto__),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int]),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent])
  }));
  dart.setGetterSignature(eager.EagerGestureRecognizer, () => ({
    __proto__: dart.getGetters(eager.EagerGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(eager.EagerGestureRecognizer, "package:flutter_web/src/gestures/eager.dart");
  const _name$3 = dart.privateName(recognizer, "_name");
  let C122;
  let C123;
  let C124;
  recognizer.DragStartBehavior = class DragStartBehavior extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (recognizer.DragStartBehavior.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = recognizer.DragStartBehavior.prototype;
  dart.addTypeTests(recognizer.DragStartBehavior);
  dart.setLibraryUri(recognizer.DragStartBehavior, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(recognizer.DragStartBehavior, () => ({
    __proto__: dart.getFields(recognizer.DragStartBehavior.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$3]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(recognizer.DragStartBehavior, ['toString']);
  recognizer.DragStartBehavior.down = C122 || CT.C122;
  recognizer.DragStartBehavior.start = C123 || CT.C123;
  recognizer.DragStartBehavior.values = C124 || CT.C124;
  let C125;
  let C126;
  let C127;
  let C128;
  recognizer.GestureRecognizerState = class GestureRecognizerState extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (recognizer.GestureRecognizerState.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = recognizer.GestureRecognizerState.prototype;
  dart.addTypeTests(recognizer.GestureRecognizerState);
  dart.setLibraryUri(recognizer.GestureRecognizerState, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(recognizer.GestureRecognizerState, () => ({
    __proto__: dart.getFields(recognizer.GestureRecognizerState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$3]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(recognizer.GestureRecognizerState, ['toString']);
  recognizer.GestureRecognizerState.ready = C125 || CT.C125;
  recognizer.GestureRecognizerState.possible = C126 || CT.C126;
  recognizer.GestureRecognizerState.defunct = C127 || CT.C127;
  recognizer.GestureRecognizerState.values = C128 || CT.C128;
  const _gestureAccepted = dart.privateName(recognizer, "_gestureAccepted");
  const _timer = dart.privateName(recognizer, "_timer");
  const _getGlobalDistance = dart.privateName(recognizer, "_getGlobalDistance");
  const _stopTimer = dart.privateName(recognizer, "_stopTimer");
  recognizer.PrimaryPointerGestureRecognizer = class PrimaryPointerGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get deadline() {
      return this[deadline$];
    }
    set deadline(value) {
      super.deadline = value;
    }
    get preAcceptSlopTolerance() {
      return this[preAcceptSlopTolerance$];
    }
    set preAcceptSlopTolerance(value) {
      super.preAcceptSlopTolerance = value;
    }
    get postAcceptSlopTolerance() {
      return this[postAcceptSlopTolerance$];
    }
    set postAcceptSlopTolerance(value) {
      super.postAcceptSlopTolerance = value;
    }
    get state() {
      return this[state];
    }
    set state(value) {
      this[state] = value;
    }
    get primaryPointer() {
      return this[primaryPointer];
    }
    set primaryPointer(value) {
      this[primaryPointer] = value;
    }
    get initialPosition() {
      return this[initialPosition];
    }
    set initialPosition(value) {
      this[initialPosition] = value;
    }
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer, event.transform);
      if (dart.equals(this.state, recognizer.GestureRecognizerState.ready)) {
        this.state = recognizer.GestureRecognizerState.possible;
        this.primaryPointer = event.pointer;
        this.initialPosition = new recognizer.OffsetPair.new({local: event.localPosition, global: event.position});
        if (this.deadline != null) this[_timer] = async.Timer.new(this.deadline, dart.fn(() => this.didExceedDeadlineWithEvent(event), VoidTovoid()));
      }
    }
    handleEvent(event) {
      if (!!dart.equals(this.state, recognizer.GestureRecognizerState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 440, 12, "t(state != GestureRecognizerState.rea");
      if (dart.equals(this.state, recognizer.GestureRecognizerState.possible) && event.pointer == this.primaryPointer) {
        let isPreAcceptSlopPastTolerance = !dart.test(this[_gestureAccepted]) && this.preAcceptSlopTolerance != null && dart.notNull(this[_getGlobalDistance](event)) > dart.notNull(this.preAcceptSlopTolerance);
        let isPostAcceptSlopPastTolerance = dart.test(this[_gestureAccepted]) && this.postAcceptSlopTolerance != null && dart.notNull(this[_getGlobalDistance](event)) > dart.notNull(this.postAcceptSlopTolerance);
        if (events.PointerMoveEvent.is(event) && (isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance)) {
          this.resolve(arena.GestureDisposition.rejected);
          this.stopTrackingPointer(this.primaryPointer);
        } else {
          this.handlePrimaryPointer(event);
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    didExceedDeadline() {
      if (!(this.deadline == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 471, 12, "t(deadline == nu");
    }
    didExceedDeadlineWithEvent(event) {
      this.didExceedDeadline();
    }
    acceptGesture(pointer) {
      this[_gestureAccepted] = true;
    }
    rejectGesture(pointer) {
      if (pointer == this.primaryPointer && dart.equals(this.state, recognizer.GestureRecognizerState.possible)) {
        this[_stopTimer]();
        this.state = recognizer.GestureRecognizerState.defunct;
      }
    }
    didStopTrackingLastPointer(pointer) {
      if (!!dart.equals(this.state, recognizer.GestureRecognizerState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 499, 12, "t(state != GestureRecognizerState.rea");
      this[_stopTimer]();
      this.state = recognizer.GestureRecognizerState.ready;
    }
    dispose() {
      this[_stopTimer]();
      super.dispose();
    }
    [_stopTimer]() {
      if (this[_timer] != null) {
        this[_timer].cancel();
        this[_timer] = null;
      }
    }
    [_getGlobalDistance](event) {
      let offset = event.position['-'](this.initialPosition.global);
      return offset.distance;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (EnumPropertyOfGestureRecognizerState()).new("state", this.state));
    }
  };
  (recognizer.PrimaryPointerGestureRecognizer.new = function(opts) {
    let deadline = opts && 'deadline' in opts ? opts.deadline : null;
    let preAcceptSlopTolerance = opts && 'preAcceptSlopTolerance' in opts ? opts.preAcceptSlopTolerance : 18;
    let postAcceptSlopTolerance = opts && 'postAcceptSlopTolerance' in opts ? opts.postAcceptSlopTolerance : 18;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[state] = recognizer.GestureRecognizerState.ready;
    this[primaryPointer] = null;
    this[initialPosition] = null;
    this[_gestureAccepted] = false;
    this[_timer] = null;
    this[deadline$] = deadline;
    this[preAcceptSlopTolerance$] = preAcceptSlopTolerance;
    this[postAcceptSlopTolerance$] = postAcceptSlopTolerance;
    if (!(preAcceptSlopTolerance == null || dart.notNull(preAcceptSlopTolerance) >= 0)) dart.assertFailed("The preAcceptSlopTolerance must be positive or null", "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 378, 10, "  preAcceptSlopTolerance == null || preAcceptSlopTolerance >=");
    if (!(postAcceptSlopTolerance == null || dart.notNull(postAcceptSlopTolerance) >= 0)) dart.assertFailed("The postAcceptSlopTolerance must be positive or null", "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 382, 10, "  postAcceptSlopTolerance == null || postAcceptSlopTolerance >=");
    recognizer.PrimaryPointerGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = recognizer.PrimaryPointerGestureRecognizer.prototype;
  dart.addTypeTests(recognizer.PrimaryPointerGestureRecognizer);
  const deadline$ = Symbol("PrimaryPointerGestureRecognizer.deadline");
  const preAcceptSlopTolerance$ = Symbol("PrimaryPointerGestureRecognizer.preAcceptSlopTolerance");
  const postAcceptSlopTolerance$ = Symbol("PrimaryPointerGestureRecognizer.postAcceptSlopTolerance");
  const state = Symbol("PrimaryPointerGestureRecognizer.state");
  const primaryPointer = Symbol("PrimaryPointerGestureRecognizer.primaryPointer");
  const initialPosition = Symbol("PrimaryPointerGestureRecognizer.initialPosition");
  dart.setMethodSignature(recognizer.PrimaryPointerGestureRecognizer, () => ({
    __proto__: dart.getMethods(recognizer.PrimaryPointerGestureRecognizer.__proto__),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent]),
    didExceedDeadline: dart.fnType(dart.void, []),
    didExceedDeadlineWithEvent: dart.fnType(dart.void, [events.PointerDownEvent]),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int]),
    [_stopTimer]: dart.fnType(dart.void, []),
    [_getGlobalDistance]: dart.fnType(core.double, [events.PointerEvent])
  }));
  dart.setLibraryUri(recognizer.PrimaryPointerGestureRecognizer, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(recognizer.PrimaryPointerGestureRecognizer, () => ({
    __proto__: dart.getFields(recognizer.PrimaryPointerGestureRecognizer.__proto__),
    deadline: dart.finalFieldType(core.Duration),
    preAcceptSlopTolerance: dart.finalFieldType(core.double),
    postAcceptSlopTolerance: dart.finalFieldType(core.double),
    state: dart.fieldType(recognizer.GestureRecognizerState),
    primaryPointer: dart.fieldType(core.int),
    initialPosition: dart.fieldType(recognizer.OffsetPair),
    [_gestureAccepted]: dart.fieldType(core.bool),
    [_timer]: dart.fieldType(async.Timer)
  }));
  const _dy = dart.privateName(ui, "_dy");
  const _dx = dart.privateName(ui, "_dx");
  let C130;
  let C129;
  recognizer.OffsetPair = class OffsetPair extends core.Object {
    get local() {
      return this[local$];
    }
    set local(value) {
      super.local = value;
    }
    get global() {
      return this[global$];
    }
    set global(value) {
      super.global = value;
    }
    static fromEventPosition(event) {
      return new recognizer.OffsetPair.new({local: event.localPosition, global: event.position});
    }
    static fromEventDelta(event) {
      return new recognizer.OffsetPair.new({local: event.localDelta, global: event.delta});
    }
    ['+'](other) {
      return new recognizer.OffsetPair.new({local: this.local['+'](other.local), global: this.global['+'](other.global)});
    }
    ['-'](other) {
      return new recognizer.OffsetPair.new({local: this.local['-'](other.local), global: this.global['-'](other.global)});
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(local: " + dart.str(this.local) + ", global: " + dart.str(this.global) + ")";
    }
  };
  (recognizer.OffsetPair.new = function(opts) {
    let local = opts && 'local' in opts ? opts.local : null;
    let global = opts && 'global' in opts ? opts.global : null;
    this[local$] = local;
    this[global$] = global;
    ;
  }).prototype = recognizer.OffsetPair.prototype;
  dart.addTypeTests(recognizer.OffsetPair);
  const local$ = Symbol("OffsetPair.local");
  const global$ = Symbol("OffsetPair.global");
  dart.setMethodSignature(recognizer.OffsetPair, () => ({
    __proto__: dart.getMethods(recognizer.OffsetPair.__proto__),
    '+': dart.fnType(recognizer.OffsetPair, [recognizer.OffsetPair]),
    '-': dart.fnType(recognizer.OffsetPair, [recognizer.OffsetPair])
  }));
  dart.setLibraryUri(recognizer.OffsetPair, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(recognizer.OffsetPair, () => ({
    __proto__: dart.getFields(recognizer.OffsetPair.__proto__),
    local: dart.finalFieldType(ui.Offset),
    global: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(recognizer.OffsetPair, ['toString']);
  dart.defineLazy(recognizer.OffsetPair, {
    /*recognizer.OffsetPair.zero*/get zero() {
      return C129 || CT.C129;
    }
  });
  const _routeMap = dart.privateName(pointer_router, "_routeMap");
  const _globalRoutes = dart.privateName(pointer_router, "_globalRoutes");
  const _dispatch = dart.privateName(pointer_router, "_dispatch");
  pointer_router.PointerRouter = class PointerRouter extends core.Object {
    addRoute(pointer, route, transform) {
      if (transform === void 0) transform = null;
      let routes = this[_routeMap][$putIfAbsent](pointer, dart.fn(() => new (_HashSetOf_RouteEntry()).new(), VoidToLinkedHashSetOf_RouteEntry()));
      if (!!dart.test(routes[$any](pointer_router._RouteEntry.isRoutePredicate(route)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 29, 12, "!routes.any(_RouteEntry.isRoutePredicate(route))");
      routes.add(new pointer_router._RouteEntry.new({route: route, transform: transform}));
    }
    removeRoute(pointer, route) {
      if (!dart.test(this[_routeMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 41, 12, "_routeMap.containsKey(pointer)");
      let routes = this[_routeMap][$_get](pointer);
      if (!dart.test(routes[$any](pointer_router._RouteEntry.isRoutePredicate(route)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 43, 12, "routes.any(_RouteEntry.isRoutePredicate(route))");
      routes.removeWhere(pointer_router._RouteEntry.isRoutePredicate(route));
      if (dart.test(routes[$isEmpty])) this[_routeMap][$remove](pointer);
    }
    addGlobalRoute(route, transform) {
      if (transform === void 0) transform = null;
      if (!!dart.test(this[_globalRoutes][$any](pointer_router._RouteEntry.isRoutePredicate(route)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 56, 12, "!_globalRoutes.any(_RouteEntry.isRoutePredicate(route))");
      this[_globalRoutes].add(new pointer_router._RouteEntry.new({route: route, transform: transform}));
    }
    removeGlobalRoute(route) {
      if (!dart.test(this[_globalRoutes][$any](pointer_router._RouteEntry.isRoutePredicate(route)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 68, 12, "_globalRoutes.any(_RouteEntry.isRoutePredicate(route))");
      this[_globalRoutes].removeWhere(pointer_router._RouteEntry.isRoutePredicate(route));
    }
    [_dispatch](event, entry) {
      try {
        event = event.transformed(entry.transform);
        entry.route(event);
      } catch (e) {
        let exception = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        assertions.FlutterError.reportError(new pointer_router.FlutterErrorDetailsForPointerRouter.new({exception: exception, stack: stack, library: "gesture library", context: new assertions.ErrorDescription.new("while routing a pointer event"), router: this, route: entry.route, event: event, informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfPointerEvent()).new(function*() {
            yield new (DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
          }), VoidToIterableOfDiagnosticsPropertyOfPointerEvent())}));
      }
    }
    route(event) {
      let routes = this[_routeMap][$_get](event.pointer);
      let globalRoutes = ListOf_RouteEntry().from(this[_globalRoutes]);
      if (routes != null) {
        for (let entry of ListOf_RouteEntry().from(routes)) {
          if (dart.test(routes[$any](pointer_router._RouteEntry.isRoutePredicate(entry.route)))) this[_dispatch](event, entry);
        }
      }
      for (let entry of globalRoutes) {
        if (dart.test(this[_globalRoutes][$any](pointer_router._RouteEntry.isRoutePredicate(entry.route)))) this[_dispatch](event, entry);
      }
    }
  };
  (pointer_router.PointerRouter.new = function() {
    this[_routeMap] = new (IdentityMapOfint$LinkedHashSetOf_RouteEntry()).new();
    this[_globalRoutes] = new (_HashSetOf_RouteEntry()).new();
    ;
  }).prototype = pointer_router.PointerRouter.prototype;
  dart.addTypeTests(pointer_router.PointerRouter);
  dart.setMethodSignature(pointer_router.PointerRouter, () => ({
    __proto__: dart.getMethods(pointer_router.PointerRouter.__proto__),
    addRoute: dart.fnType(dart.void, [core.int, dart.fnType(dart.void, [events.PointerEvent])], [vector_math_64.Matrix4]),
    removeRoute: dart.fnType(dart.void, [core.int, dart.fnType(dart.void, [events.PointerEvent])]),
    addGlobalRoute: dart.fnType(dart.void, [dart.fnType(dart.void, [events.PointerEvent])], [vector_math_64.Matrix4]),
    removeGlobalRoute: dart.fnType(dart.void, [dart.fnType(dart.void, [events.PointerEvent])]),
    [_dispatch]: dart.fnType(dart.void, [events.PointerEvent, pointer_router._RouteEntry]),
    route: dart.fnType(dart.void, [events.PointerEvent])
  }));
  dart.setLibraryUri(pointer_router.PointerRouter, "package:flutter_web/src/gestures/pointer_router.dart");
  dart.setFieldSignature(pointer_router.PointerRouter, () => ({
    __proto__: dart.getFields(pointer_router.PointerRouter.__proto__),
    [_routeMap]: dart.finalFieldType(core.Map$(core.int, collection.LinkedHashSet$(pointer_router._RouteEntry))),
    [_globalRoutes]: dart.finalFieldType(collection.LinkedHashSet$(pointer_router._RouteEntry))
  }));
  pointer_router.FlutterErrorDetailsForPointerRouter = class FlutterErrorDetailsForPointerRouter extends assertions.FlutterErrorDetails {
    get router() {
      return this[router$];
    }
    set router(value) {
      super.router = value;
    }
    get route() {
      return this[route$];
    }
    set route(value) {
      super.route = value;
    }
    get event() {
      return this[event$];
    }
    set event(value) {
      super.event = value;
    }
  };
  (pointer_router.FlutterErrorDetailsForPointerRouter.new = function(opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let library = opts && 'library' in opts ? opts.library : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let router = opts && 'router' in opts ? opts.router : null;
    let route = opts && 'route' in opts ? opts.route : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    let silent = opts && 'silent' in opts ? opts.silent : false;
    this[router$] = router;
    this[route$] = route;
    this[event$] = event;
    pointer_router.FlutterErrorDetailsForPointerRouter.__proto__.new.call(this, {exception: exception, stack: stack, library: library, context: context, informationCollector: informationCollector, silent: silent});
    ;
  }).prototype = pointer_router.FlutterErrorDetailsForPointerRouter.prototype;
  dart.addTypeTests(pointer_router.FlutterErrorDetailsForPointerRouter);
  const router$ = Symbol("FlutterErrorDetailsForPointerRouter.router");
  const route$ = Symbol("FlutterErrorDetailsForPointerRouter.route");
  const event$ = Symbol("FlutterErrorDetailsForPointerRouter.event");
  dart.setLibraryUri(pointer_router.FlutterErrorDetailsForPointerRouter, "package:flutter_web/src/gestures/pointer_router.dart");
  dart.setFieldSignature(pointer_router.FlutterErrorDetailsForPointerRouter, () => ({
    __proto__: dart.getFields(pointer_router.FlutterErrorDetailsForPointerRouter.__proto__),
    router: dart.finalFieldType(pointer_router.PointerRouter),
    route: dart.finalFieldType(dart.fnType(dart.void, [events.PointerEvent])),
    event: dart.finalFieldType(events.PointerEvent)
  }));
  pointer_router._RouteEntry = class _RouteEntry extends core.Object {
    static isRoutePredicate(route) {
      return dart.fn(entry => dart.equals(entry.route, route), _RouteEntryTobool());
    }
  };
  (pointer_router._RouteEntry.new = function(opts) {
    let route = opts && 'route' in opts ? opts.route : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this.route = route;
    this.transform = transform;
    ;
  }).prototype = pointer_router._RouteEntry.prototype;
  dart.addTypeTests(pointer_router._RouteEntry);
  dart.setLibraryUri(pointer_router._RouteEntry, "package:flutter_web/src/gestures/pointer_router.dart");
  dart.setFieldSignature(pointer_router._RouteEntry, () => ({
    __proto__: dart.getFields(pointer_router._RouteEntry.__proto__),
    route: dart.finalFieldType(dart.fnType(dart.void, [events.PointerEvent])),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  const _duration = dart.privateName(core, "_duration");
  let C131;
  let C132;
  events.PointerEvent = class PointerEvent extends diagnostics.Diagnosticable {
    get timeStamp() {
      return this[timeStamp$];
    }
    set timeStamp(value) {
      super.timeStamp = value;
    }
    get pointer() {
      return this[pointer$];
    }
    set pointer(value) {
      super.pointer = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get device() {
      return this[device$];
    }
    set device(value) {
      super.device = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get localPosition() {
      return this[localPosition$];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get delta() {
      return this[delta$];
    }
    set delta(value) {
      super.delta = value;
    }
    get localDelta() {
      return this[localDelta$];
    }
    set localDelta(value) {
      super.localDelta = value;
    }
    get buttons() {
      return this[buttons$];
    }
    set buttons(value) {
      super.buttons = value;
    }
    get down() {
      return this[down$];
    }
    set down(value) {
      super.down = value;
    }
    get obscured() {
      return this[obscured$];
    }
    set obscured(value) {
      super.obscured = value;
    }
    get pressure() {
      return this[pressure$];
    }
    set pressure(value) {
      super.pressure = value;
    }
    get pressureMin() {
      return this[pressureMin$];
    }
    set pressureMin(value) {
      super.pressureMin = value;
    }
    get pressureMax() {
      return this[pressureMax$];
    }
    set pressureMax(value) {
      super.pressureMax = value;
    }
    get distance() {
      return this[distance$];
    }
    set distance(value) {
      super.distance = value;
    }
    get distanceMax() {
      return this[distanceMax$];
    }
    set distanceMax(value) {
      super.distanceMax = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get radiusMajor() {
      return this[radiusMajor$];
    }
    set radiusMajor(value) {
      super.radiusMajor = value;
    }
    get radiusMinor() {
      return this[radiusMinor$];
    }
    set radiusMinor(value) {
      super.radiusMinor = value;
    }
    get radiusMin() {
      return this[radiusMin$];
    }
    set radiusMin(value) {
      super.radiusMin = value;
    }
    get radiusMax() {
      return this[radiusMax$];
    }
    set radiusMax(value) {
      super.radiusMax = value;
    }
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get tilt() {
      return this[tilt$];
    }
    set tilt(value) {
      super.tilt = value;
    }
    get platformData() {
      return this[platformData$];
    }
    set platformData(value) {
      super.platformData = value;
    }
    get synthesized() {
      return this[synthesized$];
    }
    set synthesized(value) {
      super.synthesized = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get original() {
      return this[original$];
    }
    set original(value) {
      super.original = value;
    }
    get distanceMin() {
      return 0.0;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfOffset()).new("position", this.position));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("localPosition", this.localPosition, {defaultValue: this.position, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("delta", this.delta, {defaultValue: ui.Offset.zero, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("localDelta", this.localDelta, {defaultValue: this.delta, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfDuration()).new("timeStamp", this.timeStamp, {defaultValue: core.Duration.zero, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("pointer", this.pointer, {level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (EnumPropertyOfPointerDeviceKind()).new("kind", this.kind, {level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("device", this.device, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("buttons", this.buttons, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfbool()).new("down", this.down, {level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("pressure", this.pressure, {defaultValue: 1.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("pressureMin", this.pressureMin, {defaultValue: 1.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("pressureMax", this.pressureMax, {defaultValue: 1.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("distance", this.distance, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("distanceMin", this.distanceMin, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("distanceMax", this.distanceMax, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("size", this.size, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMajor", this.radiusMajor, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMinor", this.radiusMinor, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMin", this.radiusMin, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("radiusMax", this.radiusMax, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("orientation", this.orientation, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.DoubleProperty.new("tilt", this.tilt, {defaultValue: 0.0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.IntProperty.new("platformData", this.platformData, {defaultValue: 0, level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.FlagProperty.new("obscured", {value: this.obscured, ifTrue: "obscured", level: diagnostics.DiagnosticLevel.debug}));
      properties.add(new diagnostics.FlagProperty.new("synthesized", {value: this.synthesized, ifTrue: "synthesized", level: diagnostics.DiagnosticLevel.debug}));
    }
    toStringFull() {
      return this.toString({minLevel: diagnostics.DiagnosticLevel.fine});
    }
    static transformPosition(transform, position) {
      if (transform == null) {
        return position;
      }
      let position3 = vector_math_64.Vector3.new(position.dx, position.dy, 0.0);
      let transformed3 = transform.perspectiveTransform(position3);
      return new ui.Offset.new(transformed3.x, transformed3.y);
    }
    static transformDeltaViaPositions(opts) {
      let untransformedEndPosition = opts && 'untransformedEndPosition' in opts ? opts.untransformedEndPosition : null;
      let transformedEndPosition = opts && 'transformedEndPosition' in opts ? opts.transformedEndPosition : null;
      let untransformedDelta = opts && 'untransformedDelta' in opts ? opts.untransformedDelta : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      if (transform == null) {
        return untransformedDelta;
      }
      transformedEndPosition == null ? transformedEndPosition = events.PointerEvent.transformPosition(transform, untransformedEndPosition) : null;
      let transformedStartPosition = events.PointerEvent.transformPosition(transform, untransformedEndPosition['-'](untransformedDelta));
      return transformedEndPosition['-'](transformedStartPosition);
    }
    static removePerspectiveTransform(transform) {
      let t13;
      let vector = vector_math_64.Vector4.new(0.0, 0.0, 1.0, 0.0);
      t13 = transform.clone();
      t13.setColumn(2, vector);
      t13.setRow(2, vector);
      return t13;
    }
  };
  (events.PointerEvent.new = function(opts) {
    let t13, t13$;
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : C130 || CT.C130;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let down = opts && 'down' in opts ? opts.down : false;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    this[timeStamp$] = timeStamp;
    this[pointer$] = pointer;
    this[kind$] = kind;
    this[device$] = device;
    this[position$] = position;
    this[delta$] = delta;
    this[buttons$] = buttons;
    this[down$] = down;
    this[obscured$] = obscured;
    this[pressure$] = pressure;
    this[pressureMin$] = pressureMin;
    this[pressureMax$] = pressureMax;
    this[distance$] = distance;
    this[distanceMax$] = distanceMax;
    this[size$] = size;
    this[radiusMajor$] = radiusMajor;
    this[radiusMinor$] = radiusMinor;
    this[radiusMin$] = radiusMin;
    this[radiusMax$] = radiusMax;
    this[orientation$] = orientation;
    this[tilt$] = tilt;
    this[platformData$] = platformData;
    this[synthesized$] = synthesized;
    this[transform$] = transform;
    this[original$] = original;
    this[localPosition$] = (t13 = localPosition, t13 == null ? position : t13);
    this[localDelta$] = (t13$ = localDelta, t13$ == null ? delta : t13$);
    events.PointerEvent.__proto__.new.call(this);
    ;
  }).prototype = events.PointerEvent.prototype;
  dart.addTypeTests(events.PointerEvent);
  const timeStamp$ = Symbol("PointerEvent.timeStamp");
  const pointer$ = Symbol("PointerEvent.pointer");
  const kind$ = Symbol("PointerEvent.kind");
  const device$ = Symbol("PointerEvent.device");
  const position$ = Symbol("PointerEvent.position");
  const localPosition$ = Symbol("PointerEvent.localPosition");
  const delta$ = Symbol("PointerEvent.delta");
  const localDelta$ = Symbol("PointerEvent.localDelta");
  const buttons$ = Symbol("PointerEvent.buttons");
  const down$ = Symbol("PointerEvent.down");
  const obscured$ = Symbol("PointerEvent.obscured");
  const pressure$ = Symbol("PointerEvent.pressure");
  const pressureMin$ = Symbol("PointerEvent.pressureMin");
  const pressureMax$ = Symbol("PointerEvent.pressureMax");
  const distance$ = Symbol("PointerEvent.distance");
  const distanceMax$ = Symbol("PointerEvent.distanceMax");
  const size$ = Symbol("PointerEvent.size");
  const radiusMajor$ = Symbol("PointerEvent.radiusMajor");
  const radiusMinor$ = Symbol("PointerEvent.radiusMinor");
  const radiusMin$ = Symbol("PointerEvent.radiusMin");
  const radiusMax$ = Symbol("PointerEvent.radiusMax");
  const orientation$ = Symbol("PointerEvent.orientation");
  const tilt$ = Symbol("PointerEvent.tilt");
  const platformData$ = Symbol("PointerEvent.platformData");
  const synthesized$ = Symbol("PointerEvent.synthesized");
  const transform$ = Symbol("PointerEvent.transform");
  const original$ = Symbol("PointerEvent.original");
  dart.setMethodSignature(events.PointerEvent, () => ({
    __proto__: dart.getMethods(events.PointerEvent.__proto__),
    toStringFull: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(events.PointerEvent, () => ({
    __proto__: dart.getGetters(events.PointerEvent.__proto__),
    distanceMin: core.double
  }));
  dart.setLibraryUri(events.PointerEvent, "package:flutter_web/src/gestures/events.dart");
  dart.setFieldSignature(events.PointerEvent, () => ({
    __proto__: dart.getFields(events.PointerEvent.__proto__),
    timeStamp: dart.finalFieldType(core.Duration),
    pointer: dart.finalFieldType(core.int),
    kind: dart.finalFieldType(ui.PointerDeviceKind),
    device: dart.finalFieldType(core.int),
    position: dart.finalFieldType(ui.Offset),
    localPosition: dart.finalFieldType(ui.Offset),
    delta: dart.finalFieldType(ui.Offset),
    localDelta: dart.finalFieldType(ui.Offset),
    buttons: dart.finalFieldType(core.int),
    down: dart.finalFieldType(core.bool),
    obscured: dart.finalFieldType(core.bool),
    pressure: dart.finalFieldType(core.double),
    pressureMin: dart.finalFieldType(core.double),
    pressureMax: dart.finalFieldType(core.double),
    distance: dart.finalFieldType(core.double),
    distanceMax: dart.finalFieldType(core.double),
    size: dart.finalFieldType(core.double),
    radiusMajor: dart.finalFieldType(core.double),
    radiusMinor: dart.finalFieldType(core.double),
    radiusMin: dart.finalFieldType(core.double),
    radiusMax: dart.finalFieldType(core.double),
    orientation: dart.finalFieldType(core.double),
    tilt: dart.finalFieldType(core.double),
    platformData: dart.finalFieldType(core.int),
    synthesized: dart.finalFieldType(core.bool),
    transform: dart.finalFieldType(vector_math_64.Matrix4),
    original: dart.finalFieldType(events.PointerEvent)
  }));
  events.PointerAddedEvent = class PointerAddedEvent extends events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events.PointerAddedEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: events.PointerEvent.transformPosition(transform, this.position), obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, transform: transform, original: events.PointerAddedEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (events.PointerAddedEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerAddedEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, transform: transform, original: original});
    ;
  }).prototype = events.PointerAddedEvent.prototype;
  dart.addTypeTests(events.PointerAddedEvent);
  dart.setMethodSignature(events.PointerAddedEvent, () => ({
    __proto__: dart.getMethods(events.PointerAddedEvent.__proto__),
    transformed: dart.fnType(events.PointerAddedEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerAddedEvent, "package:flutter_web/src/gestures/events.dart");
  events.PointerRemovedEvent = class PointerRemovedEvent extends events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events.PointerRemovedEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: events.PointerEvent.transformPosition(transform, this.position), obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distanceMax: this.distanceMax, radiusMin: this.radiusMin, radiusMax: this.radiusMax, transform: transform, original: events.PointerRemovedEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (events.PointerRemovedEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerRemovedEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distanceMax: distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, transform: transform, original: original});
    ;
  }).prototype = events.PointerRemovedEvent.prototype;
  dart.addTypeTests(events.PointerRemovedEvent);
  dart.setMethodSignature(events.PointerRemovedEvent, () => ({
    __proto__: dart.getMethods(events.PointerRemovedEvent.__proto__),
    transformed: dart.fnType(events.PointerRemovedEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerRemovedEvent, "package:flutter_web/src/gestures/events.dart");
  events.PointerHoverEvent = class PointerHoverEvent extends events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      let transformedPosition = events.PointerEvent.transformPosition(transform, this.position);
      return new events.PointerHoverEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: transformedPosition, delta: this.delta, localDelta: events.PointerEvent.transformDeltaViaPositions({transform: transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: transformedPosition}), buttons: this.buttons, obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, synthesized: this.synthesized, transform: transform, original: events.PointerHoverEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (events.PointerHoverEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : C130 || CT.C130;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerHoverEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, delta: delta, localDelta: localDelta, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, transform: transform, original: original});
    ;
  }).prototype = events.PointerHoverEvent.prototype;
  dart.addTypeTests(events.PointerHoverEvent);
  dart.setMethodSignature(events.PointerHoverEvent, () => ({
    __proto__: dart.getMethods(events.PointerHoverEvent.__proto__),
    transformed: dart.fnType(events.PointerHoverEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerHoverEvent, "package:flutter_web/src/gestures/events.dart");
  events.PointerEnterEvent = class PointerEnterEvent extends events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      let transformedPosition = events.PointerEvent.transformPosition(transform, this.position);
      return new events.PointerEnterEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: transformedPosition, delta: this.delta, localDelta: events.PointerEvent.transformDeltaViaPositions({transform: transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: transformedPosition}), buttons: this.buttons, obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, synthesized: this.synthesized, transform: transform, original: events.PointerEnterEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (events.PointerEnterEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : C130 || CT.C130;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerEnterEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, delta: delta, localDelta: localDelta, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, transform: transform, original: original});
    ;
  }).prototype = events.PointerEnterEvent.prototype;
  (events.PointerEnterEvent.fromHoverEvent = function(event) {
    events.PointerEnterEvent.fromMouseEvent.call(this, event);
  }).prototype = events.PointerEnterEvent.prototype;
  (events.PointerEnterEvent.fromMouseEvent = function(event) {
    let t13, t13$, t13$0, t13$1, t13$2, t13$3, t13$4, t13$5, t13$6, t13$7, t13$8, t13$9, t13$10, t13$11, t13$12, t13$13, t13$14, t13$15, t13$16, t13$17, t13$18, t13$19, t13$20;
    events.PointerEnterEvent.new.call(this, {timeStamp: (t13 = event, t13 == null ? null : t13.timeStamp), kind: (t13$ = event, t13$ == null ? null : t13$.kind), device: (t13$0 = event, t13$0 == null ? null : t13$0.device), position: (t13$1 = event, t13$1 == null ? null : t13$1.position), localPosition: (t13$2 = event, t13$2 == null ? null : t13$2.localPosition), delta: (t13$3 = event, t13$3 == null ? null : t13$3.delta), localDelta: (t13$4 = event, t13$4 == null ? null : t13$4.localDelta), buttons: (t13$5 = event, t13$5 == null ? null : t13$5.buttons), obscured: (t13$6 = event, t13$6 == null ? null : t13$6.obscured), pressureMin: (t13$7 = event, t13$7 == null ? null : t13$7.pressureMin), pressureMax: (t13$8 = event, t13$8 == null ? null : t13$8.pressureMax), distance: (t13$9 = event, t13$9 == null ? null : t13$9.distance), distanceMax: (t13$10 = event, t13$10 == null ? null : t13$10.distanceMax), size: (t13$11 = event, t13$11 == null ? null : t13$11.size), radiusMajor: (t13$12 = event, t13$12 == null ? null : t13$12.radiusMajor), radiusMinor: (t13$13 = event, t13$13 == null ? null : t13$13.radiusMinor), radiusMin: (t13$14 = event, t13$14 == null ? null : t13$14.radiusMin), radiusMax: (t13$15 = event, t13$15 == null ? null : t13$15.radiusMax), orientation: (t13$16 = event, t13$16 == null ? null : t13$16.orientation), tilt: (t13$17 = event, t13$17 == null ? null : t13$17.tilt), synthesized: (t13$18 = event, t13$18 == null ? null : t13$18.synthesized), transform: (t13$19 = event, t13$19 == null ? null : t13$19.transform), original: events.PointerEnterEvent._check((t13$20 = event, t13$20 == null ? null : t13$20.original))});
  }).prototype = events.PointerEnterEvent.prototype;
  dart.addTypeTests(events.PointerEnterEvent);
  dart.setMethodSignature(events.PointerEnterEvent, () => ({
    __proto__: dart.getMethods(events.PointerEnterEvent.__proto__),
    transformed: dart.fnType(events.PointerEnterEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerEnterEvent, "package:flutter_web/src/gestures/events.dart");
  events.PointerExitEvent = class PointerExitEvent extends events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      let transformedPosition = events.PointerEvent.transformPosition(transform, this.position);
      return new events.PointerExitEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: transformedPosition, delta: this.delta, localDelta: events.PointerEvent.transformDeltaViaPositions({transform: transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: transformedPosition}), buttons: this.buttons, obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, synthesized: this.synthesized, transform: transform, original: events.PointerExitEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (events.PointerExitEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : C130 || CT.C130;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerExitEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, delta: delta, localDelta: localDelta, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, transform: transform, original: original});
    ;
  }).prototype = events.PointerExitEvent.prototype;
  (events.PointerExitEvent.fromHoverEvent = function(event) {
    events.PointerExitEvent.fromMouseEvent.call(this, event);
  }).prototype = events.PointerExitEvent.prototype;
  (events.PointerExitEvent.fromMouseEvent = function(event) {
    let t13, t13$, t13$0, t13$1, t13$2, t13$3, t13$4, t13$5, t13$6, t13$7, t13$8, t13$9, t13$10, t13$11, t13$12, t13$13, t13$14, t13$15, t13$16, t13$17, t13$18, t13$19, t13$20;
    events.PointerExitEvent.new.call(this, {timeStamp: (t13 = event, t13 == null ? null : t13.timeStamp), kind: (t13$ = event, t13$ == null ? null : t13$.kind), device: (t13$0 = event, t13$0 == null ? null : t13$0.device), position: (t13$1 = event, t13$1 == null ? null : t13$1.position), localPosition: (t13$2 = event, t13$2 == null ? null : t13$2.localPosition), delta: (t13$3 = event, t13$3 == null ? null : t13$3.delta), localDelta: (t13$4 = event, t13$4 == null ? null : t13$4.localDelta), buttons: (t13$5 = event, t13$5 == null ? null : t13$5.buttons), obscured: (t13$6 = event, t13$6 == null ? null : t13$6.obscured), pressureMin: (t13$7 = event, t13$7 == null ? null : t13$7.pressureMin), pressureMax: (t13$8 = event, t13$8 == null ? null : t13$8.pressureMax), distance: (t13$9 = event, t13$9 == null ? null : t13$9.distance), distanceMax: (t13$10 = event, t13$10 == null ? null : t13$10.distanceMax), size: (t13$11 = event, t13$11 == null ? null : t13$11.size), radiusMajor: (t13$12 = event, t13$12 == null ? null : t13$12.radiusMajor), radiusMinor: (t13$13 = event, t13$13 == null ? null : t13$13.radiusMinor), radiusMin: (t13$14 = event, t13$14 == null ? null : t13$14.radiusMin), radiusMax: (t13$15 = event, t13$15 == null ? null : t13$15.radiusMax), orientation: (t13$16 = event, t13$16 == null ? null : t13$16.orientation), tilt: (t13$17 = event, t13$17 == null ? null : t13$17.tilt), synthesized: (t13$18 = event, t13$18 == null ? null : t13$18.synthesized), transform: (t13$19 = event, t13$19 == null ? null : t13$19.transform), original: events.PointerExitEvent._check((t13$20 = event, t13$20 == null ? null : t13$20.original))});
  }).prototype = events.PointerExitEvent.prototype;
  dart.addTypeTests(events.PointerExitEvent);
  dart.setMethodSignature(events.PointerExitEvent, () => ({
    __proto__: dart.getMethods(events.PointerExitEvent.__proto__),
    transformed: dart.fnType(events.PointerExitEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerExitEvent, "package:flutter_web/src/gestures/events.dart");
  events.PointerDownEvent = class PointerDownEvent extends events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events.PointerDownEvent.new({timeStamp: this.timeStamp, pointer: this.pointer, kind: this.kind, device: this.device, position: this.position, localPosition: events.PointerEvent.transformPosition(transform, this.position), buttons: this.buttons, obscured: this.obscured, pressure: this.pressure, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, transform: transform, original: events.PointerDownEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (events.PointerDownEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 1;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerDownEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, buttons: buttons, down: true, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: 0.0, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, transform: transform, original: original});
    ;
  }).prototype = events.PointerDownEvent.prototype;
  dart.addTypeTests(events.PointerDownEvent);
  dart.setMethodSignature(events.PointerDownEvent, () => ({
    __proto__: dart.getMethods(events.PointerDownEvent.__proto__),
    transformed: dart.fnType(events.PointerDownEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerDownEvent, "package:flutter_web/src/gestures/events.dart");
  events.PointerMoveEvent = class PointerMoveEvent extends events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      let transformedPosition = events.PointerEvent.transformPosition(transform, this.position);
      return new events.PointerMoveEvent.new({timeStamp: this.timeStamp, pointer: this.pointer, kind: this.kind, device: this.device, position: this.position, localPosition: transformedPosition, delta: this.delta, localDelta: events.PointerEvent.transformDeltaViaPositions({transform: transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: transformedPosition}), buttons: this.buttons, obscured: this.obscured, pressure: this.pressure, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, platformData: this.platformData, synthesized: this.synthesized, transform: transform, original: events.PointerMoveEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (events.PointerMoveEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : C130 || CT.C130;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 1;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerMoveEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, delta: delta, localDelta: localDelta, buttons: buttons, down: true, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: 0.0, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, platformData: platformData, synthesized: synthesized, transform: transform, original: original});
    ;
  }).prototype = events.PointerMoveEvent.prototype;
  dart.addTypeTests(events.PointerMoveEvent);
  dart.setMethodSignature(events.PointerMoveEvent, () => ({
    __proto__: dart.getMethods(events.PointerMoveEvent.__proto__),
    transformed: dart.fnType(events.PointerMoveEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerMoveEvent, "package:flutter_web/src/gestures/events.dart");
  events.PointerUpEvent = class PointerUpEvent extends events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events.PointerUpEvent.new({timeStamp: this.timeStamp, pointer: this.pointer, kind: this.kind, device: this.device, position: this.position, localPosition: events.PointerEvent.transformPosition(transform, this.position), buttons: this.buttons, obscured: this.obscured, pressure: this.pressure, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, transform: transform, original: events.PointerUpEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (events.PointerUpEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 0;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerUpEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, buttons: buttons, down: false, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, transform: transform, original: original});
    ;
  }).prototype = events.PointerUpEvent.prototype;
  dart.addTypeTests(events.PointerUpEvent);
  dart.setMethodSignature(events.PointerUpEvent, () => ({
    __proto__: dart.getMethods(events.PointerUpEvent.__proto__),
    transformed: dart.fnType(events.PointerUpEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerUpEvent, "package:flutter_web/src/gestures/events.dart");
  let C133;
  events.PointerSignalEvent = class PointerSignalEvent extends events.PointerEvent {};
  (events.PointerSignalEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C133 || CT.C133;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerSignalEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, transform: transform, original: original});
    ;
  }).prototype = events.PointerSignalEvent.prototype;
  dart.addTypeTests(events.PointerSignalEvent);
  dart.setLibraryUri(events.PointerSignalEvent, "package:flutter_web/src/gestures/events.dart");
  events.PointerScrollEvent = class PointerScrollEvent extends events.PointerSignalEvent {
    get scrollDelta() {
      return this[scrollDelta$];
    }
    set scrollDelta(value) {
      super.scrollDelta = value;
    }
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events.PointerScrollEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: events.PointerEvent.transformPosition(transform, this.position), scrollDelta: this.scrollDelta, transform: transform, original: events.PointerScrollEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfOffset()).new("scrollDelta", this.scrollDelta));
    }
  };
  (events.PointerScrollEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let kind = opts && 'kind' in opts ? opts.kind : C133 || CT.C133;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let scrollDelta = opts && 'scrollDelta' in opts ? opts.scrollDelta : C130 || CT.C130;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    this[scrollDelta$] = scrollDelta;
    if (!(timeStamp != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1416, 15, "timeStamp != null");
    if (!(kind != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1417, 15, "kind != null");
    if (!(device != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1418, 15, "device != null");
    if (!(position != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1419, 15, "position != null");
    if (!(scrollDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1420, 15, "scrollDelta != null");
    events.PointerScrollEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, transform: transform, original: original});
    ;
  }).prototype = events.PointerScrollEvent.prototype;
  dart.addTypeTests(events.PointerScrollEvent);
  const scrollDelta$ = Symbol("PointerScrollEvent.scrollDelta");
  dart.setMethodSignature(events.PointerScrollEvent, () => ({
    __proto__: dart.getMethods(events.PointerScrollEvent.__proto__),
    transformed: dart.fnType(events.PointerScrollEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerScrollEvent, "package:flutter_web/src/gestures/events.dart");
  dart.setFieldSignature(events.PointerScrollEvent, () => ({
    __proto__: dart.getFields(events.PointerScrollEvent.__proto__),
    scrollDelta: dart.finalFieldType(ui.Offset)
  }));
  events.PointerCancelEvent = class PointerCancelEvent extends events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new events.PointerCancelEvent.new({timeStamp: this.timeStamp, pointer: this.pointer, kind: this.kind, device: this.device, position: this.position, localPosition: events.PointerEvent.transformPosition(transform, this.position), buttons: this.buttons, obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, transform: transform, original: events.PointerCancelEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (events.PointerCancelEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C131 || CT.C131;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : C132 || CT.C132;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    events.PointerCancelEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, transform: transform, original: original});
    ;
  }).prototype = events.PointerCancelEvent.prototype;
  dart.addTypeTests(events.PointerCancelEvent);
  dart.setMethodSignature(events.PointerCancelEvent, () => ({
    __proto__: dart.getMethods(events.PointerCancelEvent.__proto__),
    transformed: dart.fnType(events.PointerCancelEvent, [vector_math_64.Matrix4])
  }));
  dart.setLibraryUri(events.PointerCancelEvent, "package:flutter_web/src/gestures/events.dart");
  events.nthMouseButton = function nthMouseButton(number) {
    return ((1)[$leftShift](dart.notNull(number) - 1) & -1) >>> 0;
  };
  events.nthStylusButton = function nthStylusButton(number) {
    return ((2)[$leftShift](dart.notNull(number) - 1) & -1) >>> 0;
  };
  events.smallestButton = function smallestButton(buttons) {
    return (dart.notNull(buttons) & -dart.notNull(buttons)) >>> 0;
  };
  events.isSingleButton = function isSingleButton(buttons) {
    return buttons !== 0 && events.smallestButton(buttons) == buttons;
  };
  dart.defineLazy(events, {
    /*events.kPrimaryButton*/get kPrimaryButton() {
      return 1;
    },
    /*events.kSecondaryButton*/get kSecondaryButton() {
      return 2;
    },
    /*events.kPrimaryMouseButton*/get kPrimaryMouseButton() {
      return 1;
    },
    /*events.kSecondaryMouseButton*/get kSecondaryMouseButton() {
      return 2;
    },
    /*events.kStylusContact*/get kStylusContact() {
      return 1;
    },
    /*events.kPrimaryStylusButton*/get kPrimaryStylusButton() {
      return 2;
    },
    /*events.kMiddleMouseButton*/get kMiddleMouseButton() {
      return 4;
    },
    /*events.kSecondaryStylusButton*/get kSecondaryStylusButton() {
      return 4;
    },
    /*events.kBackMouseButton*/get kBackMouseButton() {
      return 8;
    },
    /*events.kForwardMouseButton*/get kForwardMouseButton() {
      return 16;
    },
    /*events.kTouchContact*/get kTouchContact() {
      return 1;
    }
  });
  const _combiner$ = dart.privateName(team, "_combiner");
  const _member = dart.privateName(team, "_member");
  const _resolve = dart.privateName(team, "_resolve");
  let C134;
  const _member$ = dart.privateName(arena, "_member");
  const _arena = dart.privateName(team, "_arena");
  let C135;
  const _arena$ = dart.privateName(arena, "_arena");
  const _pointer$ = dart.privateName(team, "_pointer");
  let C136;
  const _pointer$0 = dart.privateName(arena, "_pointer");
  team._CombiningGestureArenaEntry = class _CombiningGestureArenaEntry extends core.Object {
    get [_member]() {
      return this[_member$0];
    }
    set [_member](value) {
      super[_member] = value;
    }
    resolve(disposition) {
      this[_combiner$][_resolve](this[_member], disposition);
    }
    get [_member$]() {
      return arena.GestureArenaMember._check(this[$noSuchMethod](new core._Invocation.getter(C134 || CT.C134)));
    }
    get [_arena$]() {
      return arena.GestureArenaManager._check(this[$noSuchMethod](new core._Invocation.getter(C135 || CT.C135)));
    }
    get [_pointer$0]() {
      return core.int._check(this[$noSuchMethod](new core._Invocation.getter(C136 || CT.C136)));
    }
  };
  (team._CombiningGestureArenaEntry.new = function(_combiner, _member) {
    this[_combiner$] = _combiner;
    this[_member$0] = _member;
    ;
  }).prototype = team._CombiningGestureArenaEntry.prototype;
  dart.addTypeTests(team._CombiningGestureArenaEntry);
  const _member$0 = Symbol("_CombiningGestureArenaEntry._member");
  team._CombiningGestureArenaEntry[dart.implements] = () => [arena.GestureArenaEntry];
  dart.setMethodSignature(team._CombiningGestureArenaEntry, () => ({
    __proto__: dart.getMethods(team._CombiningGestureArenaEntry.__proto__),
    resolve: dart.fnType(dart.void, [arena.GestureDisposition])
  }));
  dart.setGetterSignature(team._CombiningGestureArenaEntry, () => ({
    __proto__: dart.getGetters(team._CombiningGestureArenaEntry.__proto__),
    [_member$]: arena.GestureArenaMember,
    [_arena$]: arena.GestureArenaManager,
    [_pointer$0]: core.int
  }));
  dart.setLibraryUri(team._CombiningGestureArenaEntry, "package:flutter_web/src/gestures/team.dart");
  dart.setFieldSignature(team._CombiningGestureArenaEntry, () => ({
    __proto__: dart.getFields(team._CombiningGestureArenaEntry.__proto__),
    [_combiner$]: dart.finalFieldType(team._CombiningGestureArenaMember),
    [_member]: dart.finalFieldType(arena.GestureArenaMember)
  }));
  const _members = dart.privateName(team, "_members");
  const _resolved = dart.privateName(team, "_resolved");
  const _winner = dart.privateName(team, "_winner");
  const _entry = dart.privateName(team, "_entry");
  const _owner$ = dart.privateName(team, "_owner");
  const _close = dart.privateName(team, "_close");
  const _combiners = dart.privateName(team, "_combiners");
  const _add = dart.privateName(team, "_add");
  team._CombiningGestureArenaMember = class _CombiningGestureArenaMember extends arena.GestureArenaMember {
    acceptGesture(pointer) {
      let t13;
      if (!(this[_pointer$] == pointer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 33, 12, "_pointer == pointer");
      if (!(this[_winner] != null || dart.test(this[_members][$isNotEmpty]))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 34, 12, "_winner != null || _members.isNotEmpty");
      this[_close]();
      this[_winner] == null ? this[_winner] = (t13 = this[_owner$].captain, t13 == null ? this[_members][$_get](0) : t13) : null;
      for (let member of this[_members]) {
        if (!dart.equals(member, this[_winner])) member.rejectGesture(pointer);
      }
      this[_winner].acceptGesture(pointer);
    }
    rejectGesture(pointer) {
      if (!(this[_pointer$] == pointer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 45, 12, "_pointer == pointer");
      this[_close]();
      for (let member of this[_members])
        member.rejectGesture(pointer);
    }
    [_close]() {
      if (!!dart.test(this[_resolved])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 51, 12, "!_resolved");
      this[_resolved] = true;
      let combiner = this[_owner$][_combiners][$remove](this[_pointer$]);
      if (!dart.equals(combiner, this)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 55, 12, "combiner == this");
    }
    [_add](pointer, member) {
      if (!!dart.test(this[_resolved])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 59, 12, "!_resolved");
      if (!(this[_pointer$] == pointer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 60, 12, "_pointer == pointer");
      this[_members][$add](member);
      this[_entry] == null ? this[_entry] = binding$.GestureBinding.instance.gestureArena.add(pointer, this) : null;
      return new team._CombiningGestureArenaEntry.new(this, member);
    }
    [_resolve](member, disposition) {
      let t13;
      if (dart.test(this[_resolved])) return;
      if (dart.equals(disposition, arena.GestureDisposition.rejected)) {
        this[_members][$remove](member);
        member.rejectGesture(this[_pointer$]);
        if (dart.test(this[_members][$isEmpty])) this[_entry].resolve(disposition);
      } else {
        if (!dart.equals(disposition, arena.GestureDisposition.accepted)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 73, 14, "disposition == GestureDisposition.accepted");
        this[_winner] == null ? this[_winner] = (t13 = this[_owner$].captain, t13 == null ? member : t13) : null;
        this[_entry].resolve(disposition);
      }
    }
  };
  (team._CombiningGestureArenaMember.new = function(_owner, _pointer) {
    this[_members] = JSArrayOfGestureArenaMember().of([]);
    this[_resolved] = false;
    this[_winner] = null;
    this[_entry] = null;
    this[_owner$] = _owner;
    this[_pointer$] = _pointer;
    ;
  }).prototype = team._CombiningGestureArenaMember.prototype;
  dart.addTypeTests(team._CombiningGestureArenaMember);
  dart.setMethodSignature(team._CombiningGestureArenaMember, () => ({
    __proto__: dart.getMethods(team._CombiningGestureArenaMember.__proto__),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    [_close]: dart.fnType(dart.void, []),
    [_add]: dart.fnType(arena.GestureArenaEntry, [core.int, arena.GestureArenaMember]),
    [_resolve]: dart.fnType(dart.void, [arena.GestureArenaMember, arena.GestureDisposition])
  }));
  dart.setLibraryUri(team._CombiningGestureArenaMember, "package:flutter_web/src/gestures/team.dart");
  dart.setFieldSignature(team._CombiningGestureArenaMember, () => ({
    __proto__: dart.getFields(team._CombiningGestureArenaMember.__proto__),
    [_owner$]: dart.finalFieldType(team.GestureArenaTeam),
    [_members]: dart.finalFieldType(core.List$(arena.GestureArenaMember)),
    [_pointer$]: dart.finalFieldType(core.int),
    [_resolved]: dart.fieldType(core.bool),
    [_winner]: dart.fieldType(arena.GestureArenaMember),
    [_entry]: dart.fieldType(arena.GestureArenaEntry)
  }));
  team.GestureArenaTeam = class GestureArenaTeam extends core.Object {
    get captain() {
      return this[captain];
    }
    set captain(value) {
      this[captain] = value;
    }
    add(pointer, member) {
      let combiner = this[_combiners][$putIfAbsent](pointer, dart.fn(() => new team._CombiningGestureArenaMember.new(this, pointer), VoidTo_CombiningGestureArenaMember()));
      return combiner[_add](pointer, member);
    }
  };
  (team.GestureArenaTeam.new = function() {
    this[_combiners] = new (IdentityMapOfint$_CombiningGestureArenaMember()).new();
    this[captain] = null;
    ;
  }).prototype = team.GestureArenaTeam.prototype;
  dart.addTypeTests(team.GestureArenaTeam);
  const captain = Symbol("GestureArenaTeam.captain");
  dart.setMethodSignature(team.GestureArenaTeam, () => ({
    __proto__: dart.getMethods(team.GestureArenaTeam.__proto__),
    add: dart.fnType(arena.GestureArenaEntry, [core.int, arena.GestureArenaMember])
  }));
  dart.setLibraryUri(team.GestureArenaTeam, "package:flutter_web/src/gestures/team.dart");
  dart.setFieldSignature(team.GestureArenaTeam, () => ({
    __proto__: dart.getFields(team.GestureArenaTeam.__proto__),
    [_combiners]: dart.finalFieldType(core.Map$(core.int, team._CombiningGestureArenaMember)),
    captain: dart.fieldType(arena.GestureArenaMember)
  }));
  const _pendingPointerEvents = dart.privateName(binding$, "_pendingPointerEvents");
  const _hitTests = dart.privateName(binding$, "_hitTests");
  const _handlePointerDataPacket = dart.privateName(binding$, "_handlePointerDataPacket");
  const _flushPointerEventQueue = dart.privateName(binding$, "_flushPointerEventQueue");
  const _handlePointerEvent = dart.privateName(binding$, "_handlePointerEvent");
  binding$.GestureBinding = class GestureBinding extends binding.BindingBase {
    static get instance() {
      return binding$.GestureBinding._instance;
    }
  };
  binding$.GestureBinding[dart.mixinOn] = BindingBase => class GestureBinding extends BindingBase {
    get pointerRouter() {
      return this[pointerRouter];
    }
    set pointerRouter(value) {
      super.pointerRouter = value;
    }
    get gestureArena() {
      return this[gestureArena];
    }
    set gestureArena(value) {
      super.gestureArena = value;
    }
    get pointerSignalResolver() {
      return this[pointerSignalResolver];
    }
    set pointerSignalResolver(value) {
      super.pointerSignalResolver = value;
    }
    initInstances() {
      super.initInstances();
      binding$.GestureBinding._instance = this;
      this.window.onPointerDataPacket = dart.bind(this, _handlePointerDataPacket);
    }
    unlocked() {
      super.unlocked();
      this[_flushPointerEventQueue]();
    }
    [_handlePointerDataPacket](packet) {
      this[_pendingPointerEvents].addAll(converter.PointerEventConverter.expand(packet.data, this.window.devicePixelRatio));
      if (!dart.test(this.locked)) this[_flushPointerEventQueue]();
    }
    cancelPointer(pointer) {
      if (dart.test(this[_pendingPointerEvents][$isEmpty]) && !dart.test(this.locked)) async.scheduleMicrotask(dart.bind(this, _flushPointerEventQueue));
      this[_pendingPointerEvents].addFirst(new events.PointerCancelEvent.new({pointer: pointer}));
    }
    [_flushPointerEventQueue]() {
      if (!!dart.test(this.locked)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 101, 12, "!locked");
      while (dart.test(this[_pendingPointerEvents][$isNotEmpty]))
        this[_handlePointerEvent](this[_pendingPointerEvents].removeFirst());
    }
    [_handlePointerEvent](event) {
      if (!!dart.test(this.locked)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 124, 12, "!locked");
      let hitTestResult = null;
      if (events.PointerDownEvent.is(event) || events.PointerSignalEvent.is(event)) {
        if (!!dart.test(this[_hitTests][$containsKey](event.pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 127, 14, "!_hitTests.containsKey(event.pointer)");
        hitTestResult = new hit_test.HitTestResult.new();
        this.hitTest(hitTestResult, event.position);
        if (events.PointerDownEvent.is(event)) {
          this[_hitTests][$_set](event.pointer, hitTestResult);
        }
        if (!dart.test(dart.fn(() => {
          if (dart.test(debug$.debugPrintHitTestResults)) print.debugPrint(dart.str(event) + ": " + dart.str(hitTestResult));
          return true;
        }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 133, 14, "() {\n        if (debugPrintHitTestResults)\n          debugPrint('$event: $hitTestResult');\n        return true;\n      }()");
      } else if (events.PointerUpEvent.is(event) || events.PointerCancelEvent.is(event)) {
        hitTestResult = this[_hitTests][$remove](event.pointer);
      } else if (dart.test(event.down)) {
        hitTestResult = this[_hitTests][$_get](event.pointer);
      }
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$.debugPrintMouseHoverEvents) && events.PointerHoverEvent.is(event)) print.debugPrint(dart.str(event));
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 148, 12, "() {\n      if (debugPrintMouseHoverEvents && event is PointerHoverEvent)\n        debugPrint('$event');\n      return true;\n    }()");
      if (hitTestResult != null || events.PointerHoverEvent.is(event) || events.PointerAddedEvent.is(event) || events.PointerRemovedEvent.is(event)) {
        this.dispatchEvent(event, hitTestResult);
      }
    }
    hitTest(result, position) {
      result.add(new hit_test.HitTestEntry.new(this));
    }
    dispatchEvent(event, hitTestResult) {
      if (!!dart.test(this.locked)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 175, 12, "!locked");
      if (hitTestResult == null) {
        if (!(events.PointerHoverEvent.is(event) || events.PointerAddedEvent.is(event) || events.PointerRemovedEvent.is(event))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 179, 14, "event is PointerHoverEvent || event is PointerAddedEvent || event is PointerRemovedEvent");
        try {
          this.pointerRouter.route(event);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          assertions.FlutterError.reportError(new binding$.FlutterErrorDetailsForPointerEventDispatcher.new({exception: exception, stack: stack, library: "gesture library", context: new assertions.ErrorDescription.new("while dispatching a non-hit-tested pointer event"), event: event, hitTestEntry: null, informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfPointerEvent()).new(function*() {
              yield new (DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
            }), VoidToIterableOfDiagnosticsPropertyOfPointerEvent())}));
        }
        return;
      }
      for (let entry of hitTestResult.path) {
        try {
          entry.target.handleEvent(event.transformed(entry.transform), entry);
        } catch (e$) {
          let exception = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          assertions.FlutterError.reportError(new binding$.FlutterErrorDetailsForPointerEventDispatcher.new({exception: exception, stack: stack, library: "gesture library", context: new assertions.ErrorDescription.new("while dispatching a pointer event"), event: event, hitTestEntry: entry, informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfObject()).new(function*() {
              yield new (DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
              yield new (DiagnosticsPropertyOfHitTestTarget()).new("Target", entry.target, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
            }), VoidToIterableOfDiagnosticsPropertyOfObject())}));
        }
      }
    }
    handleEvent(event, entry) {
      this.pointerRouter.route(event);
      if (events.PointerDownEvent.is(event)) {
        this.gestureArena.close(event.pointer);
      } else if (events.PointerUpEvent.is(event)) {
        this.gestureArena.sweep(event.pointer);
      } else if (events.PointerSignalEvent.is(event)) {
        this.pointerSignalResolver.resolve(event);
      }
    }
  };
  (binding$.GestureBinding[dart.mixinNew] = function() {
    this[_pendingPointerEvents] = new (ListQueueOfPointerEvent()).new();
    this[pointerRouter] = new pointer_router.PointerRouter.new();
    this[gestureArena] = new arena.GestureArenaManager.new();
    this[pointerSignalResolver] = new pointer_signal_resolver.PointerSignalResolver.new();
    this[_hitTests] = new (IdentityMapOfint$HitTestResult()).new();
  }).prototype = binding$.GestureBinding.prototype;
  dart.addTypeTests(binding$.GestureBinding);
  const pointerRouter = Symbol("GestureBinding.pointerRouter");
  const gestureArena = Symbol("GestureBinding.gestureArena");
  const pointerSignalResolver = Symbol("GestureBinding.pointerSignalResolver");
  binding$.GestureBinding[dart.implements] = () => [hit_test.HitTestable, hit_test.HitTestDispatcher, hit_test.HitTestTarget, binding.BindingBase];
  dart.setMethodSignature(binding$.GestureBinding, () => ({
    __proto__: dart.getMethods(binding$.GestureBinding.__proto__),
    [_handlePointerDataPacket]: dart.fnType(dart.void, [ui.PointerDataPacket]),
    cancelPointer: dart.fnType(dart.void, [core.int]),
    [_flushPointerEventQueue]: dart.fnType(dart.void, []),
    [_handlePointerEvent]: dart.fnType(dart.void, [events.PointerEvent]),
    hitTest: dart.fnType(dart.void, [hit_test.HitTestResult, ui.Offset]),
    dispatchEvent: dart.fnType(dart.void, [events.PointerEvent, hit_test.HitTestResult]),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent, hit_test.HitTestEntry])
  }));
  dart.setLibraryUri(binding$.GestureBinding, "package:flutter_web/src/gestures/binding.dart");
  dart.setFieldSignature(binding$.GestureBinding, () => ({
    __proto__: dart.getFields(binding$.GestureBinding.__proto__),
    [_pendingPointerEvents]: dart.finalFieldType(collection.Queue$(events.PointerEvent)),
    pointerRouter: dart.finalFieldType(pointer_router.PointerRouter),
    gestureArena: dart.finalFieldType(arena.GestureArenaManager),
    pointerSignalResolver: dart.finalFieldType(pointer_signal_resolver.PointerSignalResolver),
    [_hitTests]: dart.finalFieldType(core.Map$(core.int, hit_test.HitTestResult))
  }));
  dart.defineLazy(binding$.GestureBinding, {
    /*binding$.GestureBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  binding$.FlutterErrorDetailsForPointerEventDispatcher = class FlutterErrorDetailsForPointerEventDispatcher extends assertions.FlutterErrorDetails {
    get event() {
      return this[event$0];
    }
    set event(value) {
      super.event = value;
    }
    get hitTestEntry() {
      return this[hitTestEntry$];
    }
    set hitTestEntry(value) {
      super.hitTestEntry = value;
    }
  };
  (binding$.FlutterErrorDetailsForPointerEventDispatcher.new = function(opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let library = opts && 'library' in opts ? opts.library : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let hitTestEntry = opts && 'hitTestEntry' in opts ? opts.hitTestEntry : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    let silent = opts && 'silent' in opts ? opts.silent : false;
    this[event$0] = event;
    this[hitTestEntry$] = hitTestEntry;
    binding$.FlutterErrorDetailsForPointerEventDispatcher.__proto__.new.call(this, {exception: exception, stack: stack, library: library, context: context, informationCollector: informationCollector, silent: silent});
    ;
  }).prototype = binding$.FlutterErrorDetailsForPointerEventDispatcher.prototype;
  dart.addTypeTests(binding$.FlutterErrorDetailsForPointerEventDispatcher);
  const event$0 = Symbol("FlutterErrorDetailsForPointerEventDispatcher.event");
  const hitTestEntry$ = Symbol("FlutterErrorDetailsForPointerEventDispatcher.hitTestEntry");
  dart.setLibraryUri(binding$.FlutterErrorDetailsForPointerEventDispatcher, "package:flutter_web/src/gestures/binding.dart");
  dart.setFieldSignature(binding$.FlutterErrorDetailsForPointerEventDispatcher, () => ({
    __proto__: dart.getFields(binding$.FlutterErrorDetailsForPointerEventDispatcher.__proto__),
    event: dart.finalFieldType(events.PointerEvent),
    hitTestEntry: dart.finalFieldType(hit_test.HitTestEntry)
  }));
  const _firstRegisteredCallback = dart.privateName(pointer_signal_resolver, "_firstRegisteredCallback");
  const _currentEvent = dart.privateName(pointer_signal_resolver, "_currentEvent");
  pointer_signal_resolver.PointerSignalResolver = class PointerSignalResolver extends core.Object {
    register(event, callback) {
      if (!(event != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 31, 12, "event != null");
      if (!(callback != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 32, 12, "callback != null");
      if (!(this[_currentEvent] == null || dart.equals(this[_currentEvent], event))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 33, 12, "_currentEvent == null || _currentEvent == event");
      if (this[_firstRegisteredCallback] != null) {
        return;
      }
      this[_currentEvent] = event;
      this[_firstRegisteredCallback] = callback;
    }
    resolve(event) {
      let t15;
      if (this[_firstRegisteredCallback] == null) {
        if (!(this[_currentEvent] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 48, 14, "_currentEvent == null");
        return;
      }
      if (!dart.equals((t15 = this[_currentEvent].original, t15 == null ? this[_currentEvent] : t15), event)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 51, 12, "(_currentEvent.original ?? _currentEvent) == event");
      try {
        this[_firstRegisteredCallback](this[_currentEvent]);
      } catch (e) {
        let exception = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "gesture library", context: new assertions.ErrorDescription.new("while resolving a PointerSignalEvent"), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfPointerSignalEvent()).new(function*() {
            yield new (DiagnosticsPropertyOfPointerSignalEvent()).new("Event", event, {style: diagnostics.DiagnosticsTreeStyle.errorProperty});
          }), VoidToIterableOfDiagnosticsPropertyOfPointerSignalEvent())}));
      }
      this[_firstRegisteredCallback] = null;
      this[_currentEvent] = null;
    }
  };
  (pointer_signal_resolver.PointerSignalResolver.new = function() {
    this[_firstRegisteredCallback] = null;
    this[_currentEvent] = null;
    ;
  }).prototype = pointer_signal_resolver.PointerSignalResolver.prototype;
  dart.addTypeTests(pointer_signal_resolver.PointerSignalResolver);
  dart.setMethodSignature(pointer_signal_resolver.PointerSignalResolver, () => ({
    __proto__: dart.getMethods(pointer_signal_resolver.PointerSignalResolver.__proto__),
    register: dart.fnType(dart.void, [events.PointerSignalEvent, dart.fnType(dart.void, [events.PointerSignalEvent])]),
    resolve: dart.fnType(dart.void, [events.PointerSignalEvent])
  }));
  dart.setLibraryUri(pointer_signal_resolver.PointerSignalResolver, "package:flutter_web/src/gestures/pointer_signal_resolver.dart");
  dart.setFieldSignature(pointer_signal_resolver.PointerSignalResolver, () => ({
    __proto__: dart.getFields(pointer_signal_resolver.PointerSignalResolver.__proto__),
    [_firstRegisteredCallback]: dart.fieldType(dart.fnType(dart.void, [events.PointerSignalEvent])),
    [_currentEvent]: dart.fieldType(events.PointerSignalEvent)
  }));
  hit_test.HitTestable = class HitTestable extends core.Object {
    static __() {
      return null;
    }
  };
  (hit_test.HitTestable[dart.mixinNew] = function() {
  }).prototype = hit_test.HitTestable.prototype;
  dart.addTypeTests(hit_test.HitTestable);
  dart.setLibraryUri(hit_test.HitTestable, "package:flutter_web/src/gestures/hit_test.dart");
  hit_test.HitTestDispatcher = class HitTestDispatcher extends core.Object {
    static __() {
      return null;
    }
  };
  (hit_test.HitTestDispatcher[dart.mixinNew] = function() {
  }).prototype = hit_test.HitTestDispatcher.prototype;
  dart.addTypeTests(hit_test.HitTestDispatcher);
  dart.setLibraryUri(hit_test.HitTestDispatcher, "package:flutter_web/src/gestures/hit_test.dart");
  hit_test.HitTestTarget = class HitTestTarget extends core.Object {
    static __() {
      return null;
    }
  };
  (hit_test.HitTestTarget[dart.mixinNew] = function() {
  }).prototype = hit_test.HitTestTarget.prototype;
  dart.addTypeTests(hit_test.HitTestTarget);
  dart.setLibraryUri(hit_test.HitTestTarget, "package:flutter_web/src/gestures/hit_test.dart");
  const _transform = dart.privateName(hit_test, "_transform");
  hit_test.HitTestEntry = class HitTestEntry extends core.Object {
    get target() {
      return this[target$];
    }
    set target(value) {
      super.target = value;
    }
    toString() {
      return dart.str(this.target);
    }
    get transform() {
      return this[_transform];
    }
  };
  (hit_test.HitTestEntry.new = function(target) {
    this[_transform] = null;
    this[target$] = target;
    ;
  }).prototype = hit_test.HitTestEntry.prototype;
  dart.addTypeTests(hit_test.HitTestEntry);
  const target$ = Symbol("HitTestEntry.target");
  dart.setGetterSignature(hit_test.HitTestEntry, () => ({
    __proto__: dart.getGetters(hit_test.HitTestEntry.__proto__),
    transform: vector_math_64.Matrix4
  }));
  dart.setLibraryUri(hit_test.HitTestEntry, "package:flutter_web/src/gestures/hit_test.dart");
  dart.setFieldSignature(hit_test.HitTestEntry, () => ({
    __proto__: dart.getFields(hit_test.HitTestEntry.__proto__),
    target: dart.finalFieldType(hit_test.HitTestTarget),
    [_transform]: dart.fieldType(vector_math_64.Matrix4)
  }));
  dart.defineExtensionMethods(hit_test.HitTestEntry, ['toString']);
  const _path = dart.privateName(hit_test, "_path");
  const _transforms = dart.privateName(hit_test, "_transforms");
  const _debugVectorMoreOrLessEquals = dart.privateName(hit_test, "_debugVectorMoreOrLessEquals");
  hit_test.HitTestResult = class HitTestResult extends core.Object {
    get path() {
      return this[_path];
    }
    add(entry) {
      if (!(entry[_transform] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 107, 12, "entry._transform == null");
      entry[_transform] = dart.test(this[_transforms][$isEmpty]) ? null : this[_transforms][$last];
      this[_path][$add](entry);
    }
    pushTransform(transform) {
      if (!(transform != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 138, 12, "transform != null");
      if (!(dart.test(this[_debugVectorMoreOrLessEquals](transform.getRow(2), vector_math_64.Vector4.new(0.0, 0.0, 1.0, 0.0))) && dart.test(this[_debugVectorMoreOrLessEquals](transform.getColumn(2), vector_math_64.Vector4.new(0.0, 0.0, 1.0, 0.0))))) dart.assertFailed("The third row and third column of a transform matrix for pointer " + "events must be Vector4(0, 0, 1, 0) to ensure that a transformed " + "point is directly under the pointer device. Did you forget to run the paint " + "matrix through PointerEvent.removePerspectiveTransform?" + "The provided matrix is:\n" + dart.str(transform), "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 140, 7, "_debugVectorMoreOrLessEquals(transform.getRow(2), Vector4(0, 0, 1, 0)) &&\n      _debugVectorMoreOrLessEquals(transform.getColumn(2), Vector4(0, 0, 1, 0))");
      this[_transforms].add(vector_math_64.Matrix4._check(dart.test(this[_transforms][$isEmpty]) ? transform : transform['*'](this[_transforms][$last])));
    }
    popTransform() {
      if (!dart.test(this[_transforms][$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 166, 12, "_transforms.isNotEmpty");
      this[_transforms].removeLast();
    }
    [_debugVectorMoreOrLessEquals](a, b, opts) {
      let epsilon = opts && 'epsilon' in opts ? opts.epsilon : 1e-10;
      let result = true;
      if (!dart.test(dart.fn(() => {
        let difference = a['-'](b);
        result = difference.storage[$every](dart.fn(component => component[$abs]() < dart.notNull(epsilon), doubleTobool()));
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 172, 12, "() {\n      final Vector4 difference = a - b;\n      result = difference.storage.every((double component) => component.abs() < epsilon);\n      return true;\n    }()");
      return result;
    }
    toString() {
      return "HitTestResult(" + dart.str(dart.test(this[_path][$isEmpty]) ? "<empty path>" : this[_path][$join](", ")) + ")";
    }
  };
  (hit_test.HitTestResult.new = function() {
    this[_path] = JSArrayOfHitTestEntry().of([]);
    this[_transforms] = new (ListQueueOfMatrix4()).new();
    ;
  }).prototype = hit_test.HitTestResult.prototype;
  (hit_test.HitTestResult.wrap = function(result) {
    this[_path] = result[_path];
    this[_transforms] = result[_transforms];
    ;
  }).prototype = hit_test.HitTestResult.prototype;
  dart.addTypeTests(hit_test.HitTestResult);
  dart.setMethodSignature(hit_test.HitTestResult, () => ({
    __proto__: dart.getMethods(hit_test.HitTestResult.__proto__),
    add: dart.fnType(dart.void, [hit_test.HitTestEntry]),
    pushTransform: dart.fnType(dart.void, [vector_math_64.Matrix4]),
    popTransform: dart.fnType(dart.void, []),
    [_debugVectorMoreOrLessEquals]: dart.fnType(core.bool, [vector_math_64.Vector4, vector_math_64.Vector4], {epsilon: core.double})
  }));
  dart.setGetterSignature(hit_test.HitTestResult, () => ({
    __proto__: dart.getGetters(hit_test.HitTestResult.__proto__),
    path: core.Iterable$(hit_test.HitTestEntry)
  }));
  dart.setLibraryUri(hit_test.HitTestResult, "package:flutter_web/src/gestures/hit_test.dart");
  dart.setFieldSignature(hit_test.HitTestResult, () => ({
    __proto__: dart.getFields(hit_test.HitTestResult.__proto__),
    [_path]: dart.finalFieldType(core.List$(hit_test.HitTestEntry)),
    [_transforms]: dart.finalFieldType(collection.Queue$(vector_math_64.Matrix4))
  }));
  dart.defineExtensionMethods(hit_test.HitTestResult, ['toString']);
  debug$.debugAssertAllGesturesVarsUnset = function debugAssertAllGesturesVarsUnset(reason) {
    if (!dart.test(dart.fn(() => {
      if (dart.test(debug$.debugPrintHitTestResults) || dart.test(debug$.debugPrintGestureArenaDiagnostics) || dart.test(debug$.debugPrintRecognizerCallbacksTrace)) dart.throw(assertions.FlutterError.new(reason));
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/debug.dart", 61, 10, "() {\n    if (debugPrintHitTestResults ||\n        debugPrintGestureArenaDiagnostics ||\n        debugPrintRecognizerCallbacksTrace)\n      throw FlutterError(reason);\n    return true;\n  }()");
    return true;
  };
  dart.defineLazy(debug$, {
    /*debug$.debugPrintHitTestResults*/get debugPrintHitTestResults() {
      return false;
    },
    set debugPrintHitTestResults(_) {},
    /*debug$.debugPrintMouseHoverEvents*/get debugPrintMouseHoverEvents() {
      return false;
    },
    set debugPrintMouseHoverEvents(_) {},
    /*debug$.debugPrintGestureArenaDiagnostics*/get debugPrintGestureArenaDiagnostics() {
      return false;
    },
    set debugPrintGestureArenaDiagnostics(_) {},
    /*debug$.debugPrintRecognizerCallbacksTrace*/get debugPrintRecognizerCallbacksTrace() {
      return false;
    },
    set debugPrintRecognizerCallbacksTrace(_) {}
  });
  const _pointer = dart.privateName(converter, "_pointer");
  const _down = dart.privateName(converter, "_down");
  converter._PointerState = class _PointerState extends core.Object {
    get pointer() {
      return this[_pointer];
    }
    startNewPointer() {
      converter._PointerState._pointerCount = dart.notNull(converter._PointerState._pointerCount) + 1;
      this[_pointer] = converter._PointerState._pointerCount;
    }
    get down() {
      return this[_down];
    }
    setDown() {
      if (!!dart.test(this[_down])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 26, 12, "!_down");
      this[_down] = true;
    }
    setUp() {
      if (!dart.test(this[_down])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 30, 12, "_down");
      this[_down] = false;
    }
    deltaTo(to) {
      return to['-'](this.lastPosition);
    }
    toString() {
      return "_PointerState(pointer: " + dart.str(this.pointer) + ", down: " + dart.str(this.down) + ", lastPosition: " + dart.str(this.lastPosition) + ")";
    }
  };
  (converter._PointerState.new = function(lastPosition) {
    this[_pointer] = null;
    this[_down] = false;
    this.lastPosition = lastPosition;
    ;
  }).prototype = converter._PointerState.prototype;
  dart.addTypeTests(converter._PointerState);
  dart.setMethodSignature(converter._PointerState, () => ({
    __proto__: dart.getMethods(converter._PointerState.__proto__),
    startNewPointer: dart.fnType(dart.void, []),
    setDown: dart.fnType(dart.void, []),
    setUp: dart.fnType(dart.void, []),
    deltaTo: dart.fnType(ui.Offset, [ui.Offset])
  }));
  dart.setGetterSignature(converter._PointerState, () => ({
    __proto__: dart.getGetters(converter._PointerState.__proto__),
    pointer: core.int,
    down: core.bool
  }));
  dart.setLibraryUri(converter._PointerState, "package:flutter_web/src/gestures/converter.dart");
  dart.setFieldSignature(converter._PointerState, () => ({
    __proto__: dart.getFields(converter._PointerState.__proto__),
    [_pointer]: dart.fieldType(core.int),
    [_down]: dart.fieldType(core.bool),
    lastPosition: dart.fieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(converter._PointerState, ['toString']);
  dart.defineLazy(converter._PointerState, {
    /*converter._PointerState._pointerCount*/get _pointerCount() {
      return 0;
    },
    set _pointerCount(_) {}
  });
  let C137;
  let C138;
  let C139;
  let C140;
  let C141;
  let C142;
  let C143;
  let C144;
  let C145;
  let C146;
  converter.PointerEventConverter = class PointerEventConverter extends core.Object {
    static clearPointers() {
      return converter.PointerEventConverter._pointers[$clear]();
    }
    static _ensureStateForPointer(datum, position) {
      return converter.PointerEventConverter._pointers[$putIfAbsent](datum.device, dart.fn(() => new converter._PointerState.new(position), VoidTo_PointerState()));
    }
    static expand(data, devicePixelRatio) {
      return new (SyncIterableOfPointerEvent()).new(function* expand() {
        for (let datum of data) {
          let position = new ui.Offset.new(datum.physicalX, datum.physicalY)['/'](devicePixelRatio);
          let radiusMinor = converter.PointerEventConverter._toLogicalPixels(datum.radiusMinor, devicePixelRatio);
          let radiusMajor = converter.PointerEventConverter._toLogicalPixels(datum.radiusMajor, devicePixelRatio);
          let radiusMin = converter.PointerEventConverter._toLogicalPixels(datum.radiusMin, devicePixelRatio);
          let radiusMax = converter.PointerEventConverter._toLogicalPixels(datum.radiusMax, devicePixelRatio);
          let timeStamp = datum.timeStamp;
          let kind = datum.kind;
          if (!(datum.change != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 107, 14, "datum.change != null");
          if (datum.signalKind == null || dart.equals(datum.signalKind, ui.PointerSignalKind.none)) {
            switch (datum.change) {
              case C137 || CT.C137:
              {
                if (!!dart.test(converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 111, 20, "!_pointers.containsKey(datum.device)");
                let state = converter.PointerEventConverter._ensureStateForPointer(datum, position);
                if (!dart.equals(state.lastPosition, position)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 113, 20, "state.lastPosition == position");
                yield new events.PointerAddedEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                break;
              }
              case C138 || CT.C138:
              {
                let alreadyAdded = converter.PointerEventConverter._pointers[$containsKey](datum.device);
                let state = converter.PointerEventConverter._ensureStateForPointer(datum, position);
                if (!!dart.test(state.down)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 133, 20, "!state.down");
                if (!dart.test(alreadyAdded)) {
                  if (!dart.equals(state.lastPosition, position)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 135, 22, "state.lastPosition == position");
                  yield new events.PointerAddedEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                }
                yield new events.PointerHoverEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                state.lastPosition = position;
                break;
              }
              case C139 || CT.C139:
              {
                let alreadyAdded = converter.PointerEventConverter._pointers[$containsKey](datum.device);
                let state = converter.PointerEventConverter._ensureStateForPointer(datum, position);
                if (!!dart.test(state.down)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 177, 20, "!state.down");
                if (!dart.test(alreadyAdded)) {
                  if (!dart.equals(state.lastPosition, position)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 179, 22, "state.lastPosition == position");
                  yield new events.PointerAddedEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                }
                if (!dart.equals(state.lastPosition, position)) {
                  yield new events.PointerHoverEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                  state.lastPosition = position;
                }
                state.startNewPointer();
                state.setDown();
                yield new events.PointerDownEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, buttons: converter._synthesiseDownButtons(datum.buttons, kind), obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                break;
              }
              case C140 || CT.C140:
              {
                if (!dart.test(converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 250, 20, "_pointers.containsKey(datum.device)");
                let state = converter.PointerEventConverter._pointers[$_get](datum.device);
                if (!dart.test(state.down)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 252, 20, "state.down");
                yield new events.PointerMoveEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: converter._synthesiseDownButtons(datum.buttons, kind), obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, platformData: datum.platformData});
                state.lastPosition = position;
                break;
              }
              case C141 || CT.C141:
              case C142 || CT.C142:
              {
                if (!dart.test(converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 279, 20, "_pointers.containsKey(datum.device)");
                let state = converter.PointerEventConverter._pointers[$_get](datum.device);
                if (!dart.test(state.down)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 281, 20, "state.down");
                if (!dart.equals(position, state.lastPosition)) {
                  yield new events.PointerMoveEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: converter._synthesiseDownButtons(datum.buttons, kind), obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                  state.lastPosition = position;
                }
                if (!dart.equals(position, state.lastPosition)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 312, 20, "position == state.lastPosition");
                state.setUp();
                if (dart.equals(datum.change, ui.PointerChange.up)) {
                  yield new events.PointerUpEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, buttons: datum.buttons, obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                } else {
                  yield new events.PointerCancelEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                }
                break;
              }
              case C143 || CT.C143:
              {
                if (!dart.test(converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 360, 20, "_pointers.containsKey(datum.device)");
                let state = converter.PointerEventConverter._pointers[$_get](datum.device);
                if (dart.test(state.down)) {
                  yield new events.PointerCancelEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: state.lastPosition, buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                }
                if (!dart.equals(position, state.lastPosition)) {
                  yield new events.PointerHoverEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                }
                converter.PointerEventConverter._pointers[$remove](datum.device);
                yield new events.PointerRemovedEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, radiusMin: radiusMin, radiusMax: radiusMax});
                break;
              }
            }
          } else {
            switch (datum.signalKind) {
              case C144 || CT.C144:
              {
                if (!dart.test(converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 426, 20, "_pointers.containsKey(datum.device)");
                let state = converter.PointerEventConverter._ensureStateForPointer(datum, position);
                if (!dart.equals(state.lastPosition, position)) {
                  if (dart.test(state.down)) {
                    yield new events.PointerMoveEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: converter._synthesiseDownButtons(datum.buttons, kind), obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                  } else {
                    yield new events.PointerHoverEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                  }
                  state.lastPosition = position;
                }
                let scrollDelta = new ui.Offset.new(datum.scrollDeltaX, datum.scrollDeltaY)['/'](devicePixelRatio);
                yield new events.PointerScrollEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, scrollDelta: scrollDelta});
                break;
              }
              case C145 || CT.C145:
              {
                if (!false) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 492, 20, "false");
                break;
              }
              case C146 || CT.C146:
              {
                break;
              }
            }
          }
        }
      });
    }
    static _toLogicalPixels(physicalPixels, devicePixelRatio) {
      return physicalPixels == null ? null : dart.notNull(physicalPixels) / dart.notNull(devicePixelRatio);
    }
  };
  (converter.PointerEventConverter.__ = function() {
    ;
  }).prototype = converter.PointerEventConverter.prototype;
  dart.addTypeTests(converter.PointerEventConverter);
  dart.setLibraryUri(converter.PointerEventConverter, "package:flutter_web/src/gestures/converter.dart");
  dart.defineLazy(converter.PointerEventConverter, {
    /*converter.PointerEventConverter._pointers*/get _pointers() {
      return new (IdentityMapOfint$_PointerState()).new();
    }
  });
  let C147;
  let C148;
  converter._synthesiseDownButtons = function _synthesiseDownButtons(buttons, kind) {
    switch (kind) {
      case C133 || CT.C133:
      {
        return buttons;
      }
      case C132 || CT.C132:
      case C147 || CT.C147:
      case C148 || CT.C148:
      {
        return (dart.notNull(buttons) | 1) >>> 0;
      }
      default:
      {
        return buttons === 0 ? 1 : buttons;
      }
    }
  };
  const _name$4 = dart.privateName(arena, "_name");
  let C149;
  let C150;
  let C151;
  arena.GestureDisposition = class GestureDisposition extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (arena.GestureDisposition.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = arena.GestureDisposition.prototype;
  dart.addTypeTests(arena.GestureDisposition);
  dart.setLibraryUri(arena.GestureDisposition, "package:flutter_web/src/gestures/arena.dart");
  dart.setFieldSignature(arena.GestureDisposition, () => ({
    __proto__: dart.getFields(arena.GestureDisposition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(arena.GestureDisposition, ['toString']);
  arena.GestureDisposition.accepted = C149 || CT.C149;
  arena.GestureDisposition.rejected = C150 || CT.C150;
  arena.GestureDisposition.values = C151 || CT.C151;
  const _resolve$ = dart.privateName(arena, "_resolve");
  arena.GestureArenaEntry = class GestureArenaEntry extends core.Object {
    resolve(disposition) {
      this[_arena$][_resolve$](this[_pointer$0], this[_member$], disposition);
    }
  };
  (arena.GestureArenaEntry.__ = function(_arena, _pointer, _member) {
    this[_arena$] = _arena;
    this[_pointer$0] = _pointer;
    this[_member$] = _member;
    ;
  }).prototype = arena.GestureArenaEntry.prototype;
  dart.addTypeTests(arena.GestureArenaEntry);
  dart.setMethodSignature(arena.GestureArenaEntry, () => ({
    __proto__: dart.getMethods(arena.GestureArenaEntry.__proto__),
    resolve: dart.fnType(dart.void, [arena.GestureDisposition])
  }));
  dart.setLibraryUri(arena.GestureArenaEntry, "package:flutter_web/src/gestures/arena.dart");
  dart.setFieldSignature(arena.GestureArenaEntry, () => ({
    __proto__: dart.getFields(arena.GestureArenaEntry.__proto__),
    [_arena$]: dart.finalFieldType(arena.GestureArenaManager),
    [_pointer$0]: dart.finalFieldType(core.int),
    [_member$]: dart.finalFieldType(arena.GestureArenaMember)
  }));
  arena._GestureArena = class _GestureArena extends core.Object {
    add(member) {
      if (!dart.test(this.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 70, 12, "isOpen");
      this.members[$add](member);
    }
    toString() {
      if (dart.test(util.assertionsEnabled)) {
        let buffer = new core.StringBuffer.new();
        if (dart.test(this.members[$isEmpty])) {
          buffer.write("<empty>");
        } else {
          buffer.write(this.members[$map](core.String, dart.fn(member => {
            if (dart.equals(member, this.eagerWinner)) return dart.str(member) + " (eager winner)";
            return dart.str(member);
          }, GestureArenaMemberToString()))[$join](", "));
        }
        if (dart.test(this.isOpen)) buffer.write(" [open]");
        if (dart.test(this.isHeld)) buffer.write(" [held]");
        if (dart.test(this.hasPendingSweep)) buffer.write(" [hasPendingSweep]");
        return buffer.toString();
      } else {
        return super[$toString]();
      }
    }
  };
  (arena._GestureArena.new = function() {
    this.members = JSArrayOfGestureArenaMember().of([]);
    this.isOpen = true;
    this.isHeld = false;
    this.hasPendingSweep = false;
    this.eagerWinner = null;
    ;
  }).prototype = arena._GestureArena.prototype;
  dart.addTypeTests(arena._GestureArena);
  dart.setMethodSignature(arena._GestureArena, () => ({
    __proto__: dart.getMethods(arena._GestureArena.__proto__),
    add: dart.fnType(dart.void, [arena.GestureArenaMember])
  }));
  dart.setLibraryUri(arena._GestureArena, "package:flutter_web/src/gestures/arena.dart");
  dart.setFieldSignature(arena._GestureArena, () => ({
    __proto__: dart.getFields(arena._GestureArena.__proto__),
    members: dart.finalFieldType(core.List$(arena.GestureArenaMember)),
    isOpen: dart.fieldType(core.bool),
    isHeld: dart.fieldType(core.bool),
    hasPendingSweep: dart.fieldType(core.bool),
    eagerWinner: dart.fieldType(arena.GestureArenaMember)
  }));
  dart.defineExtensionMethods(arena._GestureArena, ['toString']);
  const _arenas = dart.privateName(arena, "_arenas");
  const _debugLogDiagnostic = dart.privateName(arena, "_debugLogDiagnostic");
  const _tryToResolveArena = dart.privateName(arena, "_tryToResolveArena");
  const _resolveInFavorOf = dart.privateName(arena, "_resolveInFavorOf");
  const _resolveByDefault = dart.privateName(arena, "_resolveByDefault");
  arena.GestureArenaManager = class GestureArenaManager extends core.Object {
    add(pointer, member) {
      let state = this[_arenas][$putIfAbsent](pointer, dart.fn(() => {
        if (!dart.test(this[_debugLogDiagnostic](pointer, "★ Opening new gesture arena."))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 113, 14, "_debugLogDiagnostic(pointer, '★ Opening new gesture arena.");
        return new arena._GestureArena.new();
      }, VoidTo_GestureArena()));
      state.add(member);
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Adding: " + dart.str(member)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 117, 12, "t(_debugLogDiagnostic(pointer, 'Adding: $member");
      return new arena.GestureArenaEntry.__(this, pointer, member);
    }
    close(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      state.isOpen = false;
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Closing", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 129, 12, "t(_debugLogDiagnostic(pointer, 'Closing', stat");
      this[_tryToResolveArena](pointer, state);
    }
    sweep(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 150, 12, "t(!state.isOp");
      if (dart.test(state.isHeld)) {
        state.hasPendingSweep = true;
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Delaying sweep", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 153, 14, "t(_debugLogDiagnostic(pointer, 'Delaying sweep', stat");
        return;
      }
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Sweeping", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 156, 12, "t(_debugLogDiagnostic(pointer, 'Sweeping', stat");
      this[_arenas][$remove](pointer);
      if (dart.test(state.members[$isNotEmpty])) {
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Winner: " + dart.str(state.members[$first])))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 160, 14, "t(_debugLogDiagnostic(pointer, 'Winner: ${state.members.first}");
        state.members[$first].acceptGesture(pointer);
        for (let i = 1; i < dart.notNull(state.members[$length]); i = i + 1)
          state.members[$_get](i).rejectGesture(pointer);
      }
    }
    hold(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      state.isHeld = true;
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Holding", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 185, 12, "t(_debugLogDiagnostic(pointer, 'Holding', stat");
    }
    release(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      state.isHeld = false;
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Releasing", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 202, 12, "t(_debugLogDiagnostic(pointer, 'Releasing', stat");
      if (dart.test(state.hasPendingSweep)) this.sweep(pointer);
    }
    [_resolve$](pointer, member, disposition) {
      let t16;
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      if (!dart.test(this[_debugLogDiagnostic](pointer, (dart.equals(disposition, arena.GestureDisposition.accepted) ? "Accepting" : "Rejecting") + ": " + dart.str(member)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 214, 12, "t(_debugLogDiagnostic(pointer, '${ disposition == GestureDisposition.accepted ? \"Accepting\" : \"Rejecting\" }: $member");
      if (!dart.test(state.members[$contains](member))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 215, 12, "t(state.members.contains(membe");
      if (dart.equals(disposition, arena.GestureDisposition.rejected)) {
        state.members[$remove](member);
        member.rejectGesture(pointer);
        if (!dart.test(state.isOpen)) this[_tryToResolveArena](pointer, state);
      } else {
        if (!dart.equals(disposition, arena.GestureDisposition.accepted)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 222, 14, "t(disposition == GestureDisposition.accept");
        if (dart.test(state.isOpen)) {
          t16 = state;
          t16.eagerWinner == null ? t16.eagerWinner = member : null;
        } else {
          if (!dart.test(this[_debugLogDiagnostic](pointer, "Self-declared winner: " + dart.str(member)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 226, 16, "t(_debugLogDiagnostic(pointer, 'Self-declared winner: $member");
          this[_resolveInFavorOf](pointer, state, member);
        }
      }
    }
    [_tryToResolveArena](pointer, state) {
      if (!dart.equals(this[_arenas][$_get](pointer), state)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 233, 12, "t(_arenas[pointer] == sta");
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 234, 12, "t(!state.isOp");
      if (state.members[$length] === 1) {
        async.scheduleMicrotask(dart.fn(() => this[_resolveByDefault](pointer, state), VoidTovoid()));
      } else if (dart.test(state.members[$isEmpty])) {
        this[_arenas][$remove](pointer);
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Arena empty."))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 239, 14, "t(_debugLogDiagnostic(pointer, 'Arena empty.");
      } else if (state.eagerWinner != null) {
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Eager winner: " + dart.str(state.eagerWinner)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 241, 14, "t(_debugLogDiagnostic(pointer, 'Eager winner: ${state.eagerWinner}");
        this[_resolveInFavorOf](pointer, state, state.eagerWinner);
      }
    }
    [_resolveByDefault](pointer, state) {
      if (!dart.test(this[_arenas][$containsKey](pointer))) return;
      if (!dart.equals(this[_arenas][$_get](pointer), state)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 249, 12, "t(_arenas[pointer] == sta");
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 250, 12, "t(!state.isOp");
      let members = state.members;
      if (!(members[$length] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 252, 12, "t(members.length ==");
      this[_arenas][$remove](pointer);
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Default winner: " + dart.str(state.members[$first])))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 254, 12, "t(_debugLogDiagnostic(pointer, 'Default winner: ${state.members.first}");
      state.members[$first].acceptGesture(pointer);
    }
    [_resolveInFavorOf](pointer, state, member) {
      if (!dart.equals(state, this[_arenas][$_get](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 259, 12, "t(state == _arenas[pointe");
      if (!(state != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 260, 12, "t(state != nu");
      if (!(state.eagerWinner == null || dart.equals(state.eagerWinner, member))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 261, 12, "t(state.eagerWinner == null || state.eagerWinner == memb");
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 262, 12, "t(!state.isOp");
      this[_arenas][$remove](pointer);
      for (let rejectedMember of state.members) {
        if (!dart.equals(rejectedMember, member)) rejectedMember.rejectGesture(pointer);
      }
      member.acceptGesture(pointer);
    }
    [_debugLogDiagnostic](pointer, message, state) {
      if (state === void 0) state = null;
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$.debugPrintGestureArenaDiagnostics)) {
          let count = state != null ? state.members[$length] : null;
          let s = count !== 1 ? "s" : "";
          print.debugPrint("Gesture arena " + dart.toString(pointer)[$padRight](4) + " ❙ " + dart.str(message) + (count != null ? " with " + dart.str(count) + " member" + s + "." : ""));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 272, 12, "t(() {\n      if (debugPrintGestureArenaDiagnostics) {\n        final int count = state != null ? state.members.length : null;\n        final String s = count != 1 ? 's' : '';\n        debugPrint('Gesture arena ${pointer.toString().padRight(4)} ❙ $message${ count != null ? \" with $count member$s.\" : \"\"}');\n      }\n      return true;\n   ");
      return true;
    }
  };
  (arena.GestureArenaManager.new = function() {
    this[_arenas] = new (IdentityMapOfint$_GestureArena()).new();
    ;
  }).prototype = arena.GestureArenaManager.prototype;
  dart.addTypeTests(arena.GestureArenaManager);
  dart.setMethodSignature(arena.GestureArenaManager, () => ({
    __proto__: dart.getMethods(arena.GestureArenaManager.__proto__),
    add: dart.fnType(arena.GestureArenaEntry, [core.int, arena.GestureArenaMember]),
    close: dart.fnType(dart.void, [core.int]),
    sweep: dart.fnType(dart.void, [core.int]),
    hold: dart.fnType(dart.void, [core.int]),
    release: dart.fnType(dart.void, [core.int]),
    [_resolve$]: dart.fnType(dart.void, [core.int, arena.GestureArenaMember, arena.GestureDisposition]),
    [_tryToResolveArena]: dart.fnType(dart.void, [core.int, arena._GestureArena]),
    [_resolveByDefault]: dart.fnType(dart.void, [core.int, arena._GestureArena]),
    [_resolveInFavorOf]: dart.fnType(dart.void, [core.int, arena._GestureArena, arena.GestureArenaMember]),
    [_debugLogDiagnostic]: dart.fnType(core.bool, [core.int, core.String], [arena._GestureArena])
  }));
  dart.setLibraryUri(arena.GestureArenaManager, "package:flutter_web/src/gestures/arena.dart");
  dart.setFieldSignature(arena.GestureArenaManager, () => ({
    __proto__: dart.getFields(arena.GestureArenaManager.__proto__),
    [_arenas]: dart.finalFieldType(core.Map$(core.int, arena._GestureArena))
  }));
  dart.copyProperties(util, {
    get assertionsEnabled() {
      let k = false;
      if (!(k = true)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/util.dart", 22, 10, "k = true");
      return k;
    }
  });
  dart.defineLazy(util, {
    /*util.debugIsInTest*/get debugIsInTest() {
      return false;
    },
    set debugIsInTest(_) {}
  });
  let C152;
  let C153;
  let C154;
  let C155;
  let C156;
  let C157;
  dart.defineLazy(constants, {
    /*constants.kPressTimeout*/get kPressTimeout() {
      return C152 || CT.C152;
    },
    /*constants.kHoverTapTimeout*/get kHoverTapTimeout() {
      return C153 || CT.C153;
    },
    /*constants.kHoverTapSlop*/get kHoverTapSlop() {
      return 20;
    },
    /*constants.kLongPressTimeout*/get kLongPressTimeout() {
      return C154 || CT.C154;
    },
    /*constants.kDoubleTapTimeout*/get kDoubleTapTimeout() {
      return C155 || CT.C155;
    },
    /*constants.kDoubleTapMinTime*/get kDoubleTapMinTime() {
      return C156 || CT.C156;
    },
    /*constants.kDoubleTapTouchSlop*/get kDoubleTapTouchSlop() {
      return 18;
    },
    /*constants.kDoubleTapSlop*/get kDoubleTapSlop() {
      return 100;
    },
    /*constants.kZoomControlsTimeout*/get kZoomControlsTimeout() {
      return C157 || CT.C157;
    },
    /*constants.kTouchSlop*/get kTouchSlop() {
      return 18;
    },
    /*constants.kPagingTouchSlop*/get kPagingTouchSlop() {
      return 36;
    },
    /*constants.kPanSlop*/get kPanSlop() {
      return 36;
    },
    /*constants.kScaleSlop*/get kScaleSlop() {
      return 18;
    },
    /*constants.kWindowTouchSlop*/get kWindowTouchSlop() {
      return 16;
    },
    /*constants.kMinFlingVelocity*/get kMinFlingVelocity() {
      return 50;
    },
    /*constants.kMaxFlingVelocity*/get kMaxFlingVelocity() {
      return 8000;
    },
    /*constants.kJumpTapTimeout*/get kJumpTapTimeout() {
      return C154 || CT.C154;
    }
  });
  const _name$5 = dart.privateName(system_sound, "_name");
  let C158;
  let C159;
  system_sound.SystemSoundType = class SystemSoundType extends core.Object {
    toString() {
      return this[_name$5];
    }
  };
  (system_sound.SystemSoundType.new = function(index, _name) {
    this.index = index;
    this[_name$5] = _name;
    ;
  }).prototype = system_sound.SystemSoundType.prototype;
  dart.addTypeTests(system_sound.SystemSoundType);
  dart.setLibraryUri(system_sound.SystemSoundType, "package:flutter_web/src/services/system_sound.dart");
  dart.setFieldSignature(system_sound.SystemSoundType, () => ({
    __proto__: dart.getFields(system_sound.SystemSoundType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$5]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(system_sound.SystemSoundType, ['toString']);
  system_sound.SystemSoundType.click = C158 || CT.C158;
  system_sound.SystemSoundType.values = C159 || CT.C159;
  system_sound.SystemSound = class SystemSound extends core.Object {
    static play(type) {
      return async.async(dart.void, function* play() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "SystemSound.play", dart.toString(type));
      });
    }
  };
  (system_sound.SystemSound.__ = function() {
    ;
  }).prototype = system_sound.SystemSound.prototype;
  dart.addTypeTests(system_sound.SystemSound);
  dart.setLibraryUri(system_sound.SystemSound, "package:flutter_web/src/services/system_sound.dart");
  gradient._ColorsAndStops = class _ColorsAndStops extends core.Object {};
  (gradient._ColorsAndStops.new = function(colors, stops) {
    this.colors = colors;
    this.stops = stops;
    ;
  }).prototype = gradient._ColorsAndStops.prototype;
  dart.addTypeTests(gradient._ColorsAndStops);
  dart.setLibraryUri(gradient._ColorsAndStops, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(gradient._ColorsAndStops, () => ({
    __proto__: dart.getFields(gradient._ColorsAndStops.__proto__),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    stops: dart.finalFieldType(core.List$(core.double))
  }));
  const _impliedStops = dart.privateName(gradient, "_impliedStops");
  gradient.Gradient = class Gradient extends core.Object {
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$];
    }
    set stops(value) {
      super.stops = value;
    }
    [_impliedStops]() {
      if (this.stops != null) return this.stops;
      if (!(dart.notNull(this.colors[$length]) >= 2)) dart.assertFailed("colors list must have at least two colors", "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 114, 12, "colors.length >= 2");
      let separation = 1.0 / (dart.notNull(this.colors[$length]) - 1);
      return ListOfdouble().generate(this.colors[$length], dart.fn(index => dart.notNull(index) * separation, intTodouble()), {growable: false});
    }
    lerpFrom(a, t) {
      if (a == null) return this.scale(t);
      return null;
    }
    lerpTo(b, t) {
      if (b == null) return this.scale(1.0 - dart.notNull(t));
      return null;
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 211, 12, "t != null");
      let result = null;
      if (b != null) result = b.lerpFrom(a, t);
      if (result == null && a != null) result = a.lerpTo(b, t);
      if (result != null) return result;
      if (a == null && b == null) return null;
      if (!(a != null && b != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 221, 12, "a != null && b != null");
      return dart.notNull(t) < 0.5 ? a.scale(1.0 - dart.notNull(t) * 2.0) : b.scale((dart.notNull(t) - 0.5) * 2.0);
    }
  };
  (gradient.Gradient.new = function(opts) {
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    this[colors$] = colors;
    this[stops$] = stops;
    if (!(colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 83, 15, "colors != null");
    ;
  }).prototype = gradient.Gradient.prototype;
  dart.addTypeTests(gradient.Gradient);
  const colors$ = Symbol("Gradient.colors");
  const stops$ = Symbol("Gradient.stops");
  dart.setMethodSignature(gradient.Gradient, () => ({
    __proto__: dart.getMethods(gradient.Gradient.__proto__),
    [_impliedStops]: dart.fnType(core.List$(core.double), []),
    lerpFrom: dart.fnType(gradient.Gradient, [gradient.Gradient, core.double]),
    lerpTo: dart.fnType(gradient.Gradient, [gradient.Gradient, core.double])
  }));
  dart.setLibraryUri(gradient.Gradient, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(gradient.Gradient, () => ({
    __proto__: dart.getFields(gradient.Gradient.__proto__),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    stops: dart.finalFieldType(core.List$(core.double))
  }));
  let C160;
  gradient.LinearGradient = class LinearGradient extends gradient.Gradient {
    get begin() {
      return this[begin$0];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$1];
    }
    set end(value) {
      super.end = value;
    }
    get tileMode() {
      return this[tileMode$];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.linear(this.begin.resolve(textDirection).withinRect(rect), this.end.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode);
    }
    scale(factor) {
      return new gradient.LinearGradient.new({begin: this.begin, end: this.end, colors: this.colors[$map](ui.Color, dart.fn(color => ui.Color.lerp(null, color, factor), ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || gradient.LinearGradient.is(a)) return gradient.LinearGradient.lerp(gradient.LinearGradient._check(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || gradient.LinearGradient.is(b)) return gradient.LinearGradient.lerp(this, gradient.LinearGradient._check(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 391, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b.scale(t);
      if (b == null) return a.scale(1.0 - dart.notNull(t));
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.LinearGradient.new({begin: alignment.AlignmentGeometry.lerp(a.begin, b.begin, t), end: alignment.AlignmentGeometry.lerp(a.end, b.end, t), colors: interpolated.colors, stops: interpolated.stops, tileMode: dart.notNull(t) < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      let t16, t16$, t16$0, t16$1;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = gradient.LinearGradient._check(other);
      if (!dart.equals(this.begin, typedOther.begin) || !dart.equals(this.end, typedOther.end) || !dart.equals(this.tileMode, typedOther.tileMode) || (t16 = this.colors, t16 == null ? null : t16[$length]) != (t16$ = typedOther.colors, t16$ == null ? null : t16$[$length]) || (t16$0 = this.stops, t16$0 == null ? null : t16$0[$length]) != (t16$1 = typedOther.stops, t16$1 == null ? null : t16$1[$length])) return false;
      if (this.colors != null) {
        if (!(typedOther.colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 428, 14, "typedOther.colors != null");
        if (!(this.colors[$length] == typedOther.colors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 429, 14, "colors.length == typedOther.colors.length");
        for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
          if (!dart.equals(this.colors[$_get](i), typedOther.colors[$_get](i))) return false;
        }
      }
      if (this.stops != null) {
        if (!(typedOther.stops != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 436, 14, "typedOther.stops != null");
        if (!(this.stops[$length] == typedOther.stops[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 437, 14, "stops.length == typedOther.stops.length");
        for (let i = 0; i < dart.notNull(this.stops[$length]); i = i + 1) {
          if (this.stops[$_get](i) != typedOther.stops[$_get](i)) return false;
        }
      }
      return true;
    }
    get hashCode() {
      return ui.hashValues(this.begin, this.end, this.tileMode, ui.hashList(this.colors), ui.hashList(this.stops));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.begin) + ", " + dart.str(this.end) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ")";
    }
  };
  (gradient.LinearGradient.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : C5 || CT.C5;
    let end = opts && 'end' in opts ? opts.end : C7 || CT.C7;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C160 || CT.C160;
    this[begin$0] = begin;
    this[end$1] = end;
    this[tileMode$] = tileMode;
    if (!(begin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 288, 15, "begin != null");
    if (!(end != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 289, 15, "end != null");
    if (!(tileMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 290, 15, "tileMode != null");
    gradient.LinearGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = gradient.LinearGradient.prototype;
  dart.addTypeTests(gradient.LinearGradient);
  const begin$0 = Symbol("LinearGradient.begin");
  const end$1 = Symbol("LinearGradient.end");
  const tileMode$ = Symbol("LinearGradient.tileMode");
  dart.setMethodSignature(gradient.LinearGradient, () => ({
    __proto__: dart.getMethods(gradient.LinearGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect], {textDirection: ui.TextDirection}),
    scale: dart.fnType(gradient.LinearGradient, [core.double])
  }));
  dart.setLibraryUri(gradient.LinearGradient, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(gradient.LinearGradient, () => ({
    __proto__: dart.getFields(gradient.LinearGradient.__proto__),
    begin: dart.finalFieldType(alignment.AlignmentGeometry),
    end: dart.finalFieldType(alignment.AlignmentGeometry),
    tileMode: dart.finalFieldType(ui.TileMode)
  }));
  dart.defineExtensionMethods(gradient.LinearGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.LinearGradient, ['hashCode']);
  gradient.RadialGradient = class RadialGradient extends gradient.Gradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get tileMode() {
      return this[tileMode$0];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.radial(this.center.resolve(textDirection).withinRect(rect), dart.notNull(this.radius) * dart.notNull(rect.shortestSide), this.colors, this[_impliedStops](), this.tileMode, null, this.focal == null ? null : this.focal.resolve(textDirection).withinRect(rect), dart.notNull(this.focalRadius) * dart.notNull(rect.shortestSide));
    }
    scale(factor) {
      return new gradient.RadialGradient.new({center: this.center, radius: this.radius, colors: this.colors[$map](ui.Color, dart.fn(color => ui.Color.lerp(null, color, factor), ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode, focal: this.focal, focalRadius: this.focalRadius});
    }
    lerpFrom(a, t) {
      if (a == null || gradient.RadialGradient.is(a)) return gradient.RadialGradient.lerp(gradient.RadialGradient._check(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || gradient.RadialGradient.is(b)) return gradient.RadialGradient.lerp(this, gradient.RadialGradient._check(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 666, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b.scale(t);
      if (b == null) return a.scale(1.0 - dart.notNull(t));
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.RadialGradient.new({center: alignment.AlignmentGeometry.lerp(a.center, b.center, t), radius: math.max(core.double, 0.0, ui.lerpDouble(a.radius, b.radius, t)), colors: interpolated.colors, stops: interpolated.stops, tileMode: dart.notNull(t) < 0.5 ? a.tileMode : b.tileMode, focal: alignment.AlignmentGeometry.lerp(a.focal, b.focal, t), focalRadius: math.max(core.double, 0.0, ui.lerpDouble(a.focalRadius, b.focalRadius, t))});
    }
    _equals(other) {
      if (other == null) return false;
      let t16, t16$, t16$0, t16$1;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = gradient.RadialGradient._check(other);
      if (!dart.equals(this.center, typedOther.center) || this.radius != typedOther.radius || !dart.equals(this.tileMode, typedOther.tileMode) || (t16 = this.colors, t16 == null ? null : t16[$length]) != (t16$ = typedOther.colors, t16$ == null ? null : t16$[$length]) || (t16$0 = this.stops, t16$0 == null ? null : t16$0[$length]) != (t16$1 = typedOther.stops, t16$1 == null ? null : t16$1[$length]) || !dart.equals(this.focal, typedOther.focal) || this.focalRadius != typedOther.focalRadius) return false;
      if (this.colors != null) {
        if (!(typedOther.colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 707, 14, "typedOther.colors != null");
        if (!(this.colors[$length] == typedOther.colors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 708, 14, "colors.length == typedOther.colors.length");
        for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
          if (!dart.equals(this.colors[$_get](i), typedOther.colors[$_get](i))) return false;
        }
      }
      if (this.stops != null) {
        if (!(typedOther.stops != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 715, 14, "typedOther.stops != null");
        if (!(this.stops[$length] == typedOther.stops[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 716, 14, "stops.length == typedOther.stops.length");
        for (let i = 0; i < dart.notNull(this.stops[$length]); i = i + 1) {
          if (this.stops[$_get](i) != typedOther.stops[$_get](i)) return false;
        }
      }
      return true;
    }
    get hashCode() {
      return ui.hashValues(this.center, this.radius, this.tileMode, ui.hashList(this.colors), ui.hashList(this.stops), this.focal, this.focalRadius);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.center) + ", " + dart.str(this.radius) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ", " + dart.str(this.focal) + ", " + dart.str(this.focalRadius) + ")";
    }
  };
  (gradient.RadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C6 || CT.C6;
    let radius = opts && 'radius' in opts ? opts.radius : 0.5;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C160 || CT.C160;
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
    this[center$] = center;
    this[radius$] = radius;
    this[tileMode$0] = tileMode;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    if (!(center != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 537, 15, "center != null");
    if (!(radius != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 538, 15, "radius != null");
    if (!(tileMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 539, 15, "tileMode != null");
    if (!(focalRadius != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 540, 15, "focalRadius != null");
    gradient.RadialGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = gradient.RadialGradient.prototype;
  dart.addTypeTests(gradient.RadialGradient);
  const center$ = Symbol("RadialGradient.center");
  const radius$ = Symbol("RadialGradient.radius");
  const tileMode$0 = Symbol("RadialGradient.tileMode");
  const focal$ = Symbol("RadialGradient.focal");
  const focalRadius$ = Symbol("RadialGradient.focalRadius");
  dart.setMethodSignature(gradient.RadialGradient, () => ({
    __proto__: dart.getMethods(gradient.RadialGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect], {textDirection: ui.TextDirection}),
    scale: dart.fnType(gradient.RadialGradient, [core.double])
  }));
  dart.setLibraryUri(gradient.RadialGradient, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(gradient.RadialGradient, () => ({
    __proto__: dart.getFields(gradient.RadialGradient.__proto__),
    center: dart.finalFieldType(alignment.AlignmentGeometry),
    radius: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(ui.TileMode),
    focal: dart.finalFieldType(alignment.AlignmentGeometry),
    focalRadius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(gradient.RadialGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.RadialGradient, ['hashCode']);
  gradient.SweepGradient = class SweepGradient extends gradient.Gradient {
    get center() {
      return this[center$0];
    }
    set center(value) {
      super.center = value;
    }
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    get endAngle() {
      return this[endAngle$];
    }
    set endAngle(value) {
      super.endAngle = value;
    }
    get tileMode() {
      return this[tileMode$1];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui.Gradient.sweep(this.center.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode, this.startAngle, this.endAngle);
    }
    scale(factor) {
      return new gradient.SweepGradient.new({center: this.center, startAngle: this.startAngle, endAngle: this.endAngle, colors: this.colors[$map](ui.Color, dart.fn(color => ui.Color.lerp(null, color, factor), ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || gradient.SweepGradient.is(a)) return gradient.SweepGradient.lerp(gradient.SweepGradient._check(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || gradient.SweepGradient.is(b)) return gradient.SweepGradient.lerp(this, gradient.SweepGradient._check(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 902, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b.scale(t);
      if (b == null) return a.scale(1.0 - dart.notNull(t));
      let interpolated = gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new gradient.SweepGradient.new({center: alignment.AlignmentGeometry.lerp(a.center, b.center, t), startAngle: math.max(core.double, 0.0, ui.lerpDouble(a.startAngle, b.startAngle, t)), endAngle: math.max(core.double, 0.0, ui.lerpDouble(a.endAngle, b.endAngle, t)), colors: interpolated.colors, stops: interpolated.stops, tileMode: dart.notNull(t) < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      let t16, t16$, t16$0, t16$1;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = gradient.SweepGradient._check(other);
      if (!dart.equals(this.center, typedOther.center) || this.startAngle != typedOther.startAngle || this.endAngle != typedOther.endAngle || !dart.equals(this.tileMode, typedOther.tileMode) || (t16 = this.colors, t16 == null ? null : t16[$length]) != (t16$ = typedOther.colors, t16$ == null ? null : t16$[$length]) || (t16$0 = this.stops, t16$0 == null ? null : t16$0[$length]) != (t16$1 = typedOther.stops, t16$1 == null ? null : t16$1[$length])) return false;
      if (this.colors != null) {
        if (!(typedOther.colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 941, 14, "typedOther.colors != null");
        if (!(this.colors[$length] == typedOther.colors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 942, 14, "colors.length == typedOther.colors.length");
        for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
          if (!dart.equals(this.colors[$_get](i), typedOther.colors[$_get](i))) return false;
        }
      }
      if (this.stops != null) {
        if (!(typedOther.stops != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 949, 14, "typedOther.stops != null");
        if (!(this.stops[$length] == typedOther.stops[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 950, 14, "stops.length == typedOther.stops.length");
        for (let i = 0; i < dart.notNull(this.stops[$length]); i = i + 1) {
          if (this.stops[$_get](i) != typedOther.stops[$_get](i)) return false;
        }
      }
      return true;
    }
    get hashCode() {
      return ui.hashValues(this.center, this.startAngle, this.endAngle, this.tileMode, ui.hashList(this.colors), ui.hashList(this.stops));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.center) + ", " + dart.str(this.startAngle) + ", " + dart.str(this.endAngle) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ")";
    }
  };
  (gradient.SweepGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C6 || CT.C6;
    let startAngle = opts && 'startAngle' in opts ? opts.startAngle : 0;
    let endAngle = opts && 'endAngle' in opts ? opts.endAngle : 6.283185307179586;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C160 || CT.C160;
    this[center$0] = center;
    this[startAngle$] = startAngle;
    this[endAngle$] = endAngle;
    this[tileMode$1] = tileMode;
    if (!(center != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 801, 15, "center != null");
    if (!(startAngle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 802, 15, "startAngle != null");
    if (!(endAngle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 803, 15, "endAngle != null");
    if (!(tileMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 804, 15, "tileMode != null");
    gradient.SweepGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = gradient.SweepGradient.prototype;
  dart.addTypeTests(gradient.SweepGradient);
  const center$0 = Symbol("SweepGradient.center");
  const startAngle$ = Symbol("SweepGradient.startAngle");
  const endAngle$ = Symbol("SweepGradient.endAngle");
  const tileMode$1 = Symbol("SweepGradient.tileMode");
  dart.setMethodSignature(gradient.SweepGradient, () => ({
    __proto__: dart.getMethods(gradient.SweepGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect], {textDirection: ui.TextDirection}),
    scale: dart.fnType(gradient.SweepGradient, [core.double])
  }));
  dart.setLibraryUri(gradient.SweepGradient, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(gradient.SweepGradient, () => ({
    __proto__: dart.getFields(gradient.SweepGradient.__proto__),
    center: dart.finalFieldType(alignment.AlignmentGeometry),
    startAngle: dart.finalFieldType(core.double),
    endAngle: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(ui.TileMode)
  }));
  dart.defineExtensionMethods(gradient.SweepGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(gradient.SweepGradient, ['hashCode']);
  gradient._sample = function _sample(colors, stops, t) {
    if (!(colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 23, 10, "colors != null");
    if (!dart.test(colors[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 24, 10, "colors.isNotEmpty");
    if (!(stops != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 25, 10, "stops != null");
    if (!dart.test(stops[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 26, 10, "stops.isNotEmpty");
    if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 27, 10, "t != null");
    if (dart.notNull(t) <= dart.notNull(stops[$first])) return colors[$first];
    if (dart.notNull(t) >= dart.notNull(stops[$last])) return colors[$last];
    let index = stops[$lastIndexWhere](dart.fn(s => dart.notNull(s) <= dart.notNull(t), doubleTobool()));
    if (!(index !== -1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 33, 10, "index != -1");
    return ui.Color.lerp(colors[$_get](index), colors[$_get](dart.notNull(index) + 1), (dart.notNull(t) - dart.notNull(stops[$_get](index))) / (dart.notNull(stops[$_get](dart.notNull(index) + 1)) - dart.notNull(stops[$_get](index))));
  };
  gradient._interpolateColorsAndStops = function _interpolateColorsAndStops(aColors, aStops, bColors, bStops, t) {
    let t16;
    if (!(dart.notNull(aColors[$length]) >= 2)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 47, 10, "aColors.length >= 2");
    if (!(dart.notNull(bColors[$length]) >= 2)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 48, 10, "bColors.length >= 2");
    if (!(aStops[$length] == aColors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 49, 10, "aStops.length == aColors.length");
    if (!(bStops[$length] == bColors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 50, 10, "bStops.length == bColors.length");
    let stops = (t16 = new (SplayTreeSetOfdouble()).new(), t16.addAll(aStops), t16.addAll(bStops), t16);
    let interpolatedStops = stops.toList({growable: false});
    let interpolatedColors = interpolatedStops[$map](ui.Color, dart.fn(stop => ui.Color.lerp(gradient._sample(aColors, aStops, stop), gradient._sample(bColors, bStops, stop), t), doubleToColor()))[$toList]({growable: false});
    return new gradient._ColorsAndStops.new(interpolatedColors, interpolatedStops);
  };
  const _name$6 = dart.privateName(raw_keyboard, "_name");
  let C161;
  let C162;
  let C163;
  let C164;
  const _isLeftRightModifierPressed = dart.privateName(raw_keyboard_fuchsia, "_isLeftRightModifierPressed");
  let C165;
  let C166;
  let C167;
  let C168;
  let C169;
  let C170;
  let C171;
  let C172;
  let C173;
  raw_keyboard.RawKeyEventData = class RawKeyEventData extends core.Object {
    get isControlPressed() {
      return this.isModifierPressed(raw_keyboard.ModifierKey.controlModifier, {side: raw_keyboard.KeyboardSide.any});
    }
    get isShiftPressed() {
      return this.isModifierPressed(raw_keyboard.ModifierKey.shiftModifier, {side: raw_keyboard.KeyboardSide.any});
    }
    get isAltPressed() {
      return this.isModifierPressed(raw_keyboard.ModifierKey.altModifier, {side: raw_keyboard.KeyboardSide.any});
    }
    get isMetaPressed() {
      return this.isModifierPressed(raw_keyboard.ModifierKey.metaModifier, {side: raw_keyboard.KeyboardSide.any});
    }
    get modifiersPressed() {
      let result = new (LinkedMapOfModifierKey$KeyboardSide()).new();
      for (let key of raw_keyboard.ModifierKey.values) {
        if (dart.test(this.isModifierPressed(key))) {
          result[$_set](key, this.getModifierSide(key));
        }
      }
      return result;
    }
  };
  (raw_keyboard.RawKeyEventData.new = function() {
    ;
  }).prototype = raw_keyboard.RawKeyEventData.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyEventData);
  dart.setGetterSignature(raw_keyboard.RawKeyEventData, () => ({
    __proto__: dart.getGetters(raw_keyboard.RawKeyEventData.__proto__),
    isControlPressed: core.bool,
    isShiftPressed: core.bool,
    isAltPressed: core.bool,
    isMetaPressed: core.bool,
    modifiersPressed: core.Map$(raw_keyboard.ModifierKey, raw_keyboard.KeyboardSide)
  }));
  dart.setLibraryUri(raw_keyboard.RawKeyEventData, "package:flutter_web/src/services/raw_keyboard.dart");
  raw_keyboard_fuchsia.RawKeyEventDataFuchsia = class RawKeyEventDataFuchsia extends raw_keyboard.RawKeyEventData {
    get hidUsage() {
      return this[hidUsage$];
    }
    set hidUsage(value) {
      super.hidUsage = value;
    }
    get codePoint() {
      return this[codePoint$];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get modifiers() {
      return this[modifiers$];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    get keyLabel() {
      return this.codePoint === 0 ? null : core.String.fromCharCode(this.codePoint);
    }
    get logicalKey() {
      if (this.codePoint !== 0) {
        return new keyboard_key.LogicalKeyboardKey.new((0 | (dart.notNull(this.codePoint) & 4294967295.0) >>> 0) >>> 0, {keyLabel: this.keyLabel, debugName: false ? null : "Key " + dart.str(this.keyLabel)});
      }
      let newKey = keyboard_maps.kFuchsiaToLogicalKey[$_get]((dart.notNull(this.hidUsage) | 4294967296.0) >>> 0);
      if (newKey != null) {
        return newKey;
      }
      newKey == null ? newKey = new keyboard_key.LogicalKeyboardKey.new((12884901888.0 | dart.notNull(this.hidUsage) | 1099511627776.0) >>> 0, {debugName: false ? null : "Ephemeral Fuchsia key code " + dart.str(this.hidUsage)}) : null;
      return newKey;
    }
    get physicalKey() {
      let t16;
      t16 = keyboard_maps.kFuchsiaToPhysicalKey[$_get](this.hidUsage);
      return t16 == null ? keyboard_key.PhysicalKeyboardKey.none : t16;
    }
    [_isLeftRightModifierPressed](side, anyMask, leftMask, rightMask) {
      if ((dart.notNull(this.modifiers) & dart.notNull(anyMask)) === 0) {
        return false;
      }
      switch (side) {
        case C161 || CT.C161:
        {
          return true;
        }
        case C162 || CT.C162:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(leftMask)) !== 0 && (dart.notNull(this.modifiers) & dart.notNull(rightMask)) !== 0;
        }
        case C163 || CT.C163:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(leftMask)) !== 0;
        }
        case C164 || CT.C164:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(rightMask)) !== 0;
        }
      }
      return false;
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C161 || CT.C161;
      if (!(side != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 116, 12, "side != null");
      switch (key) {
        case C165 || CT.C165:
        {
          return this[_isLeftRightModifierPressed](side, 24, 8, 16);
        }
        case C166 || CT.C166:
        {
          return this[_isLeftRightModifierPressed](side, 6, 2, 4);
        }
        case C167 || CT.C167:
        {
          return this[_isLeftRightModifierPressed](side, 96, 32, 64);
        }
        case C168 || CT.C168:
        {
          return this[_isLeftRightModifierPressed](side, 384, 128, 256);
        }
        case C169 || CT.C169:
        {
          return (dart.notNull(this.modifiers) & 1) !== 0;
        }
        case C170 || CT.C170:
        case C171 || CT.C171:
        case C172 || CT.C172:
        case C173 || CT.C173:
        {
          return false;
        }
      }
      return false;
    }
    getModifierSide(key) {
      const findSide = (leftMask, rightMask, combinedMask) => {
        let combined = (dart.notNull(this.modifiers) & dart.notNull(combinedMask)) >>> 0;
        if (combined === leftMask) {
          return raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask) {
          return raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, intAndintAndintToKeyboardSide());
      switch (key) {
        case C165 || CT.C165:
        {
          return findSide(8, 16, 24);
        }
        case C166 || CT.C166:
        {
          return findSide(2, 4, 6);
        }
        case C167 || CT.C167:
        {
          return findSide(32, 64, 96);
        }
        case C168 || CT.C168:
        {
          return findSide(128, 256, 384);
        }
        case C169 || CT.C169:
        {
          return (dart.notNull(this.modifiers) & 1) === 0 ? null : raw_keyboard.KeyboardSide.all;
        }
        case C170 || CT.C170:
        case C171 || CT.C171:
        case C172 || CT.C172:
        case C173 || CT.C173:
        {
          return null;
        }
      }
      if (!false) dart.assertFailed("Not handling " + dart.str(key) + " type properly.", "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 171, 12, "false");
      return null;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(hidUsage: " + dart.str(this.hidUsage) + ", codePoint: " + dart.str(this.codePoint) + ", modifiers: " + dart.str(this.modifiers) + ", " + "modifiers down: " + dart.str(this.modifiersPressed) + ")";
    }
  };
  (raw_keyboard_fuchsia.RawKeyEventDataFuchsia.new = function(opts) {
    let hidUsage = opts && 'hidUsage' in opts ? opts.hidUsage : 0;
    let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    this[hidUsage$] = hidUsage;
    this[codePoint$] = codePoint;
    this[modifiers$] = modifiers;
    if (!(hidUsage != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 28, 15, "hidUsage != null");
    if (!(codePoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 29, 15, "codePoint != null");
    if (!(modifiers != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 30, 15, "modifiers != null");
    raw_keyboard_fuchsia.RawKeyEventDataFuchsia.__proto__.new.call(this);
    ;
  }).prototype = raw_keyboard_fuchsia.RawKeyEventDataFuchsia.prototype;
  dart.addTypeTests(raw_keyboard_fuchsia.RawKeyEventDataFuchsia);
  const hidUsage$ = Symbol("RawKeyEventDataFuchsia.hidUsage");
  const codePoint$ = Symbol("RawKeyEventDataFuchsia.codePoint");
  const modifiers$ = Symbol("RawKeyEventDataFuchsia.modifiers");
  dart.setMethodSignature(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => ({
    __proto__: dart.getMethods(raw_keyboard_fuchsia.RawKeyEventDataFuchsia.__proto__),
    [_isLeftRightModifierPressed]: dart.fnType(core.bool, [raw_keyboard.KeyboardSide, core.int, core.int, core.int]),
    isModifierPressed: dart.fnType(core.bool, [raw_keyboard.ModifierKey], {side: raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(raw_keyboard.KeyboardSide, [raw_keyboard.ModifierKey])
  }));
  dart.setGetterSignature(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => ({
    __proto__: dart.getGetters(raw_keyboard_fuchsia.RawKeyEventDataFuchsia.__proto__),
    keyLabel: core.String,
    logicalKey: keyboard_key.LogicalKeyboardKey,
    physicalKey: keyboard_key.PhysicalKeyboardKey
  }));
  dart.setLibraryUri(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, "package:flutter_web/src/services/raw_keyboard_fuchsia.dart");
  dart.setFieldSignature(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => ({
    __proto__: dart.getFields(raw_keyboard_fuchsia.RawKeyEventDataFuchsia.__proto__),
    hidUsage: dart.finalFieldType(core.int),
    codePoint: dart.finalFieldType(core.int),
    modifiers: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, ['toString']);
  dart.defineLazy(raw_keyboard_fuchsia.RawKeyEventDataFuchsia, {
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierNone*/get modifierNone() {
      return 0;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierCapsLock*/get modifierCapsLock() {
      return 1;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftShift*/get modifierLeftShift() {
      return 2;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightShift*/get modifierRightShift() {
      return 4;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierShift*/get modifierShift() {
      return 6;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftControl*/get modifierLeftControl() {
      return 8;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightControl*/get modifierRightControl() {
      return 16;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierControl*/get modifierControl() {
      return 24;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftAlt*/get modifierLeftAlt() {
      return 32;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightAlt*/get modifierRightAlt() {
      return 64;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierAlt*/get modifierAlt() {
      return 96;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftMeta*/get modifierLeftMeta() {
      return 128;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightMeta*/get modifierRightMeta() {
      return 256;
    },
    /*raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierMeta*/get modifierMeta() {
      return 384;
    }
  });
  let C174;
  raw_keyboard.KeyboardSide = class KeyboardSide extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (raw_keyboard.KeyboardSide.new = function(index, _name) {
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = raw_keyboard.KeyboardSide.prototype;
  dart.addTypeTests(raw_keyboard.KeyboardSide);
  dart.setLibraryUri(raw_keyboard.KeyboardSide, "package:flutter_web/src/services/raw_keyboard.dart");
  dart.setFieldSignature(raw_keyboard.KeyboardSide, () => ({
    __proto__: dart.getFields(raw_keyboard.KeyboardSide.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(raw_keyboard.KeyboardSide, ['toString']);
  raw_keyboard.KeyboardSide.any = C161 || CT.C161;
  raw_keyboard.KeyboardSide.left = C163 || CT.C163;
  raw_keyboard.KeyboardSide.right = C164 || CT.C164;
  raw_keyboard.KeyboardSide.all = C162 || CT.C162;
  raw_keyboard.KeyboardSide.values = C174 || CT.C174;
  let C175;
  raw_keyboard.ModifierKey = class ModifierKey extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (raw_keyboard.ModifierKey.new = function(index, _name) {
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = raw_keyboard.ModifierKey.prototype;
  dart.addTypeTests(raw_keyboard.ModifierKey);
  dart.setLibraryUri(raw_keyboard.ModifierKey, "package:flutter_web/src/services/raw_keyboard.dart");
  dart.setFieldSignature(raw_keyboard.ModifierKey, () => ({
    __proto__: dart.getFields(raw_keyboard.ModifierKey.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(raw_keyboard.ModifierKey, ['toString']);
  raw_keyboard.ModifierKey.controlModifier = C165 || CT.C165;
  raw_keyboard.ModifierKey.shiftModifier = C166 || CT.C166;
  raw_keyboard.ModifierKey.altModifier = C167 || CT.C167;
  raw_keyboard.ModifierKey.metaModifier = C168 || CT.C168;
  raw_keyboard.ModifierKey.capsLockModifier = C169 || CT.C169;
  raw_keyboard.ModifierKey.numLockModifier = C170 || CT.C170;
  raw_keyboard.ModifierKey.scrollLockModifier = C171 || CT.C171;
  raw_keyboard.ModifierKey.functionModifier = C172 || CT.C172;
  raw_keyboard.ModifierKey.symbolModifier = C173 || CT.C173;
  raw_keyboard.ModifierKey.values = C175 || CT.C175;
  raw_keyboard.RawKeyEvent = class RawKeyEvent extends core.Object {
    get character() {
      return this[character$];
    }
    set character(value) {
      super.character = value;
    }
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    static fromMessage(message) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4, t16$5, t16$6, t16$7, t16$8, t16$9, t16$10, t16$11, t16$12, t16$13, t16$14, t16$15;
      let data = null;
      let keymap = core.String._check(message[$_get]("keymap"));
      switch (keymap) {
        case "fuchsia":
        {
          data = new raw_keyboard_fuchsia.RawKeyEventDataFuchsia.new({hidUsage: core.int._check((t16 = message[$_get]("hidUsage"), t16 == null ? 0 : t16)), codePoint: core.int._check((t16$ = message[$_get]("codePoint"), t16$ == null ? 0 : t16$)), modifiers: core.int._check((t16$0 = message[$_get]("modifiers"), t16$0 == null ? 0 : t16$0))});
          break;
        }
        case "android":
        {
          data = new raw_keyboard_android.RawKeyEventDataAndroid.new({flags: core.int._check((t16$1 = message[$_get]("flags"), t16$1 == null ? 0 : t16$1)), codePoint: core.int._check((t16$2 = message[$_get]("codePoint"), t16$2 == null ? 0 : t16$2)), keyCode: core.int._check((t16$3 = message[$_get]("keyCode"), t16$3 == null ? 0 : t16$3)), plainCodePoint: core.int._check((t16$4 = message[$_get]("plainCodePoint"), t16$4 == null ? 0 : t16$4)), scanCode: core.int._check((t16$5 = message[$_get]("scanCode"), t16$5 == null ? 0 : t16$5)), metaState: core.int._check((t16$6 = message[$_get]("metaState"), t16$6 == null ? 0 : t16$6))});
          break;
        }
        default:
        {
          dart.throw(assertions.FlutterError.new("Unknown keymap for key events: " + dart.str(keymap)));
        }
      }
      if (!true) {
        switch (keymap) {
          case "macos":
          {
            data = new raw_keyboard_macos.RawKeyEventDataMacOs.new({characters: core.String._check((t16$7 = message[$_get]("characters"), t16$7 == null ? "" : t16$7)), charactersIgnoringModifiers: core.String._check((t16$8 = message[$_get]("charactersIgnoringModifiers"), t16$8 == null ? "" : t16$8)), keyCode: core.int._check((t16$9 = message[$_get]("keyCode"), t16$9 == null ? 0 : t16$9)), modifiers: core.int._check((t16$10 = message[$_get]("modifiers"), t16$10 == null ? 0 : t16$10))});
            break;
          }
          case "linux":
          {
            data = new raw_keyboard_linux.RawKeyEventDataLinux.new({keyHelper: raw_keyboard_linux.KeyHelper.new(core.String._check((t16$11 = message[$_get]("toolkit"), t16$11 == null ? "" : t16$11))), codePoint: core.int._check((t16$12 = message[$_get]("codePoint"), t16$12 == null ? 0 : t16$12)), keyCode: core.int._check((t16$13 = message[$_get]("keyCode"), t16$13 == null ? 0 : t16$13)), scanCode: core.int._check((t16$14 = message[$_get]("scanCode"), t16$14 == null ? 0 : t16$14)), modifiers: core.int._check((t16$15 = message[$_get]("modifiers"), t16$15 == null ? 0 : t16$15))});
            break;
          }
          default:
          {
            dart.throw(assertions.FlutterError.new("Unknown keymap for key events: " + dart.str(keymap)));
          }
        }
      }
      let type = core.String._check(message[$_get]("type"));
      switch (type) {
        case "keydown":
        {
          return new raw_keyboard.RawKeyDownEvent.new({data: data, character: core.String._check(message[$_get]("character"))});
        }
        case "keyup":
        {
          return new raw_keyboard.RawKeyUpEvent.new({data: data});
        }
        default:
        {
          dart.throw(assertions.FlutterError.new("Unknown key event type: " + dart.str(type)));
        }
      }
    }
    isKeyPressed(key) {
      return raw_keyboard.RawKeyboard.instance.keysPressed.contains(key);
    }
    get isControlPressed() {
      return dart.test(this.isKeyPressed(keyboard_key.LogicalKeyboardKey.controlLeft)) || dart.test(this.isKeyPressed(keyboard_key.LogicalKeyboardKey.controlRight));
    }
    get isShiftPressed() {
      return dart.test(this.isKeyPressed(keyboard_key.LogicalKeyboardKey.shiftLeft)) || dart.test(this.isKeyPressed(keyboard_key.LogicalKeyboardKey.shiftRight));
    }
    get isAltPressed() {
      return dart.test(this.isKeyPressed(keyboard_key.LogicalKeyboardKey.altLeft)) || dart.test(this.isKeyPressed(keyboard_key.LogicalKeyboardKey.altRight));
    }
    get isMetaPressed() {
      return dart.test(this.isKeyPressed(keyboard_key.LogicalKeyboardKey.metaLeft)) || dart.test(this.isKeyPressed(keyboard_key.LogicalKeyboardKey.metaRight));
    }
    get physicalKey() {
      return this.data.physicalKey;
    }
    get logicalKey() {
      return this.data.logicalKey;
    }
  };
  (raw_keyboard.RawKeyEvent.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let character = opts && 'character' in opts ? opts.character : null;
    this[data$] = data;
    this[character$] = character;
    ;
  }).prototype = raw_keyboard.RawKeyEvent.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyEvent);
  const character$ = Symbol("RawKeyEvent.character");
  const data$ = Symbol("RawKeyEvent.data");
  dart.setMethodSignature(raw_keyboard.RawKeyEvent, () => ({
    __proto__: dart.getMethods(raw_keyboard.RawKeyEvent.__proto__),
    isKeyPressed: dart.fnType(core.bool, [keyboard_key.LogicalKeyboardKey])
  }));
  dart.setGetterSignature(raw_keyboard.RawKeyEvent, () => ({
    __proto__: dart.getGetters(raw_keyboard.RawKeyEvent.__proto__),
    isControlPressed: core.bool,
    isShiftPressed: core.bool,
    isAltPressed: core.bool,
    isMetaPressed: core.bool,
    physicalKey: keyboard_key.PhysicalKeyboardKey,
    logicalKey: keyboard_key.LogicalKeyboardKey
  }));
  dart.setLibraryUri(raw_keyboard.RawKeyEvent, "package:flutter_web/src/services/raw_keyboard.dart");
  dart.setFieldSignature(raw_keyboard.RawKeyEvent, () => ({
    __proto__: dart.getFields(raw_keyboard.RawKeyEvent.__proto__),
    character: dart.finalFieldType(core.String),
    data: dart.finalFieldType(raw_keyboard.RawKeyEventData)
  }));
  raw_keyboard.RawKeyDownEvent = class RawKeyDownEvent extends raw_keyboard.RawKeyEvent {};
  (raw_keyboard.RawKeyDownEvent.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let character = opts && 'character' in opts ? opts.character : null;
    raw_keyboard.RawKeyDownEvent.__proto__.new.call(this, {data: data, character: character});
    ;
  }).prototype = raw_keyboard.RawKeyDownEvent.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyDownEvent);
  dart.setLibraryUri(raw_keyboard.RawKeyDownEvent, "package:flutter_web/src/services/raw_keyboard.dart");
  raw_keyboard.RawKeyUpEvent = class RawKeyUpEvent extends raw_keyboard.RawKeyEvent {};
  (raw_keyboard.RawKeyUpEvent.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let character = opts && 'character' in opts ? opts.character : null;
    raw_keyboard.RawKeyUpEvent.__proto__.new.call(this, {data: data, character: character});
    ;
  }).prototype = raw_keyboard.RawKeyUpEvent.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyUpEvent);
  dart.setLibraryUri(raw_keyboard.RawKeyUpEvent, "package:flutter_web/src/services/raw_keyboard.dart");
  const _listeners$ = dart.privateName(raw_keyboard, "_listeners");
  const _keysPressed = dart.privateName(raw_keyboard, "_keysPressed");
  const _handleKeyEvent = dart.privateName(raw_keyboard, "_handleKeyEvent");
  raw_keyboard.RawKeyboard = class RawKeyboard extends core.Object {
    addListener(listener) {
      this[_listeners$][$add](listener);
    }
    removeListener(listener) {
      this[_listeners$][$remove](listener);
    }
    [_handleKeyEvent](message) {
      return async.async(dart.dynamic, (function* _handleKeyEvent() {
        let event = raw_keyboard.RawKeyEvent.fromMessage(MapOfString$dynamic()._check(message));
        if (event == null) {
          return;
        }
        if (raw_keyboard.RawKeyDownEvent.is(event)) {
          this[_keysPressed].add(event.logicalKey);
        }
        if (raw_keyboard.RawKeyUpEvent.is(event)) {
          this[_keysPressed].remove(event.logicalKey);
        }
        if (dart.test(this[_listeners$][$isEmpty])) {
          return;
        }
        for (let listener of ListOfRawKeyEventTovoid().from(this[_listeners$])) {
          if (dart.test(this[_listeners$][$contains](listener))) {
            listener(event);
          }
        }
      }).bind(this));
    }
    get keysPressed() {
      return this[_keysPressed].toSet();
    }
  };
  (raw_keyboard.RawKeyboard.__ = function() {
    this[_listeners$] = JSArrayOfRawKeyEventTovoid().of([]);
    this[_keysPressed] = LinkedHashSetOfLogicalKeyboardKey().new();
    system_channels.SystemChannels.keyEvent.setMessageHandler(dart.bind(this, _handleKeyEvent));
  }).prototype = raw_keyboard.RawKeyboard.prototype;
  dart.addTypeTests(raw_keyboard.RawKeyboard);
  dart.setMethodSignature(raw_keyboard.RawKeyboard, () => ({
    __proto__: dart.getMethods(raw_keyboard.RawKeyboard.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [raw_keyboard.RawKeyEvent])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [raw_keyboard.RawKeyEvent])]),
    [_handleKeyEvent]: dart.fnType(async.Future, [dart.dynamic])
  }));
  dart.setGetterSignature(raw_keyboard.RawKeyboard, () => ({
    __proto__: dart.getGetters(raw_keyboard.RawKeyboard.__proto__),
    keysPressed: core.Set$(keyboard_key.LogicalKeyboardKey)
  }));
  dart.setLibraryUri(raw_keyboard.RawKeyboard, "package:flutter_web/src/services/raw_keyboard.dart");
  dart.setFieldSignature(raw_keyboard.RawKeyboard, () => ({
    __proto__: dart.getFields(raw_keyboard.RawKeyboard.__proto__),
    [_listeners$]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [raw_keyboard.RawKeyEvent]))),
    [_keysPressed]: dart.finalFieldType(core.Set$(keyboard_key.LogicalKeyboardKey))
  }));
  dart.defineLazy(raw_keyboard.RawKeyboard, {
    /*raw_keyboard.RawKeyboard.instance*/get instance() {
      return new raw_keyboard.RawKeyboard.__();
    }
  });
  raw_keyboard_linux.RawKeyEventDataLinux = class RawKeyEventDataLinux extends raw_keyboard.RawKeyEventData {
    get keyHelper() {
      return this[keyHelper$];
    }
    set keyHelper(value) {
      super.keyHelper = value;
    }
    get scanCode() {
      return this[scanCode$];
    }
    set scanCode(value) {
      super.scanCode = value;
    }
    get codePoint() {
      return this[codePoint$0];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get keyCode() {
      return this[keyCode$];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get modifiers() {
      return this[modifiers$0];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    get keyLabel() {
      return this.codePoint === 0 ? null : core.String.fromCharCode(this.codePoint);
    }
    get physicalKey() {
      let t16;
      t16 = keyboard_maps.kLinuxToPhysicalKey[$_get](this.scanCode);
      return t16 == null ? keyboard_key.PhysicalKeyboardKey.none : t16;
    }
    get logicalKey() {
      let t16;
      let numPadKey = this.keyHelper.numpadKey(this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      if (this.keyLabel != null && !dart.test(keyboard_key.LogicalKeyboardKey.isControlCharacter(this.keyLabel))) {
        let keyId = (0 | (dart.notNull(this.codePoint) & 4294967295.0) >>> 0) >>> 0;
        t16 = keyboard_key.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t16 == null ? new keyboard_key.LogicalKeyboardKey.new(keyId, {keyLabel: this.keyLabel, debugName: false ? null : "Key " + this.keyLabel[$toUpperCase]()}) : t16;
      }
      let newKey = this.keyHelper.logicalKey(this.keyCode);
      if (newKey != null) {
        return newKey;
      }
      newKey == null ? newKey = new keyboard_key.LogicalKeyboardKey.new((25769803776.0 | dart.notNull(this.keyCode) | 1099511627776.0) >>> 0, {debugName: false ? null : "Unknown key code " + dart.str(this.keyCode)}) : null;
      return newKey;
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C161 || CT.C161;
      return this.keyHelper.isModifierPressed(key, this.modifiers, {side: side});
    }
    getModifierSide(key) {
      return this.keyHelper.getModifierSide(key);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(keyLabel: " + dart.str(this.keyLabel) + ", keyCode: " + dart.str(this.keyCode) + ", scanCode: " + dart.str(this.scanCode) + "," + " codePoint: " + dart.str(this.codePoint) + ", modifiers: " + dart.str(this.modifiers) + ", " + "modifiers down: " + dart.str(this.modifiersPressed) + ")";
    }
  };
  (raw_keyboard_linux.RawKeyEventDataLinux.new = function(opts) {
    let keyHelper = opts && 'keyHelper' in opts ? opts.keyHelper : null;
    let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
    let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    this[keyHelper$] = keyHelper;
    this[scanCode$] = scanCode;
    this[codePoint$0] = codePoint;
    this[keyCode$] = keyCode;
    this[modifiers$0] = modifiers;
    if (!(scanCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 31, 15, "scanCode != null");
    if (!(codePoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 32, 15, "codePoint != null");
    if (!(keyCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 33, 15, "keyCode != null");
    if (!(modifiers != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 34, 15, "modifiers != null");
    if (!(keyHelper != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 35, 15, "keyHelper != null");
    raw_keyboard_linux.RawKeyEventDataLinux.__proto__.new.call(this);
    ;
  }).prototype = raw_keyboard_linux.RawKeyEventDataLinux.prototype;
  dart.addTypeTests(raw_keyboard_linux.RawKeyEventDataLinux);
  const keyHelper$ = Symbol("RawKeyEventDataLinux.keyHelper");
  const scanCode$ = Symbol("RawKeyEventDataLinux.scanCode");
  const codePoint$0 = Symbol("RawKeyEventDataLinux.codePoint");
  const keyCode$ = Symbol("RawKeyEventDataLinux.keyCode");
  const modifiers$0 = Symbol("RawKeyEventDataLinux.modifiers");
  dart.setMethodSignature(raw_keyboard_linux.RawKeyEventDataLinux, () => ({
    __proto__: dart.getMethods(raw_keyboard_linux.RawKeyEventDataLinux.__proto__),
    isModifierPressed: dart.fnType(core.bool, [raw_keyboard.ModifierKey], {side: raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(raw_keyboard.KeyboardSide, [raw_keyboard.ModifierKey])
  }));
  dart.setGetterSignature(raw_keyboard_linux.RawKeyEventDataLinux, () => ({
    __proto__: dart.getGetters(raw_keyboard_linux.RawKeyEventDataLinux.__proto__),
    keyLabel: core.String,
    physicalKey: keyboard_key.PhysicalKeyboardKey,
    logicalKey: keyboard_key.LogicalKeyboardKey
  }));
  dart.setLibraryUri(raw_keyboard_linux.RawKeyEventDataLinux, "package:flutter_web/src/services/raw_keyboard_linux.dart");
  dart.setFieldSignature(raw_keyboard_linux.RawKeyEventDataLinux, () => ({
    __proto__: dart.getFields(raw_keyboard_linux.RawKeyEventDataLinux.__proto__),
    keyHelper: dart.finalFieldType(raw_keyboard_linux.KeyHelper),
    scanCode: dart.finalFieldType(core.int),
    codePoint: dart.finalFieldType(core.int),
    keyCode: dart.finalFieldType(core.int),
    modifiers: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(raw_keyboard_linux.RawKeyEventDataLinux, ['toString']);
  raw_keyboard_linux.KeyHelper = class KeyHelper extends core.Object {
    static new(toolkit) {
      if (toolkit === "glfw") {
        return new raw_keyboard_linux.GLFWKeyHelper.new();
      } else {
        dart.throw(assertions.FlutterError.new("Window toolkit not recognized: " + dart.str(toolkit)));
      }
    }
  };
  (raw_keyboard_linux.KeyHelper[dart.mixinNew] = function() {
  }).prototype = raw_keyboard_linux.KeyHelper.prototype;
  dart.addTypeTests(raw_keyboard_linux.KeyHelper);
  dart.setLibraryUri(raw_keyboard_linux.KeyHelper, "package:flutter_web/src/services/raw_keyboard_linux.dart");
  const Object_KeyHelper$ = class Object_KeyHelper extends core.Object {};
  (Object_KeyHelper$.new = function() {
  }).prototype = Object_KeyHelper$.prototype;
  dart.applyMixin(Object_KeyHelper$, raw_keyboard_linux.KeyHelper);
  raw_keyboard_linux.GLFWKeyHelper = class GLFWKeyHelper extends Object_KeyHelper$ {
    isModifierPressed(key, modifiers, opts) {
      let side = opts && 'side' in opts ? opts.side : C161 || CT.C161;
      switch (key) {
        case C165 || CT.C165:
        {
          return (dart.notNull(modifiers) & 2) !== 0;
        }
        case C166 || CT.C166:
        {
          return (dart.notNull(modifiers) & 1) !== 0;
        }
        case C167 || CT.C167:
        {
          return (dart.notNull(modifiers) & 4) !== 0;
        }
        case C168 || CT.C168:
        {
          return (dart.notNull(modifiers) & 8) !== 0;
        }
        case C169 || CT.C169:
        {
          return (dart.notNull(modifiers) & 16) !== 0;
        }
        case C170 || CT.C170:
        {
          return (dart.notNull(modifiers) & 32) !== 0;
        }
        case C172 || CT.C172:
        case C173 || CT.C173:
        case C171 || CT.C171:
        {
          return false;
        }
      }
      return false;
    }
    getModifierSide(key) {
      switch (key) {
        case C165 || CT.C165:
        case C166 || CT.C166:
        case C167 || CT.C167:
        case C168 || CT.C168:
        {
          return raw_keyboard.KeyboardSide.any;
        }
        case C169 || CT.C169:
        case C170 || CT.C170:
        case C172 || CT.C172:
        case C173 || CT.C173:
        case C171 || CT.C171:
        {
          return raw_keyboard.KeyboardSide.all;
        }
      }
      if (!false) dart.assertFailed("Not handling " + dart.str(key) + " type properly.", "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 246, 12, "false");
      return null;
    }
    numpadKey(keyCode) {
      return keyboard_maps.kGlfwNumpadMap[$_get](keyCode);
    }
    logicalKey(keyCode) {
      return keyboard_maps.kGlfwToLogicalKey[$_get](keyCode);
    }
  };
  (raw_keyboard_linux.GLFWKeyHelper.new = function() {
    ;
  }).prototype = raw_keyboard_linux.GLFWKeyHelper.prototype;
  dart.addTypeTests(raw_keyboard_linux.GLFWKeyHelper);
  dart.setMethodSignature(raw_keyboard_linux.GLFWKeyHelper, () => ({
    __proto__: dart.getMethods(raw_keyboard_linux.GLFWKeyHelper.__proto__),
    isModifierPressed: dart.fnType(core.bool, [raw_keyboard.ModifierKey, core.int], {side: raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(raw_keyboard.KeyboardSide, [raw_keyboard.ModifierKey]),
    numpadKey: dart.fnType(keyboard_key.LogicalKeyboardKey, [core.int]),
    logicalKey: dart.fnType(keyboard_key.LogicalKeyboardKey, [core.int])
  }));
  dart.setLibraryUri(raw_keyboard_linux.GLFWKeyHelper, "package:flutter_web/src/services/raw_keyboard_linux.dart");
  dart.defineLazy(raw_keyboard_linux.GLFWKeyHelper, {
    /*raw_keyboard_linux.GLFWKeyHelper.modifierCapsLock*/get modifierCapsLock() {
      return 16;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierShift*/get modifierShift() {
      return 1;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierControl*/get modifierControl() {
      return 2;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierAlt*/get modifierAlt() {
      return 4;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierMeta*/get modifierMeta() {
      return 8;
    },
    /*raw_keyboard_linux.GLFWKeyHelper.modifierNumericPad*/get modifierNumericPad() {
      return 32;
    }
  });
  let C177;
  let C178;
  let C179;
  let C180;
  let C181;
  let C182;
  let C183;
  let C184;
  let C185;
  let C186;
  let C187;
  let C188;
  let C189;
  let C190;
  let C191;
  let C192;
  let C193;
  let C194;
  let C195;
  let C196;
  let C197;
  let C198;
  let C199;
  let C200;
  let C201;
  let C202;
  let C203;
  let C204;
  let C205;
  let C206;
  let C207;
  let C208;
  let C209;
  let C210;
  let C211;
  let C212;
  let C213;
  let C214;
  let C215;
  let C216;
  let C217;
  let C218;
  let C219;
  let C220;
  let C221;
  let C222;
  let C223;
  let C224;
  let C225;
  let C226;
  let C227;
  let C228;
  let C229;
  let C230;
  let C231;
  let C232;
  let C233;
  let C234;
  let C235;
  let C236;
  let C237;
  let C238;
  let C239;
  let C240;
  let C241;
  let C242;
  let C243;
  let C244;
  let C245;
  let C246;
  let C247;
  let C248;
  let C249;
  let C250;
  let C251;
  let C252;
  let C253;
  let C254;
  let C255;
  let C256;
  let C257;
  let C258;
  let C259;
  let C260;
  let C261;
  let C262;
  let C263;
  let C264;
  let C265;
  let C266;
  let C267;
  let C268;
  let C269;
  let C270;
  let C271;
  let C272;
  let C273;
  let C274;
  let C275;
  let C276;
  let C277;
  let C278;
  let C279;
  let C280;
  let C281;
  let C282;
  let C283;
  let C284;
  let C285;
  let C286;
  let C287;
  let C288;
  let C289;
  let C290;
  let C291;
  let C292;
  let C293;
  let C294;
  let C295;
  let C296;
  let C297;
  let C298;
  let C299;
  let C300;
  let C301;
  let C302;
  let C303;
  let C304;
  let C305;
  let C306;
  let C307;
  let C308;
  let C309;
  let C310;
  let C311;
  let C312;
  let C313;
  let C314;
  let C315;
  let C316;
  let C317;
  let C318;
  let C319;
  let C320;
  let C321;
  let C322;
  let C323;
  let C324;
  let C325;
  let C176;
  let C327;
  let C328;
  let C329;
  let C330;
  let C331;
  let C332;
  let C333;
  let C334;
  let C335;
  let C336;
  let C337;
  let C338;
  let C339;
  let C340;
  let C341;
  let C342;
  let C343;
  let C344;
  let C345;
  let C346;
  let C347;
  let C348;
  let C349;
  let C350;
  let C351;
  let C352;
  let C353;
  let C354;
  let C355;
  let C356;
  let C357;
  let C358;
  let C359;
  let C360;
  let C361;
  let C362;
  let C363;
  let C364;
  let C365;
  let C366;
  let C367;
  let C368;
  let C369;
  let C370;
  let C371;
  let C372;
  let C373;
  let C374;
  let C375;
  let C376;
  let C377;
  let C378;
  let C379;
  let C380;
  let C381;
  let C382;
  let C383;
  let C384;
  let C385;
  let C386;
  let C387;
  let C388;
  let C389;
  let C390;
  let C391;
  let C392;
  let C393;
  let C394;
  let C395;
  let C396;
  let C397;
  let C398;
  let C399;
  let C400;
  let C401;
  let C402;
  let C403;
  let C404;
  let C405;
  let C406;
  let C407;
  let C408;
  let C409;
  let C410;
  let C411;
  let C412;
  let C413;
  let C414;
  let C415;
  let C416;
  let C417;
  let C418;
  let C419;
  let C420;
  let C421;
  let C422;
  let C423;
  let C424;
  let C425;
  let C426;
  let C427;
  let C428;
  let C429;
  let C430;
  let C431;
  let C432;
  let C433;
  let C434;
  let C435;
  let C436;
  let C437;
  let C438;
  let C439;
  let C440;
  let C441;
  let C442;
  let C443;
  let C444;
  let C445;
  let C446;
  let C447;
  let C448;
  let C449;
  let C450;
  let C451;
  let C452;
  let C453;
  let C454;
  let C455;
  let C456;
  let C457;
  let C458;
  let C459;
  let C460;
  let C461;
  let C462;
  let C463;
  let C464;
  let C465;
  let C466;
  let C467;
  let C468;
  let C469;
  let C470;
  let C471;
  let C472;
  let C473;
  let C474;
  let C475;
  let C476;
  let C477;
  let C478;
  let C479;
  let C480;
  let C481;
  let C482;
  let C483;
  let C484;
  let C485;
  let C486;
  let C487;
  let C488;
  let C489;
  let C490;
  let C491;
  let C492;
  let C493;
  let C326;
  let C494;
  let C496;
  let C497;
  let C498;
  let C499;
  let C500;
  let C501;
  let C502;
  let C503;
  let C504;
  let C505;
  let C506;
  let C507;
  let C508;
  let C509;
  let C510;
  let C511;
  let C512;
  let C513;
  let C514;
  let C515;
  let C516;
  let C517;
  let C518;
  let C519;
  let C520;
  let C521;
  let C522;
  let C523;
  let C524;
  let C525;
  let C526;
  let C527;
  let C528;
  let C529;
  let C530;
  let C531;
  let C532;
  let C533;
  let C534;
  let C535;
  let C536;
  let C537;
  let C538;
  let C539;
  let C540;
  let C541;
  let C542;
  let C543;
  let C544;
  let C545;
  let C546;
  let C547;
  let C548;
  let C549;
  let C550;
  let C551;
  let C552;
  let C553;
  let C554;
  let C555;
  let C556;
  let C557;
  let C558;
  let C559;
  let C560;
  let C561;
  let C562;
  let C563;
  let C564;
  let C565;
  let C566;
  let C567;
  let C568;
  let C569;
  let C570;
  let C571;
  let C572;
  let C573;
  let C574;
  let C575;
  let C576;
  let C577;
  let C578;
  let C579;
  let C495;
  let C581;
  let C582;
  let C583;
  let C584;
  let C585;
  let C586;
  let C587;
  let C588;
  let C589;
  let C590;
  let C591;
  let C592;
  let C593;
  let C594;
  let C595;
  let C596;
  let C597;
  let C598;
  let C599;
  let C600;
  let C601;
  let C602;
  let C603;
  let C604;
  let C605;
  let C606;
  let C607;
  let C608;
  let C609;
  let C610;
  let C611;
  let C612;
  let C613;
  let C614;
  let C615;
  let C616;
  let C617;
  let C618;
  let C619;
  let C620;
  let C621;
  let C622;
  let C623;
  let C624;
  let C625;
  let C626;
  let C627;
  let C628;
  let C629;
  let C630;
  let C631;
  let C632;
  let C633;
  let C634;
  let C635;
  let C636;
  let C637;
  let C638;
  let C639;
  let C640;
  let C641;
  let C642;
  let C643;
  let C644;
  let C645;
  let C646;
  let C580;
  let C647;
  let C648;
  let C649;
  let C650;
  let C651;
  dart.defineLazy(keyboard_maps, {
    /*keyboard_maps.kAndroidToLogicalKey*/get kAndroidToLogicalKey() {
      return C176 || CT.C176;
    },
    /*keyboard_maps.kAndroidToPhysicalKey*/get kAndroidToPhysicalKey() {
      return C326 || CT.C326;
    },
    /*keyboard_maps.kAndroidNumPadMap*/get kAndroidNumPadMap() {
      return C494 || CT.C494;
    },
    /*keyboard_maps.kFuchsiaToLogicalKey*/get kFuchsiaToLogicalKey() {
      return C495 || CT.C495;
    },
    /*keyboard_maps.kFuchsiaToPhysicalKey*/get kFuchsiaToPhysicalKey() {
      return C580 || CT.C580;
    },
    /*keyboard_maps.kMacOsToPhysicalKey*/get kMacOsToPhysicalKey() {
      return C647 || CT.C647;
    },
    /*keyboard_maps.kMacOsNumPadMap*/get kMacOsNumPadMap() {
      return C648 || CT.C648;
    },
    /*keyboard_maps.kGlfwToLogicalKey*/get kGlfwToLogicalKey() {
      return C649 || CT.C649;
    },
    /*keyboard_maps.kGlfwNumpadMap*/get kGlfwNumpadMap() {
      return C650 || CT.C650;
    },
    /*keyboard_maps.kLinuxToPhysicalKey*/get kLinuxToPhysicalKey() {
      return C651 || CT.C651;
    }
  });
  keyboard_key.LogicalKeyboardKey = class LogicalKeyboardKey extends diagnostics.Diagnosticable {
    get keyId() {
      return this[keyId$];
    }
    set keyId(value) {
      super.keyId = value;
    }
    get debugName() {
      return this[debugName$];
    }
    set debugName(value) {
      super.debugName = value;
    }
    get keyLabel() {
      return this[keyLabel$];
    }
    set keyLabel(value) {
      super.keyLabel = value;
    }
    get hashCode() {
      return dart.hashCode(this.keyId);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = keyboard_key.LogicalKeyboardKey._check(other);
      return this.keyId == typedOther.keyId;
    }
    static findKeyByKeyId(keyId) {
      return keyboard_key.LogicalKeyboardKey._knownLogicalKeys[$_get](keyId);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("keyId", "0x" + this.keyId[$toRadixString](16)[$padLeft](8, "0"), {showName: true}));
      properties.add(new diagnostics.StringProperty.new("keyLabel", this.keyLabel, {showName: true}));
      properties.add(new diagnostics.StringProperty.new("debugName", this.debugName, {showName: true, defaultValue: null}));
    }
    static isControlCharacter(label) {
      if (label.length > 1) {
        return false;
      }
      let codeUnit = label[$codeUnitAt](0);
      return codeUnit <= 31 && codeUnit >= 0 || codeUnit >= 127 && codeUnit <= 159;
    }
    get isAutogenerated() {
      return (dart.notNull(this.keyId) & 1099511627776.0) !== 0;
    }
  };
  (keyboard_key.LogicalKeyboardKey.new = function(keyId, opts) {
    let debugName = opts && 'debugName' in opts ? opts.debugName : null;
    let keyLabel = opts && 'keyLabel' in opts ? opts.keyLabel : null;
    this[keyId$] = keyId;
    this[debugName$] = debugName;
    this[keyLabel$] = keyLabel;
    if (!(keyId != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/keyboard_key.dart", 127, 16, "keyId != null");
    keyboard_key.LogicalKeyboardKey.__proto__.new.call(this);
    ;
  }).prototype = keyboard_key.LogicalKeyboardKey.prototype;
  dart.addTypeTests(keyboard_key.LogicalKeyboardKey);
  const keyId$ = Symbol("LogicalKeyboardKey.keyId");
  const debugName$ = Symbol("LogicalKeyboardKey.debugName");
  const keyLabel$ = Symbol("LogicalKeyboardKey.keyLabel");
  dart.setGetterSignature(keyboard_key.LogicalKeyboardKey, () => ({
    __proto__: dart.getGetters(keyboard_key.LogicalKeyboardKey.__proto__),
    isAutogenerated: core.bool
  }));
  dart.setLibraryUri(keyboard_key.LogicalKeyboardKey, "package:flutter_web/src/services/keyboard_key.dart");
  dart.setFieldSignature(keyboard_key.LogicalKeyboardKey, () => ({
    __proto__: dart.getFields(keyboard_key.LogicalKeyboardKey.__proto__),
    keyId: dart.finalFieldType(core.int),
    debugName: dart.finalFieldType(core.String),
    keyLabel: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(keyboard_key.LogicalKeyboardKey, ['_equals']);
  dart.defineExtensionAccessors(keyboard_key.LogicalKeyboardKey, ['hashCode']);
  dart.defineLazy(keyboard_key.LogicalKeyboardKey, {
    /*keyboard_key.LogicalKeyboardKey.valueMask*/get valueMask() {
      return 4294967295.0;
    },
    /*keyboard_key.LogicalKeyboardKey.platformMask*/get platformMask() {
      return 1095216660480.0;
    },
    /*keyboard_key.LogicalKeyboardKey.autogeneratedMask*/get autogeneratedMask() {
      return 1099511627776.0;
    },
    /*keyboard_key.LogicalKeyboardKey.unicodePlane*/get unicodePlane() {
      return 0;
    },
    /*keyboard_key.LogicalKeyboardKey.hidPlane*/get hidPlane() {
      return 4294967296.0;
    },
    /*keyboard_key.LogicalKeyboardKey.none*/get none() {
      return C177 || CT.C177;
    },
    /*keyboard_key.LogicalKeyboardKey.hyper*/get hyper() {
      return C496 || CT.C496;
    },
    /*keyboard_key.LogicalKeyboardKey.superKey*/get superKey() {
      return C497 || CT.C497;
    },
    /*keyboard_key.LogicalKeyboardKey.fn*/get fn() {
      return C178 || CT.C178;
    },
    /*keyboard_key.LogicalKeyboardKey.fnLock*/get fnLock() {
      return C498 || CT.C498;
    },
    /*keyboard_key.LogicalKeyboardKey.suspend*/get suspend() {
      return C499 || CT.C499;
    },
    /*keyboard_key.LogicalKeyboardKey.resume*/get resume() {
      return C500 || CT.C500;
    },
    /*keyboard_key.LogicalKeyboardKey.turbo*/get turbo() {
      return C501 || CT.C501;
    },
    /*keyboard_key.LogicalKeyboardKey.sleep*/get sleep() {
      return C179 || CT.C179;
    },
    /*keyboard_key.LogicalKeyboardKey.wakeUp*/get wakeUp() {
      return C180 || CT.C180;
    },
    /*keyboard_key.LogicalKeyboardKey.displayToggleIntExt*/get displayToggleIntExt() {
      return C502 || CT.C502;
    },
    /*keyboard_key.LogicalKeyboardKey.usbReserved*/get usbReserved() {
      return C503 || CT.C503;
    },
    /*keyboard_key.LogicalKeyboardKey.usbErrorRollOver*/get usbErrorRollOver() {
      return C504 || CT.C504;
    },
    /*keyboard_key.LogicalKeyboardKey.usbPostFail*/get usbPostFail() {
      return C505 || CT.C505;
    },
    /*keyboard_key.LogicalKeyboardKey.usbErrorUndefined*/get usbErrorUndefined() {
      return C506 || CT.C506;
    },
    /*keyboard_key.LogicalKeyboardKey.keyA*/get keyA() {
      return C181 || CT.C181;
    },
    /*keyboard_key.LogicalKeyboardKey.keyB*/get keyB() {
      return C182 || CT.C182;
    },
    /*keyboard_key.LogicalKeyboardKey.keyC*/get keyC() {
      return C183 || CT.C183;
    },
    /*keyboard_key.LogicalKeyboardKey.keyD*/get keyD() {
      return C184 || CT.C184;
    },
    /*keyboard_key.LogicalKeyboardKey.keyE*/get keyE() {
      return C185 || CT.C185;
    },
    /*keyboard_key.LogicalKeyboardKey.keyF*/get keyF() {
      return C186 || CT.C186;
    },
    /*keyboard_key.LogicalKeyboardKey.keyG*/get keyG() {
      return C187 || CT.C187;
    },
    /*keyboard_key.LogicalKeyboardKey.keyH*/get keyH() {
      return C188 || CT.C188;
    },
    /*keyboard_key.LogicalKeyboardKey.keyI*/get keyI() {
      return C189 || CT.C189;
    },
    /*keyboard_key.LogicalKeyboardKey.keyJ*/get keyJ() {
      return C190 || CT.C190;
    },
    /*keyboard_key.LogicalKeyboardKey.keyK*/get keyK() {
      return C191 || CT.C191;
    },
    /*keyboard_key.LogicalKeyboardKey.keyL*/get keyL() {
      return C192 || CT.C192;
    },
    /*keyboard_key.LogicalKeyboardKey.keyM*/get keyM() {
      return C193 || CT.C193;
    },
    /*keyboard_key.LogicalKeyboardKey.keyN*/get keyN() {
      return C194 || CT.C194;
    },
    /*keyboard_key.LogicalKeyboardKey.keyO*/get keyO() {
      return C195 || CT.C195;
    },
    /*keyboard_key.LogicalKeyboardKey.keyP*/get keyP() {
      return C196 || CT.C196;
    },
    /*keyboard_key.LogicalKeyboardKey.keyQ*/get keyQ() {
      return C197 || CT.C197;
    },
    /*keyboard_key.LogicalKeyboardKey.keyR*/get keyR() {
      return C198 || CT.C198;
    },
    /*keyboard_key.LogicalKeyboardKey.keyS*/get keyS() {
      return C199 || CT.C199;
    },
    /*keyboard_key.LogicalKeyboardKey.keyT*/get keyT() {
      return C200 || CT.C200;
    },
    /*keyboard_key.LogicalKeyboardKey.keyU*/get keyU() {
      return C201 || CT.C201;
    },
    /*keyboard_key.LogicalKeyboardKey.keyV*/get keyV() {
      return C202 || CT.C202;
    },
    /*keyboard_key.LogicalKeyboardKey.keyW*/get keyW() {
      return C203 || CT.C203;
    },
    /*keyboard_key.LogicalKeyboardKey.keyX*/get keyX() {
      return C204 || CT.C204;
    },
    /*keyboard_key.LogicalKeyboardKey.keyY*/get keyY() {
      return C205 || CT.C205;
    },
    /*keyboard_key.LogicalKeyboardKey.keyZ*/get keyZ() {
      return C206 || CT.C206;
    },
    /*keyboard_key.LogicalKeyboardKey.digit1*/get digit1() {
      return C207 || CT.C207;
    },
    /*keyboard_key.LogicalKeyboardKey.digit2*/get digit2() {
      return C208 || CT.C208;
    },
    /*keyboard_key.LogicalKeyboardKey.digit3*/get digit3() {
      return C209 || CT.C209;
    },
    /*keyboard_key.LogicalKeyboardKey.digit4*/get digit4() {
      return C210 || CT.C210;
    },
    /*keyboard_key.LogicalKeyboardKey.digit5*/get digit5() {
      return C211 || CT.C211;
    },
    /*keyboard_key.LogicalKeyboardKey.digit6*/get digit6() {
      return C212 || CT.C212;
    },
    /*keyboard_key.LogicalKeyboardKey.digit7*/get digit7() {
      return C213 || CT.C213;
    },
    /*keyboard_key.LogicalKeyboardKey.digit8*/get digit8() {
      return C214 || CT.C214;
    },
    /*keyboard_key.LogicalKeyboardKey.digit9*/get digit9() {
      return C215 || CT.C215;
    },
    /*keyboard_key.LogicalKeyboardKey.digit0*/get digit0() {
      return C216 || CT.C216;
    },
    /*keyboard_key.LogicalKeyboardKey.enter*/get enter() {
      return C217 || CT.C217;
    },
    /*keyboard_key.LogicalKeyboardKey.escape*/get escape() {
      return C218 || CT.C218;
    },
    /*keyboard_key.LogicalKeyboardKey.backspace*/get backspace() {
      return C219 || CT.C219;
    },
    /*keyboard_key.LogicalKeyboardKey.tab*/get tab() {
      return C220 || CT.C220;
    },
    /*keyboard_key.LogicalKeyboardKey.space*/get space() {
      return C221 || CT.C221;
    },
    /*keyboard_key.LogicalKeyboardKey.minus*/get minus() {
      return C222 || CT.C222;
    },
    /*keyboard_key.LogicalKeyboardKey.equal*/get equal() {
      return C223 || CT.C223;
    },
    /*keyboard_key.LogicalKeyboardKey.bracketLeft*/get bracketLeft() {
      return C224 || CT.C224;
    },
    /*keyboard_key.LogicalKeyboardKey.bracketRight*/get bracketRight() {
      return C225 || CT.C225;
    },
    /*keyboard_key.LogicalKeyboardKey.backslash*/get backslash() {
      return C226 || CT.C226;
    },
    /*keyboard_key.LogicalKeyboardKey.semicolon*/get semicolon() {
      return C227 || CT.C227;
    },
    /*keyboard_key.LogicalKeyboardKey.quote*/get quote() {
      return C228 || CT.C228;
    },
    /*keyboard_key.LogicalKeyboardKey.backquote*/get backquote() {
      return C229 || CT.C229;
    },
    /*keyboard_key.LogicalKeyboardKey.comma*/get comma() {
      return C230 || CT.C230;
    },
    /*keyboard_key.LogicalKeyboardKey.period*/get period() {
      return C231 || CT.C231;
    },
    /*keyboard_key.LogicalKeyboardKey.slash*/get slash() {
      return C232 || CT.C232;
    },
    /*keyboard_key.LogicalKeyboardKey.capsLock*/get capsLock() {
      return C233 || CT.C233;
    },
    /*keyboard_key.LogicalKeyboardKey.f1*/get f1() {
      return C234 || CT.C234;
    },
    /*keyboard_key.LogicalKeyboardKey.f2*/get f2() {
      return C235 || CT.C235;
    },
    /*keyboard_key.LogicalKeyboardKey.f3*/get f3() {
      return C236 || CT.C236;
    },
    /*keyboard_key.LogicalKeyboardKey.f4*/get f4() {
      return C237 || CT.C237;
    },
    /*keyboard_key.LogicalKeyboardKey.f5*/get f5() {
      return C238 || CT.C238;
    },
    /*keyboard_key.LogicalKeyboardKey.f6*/get f6() {
      return C239 || CT.C239;
    },
    /*keyboard_key.LogicalKeyboardKey.f7*/get f7() {
      return C240 || CT.C240;
    },
    /*keyboard_key.LogicalKeyboardKey.f8*/get f8() {
      return C241 || CT.C241;
    },
    /*keyboard_key.LogicalKeyboardKey.f9*/get f9() {
      return C242 || CT.C242;
    },
    /*keyboard_key.LogicalKeyboardKey.f10*/get f10() {
      return C243 || CT.C243;
    },
    /*keyboard_key.LogicalKeyboardKey.f11*/get f11() {
      return C244 || CT.C244;
    },
    /*keyboard_key.LogicalKeyboardKey.f12*/get f12() {
      return C245 || CT.C245;
    },
    /*keyboard_key.LogicalKeyboardKey.printScreen*/get printScreen() {
      return C246 || CT.C246;
    },
    /*keyboard_key.LogicalKeyboardKey.scrollLock*/get scrollLock() {
      return C247 || CT.C247;
    },
    /*keyboard_key.LogicalKeyboardKey.pause*/get pause() {
      return C248 || CT.C248;
    },
    /*keyboard_key.LogicalKeyboardKey.insert*/get insert() {
      return C249 || CT.C249;
    },
    /*keyboard_key.LogicalKeyboardKey.home*/get home() {
      return C250 || CT.C250;
    },
    /*keyboard_key.LogicalKeyboardKey.pageUp*/get pageUp() {
      return C251 || CT.C251;
    },
    /*keyboard_key.LogicalKeyboardKey.delete*/get delete() {
      return C252 || CT.C252;
    },
    /*keyboard_key.LogicalKeyboardKey.end*/get end() {
      return C253 || CT.C253;
    },
    /*keyboard_key.LogicalKeyboardKey.pageDown*/get pageDown() {
      return C254 || CT.C254;
    },
    /*keyboard_key.LogicalKeyboardKey.arrowRight*/get arrowRight() {
      return C255 || CT.C255;
    },
    /*keyboard_key.LogicalKeyboardKey.arrowLeft*/get arrowLeft() {
      return C256 || CT.C256;
    },
    /*keyboard_key.LogicalKeyboardKey.arrowDown*/get arrowDown() {
      return C257 || CT.C257;
    },
    /*keyboard_key.LogicalKeyboardKey.arrowUp*/get arrowUp() {
      return C258 || CT.C258;
    },
    /*keyboard_key.LogicalKeyboardKey.numLock*/get numLock() {
      return C259 || CT.C259;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadDivide*/get numpadDivide() {
      return C260 || CT.C260;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadMultiply*/get numpadMultiply() {
      return C261 || CT.C261;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadSubtract*/get numpadSubtract() {
      return C262 || CT.C262;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadAdd*/get numpadAdd() {
      return C263 || CT.C263;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadEnter*/get numpadEnter() {
      return C264 || CT.C264;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad1*/get numpad1() {
      return C265 || CT.C265;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad2*/get numpad2() {
      return C266 || CT.C266;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad3*/get numpad3() {
      return C267 || CT.C267;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad4*/get numpad4() {
      return C268 || CT.C268;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad5*/get numpad5() {
      return C269 || CT.C269;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad6*/get numpad6() {
      return C270 || CT.C270;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad7*/get numpad7() {
      return C271 || CT.C271;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad8*/get numpad8() {
      return C272 || CT.C272;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad9*/get numpad9() {
      return C273 || CT.C273;
    },
    /*keyboard_key.LogicalKeyboardKey.numpad0*/get numpad0() {
      return C274 || CT.C274;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadDecimal*/get numpadDecimal() {
      return C275 || CT.C275;
    },
    /*keyboard_key.LogicalKeyboardKey.intlBackslash*/get intlBackslash() {
      return C507 || CT.C507;
    },
    /*keyboard_key.LogicalKeyboardKey.contextMenu*/get contextMenu() {
      return C276 || CT.C276;
    },
    /*keyboard_key.LogicalKeyboardKey.power*/get power() {
      return C277 || CT.C277;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadEqual*/get numpadEqual() {
      return C278 || CT.C278;
    },
    /*keyboard_key.LogicalKeyboardKey.f13*/get f13() {
      return C508 || CT.C508;
    },
    /*keyboard_key.LogicalKeyboardKey.f14*/get f14() {
      return C509 || CT.C509;
    },
    /*keyboard_key.LogicalKeyboardKey.f15*/get f15() {
      return C510 || CT.C510;
    },
    /*keyboard_key.LogicalKeyboardKey.f16*/get f16() {
      return C511 || CT.C511;
    },
    /*keyboard_key.LogicalKeyboardKey.f17*/get f17() {
      return C512 || CT.C512;
    },
    /*keyboard_key.LogicalKeyboardKey.f18*/get f18() {
      return C513 || CT.C513;
    },
    /*keyboard_key.LogicalKeyboardKey.f19*/get f19() {
      return C514 || CT.C514;
    },
    /*keyboard_key.LogicalKeyboardKey.f20*/get f20() {
      return C515 || CT.C515;
    },
    /*keyboard_key.LogicalKeyboardKey.f21*/get f21() {
      return C516 || CT.C516;
    },
    /*keyboard_key.LogicalKeyboardKey.f22*/get f22() {
      return C517 || CT.C517;
    },
    /*keyboard_key.LogicalKeyboardKey.f23*/get f23() {
      return C518 || CT.C518;
    },
    /*keyboard_key.LogicalKeyboardKey.f24*/get f24() {
      return C519 || CT.C519;
    },
    /*keyboard_key.LogicalKeyboardKey.open*/get open() {
      return C520 || CT.C520;
    },
    /*keyboard_key.LogicalKeyboardKey.help*/get help() {
      return C279 || CT.C279;
    },
    /*keyboard_key.LogicalKeyboardKey.select*/get select() {
      return C521 || CT.C521;
    },
    /*keyboard_key.LogicalKeyboardKey.again*/get again() {
      return C522 || CT.C522;
    },
    /*keyboard_key.LogicalKeyboardKey.undo*/get undo() {
      return C523 || CT.C523;
    },
    /*keyboard_key.LogicalKeyboardKey.cut*/get cut() {
      return C280 || CT.C280;
    },
    /*keyboard_key.LogicalKeyboardKey.copy*/get copy() {
      return C281 || CT.C281;
    },
    /*keyboard_key.LogicalKeyboardKey.paste*/get paste() {
      return C282 || CT.C282;
    },
    /*keyboard_key.LogicalKeyboardKey.find*/get find() {
      return C524 || CT.C524;
    },
    /*keyboard_key.LogicalKeyboardKey.audioVolumeMute*/get audioVolumeMute() {
      return C283 || CT.C283;
    },
    /*keyboard_key.LogicalKeyboardKey.audioVolumeUp*/get audioVolumeUp() {
      return C284 || CT.C284;
    },
    /*keyboard_key.LogicalKeyboardKey.audioVolumeDown*/get audioVolumeDown() {
      return C285 || CT.C285;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadComma*/get numpadComma() {
      return C286 || CT.C286;
    },
    /*keyboard_key.LogicalKeyboardKey.intlRo*/get intlRo() {
      return C525 || CT.C525;
    },
    /*keyboard_key.LogicalKeyboardKey.kanaMode*/get kanaMode() {
      return C526 || CT.C526;
    },
    /*keyboard_key.LogicalKeyboardKey.intlYen*/get intlYen() {
      return C527 || CT.C527;
    },
    /*keyboard_key.LogicalKeyboardKey.convert*/get convert() {
      return C287 || CT.C287;
    },
    /*keyboard_key.LogicalKeyboardKey.nonConvert*/get nonConvert() {
      return C288 || CT.C288;
    },
    /*keyboard_key.LogicalKeyboardKey.lang1*/get lang1() {
      return C528 || CT.C528;
    },
    /*keyboard_key.LogicalKeyboardKey.lang2*/get lang2() {
      return C529 || CT.C529;
    },
    /*keyboard_key.LogicalKeyboardKey.lang3*/get lang3() {
      return C530 || CT.C530;
    },
    /*keyboard_key.LogicalKeyboardKey.lang4*/get lang4() {
      return C531 || CT.C531;
    },
    /*keyboard_key.LogicalKeyboardKey.lang5*/get lang5() {
      return C532 || CT.C532;
    },
    /*keyboard_key.LogicalKeyboardKey.abort*/get abort() {
      return C533 || CT.C533;
    },
    /*keyboard_key.LogicalKeyboardKey.props*/get props() {
      return C534 || CT.C534;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadParenLeft*/get numpadParenLeft() {
      return C289 || CT.C289;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadParenRight*/get numpadParenRight() {
      return C290 || CT.C290;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadBackspace*/get numpadBackspace() {
      return C535 || CT.C535;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadMemoryStore*/get numpadMemoryStore() {
      return C536 || CT.C536;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadMemoryRecall*/get numpadMemoryRecall() {
      return C537 || CT.C537;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadMemoryClear*/get numpadMemoryClear() {
      return C538 || CT.C538;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadMemoryAdd*/get numpadMemoryAdd() {
      return C539 || CT.C539;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadMemorySubtract*/get numpadMemorySubtract() {
      return C540 || CT.C540;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadSignChange*/get numpadSignChange() {
      return C541 || CT.C541;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadClear*/get numpadClear() {
      return C542 || CT.C542;
    },
    /*keyboard_key.LogicalKeyboardKey.numpadClearEntry*/get numpadClearEntry() {
      return C543 || CT.C543;
    },
    /*keyboard_key.LogicalKeyboardKey.controlLeft*/get controlLeft() {
      return C291 || CT.C291;
    },
    /*keyboard_key.LogicalKeyboardKey.shiftLeft*/get shiftLeft() {
      return C292 || CT.C292;
    },
    /*keyboard_key.LogicalKeyboardKey.altLeft*/get altLeft() {
      return C293 || CT.C293;
    },
    /*keyboard_key.LogicalKeyboardKey.metaLeft*/get metaLeft() {
      return C294 || CT.C294;
    },
    /*keyboard_key.LogicalKeyboardKey.controlRight*/get controlRight() {
      return C295 || CT.C295;
    },
    /*keyboard_key.LogicalKeyboardKey.shiftRight*/get shiftRight() {
      return C296 || CT.C296;
    },
    /*keyboard_key.LogicalKeyboardKey.altRight*/get altRight() {
      return C297 || CT.C297;
    },
    /*keyboard_key.LogicalKeyboardKey.metaRight*/get metaRight() {
      return C298 || CT.C298;
    },
    /*keyboard_key.LogicalKeyboardKey.info*/get info() {
      return C299 || CT.C299;
    },
    /*keyboard_key.LogicalKeyboardKey.closedCaptionToggle*/get closedCaptionToggle() {
      return C300 || CT.C300;
    },
    /*keyboard_key.LogicalKeyboardKey.brightnessUp*/get brightnessUp() {
      return C301 || CT.C301;
    },
    /*keyboard_key.LogicalKeyboardKey.brightnessDown*/get brightnessDown() {
      return C302 || CT.C302;
    },
    /*keyboard_key.LogicalKeyboardKey.brightnessToggle*/get brightnessToggle() {
      return C544 || CT.C544;
    },
    /*keyboard_key.LogicalKeyboardKey.brightnessMinimum*/get brightnessMinimum() {
      return C545 || CT.C545;
    },
    /*keyboard_key.LogicalKeyboardKey.brightnessMaximum*/get brightnessMaximum() {
      return C546 || CT.C546;
    },
    /*keyboard_key.LogicalKeyboardKey.brightnessAuto*/get brightnessAuto() {
      return C547 || CT.C547;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaLast*/get mediaLast() {
      return C303 || CT.C303;
    },
    /*keyboard_key.LogicalKeyboardKey.launchPhone*/get launchPhone() {
      return C548 || CT.C548;
    },
    /*keyboard_key.LogicalKeyboardKey.programGuide*/get programGuide() {
      return C549 || CT.C549;
    },
    /*keyboard_key.LogicalKeyboardKey.exit*/get exit() {
      return C550 || CT.C550;
    },
    /*keyboard_key.LogicalKeyboardKey.channelUp*/get channelUp() {
      return C304 || CT.C304;
    },
    /*keyboard_key.LogicalKeyboardKey.channelDown*/get channelDown() {
      return C305 || CT.C305;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaPlay*/get mediaPlay() {
      return C306 || CT.C306;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaRecord*/get mediaRecord() {
      return C307 || CT.C307;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaFastForward*/get mediaFastForward() {
      return C308 || CT.C308;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaRewind*/get mediaRewind() {
      return C309 || CT.C309;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaTrackNext*/get mediaTrackNext() {
      return C310 || CT.C310;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaTrackPrevious*/get mediaTrackPrevious() {
      return C311 || CT.C311;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaStop*/get mediaStop() {
      return C312 || CT.C312;
    },
    /*keyboard_key.LogicalKeyboardKey.eject*/get eject() {
      return C313 || CT.C313;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaPlayPause*/get mediaPlayPause() {
      return C314 || CT.C314;
    },
    /*keyboard_key.LogicalKeyboardKey.speechInputToggle*/get speechInputToggle() {
      return C551 || CT.C551;
    },
    /*keyboard_key.LogicalKeyboardKey.bassBoost*/get bassBoost() {
      return C552 || CT.C552;
    },
    /*keyboard_key.LogicalKeyboardKey.mediaSelect*/get mediaSelect() {
      return C553 || CT.C553;
    },
    /*keyboard_key.LogicalKeyboardKey.launchWordProcessor*/get launchWordProcessor() {
      return C554 || CT.C554;
    },
    /*keyboard_key.LogicalKeyboardKey.launchSpreadsheet*/get launchSpreadsheet() {
      return C555 || CT.C555;
    },
    /*keyboard_key.LogicalKeyboardKey.launchMail*/get launchMail() {
      return C315 || CT.C315;
    },
    /*keyboard_key.LogicalKeyboardKey.launchContacts*/get launchContacts() {
      return C316 || CT.C316;
    },
    /*keyboard_key.LogicalKeyboardKey.launchCalendar*/get launchCalendar() {
      return C317 || CT.C317;
    },
    /*keyboard_key.LogicalKeyboardKey.launchApp2*/get launchApp2() {
      return C556 || CT.C556;
    },
    /*keyboard_key.LogicalKeyboardKey.launchApp1*/get launchApp1() {
      return C557 || CT.C557;
    },
    /*keyboard_key.LogicalKeyboardKey.launchInternetBrowser*/get launchInternetBrowser() {
      return C558 || CT.C558;
    },
    /*keyboard_key.LogicalKeyboardKey.logOff*/get logOff() {
      return C559 || CT.C559;
    },
    /*keyboard_key.LogicalKeyboardKey.lockScreen*/get lockScreen() {
      return C560 || CT.C560;
    },
    /*keyboard_key.LogicalKeyboardKey.launchControlPanel*/get launchControlPanel() {
      return C561 || CT.C561;
    },
    /*keyboard_key.LogicalKeyboardKey.selectTask*/get selectTask() {
      return C562 || CT.C562;
    },
    /*keyboard_key.LogicalKeyboardKey.launchDocuments*/get launchDocuments() {
      return C563 || CT.C563;
    },
    /*keyboard_key.LogicalKeyboardKey.spellCheck*/get spellCheck() {
      return C564 || CT.C564;
    },
    /*keyboard_key.LogicalKeyboardKey.launchKeyboardLayout*/get launchKeyboardLayout() {
      return C565 || CT.C565;
    },
    /*keyboard_key.LogicalKeyboardKey.launchScreenSaver*/get launchScreenSaver() {
      return C566 || CT.C566;
    },
    /*keyboard_key.LogicalKeyboardKey.launchAssistant*/get launchAssistant() {
      return C318 || CT.C318;
    },
    /*keyboard_key.LogicalKeyboardKey.launchAudioBrowser*/get launchAudioBrowser() {
      return C567 || CT.C567;
    },
    /*keyboard_key.LogicalKeyboardKey.newKey*/get newKey() {
      return C568 || CT.C568;
    },
    /*keyboard_key.LogicalKeyboardKey.close*/get close() {
      return C319 || CT.C319;
    },
    /*keyboard_key.LogicalKeyboardKey.save*/get save() {
      return C569 || CT.C569;
    },
    /*keyboard_key.LogicalKeyboardKey.print*/get print() {
      return C570 || CT.C570;
    },
    /*keyboard_key.LogicalKeyboardKey.browserSearch*/get browserSearch() {
      return C320 || CT.C320;
    },
    /*keyboard_key.LogicalKeyboardKey.browserHome*/get browserHome() {
      return C571 || CT.C571;
    },
    /*keyboard_key.LogicalKeyboardKey.browserBack*/get browserBack() {
      return C572 || CT.C572;
    },
    /*keyboard_key.LogicalKeyboardKey.browserForward*/get browserForward() {
      return C321 || CT.C321;
    },
    /*keyboard_key.LogicalKeyboardKey.browserStop*/get browserStop() {
      return C573 || CT.C573;
    },
    /*keyboard_key.LogicalKeyboardKey.browserRefresh*/get browserRefresh() {
      return C574 || CT.C574;
    },
    /*keyboard_key.LogicalKeyboardKey.browserFavorites*/get browserFavorites() {
      return C322 || CT.C322;
    },
    /*keyboard_key.LogicalKeyboardKey.zoomIn*/get zoomIn() {
      return C323 || CT.C323;
    },
    /*keyboard_key.LogicalKeyboardKey.zoomOut*/get zoomOut() {
      return C324 || CT.C324;
    },
    /*keyboard_key.LogicalKeyboardKey.zoomToggle*/get zoomToggle() {
      return C325 || CT.C325;
    },
    /*keyboard_key.LogicalKeyboardKey.redo*/get redo() {
      return C575 || CT.C575;
    },
    /*keyboard_key.LogicalKeyboardKey.mailReply*/get mailReply() {
      return C576 || CT.C576;
    },
    /*keyboard_key.LogicalKeyboardKey.mailForward*/get mailForward() {
      return C577 || CT.C577;
    },
    /*keyboard_key.LogicalKeyboardKey.mailSend*/get mailSend() {
      return C578 || CT.C578;
    },
    /*keyboard_key.LogicalKeyboardKey.showAllWindows*/get showAllWindows() {
      return C579 || CT.C579;
    },
    /*keyboard_key.LogicalKeyboardKey._knownLogicalKeys*/get _knownLogicalKeys() {
      return C495 || CT.C495;
    }
  });
  keyboard_key.PhysicalKeyboardKey = class PhysicalKeyboardKey extends diagnostics.Diagnosticable {
    get usbHidUsage() {
      return this[usbHidUsage$];
    }
    set usbHidUsage(value) {
      super.usbHidUsage = value;
    }
    get debugName() {
      return this[debugName$0];
    }
    set debugName(value) {
      super.debugName = value;
    }
    static findKeyByCode(usageCode) {
      return keyboard_key.PhysicalKeyboardKey._knownPhysicalKeys[$_get](usageCode);
    }
    get hashCode() {
      return dart.hashCode(this.usbHidUsage);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = keyboard_key.PhysicalKeyboardKey._check(other);
      return this.usbHidUsage == typedOther.usbHidUsage;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.StringProperty.new("usbHidUsage", "0x" + this.usbHidUsage[$toRadixString](16)[$padLeft](8, "0"), {showName: true}));
      properties.add(new diagnostics.StringProperty.new("debugName", this.debugName, {showName: true, defaultValue: null}));
    }
  };
  (keyboard_key.PhysicalKeyboardKey.new = function(usbHidUsage, opts) {
    let debugName = opts && 'debugName' in opts ? opts.debugName : null;
    this[usbHidUsage$] = usbHidUsage;
    this[debugName$0] = debugName;
    if (!(usbHidUsage != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/keyboard_key.dart", 1756, 16, "})\n      : assert(u");
    keyboard_key.PhysicalKeyboardKey.__proto__.new.call(this);
    ;
  }).prototype = keyboard_key.PhysicalKeyboardKey.prototype;
  dart.addTypeTests(keyboard_key.PhysicalKeyboardKey);
  const usbHidUsage$ = Symbol("PhysicalKeyboardKey.usbHidUsage");
  const debugName$0 = Symbol("PhysicalKeyboardKey.debugName");
  dart.setLibraryUri(keyboard_key.PhysicalKeyboardKey, "package:flutter_web/src/services/keyboard_key.dart");
  dart.setFieldSignature(keyboard_key.PhysicalKeyboardKey, () => ({
    __proto__: dart.getFields(keyboard_key.PhysicalKeyboardKey.__proto__),
    usbHidUsage: dart.finalFieldType(core.int),
    debugName: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(keyboard_key.PhysicalKeyboardKey, ['_equals']);
  dart.defineExtensionAccessors(keyboard_key.PhysicalKeyboardKey, ['hashCode']);
  dart.defineLazy(keyboard_key.PhysicalKeyboardKey, {
    /*keyboard_key.PhysicalKeyboardKey.none*/get none() {
      return C581 || CT.C581;
    },
    /*keyboard_key.PhysicalKeyboardKey.hyper*/get hyper() {
      return C582 || CT.C582;
    },
    /*keyboard_key.PhysicalKeyboardKey.superKey*/get superKey() {
      return C583 || CT.C583;
    },
    /*keyboard_key.PhysicalKeyboardKey.fn*/get fn() {
      return C327 || CT.C327;
    },
    /*keyboard_key.PhysicalKeyboardKey.fnLock*/get fnLock() {
      return C584 || CT.C584;
    },
    /*keyboard_key.PhysicalKeyboardKey.suspend*/get suspend() {
      return C328 || CT.C328;
    },
    /*keyboard_key.PhysicalKeyboardKey.resume*/get resume() {
      return C585 || CT.C585;
    },
    /*keyboard_key.PhysicalKeyboardKey.turbo*/get turbo() {
      return C586 || CT.C586;
    },
    /*keyboard_key.PhysicalKeyboardKey.sleep*/get sleep() {
      return C329 || CT.C329;
    },
    /*keyboard_key.PhysicalKeyboardKey.wakeUp*/get wakeUp() {
      return C330 || CT.C330;
    },
    /*keyboard_key.PhysicalKeyboardKey.displayToggleIntExt*/get displayToggleIntExt() {
      return C587 || CT.C587;
    },
    /*keyboard_key.PhysicalKeyboardKey.usbReserved*/get usbReserved() {
      return C588 || CT.C588;
    },
    /*keyboard_key.PhysicalKeyboardKey.usbErrorRollOver*/get usbErrorRollOver() {
      return C589 || CT.C589;
    },
    /*keyboard_key.PhysicalKeyboardKey.usbPostFail*/get usbPostFail() {
      return C590 || CT.C590;
    },
    /*keyboard_key.PhysicalKeyboardKey.usbErrorUndefined*/get usbErrorUndefined() {
      return C591 || CT.C591;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyA*/get keyA() {
      return C331 || CT.C331;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyB*/get keyB() {
      return C332 || CT.C332;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyC*/get keyC() {
      return C333 || CT.C333;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyD*/get keyD() {
      return C334 || CT.C334;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyE*/get keyE() {
      return C335 || CT.C335;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyF*/get keyF() {
      return C336 || CT.C336;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyG*/get keyG() {
      return C337 || CT.C337;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyH*/get keyH() {
      return C338 || CT.C338;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyI*/get keyI() {
      return C339 || CT.C339;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyJ*/get keyJ() {
      return C340 || CT.C340;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyK*/get keyK() {
      return C341 || CT.C341;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyL*/get keyL() {
      return C342 || CT.C342;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyM*/get keyM() {
      return C343 || CT.C343;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyN*/get keyN() {
      return C344 || CT.C344;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyO*/get keyO() {
      return C345 || CT.C345;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyP*/get keyP() {
      return C346 || CT.C346;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyQ*/get keyQ() {
      return C347 || CT.C347;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyR*/get keyR() {
      return C348 || CT.C348;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyS*/get keyS() {
      return C349 || CT.C349;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyT*/get keyT() {
      return C350 || CT.C350;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyU*/get keyU() {
      return C351 || CT.C351;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyV*/get keyV() {
      return C352 || CT.C352;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyW*/get keyW() {
      return C353 || CT.C353;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyX*/get keyX() {
      return C354 || CT.C354;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyY*/get keyY() {
      return C355 || CT.C355;
    },
    /*keyboard_key.PhysicalKeyboardKey.keyZ*/get keyZ() {
      return C356 || CT.C356;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit1*/get digit1() {
      return C357 || CT.C357;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit2*/get digit2() {
      return C358 || CT.C358;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit3*/get digit3() {
      return C359 || CT.C359;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit4*/get digit4() {
      return C360 || CT.C360;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit5*/get digit5() {
      return C361 || CT.C361;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit6*/get digit6() {
      return C362 || CT.C362;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit7*/get digit7() {
      return C363 || CT.C363;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit8*/get digit8() {
      return C364 || CT.C364;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit9*/get digit9() {
      return C365 || CT.C365;
    },
    /*keyboard_key.PhysicalKeyboardKey.digit0*/get digit0() {
      return C366 || CT.C366;
    },
    /*keyboard_key.PhysicalKeyboardKey.enter*/get enter() {
      return C367 || CT.C367;
    },
    /*keyboard_key.PhysicalKeyboardKey.escape*/get escape() {
      return C368 || CT.C368;
    },
    /*keyboard_key.PhysicalKeyboardKey.backspace*/get backspace() {
      return C369 || CT.C369;
    },
    /*keyboard_key.PhysicalKeyboardKey.tab*/get tab() {
      return C370 || CT.C370;
    },
    /*keyboard_key.PhysicalKeyboardKey.space*/get space() {
      return C371 || CT.C371;
    },
    /*keyboard_key.PhysicalKeyboardKey.minus*/get minus() {
      return C372 || CT.C372;
    },
    /*keyboard_key.PhysicalKeyboardKey.equal*/get equal() {
      return C373 || CT.C373;
    },
    /*keyboard_key.PhysicalKeyboardKey.bracketLeft*/get bracketLeft() {
      return C374 || CT.C374;
    },
    /*keyboard_key.PhysicalKeyboardKey.bracketRight*/get bracketRight() {
      return C375 || CT.C375;
    },
    /*keyboard_key.PhysicalKeyboardKey.backslash*/get backslash() {
      return C376 || CT.C376;
    },
    /*keyboard_key.PhysicalKeyboardKey.semicolon*/get semicolon() {
      return C377 || CT.C377;
    },
    /*keyboard_key.PhysicalKeyboardKey.quote*/get quote() {
      return C378 || CT.C378;
    },
    /*keyboard_key.PhysicalKeyboardKey.backquote*/get backquote() {
      return C379 || CT.C379;
    },
    /*keyboard_key.PhysicalKeyboardKey.comma*/get comma() {
      return C380 || CT.C380;
    },
    /*keyboard_key.PhysicalKeyboardKey.period*/get period() {
      return C381 || CT.C381;
    },
    /*keyboard_key.PhysicalKeyboardKey.slash*/get slash() {
      return C382 || CT.C382;
    },
    /*keyboard_key.PhysicalKeyboardKey.capsLock*/get capsLock() {
      return C383 || CT.C383;
    },
    /*keyboard_key.PhysicalKeyboardKey.f1*/get f1() {
      return C384 || CT.C384;
    },
    /*keyboard_key.PhysicalKeyboardKey.f2*/get f2() {
      return C385 || CT.C385;
    },
    /*keyboard_key.PhysicalKeyboardKey.f3*/get f3() {
      return C386 || CT.C386;
    },
    /*keyboard_key.PhysicalKeyboardKey.f4*/get f4() {
      return C387 || CT.C387;
    },
    /*keyboard_key.PhysicalKeyboardKey.f5*/get f5() {
      return C388 || CT.C388;
    },
    /*keyboard_key.PhysicalKeyboardKey.f6*/get f6() {
      return C389 || CT.C389;
    },
    /*keyboard_key.PhysicalKeyboardKey.f7*/get f7() {
      return C390 || CT.C390;
    },
    /*keyboard_key.PhysicalKeyboardKey.f8*/get f8() {
      return C391 || CT.C391;
    },
    /*keyboard_key.PhysicalKeyboardKey.f9*/get f9() {
      return C392 || CT.C392;
    },
    /*keyboard_key.PhysicalKeyboardKey.f10*/get f10() {
      return C393 || CT.C393;
    },
    /*keyboard_key.PhysicalKeyboardKey.f11*/get f11() {
      return C394 || CT.C394;
    },
    /*keyboard_key.PhysicalKeyboardKey.f12*/get f12() {
      return C395 || CT.C395;
    },
    /*keyboard_key.PhysicalKeyboardKey.printScreen*/get printScreen() {
      return C396 || CT.C396;
    },
    /*keyboard_key.PhysicalKeyboardKey.scrollLock*/get scrollLock() {
      return C397 || CT.C397;
    },
    /*keyboard_key.PhysicalKeyboardKey.pause*/get pause() {
      return C398 || CT.C398;
    },
    /*keyboard_key.PhysicalKeyboardKey.insert*/get insert() {
      return C399 || CT.C399;
    },
    /*keyboard_key.PhysicalKeyboardKey.home*/get home() {
      return C400 || CT.C400;
    },
    /*keyboard_key.PhysicalKeyboardKey.pageUp*/get pageUp() {
      return C401 || CT.C401;
    },
    /*keyboard_key.PhysicalKeyboardKey.delete*/get delete() {
      return C402 || CT.C402;
    },
    /*keyboard_key.PhysicalKeyboardKey.end*/get end() {
      return C403 || CT.C403;
    },
    /*keyboard_key.PhysicalKeyboardKey.pageDown*/get pageDown() {
      return C404 || CT.C404;
    },
    /*keyboard_key.PhysicalKeyboardKey.arrowRight*/get arrowRight() {
      return C405 || CT.C405;
    },
    /*keyboard_key.PhysicalKeyboardKey.arrowLeft*/get arrowLeft() {
      return C406 || CT.C406;
    },
    /*keyboard_key.PhysicalKeyboardKey.arrowDown*/get arrowDown() {
      return C407 || CT.C407;
    },
    /*keyboard_key.PhysicalKeyboardKey.arrowUp*/get arrowUp() {
      return C408 || CT.C408;
    },
    /*keyboard_key.PhysicalKeyboardKey.numLock*/get numLock() {
      return C409 || CT.C409;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadDivide*/get numpadDivide() {
      return C410 || CT.C410;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadMultiply*/get numpadMultiply() {
      return C411 || CT.C411;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadSubtract*/get numpadSubtract() {
      return C412 || CT.C412;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadAdd*/get numpadAdd() {
      return C413 || CT.C413;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadEnter*/get numpadEnter() {
      return C414 || CT.C414;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad1*/get numpad1() {
      return C415 || CT.C415;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad2*/get numpad2() {
      return C416 || CT.C416;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad3*/get numpad3() {
      return C417 || CT.C417;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad4*/get numpad4() {
      return C418 || CT.C418;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad5*/get numpad5() {
      return C419 || CT.C419;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad6*/get numpad6() {
      return C420 || CT.C420;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad7*/get numpad7() {
      return C421 || CT.C421;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad8*/get numpad8() {
      return C422 || CT.C422;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad9*/get numpad9() {
      return C423 || CT.C423;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpad0*/get numpad0() {
      return C424 || CT.C424;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadDecimal*/get numpadDecimal() {
      return C425 || CT.C425;
    },
    /*keyboard_key.PhysicalKeyboardKey.intlBackslash*/get intlBackslash() {
      return C592 || CT.C592;
    },
    /*keyboard_key.PhysicalKeyboardKey.contextMenu*/get contextMenu() {
      return C426 || CT.C426;
    },
    /*keyboard_key.PhysicalKeyboardKey.power*/get power() {
      return C427 || CT.C427;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadEqual*/get numpadEqual() {
      return C428 || CT.C428;
    },
    /*keyboard_key.PhysicalKeyboardKey.f13*/get f13() {
      return C429 || CT.C429;
    },
    /*keyboard_key.PhysicalKeyboardKey.f14*/get f14() {
      return C430 || CT.C430;
    },
    /*keyboard_key.PhysicalKeyboardKey.f15*/get f15() {
      return C431 || CT.C431;
    },
    /*keyboard_key.PhysicalKeyboardKey.f16*/get f16() {
      return C432 || CT.C432;
    },
    /*keyboard_key.PhysicalKeyboardKey.f17*/get f17() {
      return C433 || CT.C433;
    },
    /*keyboard_key.PhysicalKeyboardKey.f18*/get f18() {
      return C434 || CT.C434;
    },
    /*keyboard_key.PhysicalKeyboardKey.f19*/get f19() {
      return C435 || CT.C435;
    },
    /*keyboard_key.PhysicalKeyboardKey.f20*/get f20() {
      return C436 || CT.C436;
    },
    /*keyboard_key.PhysicalKeyboardKey.f21*/get f21() {
      return C437 || CT.C437;
    },
    /*keyboard_key.PhysicalKeyboardKey.f22*/get f22() {
      return C438 || CT.C438;
    },
    /*keyboard_key.PhysicalKeyboardKey.f23*/get f23() {
      return C439 || CT.C439;
    },
    /*keyboard_key.PhysicalKeyboardKey.f24*/get f24() {
      return C440 || CT.C440;
    },
    /*keyboard_key.PhysicalKeyboardKey.open*/get open() {
      return C441 || CT.C441;
    },
    /*keyboard_key.PhysicalKeyboardKey.help*/get help() {
      return C442 || CT.C442;
    },
    /*keyboard_key.PhysicalKeyboardKey.select*/get select() {
      return C593 || CT.C593;
    },
    /*keyboard_key.PhysicalKeyboardKey.again*/get again() {
      return C443 || CT.C443;
    },
    /*keyboard_key.PhysicalKeyboardKey.undo*/get undo() {
      return C444 || CT.C444;
    },
    /*keyboard_key.PhysicalKeyboardKey.cut*/get cut() {
      return C445 || CT.C445;
    },
    /*keyboard_key.PhysicalKeyboardKey.copy*/get copy() {
      return C446 || CT.C446;
    },
    /*keyboard_key.PhysicalKeyboardKey.paste*/get paste() {
      return C447 || CT.C447;
    },
    /*keyboard_key.PhysicalKeyboardKey.find*/get find() {
      return C448 || CT.C448;
    },
    /*keyboard_key.PhysicalKeyboardKey.audioVolumeMute*/get audioVolumeMute() {
      return C449 || CT.C449;
    },
    /*keyboard_key.PhysicalKeyboardKey.audioVolumeUp*/get audioVolumeUp() {
      return C450 || CT.C450;
    },
    /*keyboard_key.PhysicalKeyboardKey.audioVolumeDown*/get audioVolumeDown() {
      return C451 || CT.C451;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadComma*/get numpadComma() {
      return C452 || CT.C452;
    },
    /*keyboard_key.PhysicalKeyboardKey.intlRo*/get intlRo() {
      return C594 || CT.C594;
    },
    /*keyboard_key.PhysicalKeyboardKey.kanaMode*/get kanaMode() {
      return C595 || CT.C595;
    },
    /*keyboard_key.PhysicalKeyboardKey.intlYen*/get intlYen() {
      return C596 || CT.C596;
    },
    /*keyboard_key.PhysicalKeyboardKey.convert*/get convert() {
      return C453 || CT.C453;
    },
    /*keyboard_key.PhysicalKeyboardKey.nonConvert*/get nonConvert() {
      return C454 || CT.C454;
    },
    /*keyboard_key.PhysicalKeyboardKey.lang1*/get lang1() {
      return C597 || CT.C597;
    },
    /*keyboard_key.PhysicalKeyboardKey.lang2*/get lang2() {
      return C598 || CT.C598;
    },
    /*keyboard_key.PhysicalKeyboardKey.lang3*/get lang3() {
      return C455 || CT.C455;
    },
    /*keyboard_key.PhysicalKeyboardKey.lang4*/get lang4() {
      return C456 || CT.C456;
    },
    /*keyboard_key.PhysicalKeyboardKey.lang5*/get lang5() {
      return C599 || CT.C599;
    },
    /*keyboard_key.PhysicalKeyboardKey.abort*/get abort() {
      return C600 || CT.C600;
    },
    /*keyboard_key.PhysicalKeyboardKey.props*/get props() {
      return C457 || CT.C457;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadParenLeft*/get numpadParenLeft() {
      return C458 || CT.C458;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadParenRight*/get numpadParenRight() {
      return C459 || CT.C459;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadBackspace*/get numpadBackspace() {
      return C601 || CT.C601;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadMemoryStore*/get numpadMemoryStore() {
      return C602 || CT.C602;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadMemoryRecall*/get numpadMemoryRecall() {
      return C603 || CT.C603;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadMemoryClear*/get numpadMemoryClear() {
      return C604 || CT.C604;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadMemoryAdd*/get numpadMemoryAdd() {
      return C605 || CT.C605;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadMemorySubtract*/get numpadMemorySubtract() {
      return C606 || CT.C606;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadSignChange*/get numpadSignChange() {
      return C607 || CT.C607;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadClear*/get numpadClear() {
      return C608 || CT.C608;
    },
    /*keyboard_key.PhysicalKeyboardKey.numpadClearEntry*/get numpadClearEntry() {
      return C609 || CT.C609;
    },
    /*keyboard_key.PhysicalKeyboardKey.controlLeft*/get controlLeft() {
      return C460 || CT.C460;
    },
    /*keyboard_key.PhysicalKeyboardKey.shiftLeft*/get shiftLeft() {
      return C461 || CT.C461;
    },
    /*keyboard_key.PhysicalKeyboardKey.altLeft*/get altLeft() {
      return C462 || CT.C462;
    },
    /*keyboard_key.PhysicalKeyboardKey.metaLeft*/get metaLeft() {
      return C463 || CT.C463;
    },
    /*keyboard_key.PhysicalKeyboardKey.controlRight*/get controlRight() {
      return C464 || CT.C464;
    },
    /*keyboard_key.PhysicalKeyboardKey.shiftRight*/get shiftRight() {
      return C465 || CT.C465;
    },
    /*keyboard_key.PhysicalKeyboardKey.altRight*/get altRight() {
      return C466 || CT.C466;
    },
    /*keyboard_key.PhysicalKeyboardKey.metaRight*/get metaRight() {
      return C467 || CT.C467;
    },
    /*keyboard_key.PhysicalKeyboardKey.info*/get info() {
      return C468 || CT.C468;
    },
    /*keyboard_key.PhysicalKeyboardKey.closedCaptionToggle*/get closedCaptionToggle() {
      return C610 || CT.C610;
    },
    /*keyboard_key.PhysicalKeyboardKey.brightnessUp*/get brightnessUp() {
      return C469 || CT.C469;
    },
    /*keyboard_key.PhysicalKeyboardKey.brightnessDown*/get brightnessDown() {
      return C470 || CT.C470;
    },
    /*keyboard_key.PhysicalKeyboardKey.brightnessToggle*/get brightnessToggle() {
      return C611 || CT.C611;
    },
    /*keyboard_key.PhysicalKeyboardKey.brightnessMinimum*/get brightnessMinimum() {
      return C612 || CT.C612;
    },
    /*keyboard_key.PhysicalKeyboardKey.brightnessMaximum*/get brightnessMaximum() {
      return C613 || CT.C613;
    },
    /*keyboard_key.PhysicalKeyboardKey.brightnessAuto*/get brightnessAuto() {
      return C614 || CT.C614;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaLast*/get mediaLast() {
      return C615 || CT.C615;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchPhone*/get launchPhone() {
      return C616 || CT.C616;
    },
    /*keyboard_key.PhysicalKeyboardKey.programGuide*/get programGuide() {
      return C617 || CT.C617;
    },
    /*keyboard_key.PhysicalKeyboardKey.exit*/get exit() {
      return C471 || CT.C471;
    },
    /*keyboard_key.PhysicalKeyboardKey.channelUp*/get channelUp() {
      return C472 || CT.C472;
    },
    /*keyboard_key.PhysicalKeyboardKey.channelDown*/get channelDown() {
      return C473 || CT.C473;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaPlay*/get mediaPlay() {
      return C474 || CT.C474;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaRecord*/get mediaRecord() {
      return C475 || CT.C475;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaFastForward*/get mediaFastForward() {
      return C476 || CT.C476;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaRewind*/get mediaRewind() {
      return C477 || CT.C477;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaTrackNext*/get mediaTrackNext() {
      return C478 || CT.C478;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaTrackPrevious*/get mediaTrackPrevious() {
      return C479 || CT.C479;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaStop*/get mediaStop() {
      return C480 || CT.C480;
    },
    /*keyboard_key.PhysicalKeyboardKey.eject*/get eject() {
      return C481 || CT.C481;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaPlayPause*/get mediaPlayPause() {
      return C482 || CT.C482;
    },
    /*keyboard_key.PhysicalKeyboardKey.speechInputToggle*/get speechInputToggle() {
      return C618 || CT.C618;
    },
    /*keyboard_key.PhysicalKeyboardKey.bassBoost*/get bassBoost() {
      return C483 || CT.C483;
    },
    /*keyboard_key.PhysicalKeyboardKey.mediaSelect*/get mediaSelect() {
      return C619 || CT.C619;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchWordProcessor*/get launchWordProcessor() {
      return C620 || CT.C620;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchSpreadsheet*/get launchSpreadsheet() {
      return C621 || CT.C621;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchMail*/get launchMail() {
      return C484 || CT.C484;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchContacts*/get launchContacts() {
      return C485 || CT.C485;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchCalendar*/get launchCalendar() {
      return C486 || CT.C486;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchApp2*/get launchApp2() {
      return C622 || CT.C622;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchApp1*/get launchApp1() {
      return C623 || CT.C623;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchInternetBrowser*/get launchInternetBrowser() {
      return C624 || CT.C624;
    },
    /*keyboard_key.PhysicalKeyboardKey.logOff*/get logOff() {
      return C625 || CT.C625;
    },
    /*keyboard_key.PhysicalKeyboardKey.lockScreen*/get lockScreen() {
      return C626 || CT.C626;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchControlPanel*/get launchControlPanel() {
      return C627 || CT.C627;
    },
    /*keyboard_key.PhysicalKeyboardKey.selectTask*/get selectTask() {
      return C628 || CT.C628;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchDocuments*/get launchDocuments() {
      return C629 || CT.C629;
    },
    /*keyboard_key.PhysicalKeyboardKey.spellCheck*/get spellCheck() {
      return C630 || CT.C630;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchKeyboardLayout*/get launchKeyboardLayout() {
      return C631 || CT.C631;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchScreenSaver*/get launchScreenSaver() {
      return C632 || CT.C632;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchAssistant*/get launchAssistant() {
      return C633 || CT.C633;
    },
    /*keyboard_key.PhysicalKeyboardKey.launchAudioBrowser*/get launchAudioBrowser() {
      return C634 || CT.C634;
    },
    /*keyboard_key.PhysicalKeyboardKey.newKey*/get newKey() {
      return C487 || CT.C487;
    },
    /*keyboard_key.PhysicalKeyboardKey.close*/get close() {
      return C488 || CT.C488;
    },
    /*keyboard_key.PhysicalKeyboardKey.save*/get save() {
      return C635 || CT.C635;
    },
    /*keyboard_key.PhysicalKeyboardKey.print*/get print() {
      return C489 || CT.C489;
    },
    /*keyboard_key.PhysicalKeyboardKey.browserSearch*/get browserSearch() {
      return C490 || CT.C490;
    },
    /*keyboard_key.PhysicalKeyboardKey.browserHome*/get browserHome() {
      return C636 || CT.C636;
    },
    /*keyboard_key.PhysicalKeyboardKey.browserBack*/get browserBack() {
      return C637 || CT.C637;
    },
    /*keyboard_key.PhysicalKeyboardKey.browserForward*/get browserForward() {
      return C491 || CT.C491;
    },
    /*keyboard_key.PhysicalKeyboardKey.browserStop*/get browserStop() {
      return C638 || CT.C638;
    },
    /*keyboard_key.PhysicalKeyboardKey.browserRefresh*/get browserRefresh() {
      return C639 || CT.C639;
    },
    /*keyboard_key.PhysicalKeyboardKey.browserFavorites*/get browserFavorites() {
      return C492 || CT.C492;
    },
    /*keyboard_key.PhysicalKeyboardKey.zoomIn*/get zoomIn() {
      return C640 || CT.C640;
    },
    /*keyboard_key.PhysicalKeyboardKey.zoomOut*/get zoomOut() {
      return C641 || CT.C641;
    },
    /*keyboard_key.PhysicalKeyboardKey.zoomToggle*/get zoomToggle() {
      return C642 || CT.C642;
    },
    /*keyboard_key.PhysicalKeyboardKey.redo*/get redo() {
      return C493 || CT.C493;
    },
    /*keyboard_key.PhysicalKeyboardKey.mailReply*/get mailReply() {
      return C643 || CT.C643;
    },
    /*keyboard_key.PhysicalKeyboardKey.mailForward*/get mailForward() {
      return C644 || CT.C644;
    },
    /*keyboard_key.PhysicalKeyboardKey.mailSend*/get mailSend() {
      return C645 || CT.C645;
    },
    /*keyboard_key.PhysicalKeyboardKey.showAllWindows*/get showAllWindows() {
      return C646 || CT.C646;
    },
    /*keyboard_key.PhysicalKeyboardKey._knownPhysicalKeys*/get _knownPhysicalKeys() {
      return C580 || CT.C580;
    }
  });
  const _isLeftRightModifierPressed$ = dart.privateName(raw_keyboard_macos, "_isLeftRightModifierPressed");
  raw_keyboard_macos.RawKeyEventDataMacOs = class RawKeyEventDataMacOs extends raw_keyboard.RawKeyEventData {
    get characters() {
      return this[characters$];
    }
    set characters(value) {
      super.characters = value;
    }
    get charactersIgnoringModifiers() {
      return this[charactersIgnoringModifiers$];
    }
    set charactersIgnoringModifiers(value) {
      super.charactersIgnoringModifiers = value;
    }
    get keyCode() {
      return this[keyCode$0];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get modifiers() {
      return this[modifiers$1];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    get keyLabel() {
      return this.charactersIgnoringModifiers[$isEmpty] ? null : this.charactersIgnoringModifiers;
    }
    get physicalKey() {
      let t16;
      t16 = keyboard_maps.kMacOsToPhysicalKey[$_get](this.keyCode);
      return t16 == null ? keyboard_key.PhysicalKeyboardKey.none : t16;
    }
    get logicalKey() {
      let t16, t16$;
      let numPadKey = keyboard_maps.kMacOsNumPadMap[$_get](this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      if (this.keyLabel != null && !dart.test(keyboard_key.LogicalKeyboardKey.isControlCharacter(this.keyLabel))) {
        if (!(this.charactersIgnoringModifiers.length <= 2)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 83, 14, "charactersIgnoringModifiers.length <= 2");
        let codeUnit = this.charactersIgnoringModifiers[$codeUnitAt](0);
        if (this.charactersIgnoringModifiers.length === 2) {
          let secondCode = this.charactersIgnoringModifiers[$codeUnitAt](1);
          codeUnit = (codeUnit << 16 | secondCode) >>> 0;
        }
        let keyId = (0 | (codeUnit & 4294967295.0) >>> 0) >>> 0;
        t16 = keyboard_key.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t16 == null ? new keyboard_key.LogicalKeyboardKey.new(keyId, {keyLabel: this.keyLabel, debugName: false ? null : "Key " + this.keyLabel[$toUpperCase]()}) : t16;
      }
      if (!dart.equals(this.physicalKey, keyboard_key.PhysicalKeyboardKey.none)) {
        let keyId = (dart.notNull(this.physicalKey.usbHidUsage) | 4294967296.0) >>> 0;
        t16$ = keyboard_key.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t16$ == null ? new keyboard_key.LogicalKeyboardKey.new(keyId, {keyLabel: this.physicalKey.debugName, debugName: this.physicalKey.debugName}) : t16$;
      }
      return new keyboard_key.LogicalKeyboardKey.new((21474836480.0 | dart.notNull(this.keyCode) | 1099511627776.0) >>> 0, {debugName: false ? null : "Unknown macOS key code " + dart.str(this.keyCode)});
    }
    [_isLeftRightModifierPressed$](side, anyMask, leftMask, rightMask) {
      if ((dart.notNull(this.modifiers) & dart.notNull(anyMask)) === 0) {
        return false;
      }
      switch (side) {
        case C161 || CT.C161:
        {
          return true;
        }
        case C162 || CT.C162:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(leftMask)) !== 0 && (dart.notNull(this.modifiers) & dart.notNull(rightMask)) !== 0;
        }
        case C163 || CT.C163:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(leftMask)) !== 0;
        }
        case C164 || CT.C164:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(rightMask)) !== 0;
        }
      }
      return false;
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C161 || CT.C161;
      let independentModifier = (dart.notNull(this.modifiers) & 4294901760.0) >>> 0;
      switch (key) {
        case C165 || CT.C165:
        {
          return this[_isLeftRightModifierPressed$](side, (independentModifier & 262144) >>> 0, 1, 8192);
        }
        case C166 || CT.C166:
        {
          return this[_isLeftRightModifierPressed$](side, (independentModifier & 131072) >>> 0, 2, 4);
        }
        case C167 || CT.C167:
        {
          return this[_isLeftRightModifierPressed$](side, (independentModifier & 524288) >>> 0, 32, 64);
        }
        case C168 || CT.C168:
        {
          return this[_isLeftRightModifierPressed$](side, (independentModifier & 1048576) >>> 0, 8, 16);
        }
        case C169 || CT.C169:
        {
          return (independentModifier & 65536) !== 0;
        }
        case C170 || CT.C170:
        {
          return (independentModifier & 2097152) !== 0;
        }
        case C172 || CT.C172:
        {
          return (independentModifier & 8388608) !== 0;
        }
        case C173 || CT.C173:
        case C171 || CT.C171:
        {
          return false;
        }
      }
      return false;
    }
    getModifierSide(key) {
      const findSide = (leftMask, rightMask) => {
        let combinedMask = (dart.notNull(leftMask) | dart.notNull(rightMask)) >>> 0;
        let combined = (dart.notNull(this.modifiers) & combinedMask) >>> 0;
        if (combined === leftMask) {
          return raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask) {
          return raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, intAndintToKeyboardSide());
      switch (key) {
        case C165 || CT.C165:
        {
          return findSide(1, 8192);
        }
        case C166 || CT.C166:
        {
          return findSide(2, 4);
        }
        case C167 || CT.C167:
        {
          return findSide(32, 64);
        }
        case C168 || CT.C168:
        {
          return findSide(8, 16);
        }
        case C169 || CT.C169:
        case C170 || CT.C170:
        case C171 || CT.C171:
        case C172 || CT.C172:
        case C173 || CT.C173:
        {
          return raw_keyboard.KeyboardSide.all;
        }
      }
      if (!false) dart.assertFailed("Not handling " + dart.str(key) + " type properly.", "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 197, 12, "false");
      return null;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(keyLabel: " + dart.str(this.keyLabel) + ", keyCode: " + dart.str(this.keyCode) + ", characters: " + dart.str(this.characters) + "," + " unmodifiedCharacters: " + dart.str(this.charactersIgnoringModifiers) + ", modifiers: " + dart.str(this.modifiers) + ", " + "modifiers down: " + dart.str(this.modifiersPressed) + ")";
    }
  };
  (raw_keyboard_macos.RawKeyEventDataMacOs.new = function(opts) {
    let characters = opts && 'characters' in opts ? opts.characters : "";
    let charactersIgnoringModifiers = opts && 'charactersIgnoringModifiers' in opts ? opts.charactersIgnoringModifiers : "";
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    this[characters$] = characters;
    this[charactersIgnoringModifiers$] = charactersIgnoringModifiers;
    this[keyCode$0] = keyCode;
    this[modifiers$1] = modifiers;
    if (!(characters != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 30, 15, "characters != null");
    if (!(charactersIgnoringModifiers != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 31, 15, "charactersIgnoringModifiers != null");
    if (!(keyCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 32, 15, "keyCode != null");
    if (!(modifiers != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 33, 15, "modifiers != null");
    raw_keyboard_macos.RawKeyEventDataMacOs.__proto__.new.call(this);
    ;
  }).prototype = raw_keyboard_macos.RawKeyEventDataMacOs.prototype;
  dart.addTypeTests(raw_keyboard_macos.RawKeyEventDataMacOs);
  const characters$ = Symbol("RawKeyEventDataMacOs.characters");
  const charactersIgnoringModifiers$ = Symbol("RawKeyEventDataMacOs.charactersIgnoringModifiers");
  const keyCode$0 = Symbol("RawKeyEventDataMacOs.keyCode");
  const modifiers$1 = Symbol("RawKeyEventDataMacOs.modifiers");
  dart.setMethodSignature(raw_keyboard_macos.RawKeyEventDataMacOs, () => ({
    __proto__: dart.getMethods(raw_keyboard_macos.RawKeyEventDataMacOs.__proto__),
    [_isLeftRightModifierPressed$]: dart.fnType(core.bool, [raw_keyboard.KeyboardSide, core.int, core.int, core.int]),
    isModifierPressed: dart.fnType(core.bool, [raw_keyboard.ModifierKey], {side: raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(raw_keyboard.KeyboardSide, [raw_keyboard.ModifierKey])
  }));
  dart.setGetterSignature(raw_keyboard_macos.RawKeyEventDataMacOs, () => ({
    __proto__: dart.getGetters(raw_keyboard_macos.RawKeyEventDataMacOs.__proto__),
    keyLabel: core.String,
    physicalKey: keyboard_key.PhysicalKeyboardKey,
    logicalKey: keyboard_key.LogicalKeyboardKey
  }));
  dart.setLibraryUri(raw_keyboard_macos.RawKeyEventDataMacOs, "package:flutter_web/src/services/raw_keyboard_macos.dart");
  dart.setFieldSignature(raw_keyboard_macos.RawKeyEventDataMacOs, () => ({
    __proto__: dart.getFields(raw_keyboard_macos.RawKeyEventDataMacOs.__proto__),
    characters: dart.finalFieldType(core.String),
    charactersIgnoringModifiers: dart.finalFieldType(core.String),
    keyCode: dart.finalFieldType(core.int),
    modifiers: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(raw_keyboard_macos.RawKeyEventDataMacOs, ['toString']);
  dart.defineLazy(raw_keyboard_macos.RawKeyEventDataMacOs, {
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierCapsLock*/get modifierCapsLock() {
      return 65536;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierShift*/get modifierShift() {
      return 131072;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftShift*/get modifierLeftShift() {
      return 2;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightShift*/get modifierRightShift() {
      return 4;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierControl*/get modifierControl() {
      return 262144;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftControl*/get modifierLeftControl() {
      return 1;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightControl*/get modifierRightControl() {
      return 8192;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierOption*/get modifierOption() {
      return 524288;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftOption*/get modifierLeftOption() {
      return 32;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightOption*/get modifierRightOption() {
      return 64;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierCommand*/get modifierCommand() {
      return 1048576;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftCommand*/get modifierLeftCommand() {
      return 8;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightCommand*/get modifierRightCommand() {
      return 16;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierNumericPad*/get modifierNumericPad() {
      return 2097152;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierHelp*/get modifierHelp() {
      return 4194304;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.modifierFunction*/get modifierFunction() {
      return 8388608;
    },
    /*raw_keyboard_macos.RawKeyEventDataMacOs.deviceIndependentMask*/get deviceIndependentMask() {
      return 4294901760.0;
    }
  });
  const _isLeftRightModifierPressed$0 = dart.privateName(raw_keyboard_android, "_isLeftRightModifierPressed");
  raw_keyboard_android.RawKeyEventDataAndroid = class RawKeyEventDataAndroid extends raw_keyboard.RawKeyEventData {
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get codePoint() {
      return this[codePoint$1];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get plainCodePoint() {
      return this[plainCodePoint$];
    }
    set plainCodePoint(value) {
      super.plainCodePoint = value;
    }
    get keyCode() {
      return this[keyCode$1];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get scanCode() {
      return this[scanCode$0];
    }
    set scanCode(value) {
      super.scanCode = value;
    }
    get metaState() {
      return this[metaState$];
    }
    set metaState(value) {
      super.metaState = value;
    }
    get keyLabel() {
      return this.plainCodePoint === 0 ? null : core.String.fromCharCode((dart.notNull(this.plainCodePoint) & 2147483647) >>> 0);
    }
    get physicalKey() {
      let t16;
      t16 = keyboard_maps.kAndroidToPhysicalKey[$_get](this.scanCode);
      return t16 == null ? keyboard_key.PhysicalKeyboardKey.none : t16;
    }
    get logicalKey() {
      let t16;
      let numPadKey = keyboard_maps.kAndroidNumPadMap[$_get](this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      if (this.keyLabel != null && this.keyLabel[$isNotEmpty] && !dart.test(keyboard_key.LogicalKeyboardKey.isControlCharacter(this.keyLabel))) {
        let combinedCodePoint = (dart.notNull(this.plainCodePoint) & 2147483647) >>> 0;
        let keyId = (0 | (combinedCodePoint & 4294967295.0) >>> 0) >>> 0;
        t16 = keyboard_key.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t16 == null ? new keyboard_key.LogicalKeyboardKey.new(keyId, {keyLabel: this.keyLabel, debugName: false ? null : "Key " + this.keyLabel[$toUpperCase]()}) : t16;
      }
      let newKey = keyboard_maps.kAndroidToLogicalKey[$_get](this.keyCode);
      if (newKey != null) {
        return newKey;
      }
      newKey == null ? newKey = new keyboard_key.LogicalKeyboardKey.new((8589934592.0 | dart.notNull(this.keyCode) | 1099511627776.0) >>> 0, {debugName: false ? null : "Unknown Android key code " + dart.str(this.keyCode)}) : null;
      return newKey;
    }
    [_isLeftRightModifierPressed$0](side, anyMask, leftMask, rightMask) {
      if ((dart.notNull(this.metaState) & dart.notNull(anyMask)) === 0) {
        return false;
      }
      switch (side) {
        case C161 || CT.C161:
        {
          return true;
        }
        case C162 || CT.C162:
        {
          return (dart.notNull(this.metaState) & dart.notNull(leftMask)) !== 0 && (dart.notNull(this.metaState) & dart.notNull(rightMask)) !== 0;
        }
        case C163 || CT.C163:
        {
          return (dart.notNull(this.metaState) & dart.notNull(leftMask)) !== 0;
        }
        case C164 || CT.C164:
        {
          return (dart.notNull(this.metaState) & dart.notNull(rightMask)) !== 0;
        }
      }
      return false;
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : C161 || CT.C161;
      if (!(side != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 175, 12, "side != null");
      switch (key) {
        case C165 || CT.C165:
        {
          return this[_isLeftRightModifierPressed$0](side, 4096, 8192, 16384);
        }
        case C166 || CT.C166:
        {
          return this[_isLeftRightModifierPressed$0](side, 1, 64, 128);
        }
        case C167 || CT.C167:
        {
          return this[_isLeftRightModifierPressed$0](side, 2, 16, 32);
        }
        case C168 || CT.C168:
        {
          return this[_isLeftRightModifierPressed$0](side, 65536, 131072, 262144);
        }
        case C169 || CT.C169:
        {
          return (dart.notNull(this.metaState) & 1048576) !== 0;
        }
        case C170 || CT.C170:
        {
          return (dart.notNull(this.metaState) & 2097152) !== 0;
        }
        case C171 || CT.C171:
        {
          return (dart.notNull(this.metaState) & 4194304) !== 0;
        }
        case C172 || CT.C172:
        {
          return (dart.notNull(this.metaState) & 8) !== 0;
        }
        case C173 || CT.C173:
        {
          return (dart.notNull(this.metaState) & 4) !== 0;
        }
      }
      return false;
    }
    getModifierSide(key) {
      const findSide = (leftMask, rightMask) => {
        let combinedMask = (dart.notNull(leftMask) | dart.notNull(rightMask)) >>> 0;
        let combined = (dart.notNull(this.metaState) & combinedMask) >>> 0;
        if (combined === leftMask) {
          return raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask) {
          return raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, intAndintToKeyboardSide());
      switch (key) {
        case C165 || CT.C165:
        {
          return findSide(8192, 16384);
        }
        case C166 || CT.C166:
        {
          return findSide(64, 128);
        }
        case C167 || CT.C167:
        {
          return findSide(16, 32);
        }
        case C168 || CT.C168:
        {
          return findSide(131072, 262144);
        }
        case C169 || CT.C169:
        case C170 || CT.C170:
        case C171 || CT.C171:
        case C172 || CT.C172:
        case C173 || CT.C173:
        {
          return raw_keyboard.KeyboardSide.all;
        }
      }
      if (!false) dart.assertFailed("Not handling " + dart.str(key) + " type properly.", "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 231, 12, "false");
      return null;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(keyLabel: " + dart.str(this.keyLabel) + " flags: " + dart.str(this.flags) + ", codePoint: " + dart.str(this.codePoint) + ", " + "keyCode: " + dart.str(this.keyCode) + ", scanCode: " + dart.str(this.scanCode) + ", metaState: " + dart.str(this.metaState) + ", " + "modifiers down: " + dart.str(this.modifiersPressed) + ")";
    }
  };
  (raw_keyboard_android.RawKeyEventDataAndroid.new = function(opts) {
    let flags = opts && 'flags' in opts ? opts.flags : 0;
    let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
    let plainCodePoint = opts && 'plainCodePoint' in opts ? opts.plainCodePoint : 0;
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
    let metaState = opts && 'metaState' in opts ? opts.metaState : 0;
    this[flags$] = flags;
    this[codePoint$1] = codePoint;
    this[plainCodePoint$] = plainCodePoint;
    this[keyCode$1] = keyCode;
    this[scanCode$0] = scanCode;
    this[metaState$] = metaState;
    if (!(flags != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 37, 15, "flags != null");
    if (!(codePoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 38, 15, "codePoint != null");
    if (!(keyCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 39, 15, "keyCode != null");
    if (!(scanCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 40, 15, "scanCode != null");
    if (!(metaState != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 41, 15, "metaState != null");
    raw_keyboard_android.RawKeyEventDataAndroid.__proto__.new.call(this);
    ;
  }).prototype = raw_keyboard_android.RawKeyEventDataAndroid.prototype;
  dart.addTypeTests(raw_keyboard_android.RawKeyEventDataAndroid);
  const flags$ = Symbol("RawKeyEventDataAndroid.flags");
  const codePoint$1 = Symbol("RawKeyEventDataAndroid.codePoint");
  const plainCodePoint$ = Symbol("RawKeyEventDataAndroid.plainCodePoint");
  const keyCode$1 = Symbol("RawKeyEventDataAndroid.keyCode");
  const scanCode$0 = Symbol("RawKeyEventDataAndroid.scanCode");
  const metaState$ = Symbol("RawKeyEventDataAndroid.metaState");
  dart.setMethodSignature(raw_keyboard_android.RawKeyEventDataAndroid, () => ({
    __proto__: dart.getMethods(raw_keyboard_android.RawKeyEventDataAndroid.__proto__),
    [_isLeftRightModifierPressed$0]: dart.fnType(core.bool, [raw_keyboard.KeyboardSide, core.int, core.int, core.int]),
    isModifierPressed: dart.fnType(core.bool, [raw_keyboard.ModifierKey], {side: raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(raw_keyboard.KeyboardSide, [raw_keyboard.ModifierKey])
  }));
  dart.setGetterSignature(raw_keyboard_android.RawKeyEventDataAndroid, () => ({
    __proto__: dart.getGetters(raw_keyboard_android.RawKeyEventDataAndroid.__proto__),
    keyLabel: core.String,
    physicalKey: keyboard_key.PhysicalKeyboardKey,
    logicalKey: keyboard_key.LogicalKeyboardKey
  }));
  dart.setLibraryUri(raw_keyboard_android.RawKeyEventDataAndroid, "package:flutter_web/src/services/raw_keyboard_android.dart");
  dart.setFieldSignature(raw_keyboard_android.RawKeyEventDataAndroid, () => ({
    __proto__: dart.getFields(raw_keyboard_android.RawKeyEventDataAndroid.__proto__),
    flags: dart.finalFieldType(core.int),
    codePoint: dart.finalFieldType(core.int),
    plainCodePoint: dart.finalFieldType(core.int),
    keyCode: dart.finalFieldType(core.int),
    scanCode: dart.finalFieldType(core.int),
    metaState: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(raw_keyboard_android.RawKeyEventDataAndroid, ['toString']);
  dart.defineLazy(raw_keyboard_android.RawKeyEventDataAndroid, {
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierNone*/get modifierNone() {
      return 0;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierAlt*/get modifierAlt() {
      return 2;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftAlt*/get modifierLeftAlt() {
      return 16;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierRightAlt*/get modifierRightAlt() {
      return 32;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierShift*/get modifierShift() {
      return 1;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftShift*/get modifierLeftShift() {
      return 64;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierRightShift*/get modifierRightShift() {
      return 128;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierSym*/get modifierSym() {
      return 4;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierFunction*/get modifierFunction() {
      return 8;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierControl*/get modifierControl() {
      return 4096;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftControl*/get modifierLeftControl() {
      return 8192;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierRightControl*/get modifierRightControl() {
      return 16384;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierMeta*/get modifierMeta() {
      return 65536;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftMeta*/get modifierLeftMeta() {
      return 131072;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierRightMeta*/get modifierRightMeta() {
      return 262144;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierCapsLock*/get modifierCapsLock() {
      return 1048576;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierNumLock*/get modifierNumLock() {
      return 2097152;
    },
    /*raw_keyboard_android.RawKeyEventDataAndroid.modifierScrollLock*/get modifierScrollLock() {
      return 4194304;
    }
  });
  dart.defineLazy(raw_keyboard_android, {
    /*raw_keyboard_android._kCombiningCharacterMask*/get _kCombiningCharacterMask() {
      return 2147483647;
    }
  });
  drag$.Drag = class Drag extends core.Object {
    update(details) {
    }
    end(details) {
    }
    cancel() {
    }
  };
  (drag$.Drag.new = function() {
    ;
  }).prototype = drag$.Drag.prototype;
  dart.addTypeTests(drag$.Drag);
  dart.setMethodSignature(drag$.Drag, () => ({
    __proto__: dart.getMethods(drag$.Drag.__proto__),
    update: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    end: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    cancel: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(drag$.Drag, "package:flutter_web/src/gestures/drag.dart");
  drag_details.DragDownDetails = class DragDownDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$0];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.globalPosition) + ")";
    }
  };
  (drag_details.DragDownDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[globalPosition$] = globalPosition;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 26, 15, "globalPosition != null");
    this[localPosition$0] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = drag_details.DragDownDetails.prototype;
  dart.addTypeTests(drag_details.DragDownDetails);
  const globalPosition$ = Symbol("DragDownDetails.globalPosition");
  const localPosition$0 = Symbol("DragDownDetails.localPosition");
  dart.setLibraryUri(drag_details.DragDownDetails, "package:flutter_web/src/gestures/drag_details.dart");
  dart.setFieldSignature(drag_details.DragDownDetails, () => ({
    __proto__: dart.getFields(drag_details.DragDownDetails.__proto__),
    globalPosition: dart.finalFieldType(ui.Offset),
    localPosition: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(drag_details.DragDownDetails, ['toString']);
  drag_details.DragStartDetails = class DragStartDetails extends core.Object {
    get sourceTimeStamp() {
      return this[sourceTimeStamp$];
    }
    set sourceTimeStamp(value) {
      super.sourceTimeStamp = value;
    }
    get globalPosition() {
      return this[globalPosition$0];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$1];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.globalPosition) + ")";
    }
  };
  (drag_details.DragStartDetails.new = function(opts) {
    let t16;
    let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[sourceTimeStamp$] = sourceTimeStamp;
    this[globalPosition$0] = globalPosition;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 73, 15, "globalPosition != null");
    this[localPosition$1] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = drag_details.DragStartDetails.prototype;
  dart.addTypeTests(drag_details.DragStartDetails);
  const sourceTimeStamp$ = Symbol("DragStartDetails.sourceTimeStamp");
  const globalPosition$0 = Symbol("DragStartDetails.globalPosition");
  const localPosition$1 = Symbol("DragStartDetails.localPosition");
  dart.setLibraryUri(drag_details.DragStartDetails, "package:flutter_web/src/gestures/drag_details.dart");
  dart.setFieldSignature(drag_details.DragStartDetails, () => ({
    __proto__: dart.getFields(drag_details.DragStartDetails.__proto__),
    sourceTimeStamp: dart.finalFieldType(core.Duration),
    globalPosition: dart.finalFieldType(ui.Offset),
    localPosition: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(drag_details.DragStartDetails, ['toString']);
  drag_details.DragUpdateDetails = class DragUpdateDetails extends core.Object {
    get sourceTimeStamp() {
      return this[sourceTimeStamp$0];
    }
    set sourceTimeStamp(value) {
      super.sourceTimeStamp = value;
    }
    get delta() {
      return this[delta$0];
    }
    set delta(value) {
      super.delta = value;
    }
    get primaryDelta() {
      return this[primaryDelta$];
    }
    set primaryDelta(value) {
      super.primaryDelta = value;
    }
    get globalPosition() {
      return this[globalPosition$1];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$2];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.delta) + ")";
    }
  };
  (drag_details.DragUpdateDetails.new = function(opts) {
    let t16;
    let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
    let delta = opts && 'delta' in opts ? opts.delta : C130 || CT.C130;
    let primaryDelta = opts && 'primaryDelta' in opts ? opts.primaryDelta : null;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[sourceTimeStamp$0] = sourceTimeStamp;
    this[delta$0] = delta;
    this[primaryDelta$] = primaryDelta;
    this[globalPosition$1] = globalPosition;
    if (!(delta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 137, 15, "delta != null");
    if (!(primaryDelta == null || primaryDelta == delta.dx && delta.dy === 0.0 || primaryDelta == delta.dy && delta.dx === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 138, 15, "primaryDelta == null\n           || (primaryDelta == delta.dx && delta.dy == 0.0)\n           || (primaryDelta == delta.dy && delta.dx == 0.0)");
    this[localPosition$2] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = drag_details.DragUpdateDetails.prototype;
  dart.addTypeTests(drag_details.DragUpdateDetails);
  const sourceTimeStamp$0 = Symbol("DragUpdateDetails.sourceTimeStamp");
  const delta$0 = Symbol("DragUpdateDetails.delta");
  const primaryDelta$ = Symbol("DragUpdateDetails.primaryDelta");
  const globalPosition$1 = Symbol("DragUpdateDetails.globalPosition");
  const localPosition$2 = Symbol("DragUpdateDetails.localPosition");
  dart.setLibraryUri(drag_details.DragUpdateDetails, "package:flutter_web/src/gestures/drag_details.dart");
  dart.setFieldSignature(drag_details.DragUpdateDetails, () => ({
    __proto__: dart.getFields(drag_details.DragUpdateDetails.__proto__),
    sourceTimeStamp: dart.finalFieldType(core.Duration),
    delta: dart.finalFieldType(ui.Offset),
    primaryDelta: dart.finalFieldType(core.double),
    globalPosition: dart.finalFieldType(ui.Offset),
    localPosition: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(drag_details.DragUpdateDetails, ['toString']);
  let C652;
  drag_details.DragEndDetails = class DragEndDetails extends core.Object {
    get velocity() {
      return this[velocity$];
    }
    set velocity(value) {
      super.velocity = value;
    }
    get primaryVelocity() {
      return this[primaryVelocity$];
    }
    set primaryVelocity(value) {
      super.primaryVelocity = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.velocity) + ")";
    }
  };
  (drag_details.DragEndDetails.new = function(opts) {
    let velocity = opts && 'velocity' in opts ? opts.velocity : C652 || CT.C652;
    let primaryVelocity = opts && 'primaryVelocity' in opts ? opts.primaryVelocity : null;
    this[velocity$] = velocity;
    this[primaryVelocity$] = primaryVelocity;
    if (!(velocity != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 214, 15, "velocity != null");
    if (!(primaryVelocity == null || primaryVelocity == velocity.pixelsPerSecond.dx || primaryVelocity == velocity.pixelsPerSecond.dy)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 215, 15, "primaryVelocity == null\n           || primaryVelocity == velocity.pixelsPerSecond.dx\n           || primaryVelocity == velocity.pixelsPerSecond.dy");
    ;
  }).prototype = drag_details.DragEndDetails.prototype;
  dart.addTypeTests(drag_details.DragEndDetails);
  const velocity$ = Symbol("DragEndDetails.velocity");
  const primaryVelocity$ = Symbol("DragEndDetails.primaryVelocity");
  dart.setLibraryUri(drag_details.DragEndDetails, "package:flutter_web/src/gestures/drag_details.dart");
  dart.setFieldSignature(drag_details.DragEndDetails, () => ({
    __proto__: dart.getFields(drag_details.DragEndDetails.__proto__),
    velocity: dart.finalFieldType(velocity_tracker.Velocity),
    primaryVelocity: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(drag_details.DragEndDetails, ['toString']);
  velocity_tracker.Velocity = class Velocity extends core.Object {
    get pixelsPerSecond() {
      return this[pixelsPerSecond$];
    }
    set pixelsPerSecond(value) {
      super.pixelsPerSecond = value;
    }
    _negate() {
      return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond._negate()});
    }
    ['-'](other) {
      return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['-'](other.pixelsPerSecond)});
    }
    ['+'](other) {
      return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['+'](other.pixelsPerSecond)});
    }
    clampMagnitude(minValue, maxValue) {
      if (!(minValue != null && dart.notNull(minValue) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 55, 12, "minValue != null && minValue >= 0.0");
      if (!(maxValue != null && dart.notNull(maxValue) >= 0.0 && dart.notNull(maxValue) >= dart.notNull(minValue))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 56, 12, "maxValue != null && maxValue >= 0.0 && maxValue >= minValue");
      let valueSquared = this.pixelsPerSecond.distanceSquared;
      if (dart.notNull(valueSquared) > dart.notNull(maxValue) * dart.notNull(maxValue)) return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['/'](this.pixelsPerSecond.distance)['*'](maxValue)});
      if (dart.notNull(valueSquared) < dart.notNull(minValue) * dart.notNull(minValue)) return new velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['/'](this.pixelsPerSecond.distance)['*'](minValue)});
      return this;
    }
    _equals(other) {
      if (other == null) return false;
      if (!velocity_tracker.Velocity.is(other)) return false;
      let typedOther = velocity_tracker.Velocity._check(other);
      return dart.equals(this.pixelsPerSecond, typedOther.pixelsPerSecond);
    }
    get hashCode() {
      return dart.hashCode(this.pixelsPerSecond);
    }
    toString() {
      return "Velocity(" + this.pixelsPerSecond.dx[$toStringAsFixed](1) + ", " + this.pixelsPerSecond.dy[$toStringAsFixed](1) + ")";
    }
  };
  (velocity_tracker.Velocity.new = function(opts) {
    let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
    this[pixelsPerSecond$] = pixelsPerSecond;
    if (!(pixelsPerSecond != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 21, 15, "pixelsPerSecond != null");
    ;
  }).prototype = velocity_tracker.Velocity.prototype;
  dart.addTypeTests(velocity_tracker.Velocity);
  const pixelsPerSecond$ = Symbol("Velocity.pixelsPerSecond");
  dart.setMethodSignature(velocity_tracker.Velocity, () => ({
    __proto__: dart.getMethods(velocity_tracker.Velocity.__proto__),
    _negate: dart.fnType(velocity_tracker.Velocity, []),
    '-': dart.fnType(velocity_tracker.Velocity, [velocity_tracker.Velocity]),
    '+': dart.fnType(velocity_tracker.Velocity, [velocity_tracker.Velocity]),
    clampMagnitude: dart.fnType(velocity_tracker.Velocity, [core.double, core.double])
  }));
  dart.setLibraryUri(velocity_tracker.Velocity, "package:flutter_web/src/gestures/velocity_tracker.dart");
  dart.setFieldSignature(velocity_tracker.Velocity, () => ({
    __proto__: dart.getFields(velocity_tracker.Velocity.__proto__),
    pixelsPerSecond: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(velocity_tracker.Velocity, ['_equals', 'toString']);
  dart.defineExtensionAccessors(velocity_tracker.Velocity, ['hashCode']);
  dart.defineLazy(velocity_tracker.Velocity, {
    /*velocity_tracker.Velocity.zero*/get zero() {
      return C652 || CT.C652;
    }
  });
  velocity_tracker.VelocityEstimate = class VelocityEstimate extends core.Object {
    get pixelsPerSecond() {
      return this[pixelsPerSecond$0];
    }
    set pixelsPerSecond(value) {
      super.pixelsPerSecond = value;
    }
    get confidence() {
      return this[confidence$];
    }
    set confidence(value) {
      super.confidence = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    toString() {
      return "VelocityEstimate(" + this.pixelsPerSecond.dx[$toStringAsFixed](1) + ", " + this.pixelsPerSecond.dy[$toStringAsFixed](1) + "; offset: " + dart.str(this.offset) + ", duration: " + dart.str(this.duration) + ", confidence: " + this.confidence[$toStringAsFixed](1) + ")";
    }
  };
  (velocity_tracker.VelocityEstimate.new = function(opts) {
    let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
    let confidence = opts && 'confidence' in opts ? opts.confidence : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[pixelsPerSecond$0] = pixelsPerSecond;
    this[confidence$] = confidence;
    this[duration$] = duration;
    this[offset$] = offset;
    if (!(pixelsPerSecond != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 102, 15, "pixelsPerSecond != null");
    if (!(confidence != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 103, 15, "confidence != null");
    if (!(duration != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 104, 15, "duration != null");
    if (!(offset != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 105, 15, "offset != null");
    ;
  }).prototype = velocity_tracker.VelocityEstimate.prototype;
  dart.addTypeTests(velocity_tracker.VelocityEstimate);
  const pixelsPerSecond$0 = Symbol("VelocityEstimate.pixelsPerSecond");
  const confidence$ = Symbol("VelocityEstimate.confidence");
  const duration$ = Symbol("VelocityEstimate.duration");
  const offset$ = Symbol("VelocityEstimate.offset");
  dart.setLibraryUri(velocity_tracker.VelocityEstimate, "package:flutter_web/src/gestures/velocity_tracker.dart");
  dart.setFieldSignature(velocity_tracker.VelocityEstimate, () => ({
    __proto__: dart.getFields(velocity_tracker.VelocityEstimate.__proto__),
    pixelsPerSecond: dart.finalFieldType(ui.Offset),
    confidence: dart.finalFieldType(core.double),
    duration: dart.finalFieldType(core.Duration),
    offset: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(velocity_tracker.VelocityEstimate, ['toString']);
  velocity_tracker._PointAtTime = class _PointAtTime extends core.Object {
    toString() {
      return "_PointAtTime(" + dart.str(this.point) + " at " + dart.str(this.time) + ")";
    }
  };
  (velocity_tracker._PointAtTime.new = function(point, time) {
    this.point = point;
    this.time = time;
    if (!(point != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 130, 14, "point != null");
    if (!(time != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 131, 14, "time != null");
    ;
  }).prototype = velocity_tracker._PointAtTime.prototype;
  dart.addTypeTests(velocity_tracker._PointAtTime);
  dart.setLibraryUri(velocity_tracker._PointAtTime, "package:flutter_web/src/gestures/velocity_tracker.dart");
  dart.setFieldSignature(velocity_tracker._PointAtTime, () => ({
    __proto__: dart.getFields(velocity_tracker._PointAtTime.__proto__),
    time: dart.finalFieldType(core.Duration),
    point: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(velocity_tracker._PointAtTime, ['toString']);
  const _samples = dart.privateName(velocity_tracker, "_samples");
  const _index = dart.privateName(velocity_tracker, "_index");
  velocity_tracker.VelocityTracker = class VelocityTracker extends core.Object {
    addPosition(time, position) {
      this[_index] = dart.notNull(this[_index]) + 1;
      if (this[_index] === 20) this[_index] = 0;
      this[_samples][$_set](this[_index], new velocity_tracker._PointAtTime.new(position, time));
    }
    getVelocityEstimate() {
      let x = JSArrayOfdouble().of([]);
      let y = JSArrayOfdouble().of([]);
      let w = JSArrayOfdouble().of([]);
      let time = JSArrayOfdouble().of([]);
      let sampleCount = 0;
      let index = this[_index];
      let newestSample = this[_samples][$_get](index);
      if (newestSample == null) return null;
      let previousSample = newestSample;
      let oldestSample = newestSample;
      do {
        let sample = this[_samples][$_get](index);
        if (sample == null) break;
        let age = newestSample.time['-'](sample.time).inMilliseconds[$toDouble]();
        let delta = sample.time['-'](previousSample.time).inMilliseconds[$abs]()[$toDouble]();
        previousSample = sample;
        if (age > 100 || delta > 40) break;
        oldestSample = sample;
        let position = sample.point;
        x[$add](position.dx);
        y[$add](position.dy);
        w[$add](1.0);
        time[$add](-age);
        index = dart.notNull(index === 0 ? 20 : index) - 1;
        sampleCount = sampleCount + 1;
      } while (sampleCount < 20);
      if (sampleCount >= 3) {
        let xSolver = new lsq_solver.LeastSquaresSolver.new(time, x, w);
        let xFit = xSolver.solve(2);
        if (xFit != null) {
          let ySolver = new lsq_solver.LeastSquaresSolver.new(time, y, w);
          let yFit = ySolver.solve(2);
          if (yFit != null) {
            return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: new ui.Offset.new(dart.notNull(xFit.coefficients[$_get](1)) * 1000, dart.notNull(yFit.coefficients[$_get](1)) * 1000), confidence: dart.notNull(xFit.confidence) * dart.notNull(yFit.confidence), duration: newestSample.time['-'](oldestSample.time), offset: newestSample.point['-'](oldestSample.point)});
          }
        }
      }
      return new velocity_tracker.VelocityEstimate.new({pixelsPerSecond: ui.Offset.zero, confidence: 1.0, duration: newestSample.time['-'](oldestSample.time), offset: newestSample.point['-'](oldestSample.point)});
    }
    getVelocity() {
      let estimate = this.getVelocityEstimate();
      if (estimate == null || dart.equals(estimate.pixelsPerSecond, ui.Offset.zero)) return velocity_tracker.Velocity.zero;
      return new velocity_tracker.Velocity.new({pixelsPerSecond: estimate.pixelsPerSecond});
    }
  };
  (velocity_tracker.VelocityTracker.new = function() {
    this[_samples] = ListOf_PointAtTime().new(20);
    this[_index] = 0;
    ;
  }).prototype = velocity_tracker.VelocityTracker.prototype;
  dart.addTypeTests(velocity_tracker.VelocityTracker);
  dart.setMethodSignature(velocity_tracker.VelocityTracker, () => ({
    __proto__: dart.getMethods(velocity_tracker.VelocityTracker.__proto__),
    addPosition: dart.fnType(dart.void, [core.Duration, ui.Offset]),
    getVelocityEstimate: dart.fnType(velocity_tracker.VelocityEstimate, []),
    getVelocity: dart.fnType(velocity_tracker.Velocity, [])
  }));
  dart.setLibraryUri(velocity_tracker.VelocityTracker, "package:flutter_web/src/gestures/velocity_tracker.dart");
  dart.setFieldSignature(velocity_tracker.VelocityTracker, () => ({
    __proto__: dart.getFields(velocity_tracker.VelocityTracker.__proto__),
    [_samples]: dart.finalFieldType(core.List$(velocity_tracker._PointAtTime)),
    [_index]: dart.fieldType(core.int)
  }));
  dart.defineLazy(velocity_tracker.VelocityTracker, {
    /*velocity_tracker.VelocityTracker._assumePointerMoveStoppedMilliseconds*/get _assumePointerMoveStoppedMilliseconds() {
      return 40;
    },
    /*velocity_tracker.VelocityTracker._historySize*/get _historySize() {
      return 20;
    },
    /*velocity_tracker.VelocityTracker._horizonMilliseconds*/get _horizonMilliseconds() {
      return 100;
    },
    /*velocity_tracker.VelocityTracker._minSampleSize*/get _minSampleSize() {
      return 3;
    }
  });
  const _offset = dart.privateName(lsq_solver, "_offset");
  const _length = dart.privateName(lsq_solver, "_length");
  const _elements = dart.privateName(lsq_solver, "_elements");
  lsq_solver._Vector = class _Vector extends core.Object {
    _get(i) {
      return this[_elements][$_get](dart.notNull(i) + dart.notNull(this[_offset]));
    }
    _set(i, value$) {
      let value = value$;
      this[_elements][$_set](dart.notNull(i) + dart.notNull(this[_offset]), value);
      return value$;
    }
    ['*'](a) {
      let result = 0.0;
      for (let i = 0; i < dart.notNull(this[_length]); i = i + 1)
        result = result + dart.notNull(this._get(i)) * dart.notNull(a._get(i));
      return result;
    }
    norm() {
      return math.sqrt(this['*'](this));
    }
  };
  (lsq_solver._Vector.new = function(size) {
    this[_offset] = 0;
    this[_length] = size;
    this[_elements] = _native_typed_data.NativeFloat64List.new(size);
    ;
  }).prototype = lsq_solver._Vector.prototype;
  (lsq_solver._Vector.fromVOL = function(values, offset, length) {
    this[_offset] = offset;
    this[_length] = length;
    this[_elements] = values;
    ;
  }).prototype = lsq_solver._Vector.prototype;
  dart.addTypeTests(lsq_solver._Vector);
  dart.setMethodSignature(lsq_solver._Vector, () => ({
    __proto__: dart.getMethods(lsq_solver._Vector.__proto__),
    _get: dart.fnType(core.double, [core.int]),
    _set: dart.fnType(dart.void, [core.int, core.double]),
    '*': dart.fnType(core.double, [lsq_solver._Vector]),
    norm: dart.fnType(core.double, [])
  }));
  dart.setLibraryUri(lsq_solver._Vector, "package:flutter_web/src/gestures/lsq_solver.dart");
  dart.setFieldSignature(lsq_solver._Vector, () => ({
    __proto__: dart.getFields(lsq_solver._Vector.__proto__),
    [_offset]: dart.finalFieldType(core.int),
    [_length]: dart.finalFieldType(core.int),
    [_elements]: dart.finalFieldType(core.List$(core.double))
  }));
  const _columns = dart.privateName(lsq_solver, "_columns");
  lsq_solver._Matrix = class _Matrix extends core.Object {
    get(row, col) {
      return this[_elements][$_get](dart.notNull(row) * dart.notNull(this[_columns]) + dart.notNull(col));
    }
    set(row, col, value) {
      this[_elements][$_set](dart.notNull(row) * dart.notNull(this[_columns]) + dart.notNull(col), value);
    }
    getRow(row) {
      return new lsq_solver._Vector.fromVOL(this[_elements], dart.notNull(row) * dart.notNull(this[_columns]), this[_columns]);
    }
  };
  (lsq_solver._Matrix.new = function(rows, cols) {
    this[_columns] = cols;
    this[_elements] = _native_typed_data.NativeFloat64List.new(dart.notNull(rows) * dart.notNull(cols));
    ;
  }).prototype = lsq_solver._Matrix.prototype;
  dart.addTypeTests(lsq_solver._Matrix);
  dart.setMethodSignature(lsq_solver._Matrix, () => ({
    __proto__: dart.getMethods(lsq_solver._Matrix.__proto__),
    get: dart.fnType(core.double, [core.int, core.int]),
    set: dart.fnType(dart.void, [core.int, core.int, core.double]),
    getRow: dart.fnType(lsq_solver._Vector, [core.int])
  }));
  dart.setLibraryUri(lsq_solver._Matrix, "package:flutter_web/src/gestures/lsq_solver.dart");
  dart.setFieldSignature(lsq_solver._Matrix, () => ({
    __proto__: dart.getFields(lsq_solver._Matrix.__proto__),
    [_columns]: dart.finalFieldType(core.int),
    [_elements]: dart.finalFieldType(core.List$(core.double))
  }));
  lsq_solver.PolynomialFit = class PolynomialFit extends core.Object {
    get coefficients() {
      return this[coefficients];
    }
    set coefficients(value) {
      super.coefficients = value;
    }
    get confidence() {
      return this[confidence];
    }
    set confidence(value) {
      this[confidence] = value;
    }
  };
  (lsq_solver.PolynomialFit.new = function(degree) {
    this[confidence] = null;
    this[coefficients] = _native_typed_data.NativeFloat64List.new(dart.notNull(degree) + 1);
    ;
  }).prototype = lsq_solver.PolynomialFit.prototype;
  dart.addTypeTests(lsq_solver.PolynomialFit);
  const coefficients = Symbol("PolynomialFit.coefficients");
  const confidence = Symbol("PolynomialFit.confidence");
  dart.setLibraryUri(lsq_solver.PolynomialFit, "package:flutter_web/src/gestures/lsq_solver.dart");
  dart.setFieldSignature(lsq_solver.PolynomialFit, () => ({
    __proto__: dart.getFields(lsq_solver.PolynomialFit.__proto__),
    coefficients: dart.finalFieldType(core.List$(core.double)),
    confidence: dart.fieldType(core.double)
  }));
  lsq_solver.LeastSquaresSolver = class LeastSquaresSolver extends core.Object {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    get w() {
      return this[w$];
    }
    set w(value) {
      super.w = value;
    }
    solve(degree) {
      let t17, t16, t17$, t16$;
      if (dart.notNull(degree) > dart.notNull(this.x[$length])) return null;
      let result = new lsq_solver.PolynomialFit.new(degree);
      let m = this.x[$length];
      let n = dart.notNull(degree) + 1;
      let a = new lsq_solver._Matrix.new(n, m);
      for (let h = 0; h < dart.notNull(m); h = h + 1) {
        a.set(0, h, this.w[$_get](h));
        for (let i = 1; i < n; i = i + 1)
          a.set(i, h, dart.notNull(a.get(i - 1, h)) * dart.notNull(this.x[$_get](h)));
      }
      let q = new lsq_solver._Matrix.new(n, m);
      let r = new lsq_solver._Matrix.new(n, n);
      for (let j = 0; j < n; j = j + 1) {
        for (let h = 0; h < dart.notNull(m); h = h + 1)
          q.set(j, h, a.get(j, h));
        for (let i = 0; i < j; i = i + 1) {
          let dot = q.getRow(j)['*'](q.getRow(i));
          for (let h = 0; h < dart.notNull(m); h = h + 1)
            q.set(j, h, dart.notNull(q.get(j, h)) - dart.notNull(dot) * dart.notNull(q.get(i, h)));
        }
        let norm = q.getRow(j).norm();
        if (dart.notNull(norm) < 1e-10) {
          return null;
        }
        let inverseNorm = 1.0 / dart.notNull(norm);
        for (let h = 0; h < dart.notNull(m); h = h + 1)
          q.set(j, h, dart.notNull(q.get(j, h)) * inverseNorm);
        for (let i = 0; i < n; i = i + 1)
          r.set(j, i, i < j ? 0.0 : q.getRow(j)['*'](a.getRow(i)));
      }
      let wy = new lsq_solver._Vector.new(m);
      for (let h = 0; h < dart.notNull(m); h = h + 1)
        wy._set(h, dart.notNull(this.y[$_get](h)) * dart.notNull(this.w[$_get](h)));
      for (let i = n - 1; i >= 0; i = i - 1) {
        result.coefficients[$_set](i, q.getRow(i)['*'](wy));
        for (let j = n - 1; j > i; j = j - 1) {
          t16 = result.coefficients;
          t17 = i;
          t16[$_set](t17, dart.notNull(t16[$_get](t17)) - dart.notNull(r.get(i, j)) * dart.notNull(result.coefficients[$_get](j)));
        }
        t16$ = result.coefficients;
        t17$ = i;
        t16$[$_set](t17$, dart.notNull(t16$[$_get](t17$)) / dart.notNull(r.get(i, i)));
      }
      let yMean = 0.0;
      for (let h = 0; h < dart.notNull(m); h = h + 1)
        yMean = yMean + dart.notNull(this.y[$_get](h));
      yMean = yMean / dart.notNull(m);
      let sumSquaredError = 0.0;
      let sumSquaredTotal = 0.0;
      for (let h = 0; h < dart.notNull(m); h = h + 1) {
        let term = 1.0;
        let err = dart.notNull(this.y[$_get](h)) - dart.notNull(result.coefficients[$_get](0));
        for (let i = 1; i < n; i = i + 1) {
          term = term * dart.notNull(this.x[$_get](h));
          err = err - term * dart.notNull(result.coefficients[$_get](i));
        }
        sumSquaredError = sumSquaredError + dart.notNull(this.w[$_get](h)) * dart.notNull(this.w[$_get](h)) * err * err;
        let v = dart.notNull(this.y[$_get](h)) - yMean;
        sumSquaredTotal = sumSquaredTotal + dart.notNull(this.w[$_get](h)) * dart.notNull(this.w[$_get](h)) * v * v;
      }
      result.confidence = sumSquaredTotal <= 1e-10 ? 1.0 : 1.0 - sumSquaredError / sumSquaredTotal;
      return result;
    }
  };
  (lsq_solver.LeastSquaresSolver.new = function(x, y, w) {
    this[x$0] = x;
    this[y$2] = y;
    this[w$] = w;
    if (!(x[$length] == y[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/lsq_solver.dart", 87, 14, "x.length == y.length");
    if (!(y[$length] == w[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/lsq_solver.dart", 88, 14, "y.length == w.length");
    ;
  }).prototype = lsq_solver.LeastSquaresSolver.prototype;
  dart.addTypeTests(lsq_solver.LeastSquaresSolver);
  const x$0 = Symbol("LeastSquaresSolver.x");
  const y$2 = Symbol("LeastSquaresSolver.y");
  const w$ = Symbol("LeastSquaresSolver.w");
  dart.setMethodSignature(lsq_solver.LeastSquaresSolver, () => ({
    __proto__: dart.getMethods(lsq_solver.LeastSquaresSolver.__proto__),
    solve: dart.fnType(lsq_solver.PolynomialFit, [core.int])
  }));
  dart.setLibraryUri(lsq_solver.LeastSquaresSolver, "package:flutter_web/src/gestures/lsq_solver.dart");
  dart.setFieldSignature(lsq_solver.LeastSquaresSolver, () => ({
    __proto__: dart.getFields(lsq_solver.LeastSquaresSolver.__proto__),
    x: dart.finalFieldType(core.List$(core.double)),
    y: dart.finalFieldType(core.List$(core.double)),
    w: dart.finalFieldType(core.List$(core.double))
  }));
  matrix_utils.MatrixUtils = class MatrixUtils extends core.Object {
    static getAsTranslation(transform) {
      if (!(transform != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 23, 12, "transform != null");
      let values = transform.storage;
      if (values[$_get](0) === 1.0 && values[$_get](1) === 0.0 && values[$_get](2) === 0.0 && values[$_get](3) === 0.0 && values[$_get](4) === 0.0 && values[$_get](5) === 1.0 && values[$_get](6) === 0.0 && values[$_get](7) === 0.0 && values[$_get](8) === 0.0 && values[$_get](9) === 0.0 && values[$_get](10) === 1.0 && values[$_get](11) === 0.0 && values[$_get](14) === 0.0 && values[$_get](15) === 1.0) {
        return new ui.Offset.new(values[$_get](12), values[$_get](13));
      }
      return null;
    }
    static getAsScale(transform) {
      if (!(transform != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 50, 12, "transform != null");
      let values = transform.storage;
      if (values[$_get](1) === 0.0 && values[$_get](2) === 0.0 && values[$_get](3) === 0.0 && values[$_get](4) === 0.0 && values[$_get](6) === 0.0 && values[$_get](7) === 0.0 && values[$_get](8) === 0.0 && values[$_get](9) === 0.0 && values[$_get](10) === 1.0 && values[$_get](11) === 0.0 && values[$_get](12) === 0.0 && values[$_get](13) === 0.0 && values[$_get](14) === 0.0 && values[$_get](15) === 1.0 && values[$_get](0) == values[$_get](5)) {
        return values[$_get](0);
      }
      return null;
    }
    static matrixEquals(a, b) {
      if (a == b) return true;
      if (!(a != null || b != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 78, 12, "a != null || b != null");
      if (a == null) return matrix_utils.MatrixUtils.isIdentity(b);
      if (b == null) return matrix_utils.MatrixUtils.isIdentity(a);
      if (!(a != null && b != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 83, 12, "a != null && b != null");
      return a.storage[$_get](0) == b.storage[$_get](0) && a.storage[$_get](1) == b.storage[$_get](1) && a.storage[$_get](2) == b.storage[$_get](2) && a.storage[$_get](3) == b.storage[$_get](3) && a.storage[$_get](4) == b.storage[$_get](4) && a.storage[$_get](5) == b.storage[$_get](5) && a.storage[$_get](6) == b.storage[$_get](6) && a.storage[$_get](7) == b.storage[$_get](7) && a.storage[$_get](8) == b.storage[$_get](8) && a.storage[$_get](9) == b.storage[$_get](9) && a.storage[$_get](10) == b.storage[$_get](10) && a.storage[$_get](11) == b.storage[$_get](11) && a.storage[$_get](12) == b.storage[$_get](12) && a.storage[$_get](13) == b.storage[$_get](13) && a.storage[$_get](14) == b.storage[$_get](14) && a.storage[$_get](15) == b.storage[$_get](15);
    }
    static isIdentity(a) {
      if (!(a != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 104, 12, "a != null");
      return a.storage[$_get](0) === 1.0 && a.storage[$_get](1) === 0.0 && a.storage[$_get](2) === 0.0 && a.storage[$_get](3) === 0.0 && a.storage[$_get](4) === 0.0 && a.storage[$_get](5) === 1.0 && a.storage[$_get](6) === 0.0 && a.storage[$_get](7) === 0.0 && a.storage[$_get](8) === 0.0 && a.storage[$_get](9) === 0.0 && a.storage[$_get](10) === 1.0 && a.storage[$_get](11) === 0.0 && a.storage[$_get](12) === 0.0 && a.storage[$_get](13) === 0.0 && a.storage[$_get](14) === 0.0 && a.storage[$_get](15) === 1.0;
    }
    static transformPoint(transform, point) {
      let position3 = vector_math_64.Vector3.new(point.dx, point.dy, 0.0);
      let transformed3 = transform.perspectiveTransform(position3);
      return new ui.Offset.new(transformed3.x, transformed3.y);
    }
    static transformRect(transform, rect) {
      let point1 = matrix_utils.MatrixUtils.transformPoint(transform, rect.topLeft);
      let point2 = matrix_utils.MatrixUtils.transformPoint(transform, rect.topRight);
      let point3 = matrix_utils.MatrixUtils.transformPoint(transform, rect.bottomLeft);
      let point4 = matrix_utils.MatrixUtils.transformPoint(transform, rect.bottomRight);
      return new ui.Rect.fromLTRB(matrix_utils.MatrixUtils._min4(point1.dx, point2.dx, point3.dx, point4.dx), matrix_utils.MatrixUtils._min4(point1.dy, point2.dy, point3.dy, point4.dy), matrix_utils.MatrixUtils._max4(point1.dx, point2.dx, point3.dx, point4.dx), matrix_utils.MatrixUtils._max4(point1.dy, point2.dy, point3.dy, point4.dy));
    }
    static _min4(a, b, c, d) {
      return math.min(core.double, a, math.min(core.double, b, math.min(core.double, c, d)));
    }
    static _max4(a, b, c, d) {
      return math.max(core.double, a, math.max(core.double, b, math.max(core.double, c, d)));
    }
    static inverseTransformRect(transform, rect) {
      let t16;
      if (!(rect != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 166, 12, "rect != null");
      if (dart.test(matrix_utils.MatrixUtils.isIdentity(transform))) return rect;
      transform = (t16 = vector_math_64.Matrix4.copy(transform), t16.invert(), t16);
      return matrix_utils.MatrixUtils.transformRect(transform, rect);
    }
    static createCylindricalProjectionTransform(opts) {
      let t16;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let angle = opts && 'angle' in opts ? opts.angle : null;
      let perspective = opts && 'perspective' in opts ? opts.perspective : 0.001;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C31 || CT.C31;
      if (!(radius != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 215, 12, "rt(radius != n");
      if (!(angle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 216, 12, "rt(angle != n");
      if (!(dart.notNull(perspective) >= 0 && dart.notNull(perspective) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 217, 12, "rt(perspective >= 0 && perspective <= ");
      if (!(orientation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 218, 12, "rt(orientation != n");
      let result = (t16 = vector_math_64.Matrix4.identity(), t16.setEntry(3, 2, -dart.notNull(perspective)), t16.setEntry(2, 3, -dart.notNull(radius)), t16.setEntry(3, 3, dart.notNull(perspective) * dart.notNull(radius) + 1.0), t16);
      result = vector_math_64.Matrix4._check(result['*']((dart.equals(orientation, basic_types.Axis.horizontal) ? vector_math_64.Matrix4.rotationY(angle) : vector_math_64.Matrix4.rotationX(angle))['*'](vector_math_64.Matrix4.translationValues(0.0, 0.0, radius))));
      return result;
    }
    static forceToPoint(offset) {
      let t16;
      t16 = vector_math_64.Matrix4.identity();
      t16.setRow(0, vector_math_64.Vector4.new(0.0, 0.0, 0.0, offset.dx));
      t16.setRow(1, vector_math_64.Vector4.new(0.0, 0.0, 0.0, offset.dy));
      return t16;
    }
  };
  (matrix_utils.MatrixUtils.__ = function() {
    ;
  }).prototype = matrix_utils.MatrixUtils.prototype;
  dart.addTypeTests(matrix_utils.MatrixUtils);
  dart.setLibraryUri(matrix_utils.MatrixUtils, "package:flutter_web/src/painting/matrix_utils.dart");
  let C653;
  const _name$7 = dart.privateName(diagnostics, "_name");
  let C654;
  matrix_utils.TransformProperty = class TransformProperty extends diagnostics.DiagnosticsProperty$(vector_math_64.Matrix4) {
    valueToString(opts) {
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      if (parentConfiguration != null && !dart.test(parentConfiguration.lineBreakProperties)) {
        let values = JSArrayOfString().of([dart.str(debug.debugFormatDouble(this.value.entry(0, 0))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(0, 1))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(0, 2))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(0, 3))), dart.str(debug.debugFormatDouble(this.value.entry(1, 0))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(1, 1))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(1, 2))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(1, 3))), dart.str(debug.debugFormatDouble(this.value.entry(2, 0))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(2, 1))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(2, 2))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(2, 3))), dart.str(debug.debugFormatDouble(this.value.entry(3, 0))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(3, 1))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(3, 2))) + "," + dart.str(debug.debugFormatDouble(this.value.entry(3, 3)))]);
        return "[" + dart.str(values[$join]("; ")) + "]";
      }
      return matrix_utils.debugDescribeTransform(this.value)[$join]("\n");
    }
  };
  (matrix_utils.TransformProperty.new = function(name, value, opts) {
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C653 || CT.C653;
    let level = opts && 'level' in opts ? opts.level : C654 || CT.C654;
    if (!(showName != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 288, 15, "rt(showName != n");
    if (!(level != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 289, 15, "rt(level != n");
    matrix_utils.TransformProperty.__proto__.new.call(this, name, value, {showName: showName, defaultValue: defaultValue, level: level});
    ;
  }).prototype = matrix_utils.TransformProperty.prototype;
  dart.addTypeTests(matrix_utils.TransformProperty);
  dart.setLibraryUri(matrix_utils.TransformProperty, "package:flutter_web/src/painting/matrix_utils.dart");
  let C655;
  matrix_utils.debugDescribeTransform = function debugDescribeTransform(transform) {
    if (transform == null) return C655 || CT.C655;
    return JSArrayOfString().of(["[0] " + dart.str(debug.debugFormatDouble(transform.entry(0, 0))) + "," + dart.str(debug.debugFormatDouble(transform.entry(0, 1))) + "," + dart.str(debug.debugFormatDouble(transform.entry(0, 2))) + "," + dart.str(debug.debugFormatDouble(transform.entry(0, 3))), "[1] " + dart.str(debug.debugFormatDouble(transform.entry(1, 0))) + "," + dart.str(debug.debugFormatDouble(transform.entry(1, 1))) + "," + dart.str(debug.debugFormatDouble(transform.entry(1, 2))) + "," + dart.str(debug.debugFormatDouble(transform.entry(1, 3))), "[2] " + dart.str(debug.debugFormatDouble(transform.entry(2, 0))) + "," + dart.str(debug.debugFormatDouble(transform.entry(2, 1))) + "," + dart.str(debug.debugFormatDouble(transform.entry(2, 2))) + "," + dart.str(debug.debugFormatDouble(transform.entry(2, 3))), "[3] " + dart.str(debug.debugFormatDouble(transform.entry(3, 0))) + "," + dart.str(debug.debugFormatDouble(transform.entry(3, 1))) + "," + dart.str(debug.debugFormatDouble(transform.entry(3, 2))) + "," + dart.str(debug.debugFormatDouble(transform.entry(3, 3)))]);
  };
  clipboard.ClipboardData = class ClipboardData extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
  };
  (clipboard.ClipboardData.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    this[text$] = text;
    ;
  }).prototype = clipboard.ClipboardData.prototype;
  dart.addTypeTests(clipboard.ClipboardData);
  const text$ = Symbol("ClipboardData.text");
  dart.setLibraryUri(clipboard.ClipboardData, "package:flutter_web/src/services/clipboard.dart");
  dart.setFieldSignature(clipboard.ClipboardData, () => ({
    __proto__: dart.getFields(clipboard.ClipboardData.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  clipboard.Clipboard = class Clipboard extends core.Object {
    static setData(data) {
      return async.async(dart.void, function* setData() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "Clipboard.setData", new (IdentityMapOfString$dynamic()).from(["text", data.text]));
      });
    }
    static getData(format) {
      return async.async(clipboard.ClipboardData, function* getData() {
        let result = (yield system_channels.SystemChannels.platform.invokeMethod(MapOfString$dynamic(), "Clipboard.getData", format));
        if (result == null) return null;
        return new clipboard.ClipboardData.new({text: core.String._check(result[$_get]("text"))});
      });
    }
  };
  (clipboard.Clipboard.__ = function() {
    ;
  }).prototype = clipboard.Clipboard.prototype;
  dart.addTypeTests(clipboard.Clipboard);
  dart.setLibraryUri(clipboard.Clipboard, "package:flutter_web/src/services/clipboard.dart");
  dart.defineLazy(clipboard.Clipboard, {
    /*clipboard.Clipboard.kTextPlain*/get kTextPlain() {
      return "text/plain";
    }
  });
  system_navigator.SystemNavigator = class SystemNavigator extends core.Object {
    static pop() {
      return async.async(dart.void, function* pop() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "SystemNavigator.pop");
      });
    }
  };
  (system_navigator.SystemNavigator.__ = function() {
    ;
  }).prototype = system_navigator.SystemNavigator.prototype;
  dart.addTypeTests(system_navigator.SystemNavigator);
  dart.setLibraryUri(system_navigator.SystemNavigator, "package:flutter_web/src/services/system_navigator.dart");
  icon_data.IconData = class IconData extends core.Object {
    get codePoint() {
      return this[codePoint$2];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontPackage() {
      return this[fontPackage$];
    }
    set fontPackage(value) {
      super.fontPackage = value;
    }
    get matchTextDirection() {
      return this[matchTextDirection$];
    }
    set matchTextDirection(value) {
      super.matchTextDirection = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = icon_data.IconData._check(other);
      return this.codePoint == typedOther.codePoint && this.fontFamily == typedOther.fontFamily && this.fontPackage == typedOther.fontPackage && dart.equals(this.matchTextDirection, typedOther.matchTextDirection);
    }
    get hashCode() {
      return ui.hashValues(this.codePoint, this.fontFamily, this.fontPackage, this.matchTextDirection);
    }
    toString() {
      if (dart.test(util.assertionsEnabled)) {
        let data = this.codePoint[$toRadixString](16)[$toUpperCase]()[$padLeft](5, "0");
        return "IconData(U+" + data + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (icon_data.IconData.new = function(codePoint, opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontPackage = opts && 'fontPackage' in opts ? opts.fontPackage : null;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    this[codePoint$2] = codePoint;
    this[fontFamily$] = fontFamily;
    this[fontPackage$] = fontPackage;
    this[matchTextDirection$] = matchTextDirection;
    ;
  }).prototype = icon_data.IconData.prototype;
  dart.addTypeTests(icon_data.IconData);
  const codePoint$2 = Symbol("IconData.codePoint");
  const fontFamily$ = Symbol("IconData.fontFamily");
  const fontPackage$ = Symbol("IconData.fontPackage");
  const matchTextDirection$ = Symbol("IconData.matchTextDirection");
  dart.setLibraryUri(icon_data.IconData, "package:flutter_web/src/widgets/icon_data.dart");
  dart.setFieldSignature(icon_data.IconData, () => ({
    __proto__: dart.getFields(icon_data.IconData.__proto__),
    codePoint: dart.finalFieldType(core.int),
    fontFamily: dart.finalFieldType(core.String),
    fontPackage: dart.finalFieldType(core.String),
    matchTextDirection: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(icon_data.IconData, ['_equals', 'toString']);
  dart.defineExtensionAccessors(icon_data.IconData, ['hashCode']);
  const _velocityTracker = dart.privateName(multidrag, "_velocityTracker");
  const _client = dart.privateName(multidrag, "_client");
  const _pendingDelta = dart.privateName(multidrag, "_pendingDelta");
  const _lastPendingEventTimestamp = dart.privateName(multidrag, "_lastPendingEventTimestamp");
  const _arenaEntry = dart.privateName(multidrag, "_arenaEntry");
  const _setArenaEntry = dart.privateName(multidrag, "_setArenaEntry");
  const _move = dart.privateName(multidrag, "_move");
  const _startDrag = dart.privateName(multidrag, "_startDrag");
  const _up = dart.privateName(multidrag, "_up");
  const _cancel = dart.privateName(multidrag, "_cancel");
  multidrag.MultiDragPointerState = class MultiDragPointerState extends core.Object {
    get initialPosition() {
      return this[initialPosition$];
    }
    set initialPosition(value) {
      super.initialPosition = value;
    }
    get pendingDelta() {
      return this[_pendingDelta];
    }
    [_setArenaEntry](entry) {
      if (!(this[_arenaEntry] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 52, 12, "_arenaEntry == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 53, 12, "pendingDelta != null");
      if (!(this[_client] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 54, 12, "_client == null");
      this[_arenaEntry] = entry;
    }
    resolve(disposition) {
      this[_arenaEntry].resolve(disposition);
    }
    [_move](event) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 66, 12, "_arenaEntry != null");
      if (!dart.test(event.synthesized)) this[_velocityTracker].addPosition(event.timeStamp, event.position);
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 70, 14, "pendingDelta == null");
        this[_client].update(new drag_details.DragUpdateDetails.new({sourceTimeStamp: event.timeStamp, delta: event.delta, globalPosition: event.position}));
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 78, 14, "pendingDelta != null");
        this[_pendingDelta] = this[_pendingDelta]['+'](event.delta);
        this[_lastPendingEventTimestamp] = event.timeStamp;
        this.checkForResolutionAfterMove();
      }
    }
    checkForResolutionAfterMove() {
    }
    rejected() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 104, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 105, 12, "_client == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 106, 12, "pendingDelta != null");
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      this[_arenaEntry] = null;
    }
    [_startDrag](client) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 113, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 114, 12, "_client == null");
      if (!(client != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 115, 12, "client != null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 116, 12, "pendingDelta != null");
      this[_client] = client;
      let details = new drag_details.DragUpdateDetails.new({sourceTimeStamp: this[_lastPendingEventTimestamp], delta: this.pendingDelta, globalPosition: this.initialPosition});
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      this[_client].update(details);
    }
    [_up]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 130, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 132, 14, "pendingDelta == null");
        let details = new drag_details.DragEndDetails.new({velocity: this[_velocityTracker].getVelocity()});
        let client = this[_client];
        this[_client] = null;
        client.end(details);
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 139, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    [_cancel]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 146, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 148, 14, "pendingDelta == null");
        let client = this[_client];
        this[_client] = null;
        client.cancel();
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 154, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    dispose() {
      let t16;
      t16 = this[_arenaEntry];
      t16 == null ? null : t16.resolve(arena.GestureDisposition.rejected);
      this[_arenaEntry] = null;
      if (!dart.test(dart.fn(() => {
        this[_pendingDelta] = null;
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 166, 12, "() { _pendingDelta = null; return true; }()");
    }
  };
  (multidrag.MultiDragPointerState.new = function(initialPosition) {
    this[_velocityTracker] = new velocity_tracker.VelocityTracker.new();
    this[_client] = null;
    this[_pendingDelta] = ui.Offset.zero;
    this[_lastPendingEventTimestamp] = null;
    this[_arenaEntry] = null;
    this[initialPosition$] = initialPosition;
    if (!(initialPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 31, 14, "initialPosition != null");
    ;
  }).prototype = multidrag.MultiDragPointerState.prototype;
  dart.addTypeTests(multidrag.MultiDragPointerState);
  const initialPosition$ = Symbol("MultiDragPointerState.initialPosition");
  dart.setMethodSignature(multidrag.MultiDragPointerState, () => ({
    __proto__: dart.getMethods(multidrag.MultiDragPointerState.__proto__),
    [_setArenaEntry]: dart.fnType(dart.void, [arena.GestureArenaEntry]),
    resolve: dart.fnType(dart.void, [arena.GestureDisposition]),
    [_move]: dart.fnType(dart.void, [events.PointerMoveEvent]),
    checkForResolutionAfterMove: dart.fnType(dart.void, []),
    rejected: dart.fnType(dart.void, []),
    [_startDrag]: dart.fnType(dart.void, [drag$.Drag]),
    [_up]: dart.fnType(dart.void, []),
    [_cancel]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(multidrag.MultiDragPointerState, () => ({
    __proto__: dart.getGetters(multidrag.MultiDragPointerState.__proto__),
    pendingDelta: ui.Offset
  }));
  dart.setLibraryUri(multidrag.MultiDragPointerState, "package:flutter_web/src/gestures/multidrag.dart");
  dart.setFieldSignature(multidrag.MultiDragPointerState, () => ({
    __proto__: dart.getFields(multidrag.MultiDragPointerState.__proto__),
    initialPosition: dart.finalFieldType(ui.Offset),
    [_velocityTracker]: dart.finalFieldType(velocity_tracker.VelocityTracker),
    [_client]: dart.fieldType(drag$.Drag),
    [_pendingDelta]: dart.fieldType(ui.Offset),
    [_lastPendingEventTimestamp]: dart.fieldType(core.Duration),
    [_arenaEntry]: dart.fieldType(arena.GestureArenaEntry)
  }));
  const _pointers = dart.privateName(multidrag, "_pointers");
  const _handleEvent = dart.privateName(multidrag, "_handleEvent");
  const _removeState = dart.privateName(multidrag, "_removeState");
  const _is_MultiDragGestureRecognizer_default = Symbol('_is_MultiDragGestureRecognizer_default');
  multidrag.MultiDragGestureRecognizer$ = dart.generic(T => {
    let IdentityMapOfint$T = () => (IdentityMapOfint$T = dart.constFn(_js_helper.IdentityMap$(core.int, T)))();
    class MultiDragGestureRecognizer extends recognizer.GestureRecognizer {
      get onStart() {
        return this[onStart];
      }
      set onStart(value) {
        this[onStart] = value;
      }
      addAllowedPointer(event) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 207, 12, "_pointers != null");
        if (!(event.pointer != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 208, 12, "event.pointer != null");
        if (!(event.position != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 209, 12, "event.position != null");
        if (!!dart.test(this[_pointers][$containsKey](event.pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 210, 12, "!_pointers.containsKey(event.pointer)");
        let state = this.createNewPointerState(event);
        this[_pointers][$_set](event.pointer, state);
        binding$.GestureBinding.instance.pointerRouter.addRoute(event.pointer, dart.bind(this, _handleEvent));
        state[_setArenaEntry](binding$.GestureBinding.instance.gestureArena.add(event.pointer, this));
      }
      [_handleEvent](event) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 223, 12, "_pointers != null");
        if (!(event.pointer != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 224, 12, "event.pointer != null");
        if (!(event.timeStamp != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 225, 12, "event.timeStamp != null");
        if (!(event.position != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 226, 12, "event.position != null");
        if (!dart.test(this[_pointers][$containsKey](event.pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 227, 12, "_pointers.containsKey(event.pointer)");
        let state = this[_pointers][$_get](event.pointer);
        if (events.PointerMoveEvent.is(event)) {
          state[_move](event);
        } else if (events.PointerUpEvent.is(event)) {
          if (!dart.equals(event.delta, ui.Offset.zero)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 233, 14, "event.delta == Offset.zero");
          state[_up]();
          this[_removeState](event.pointer);
        } else if (events.PointerCancelEvent.is(event)) {
          if (!dart.equals(event.delta, ui.Offset.zero)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 238, 14, "event.delta == Offset.zero");
          state[_cancel]();
          this[_removeState](event.pointer);
        } else if (!events.PointerDownEvent.is(event)) {
          if (!false) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 246, 14, "false");
        }
      }
      acceptGesture(pointer) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 252, 12, "_pointers != null");
        let state = this[_pointers][$_get](pointer);
        if (state == null) return;
        state.accepted(dart.fn(initialPosition => this[_startDrag](initialPosition, pointer), OffsetToDrag()));
      }
      [_startDrag](initialPosition, pointer) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 260, 12, "_pointers != null");
        let state = this[_pointers][$_get](pointer);
        if (!(state != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 262, 12, "state != null");
        if (!(state[_pendingDelta] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 263, 12, "state._pendingDelta != null");
        let drag = null;
        if (this.onStart != null) drag = this.invokeCallback(drag$.Drag, "onStart", dart.fn(() => this.onStart(initialPosition), VoidToDrag()));
        if (drag != null) {
          state[_startDrag](drag);
        } else {
          this[_removeState](pointer);
        }
        return drag;
      }
      rejectGesture(pointer) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 277, 12, "_pointers != null");
        if (dart.test(this[_pointers][$containsKey](pointer))) {
          let state = this[_pointers][$_get](pointer);
          if (!(state != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 280, 14, "state != null");
          state.rejected();
          this[_removeState](pointer);
        }
      }
      [_removeState](pointer) {
        if (this[_pointers] == null) {
          return;
        }
        if (!dart.test(this[_pointers][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 292, 12, "_pointers.containsKey(pointer)");
        binding$.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, _handleEvent));
        this[_pointers][$remove](pointer).dispose();
      }
      dispose() {
        this[_pointers][$keys][$toList]()[$forEach](dart.bind(this, _removeState));
        if (!dart.test(this[_pointers][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 300, 12, "_pointers.isEmpty");
        this[_pointers] = null;
        super.dispose();
      }
    }
    (MultiDragGestureRecognizer.new = function(opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      this[onStart] = null;
      this[_pointers] = new (IdentityMapOfint$T()).new();
      MultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
      ;
    }).prototype = MultiDragGestureRecognizer.prototype;
    dart.addTypeTests(MultiDragGestureRecognizer);
    MultiDragGestureRecognizer.prototype[_is_MultiDragGestureRecognizer_default] = true;
    const onStart = Symbol("MultiDragGestureRecognizer.onStart");
    dart.setMethodSignature(MultiDragGestureRecognizer, () => ({
      __proto__: dart.getMethods(MultiDragGestureRecognizer.__proto__),
      [_handleEvent]: dart.fnType(dart.void, [events.PointerEvent]),
      acceptGesture: dart.fnType(dart.void, [core.int]),
      [_startDrag]: dart.fnType(drag$.Drag, [ui.Offset, core.int]),
      rejectGesture: dart.fnType(dart.void, [core.int]),
      [_removeState]: dart.fnType(dart.void, [core.int])
    }));
    dart.setLibraryUri(MultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
    dart.setFieldSignature(MultiDragGestureRecognizer, () => ({
      __proto__: dart.getFields(MultiDragGestureRecognizer.__proto__),
      onStart: dart.fieldType(dart.fnType(drag$.Drag, [ui.Offset])),
      [_pointers]: dart.fieldType(core.Map$(core.int, T))
    }));
    return MultiDragGestureRecognizer;
  });
  multidrag.MultiDragGestureRecognizer = multidrag.MultiDragGestureRecognizer$();
  dart.addTypeTests(multidrag.MultiDragGestureRecognizer, _is_MultiDragGestureRecognizer_default);
  multidrag._ImmediatePointerState = class _ImmediatePointerState extends multidrag.MultiDragPointerState {
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 311, 12, "pendingDelta != null");
      if (dart.notNull(this.pendingDelta.distance) > 18) this.resolve(arena.GestureDisposition.accepted);
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._ImmediatePointerState.new = function(initialPosition) {
    multidrag._ImmediatePointerState.__proto__.new.call(this, initialPosition);
    ;
  }).prototype = multidrag._ImmediatePointerState.prototype;
  dart.addTypeTests(multidrag._ImmediatePointerState);
  dart.setMethodSignature(multidrag._ImmediatePointerState, () => ({
    __proto__: dart.getMethods(multidrag._ImmediatePointerState.__proto__),
    accepted: dart.fnType(dart.void, [dart.fnType(drag$.Drag, [ui.Offset])])
  }));
  dart.setLibraryUri(multidrag._ImmediatePointerState, "package:flutter_web/src/gestures/multidrag.dart");
  multidrag.ImmediateMultiDragGestureRecognizer = class ImmediateMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer$(multidrag._ImmediatePointerState) {
    createNewPointerState(event) {
      return new multidrag._ImmediatePointerState.new(event.position);
    }
    get debugDescription() {
      return "multidrag";
    }
  };
  (multidrag.ImmediateMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    multidrag.ImmediateMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multidrag.ImmediateMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.ImmediateMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.ImmediateMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(multidrag.ImmediateMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(multidrag._ImmediatePointerState, [events.PointerDownEvent])
  }));
  dart.setGetterSignature(multidrag.ImmediateMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(multidrag.ImmediateMultiDragGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(multidrag.ImmediateMultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
  multidrag._HorizontalPointerState = class _HorizontalPointerState extends multidrag.MultiDragPointerState {
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 360, 12, "pendingDelta != null");
      if (this.pendingDelta.dx[$abs]() > 18) this.resolve(arena.GestureDisposition.accepted);
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._HorizontalPointerState.new = function(initialPosition) {
    multidrag._HorizontalPointerState.__proto__.new.call(this, initialPosition);
    ;
  }).prototype = multidrag._HorizontalPointerState.prototype;
  dart.addTypeTests(multidrag._HorizontalPointerState);
  dart.setMethodSignature(multidrag._HorizontalPointerState, () => ({
    __proto__: dart.getMethods(multidrag._HorizontalPointerState.__proto__),
    accepted: dart.fnType(dart.void, [dart.fnType(drag$.Drag, [ui.Offset])])
  }));
  dart.setLibraryUri(multidrag._HorizontalPointerState, "package:flutter_web/src/gestures/multidrag.dart");
  multidrag.HorizontalMultiDragGestureRecognizer = class HorizontalMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer$(multidrag._HorizontalPointerState) {
    createNewPointerState(event) {
      return new multidrag._HorizontalPointerState.new(event.position);
    }
    get debugDescription() {
      return "horizontal multidrag";
    }
  };
  (multidrag.HorizontalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    multidrag.HorizontalMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multidrag.HorizontalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.HorizontalMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.HorizontalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(multidrag.HorizontalMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(multidrag._HorizontalPointerState, [events.PointerDownEvent])
  }));
  dart.setGetterSignature(multidrag.HorizontalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(multidrag.HorizontalMultiDragGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(multidrag.HorizontalMultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
  multidrag._VerticalPointerState = class _VerticalPointerState extends multidrag.MultiDragPointerState {
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 409, 12, "pendingDelta != null");
      if (this.pendingDelta.dy[$abs]() > 18) this.resolve(arena.GestureDisposition.accepted);
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (multidrag._VerticalPointerState.new = function(initialPosition) {
    multidrag._VerticalPointerState.__proto__.new.call(this, initialPosition);
    ;
  }).prototype = multidrag._VerticalPointerState.prototype;
  dart.addTypeTests(multidrag._VerticalPointerState);
  dart.setMethodSignature(multidrag._VerticalPointerState, () => ({
    __proto__: dart.getMethods(multidrag._VerticalPointerState.__proto__),
    accepted: dart.fnType(dart.void, [dart.fnType(drag$.Drag, [ui.Offset])])
  }));
  dart.setLibraryUri(multidrag._VerticalPointerState, "package:flutter_web/src/gestures/multidrag.dart");
  multidrag.VerticalMultiDragGestureRecognizer = class VerticalMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer$(multidrag._VerticalPointerState) {
    createNewPointerState(event) {
      return new multidrag._VerticalPointerState.new(event.position);
    }
    get debugDescription() {
      return "vertical multidrag";
    }
  };
  (multidrag.VerticalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    multidrag.VerticalMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multidrag.VerticalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.VerticalMultiDragGestureRecognizer);
  dart.setMethodSignature(multidrag.VerticalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(multidrag.VerticalMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(multidrag._VerticalPointerState, [events.PointerDownEvent])
  }));
  dart.setGetterSignature(multidrag.VerticalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(multidrag.VerticalMultiDragGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(multidrag.VerticalMultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
  const _timer$ = dart.privateName(multidrag, "_timer");
  const _starter = dart.privateName(multidrag, "_starter");
  const _delayPassed = dart.privateName(multidrag, "_delayPassed");
  const _ensureTimerStopped = dart.privateName(multidrag, "_ensureTimerStopped");
  multidrag._DelayedPointerState = class _DelayedPointerState extends multidrag.MultiDragPointerState {
    [_delayPassed]() {
      if (!(this[_timer$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 463, 12, "_timer != null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 464, 12, "pendingDelta != null");
      if (!(dart.notNull(this.pendingDelta.distance) <= 18)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 465, 12, "pendingDelta.distance <= kTouchSlop");
      this[_timer$] = null;
      if (this[_starter] != null) {
        this[_starter](this.initialPosition);
        this[_starter] = null;
      } else {
        this.resolve(arena.GestureDisposition.accepted);
      }
      if (!(this[_starter] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 473, 12, "_starter == null");
    }
    [_ensureTimerStopped]() {
      let t16;
      t16 = this[_timer$];
      t16 == null ? null : t16.cancel();
      this[_timer$] = null;
    }
    accepted(starter) {
      if (!(this[_starter] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 483, 12, "_starter == null");
      if (this[_timer$] == null)
        starter(this.initialPosition);
      else
        this[_starter] = starter;
    }
    checkForResolutionAfterMove() {
      if (this[_timer$] == null) {
        if (!(this[_starter] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 498, 14, "_starter != null");
        return;
      }
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 501, 12, "pendingDelta != null");
      if (dart.notNull(this.pendingDelta.distance) > 18) {
        this.resolve(arena.GestureDisposition.rejected);
        this[_ensureTimerStopped]();
      }
    }
    dispose() {
      this[_ensureTimerStopped]();
      super.dispose();
    }
  };
  (multidrag._DelayedPointerState.new = function(initialPosition, delay) {
    this[_timer$] = null;
    this[_starter] = null;
    if (!(delay != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 454, 16, "delay != null");
    multidrag._DelayedPointerState.__proto__.new.call(this, initialPosition);
    this[_timer$] = async.Timer.new(delay, dart.bind(this, _delayPassed));
  }).prototype = multidrag._DelayedPointerState.prototype;
  dart.addTypeTests(multidrag._DelayedPointerState);
  dart.setMethodSignature(multidrag._DelayedPointerState, () => ({
    __proto__: dart.getMethods(multidrag._DelayedPointerState.__proto__),
    [_delayPassed]: dart.fnType(dart.void, []),
    [_ensureTimerStopped]: dart.fnType(dart.void, []),
    accepted: dart.fnType(dart.void, [dart.fnType(drag$.Drag, [ui.Offset])])
  }));
  dart.setLibraryUri(multidrag._DelayedPointerState, "package:flutter_web/src/gestures/multidrag.dart");
  dart.setFieldSignature(multidrag._DelayedPointerState, () => ({
    __proto__: dart.getFields(multidrag._DelayedPointerState.__proto__),
    [_timer$]: dart.fieldType(async.Timer),
    [_starter]: dart.fieldType(dart.fnType(drag$.Drag, [ui.Offset]))
  }));
  multidrag.DelayedMultiDragGestureRecognizer = class DelayedMultiDragGestureRecognizer extends multidrag.MultiDragGestureRecognizer$(multidrag._DelayedPointerState) {
    get delay() {
      return this[delay$];
    }
    set delay(value) {
      super.delay = value;
    }
    createNewPointerState(event) {
      return new multidrag._DelayedPointerState.new(event.position, this.delay);
    }
    get debugDescription() {
      return "long multidrag";
    }
  };
  (multidrag.DelayedMultiDragGestureRecognizer.new = function(opts) {
    let delay = opts && 'delay' in opts ? opts.delay : C154 || CT.C154;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[delay$] = delay;
    if (!(delay != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 544, 15, "delay != null");
    multidrag.DelayedMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multidrag.DelayedMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(multidrag.DelayedMultiDragGestureRecognizer);
  const delay$ = Symbol("DelayedMultiDragGestureRecognizer.delay");
  dart.setMethodSignature(multidrag.DelayedMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(multidrag.DelayedMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(multidrag._DelayedPointerState, [events.PointerDownEvent])
  }));
  dart.setGetterSignature(multidrag.DelayedMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(multidrag.DelayedMultiDragGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(multidrag.DelayedMultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
  dart.setFieldSignature(multidrag.DelayedMultiDragGestureRecognizer, () => ({
    __proto__: dart.getFields(multidrag.DelayedMultiDragGestureRecognizer.__proto__),
    delay: dart.finalFieldType(core.Duration)
  }));
  const _scaleAlpha = dart.privateName(colors, "_scaleAlpha");
  colors.HSVColor = class HSVColor extends core.Object {
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get hue() {
      return this[hue$];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static fromColor(color) {
      let red = dart.notNull(color.red) / 255;
      let green = dart.notNull(color.green) / 255;
      let blue = dart.notNull(color.blue) / 255;
      let max = math.max(core.double, red, math.max(core.double, green, blue));
      let min = math.min(core.double, red, math.min(core.double, green, blue));
      let delta = max - min;
      let alpha = dart.notNull(color.alpha) / 255;
      let hue = colors._getHue(red, green, blue, max, delta);
      let saturation = max === 0.0 ? 0.0 : delta / max;
      return new colors.HSVColor.fromAHSV(alpha, hue, saturation, max);
    }
    withAlpha(alpha) {
      return new colors.HSVColor.fromAHSV(alpha, this.hue, this.saturation, this.value);
    }
    withHue(hue) {
      return new colors.HSVColor.fromAHSV(this.alpha, hue, this.saturation, this.value);
    }
    withSaturation(saturation) {
      return new colors.HSVColor.fromAHSV(this.alpha, this.hue, saturation, this.value);
    }
    withValue(value) {
      return new colors.HSVColor.fromAHSV(this.alpha, this.hue, this.saturation, value);
    }
    toColor() {
      let chroma = dart.notNull(this.saturation) * dart.notNull(this.value);
      let secondary = chroma * (1.0 - ((dart.notNull(this.hue) / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = dart.notNull(this.value) - chroma;
      return colors._colorFromHue(this.alpha, this.hue, chroma, secondary, match);
    }
    [_scaleAlpha](factor) {
      return this.withAlpha(dart.notNull(this.alpha) * dart.notNull(factor));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 202, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b[_scaleAlpha](t);
      if (b == null) return a[_scaleAlpha](1.0 - dart.notNull(t));
      return new colors.HSVColor.fromAHSV(ui.lerpDouble(a.alpha, b.alpha, t)[$clamp](0.0, 1.0), ui.lerpDouble(a.hue, b.hue, t)[$modulo](360.0), ui.lerpDouble(a.saturation, b.saturation, t)[$clamp](0.0, 1.0), ui.lerpDouble(a.value, b.value, t)[$clamp](0.0, 1.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!colors.HSVColor.is(other)) return false;
      let typedOther = colors.HSVColor._check(other);
      return typedOther.alpha == this.alpha && typedOther.hue == this.hue && typedOther.saturation == this.saturation && typedOther.value == this.value;
    }
    get hashCode() {
      return ui.hashValues(this.alpha, this.hue, this.saturation, this.value);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.alpha) + ", " + dart.str(this.hue) + ", " + dart.str(this.saturation) + ", " + dart.str(this.value) + ")";
    }
  };
  (colors.HSVColor.fromAHSV = function(alpha, hue, saturation, value) {
    this[alpha$] = alpha;
    this[hue$] = hue;
    this[saturation$] = saturation;
    this[value$] = value;
    if (!(alpha != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 93, 14, "alpha != null");
    if (!(hue != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 94, 14, "hue != null");
    if (!(saturation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 95, 14, "saturation != null");
    if (!(value != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 96, 14, "value != null");
    if (!(dart.notNull(alpha) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 97, 14, "alpha >= 0.0");
    if (!(dart.notNull(alpha) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 98, 14, "alpha <= 1.0");
    if (!(dart.notNull(hue) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 99, 14, "hue >= 0.0");
    if (!(dart.notNull(hue) <= 360.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 100, 14, "hue <= 360.0");
    if (!(dart.notNull(saturation) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 101, 14, "saturation >= 0.0");
    if (!(dart.notNull(saturation) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 102, 14, "saturation <= 1.0");
    if (!(dart.notNull(value) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 103, 14, "value >= 0.0");
    if (!(dart.notNull(value) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 104, 14, "value <= 1.0");
    ;
  }).prototype = colors.HSVColor.prototype;
  dart.addTypeTests(colors.HSVColor);
  const alpha$ = Symbol("HSVColor.alpha");
  const hue$ = Symbol("HSVColor.hue");
  const saturation$ = Symbol("HSVColor.saturation");
  const value$ = Symbol("HSVColor.value");
  dart.setMethodSignature(colors.HSVColor, () => ({
    __proto__: dart.getMethods(colors.HSVColor.__proto__),
    withAlpha: dart.fnType(colors.HSVColor, [core.double]),
    withHue: dart.fnType(colors.HSVColor, [core.double]),
    withSaturation: dart.fnType(colors.HSVColor, [core.double]),
    withValue: dart.fnType(colors.HSVColor, [core.double]),
    toColor: dart.fnType(ui.Color, []),
    [_scaleAlpha]: dart.fnType(colors.HSVColor, [core.double])
  }));
  dart.setLibraryUri(colors.HSVColor, "package:flutter_web/src/painting/colors.dart");
  dart.setFieldSignature(colors.HSVColor, () => ({
    __proto__: dart.getFields(colors.HSVColor.__proto__),
    alpha: dart.finalFieldType(core.double),
    hue: dart.finalFieldType(core.double),
    saturation: dart.finalFieldType(core.double),
    value: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(colors.HSVColor, ['_equals', 'toString']);
  dart.defineExtensionAccessors(colors.HSVColor, ['hashCode']);
  colors.HSLColor = class HSLColor extends core.Object {
    get alpha() {
      return this[alpha$0];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get hue() {
      return this[hue$0];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$0];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get lightness() {
      return this[lightness$];
    }
    set lightness(value) {
      super.lightness = value;
    }
    static fromColor(color) {
      let red = dart.notNull(color.red) / 255;
      let green = dart.notNull(color.green) / 255;
      let blue = dart.notNull(color.blue) / 255;
      let max = math.max(core.double, red, math.max(core.double, green, blue));
      let min = math.min(core.double, red, math.min(core.double, green, blue));
      let delta = max - min;
      let alpha = dart.notNull(color.alpha) / 255;
      let hue = colors._getHue(red, green, blue, max, delta);
      let lightness = (max + min) / 2.0;
      let saturation = lightness === 1.0 ? 0.0 : (delta / (1.0 - (2.0 * lightness - 1.0)[$abs]()))[$clamp](0.0, 1.0);
      return new colors.HSLColor.fromAHSL(alpha, hue, saturation, lightness);
    }
    withAlpha(alpha) {
      return new colors.HSLColor.fromAHSL(alpha, this.hue, this.saturation, this.lightness);
    }
    withHue(hue) {
      return new colors.HSLColor.fromAHSL(this.alpha, hue, this.saturation, this.lightness);
    }
    withSaturation(saturation) {
      return new colors.HSLColor.fromAHSL(this.alpha, this.hue, saturation, this.lightness);
    }
    withLightness(lightness) {
      return new colors.HSLColor.fromAHSL(this.alpha, this.hue, this.saturation, lightness);
    }
    toColor() {
      let chroma = (1.0 - (2.0 * dart.notNull(this.lightness) - 1.0)[$abs]()) * dart.notNull(this.saturation);
      let secondary = chroma * (1.0 - ((dart.notNull(this.hue) / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = dart.notNull(this.lightness) - chroma / 2.0;
      return colors._colorFromHue(this.alpha, this.hue, chroma, secondary, match);
    }
    [_scaleAlpha](factor) {
      return this.withAlpha(dart.notNull(this.alpha) * dart.notNull(factor));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 388, 12, "t(t != nu");
      if (a == null && b == null) return null;
      if (a == null) return b[_scaleAlpha](t);
      if (b == null) return a[_scaleAlpha](1.0 - dart.notNull(t));
      return new colors.HSLColor.fromAHSL(ui.lerpDouble(a.alpha, b.alpha, t)[$clamp](0.0, 1.0), ui.lerpDouble(a.hue, b.hue, t)[$modulo](360.0), ui.lerpDouble(a.saturation, b.saturation, t)[$clamp](0.0, 1.0), ui.lerpDouble(a.lightness, b.lightness, t)[$clamp](0.0, 1.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!colors.HSLColor.is(other)) return false;
      let typedOther = colors.HSLColor._check(other);
      return typedOther.alpha == this.alpha && typedOther.hue == this.hue && typedOther.saturation == this.saturation && typedOther.lightness == this.lightness;
    }
    get hashCode() {
      return ui.hashValues(this.alpha, this.hue, this.saturation, this.lightness);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.alpha) + ", " + dart.str(this.hue) + ", " + dart.str(this.saturation) + ", " + dart.str(this.lightness) + ")";
    }
  };
  (colors.HSLColor.fromAHSL = function(alpha, hue, saturation, lightness) {
    this[alpha$0] = alpha;
    this[hue$0] = hue;
    this[saturation$0] = saturation;
    this[lightness$] = lightness;
    if (!(alpha != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 264, 14, "t(alpha != nu");
    if (!(hue != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 265, 14, "t(hue != nu");
    if (!(saturation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 266, 14, "t(saturation != nu");
    if (!(lightness != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 267, 14, "t(lightness != nu");
    if (!(dart.notNull(alpha) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 268, 14, "t(alpha >= 0");
    if (!(dart.notNull(alpha) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 269, 14, "t(alpha <= 1");
    if (!(dart.notNull(hue) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 270, 14, "t(hue >= 0");
    if (!(dart.notNull(hue) <= 360.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 271, 14, "t(hue <= 360");
    if (!(dart.notNull(saturation) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 272, 14, "t(saturation >= 0");
    if (!(dart.notNull(saturation) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 273, 14, "t(saturation <= 1");
    if (!(dart.notNull(lightness) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 274, 14, "t(lightness >= 0");
    if (!(dart.notNull(lightness) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 275, 14, "t(lightness <= 1");
    ;
  }).prototype = colors.HSLColor.prototype;
  dart.addTypeTests(colors.HSLColor);
  const alpha$0 = Symbol("HSLColor.alpha");
  const hue$0 = Symbol("HSLColor.hue");
  const saturation$0 = Symbol("HSLColor.saturation");
  const lightness$ = Symbol("HSLColor.lightness");
  dart.setMethodSignature(colors.HSLColor, () => ({
    __proto__: dart.getMethods(colors.HSLColor.__proto__),
    withAlpha: dart.fnType(colors.HSLColor, [core.double]),
    withHue: dart.fnType(colors.HSLColor, [core.double]),
    withSaturation: dart.fnType(colors.HSLColor, [core.double]),
    withLightness: dart.fnType(colors.HSLColor, [core.double]),
    toColor: dart.fnType(ui.Color, []),
    [_scaleAlpha]: dart.fnType(colors.HSLColor, [core.double])
  }));
  dart.setLibraryUri(colors.HSLColor, "package:flutter_web/src/painting/colors.dart");
  dart.setFieldSignature(colors.HSLColor, () => ({
    __proto__: dart.getFields(colors.HSLColor.__proto__),
    alpha: dart.finalFieldType(core.double),
    hue: dart.finalFieldType(core.double),
    saturation: dart.finalFieldType(core.double),
    lightness: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(colors.HSLColor, ['_equals', 'toString']);
  dart.defineExtensionAccessors(colors.HSLColor, ['hashCode']);
  const _swatch$ = dart.privateName(colors, "_swatch");
  const _is_ColorSwatch_default = Symbol('_is_ColorSwatch_default');
  colors.ColorSwatch$ = dart.generic(T => {
    let ColorSwatchOfT = () => (ColorSwatchOfT = dart.constFn(colors.ColorSwatch$(T)))();
    class ColorSwatch extends ui.Color {
      _get(index) {
        T._check(index);
        return this[_swatch$][$_get](index);
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) return true;
        if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
        let typedOther = ColorSwatchOfT()._check(other);
        return super._equals(other) && dart.equals(this[_swatch$], typedOther[_swatch$]);
      }
      get hashCode() {
        return ui.hashValues(this[$runtimeType], this.value, this[_swatch$]);
      }
      toString() {
        return dart.str(this[$runtimeType]) + "(primary value: " + dart.str(super.toString()) + ")";
      }
    }
    (ColorSwatch.new = function(primary, _swatch) {
      this[_swatch$] = _swatch;
      ColorSwatch.__proto__.new.call(this, primary);
      ;
    }).prototype = ColorSwatch.prototype;
    dart.addTypeTests(ColorSwatch);
    ColorSwatch.prototype[_is_ColorSwatch_default] = true;
    dart.setMethodSignature(ColorSwatch, () => ({
      __proto__: dart.getMethods(ColorSwatch.__proto__),
      _get: dart.fnType(ui.Color, [core.Object])
    }));
    dart.setLibraryUri(ColorSwatch, "package:flutter_web/src/painting/colors.dart");
    dart.setFieldSignature(ColorSwatch, () => ({
      __proto__: dart.getFields(ColorSwatch.__proto__),
      [_swatch$]: dart.finalFieldType(core.Map$(T, ui.Color))
    }));
    dart.defineExtensionMethods(ColorSwatch, ['_equals', 'toString']);
    dart.defineExtensionAccessors(ColorSwatch, ['hashCode']);
    return ColorSwatch;
  });
  colors.ColorSwatch = colors.ColorSwatch$();
  dart.addTypeTests(colors.ColorSwatch, _is_ColorSwatch_default);
  let C656;
  colors.ColorProperty = class ColorProperty extends diagnostics.DiagnosticsProperty$(ui.Color) {
    toJsonMap(delegate) {
      let json = super.toJsonMap(delegate);
      if (this.value != null) {
        json[$_set]("valueProperties", new (IdentityMapOfString$Object()).from(["red", this.value.red, "green", this.value.green, "blue", this.value.blue, "alpha", this.value.alpha]));
      }
      return json;
    }
  };
  (colors.ColorProperty.new = function(name, value, opts) {
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C653 || CT.C653;
    let style = opts && 'style' in opts ? opts.style : C656 || CT.C656;
    let level = opts && 'level' in opts ? opts.level : C654 || CT.C654;
    if (!(showName != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 477, 15, "t(showName != nu");
    if (!(style != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 478, 15, "t(style != nu");
    if (!(level != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 479, 15, "t(level != nu");
    colors.ColorProperty.__proto__.new.call(this, name, value, {defaultValue: defaultValue, showName: showName, style: style, level: level});
    ;
  }).prototype = colors.ColorProperty.prototype;
  dart.addTypeTests(colors.ColorProperty);
  dart.setLibraryUri(colors.ColorProperty, "package:flutter_web/src/painting/colors.dart");
  colors._getHue = function _getHue(red, green, blue, max, delta) {
    let hue = null;
    if (max === 0.0) {
      hue = 0.0;
    } else if (max == red) {
      hue = 60.0 * ((dart.notNull(green) - dart.notNull(blue)) / dart.notNull(delta))[$modulo](6);
    } else if (max == green) {
      hue = 60.0 * ((dart.notNull(blue) - dart.notNull(red)) / dart.notNull(delta) + 2);
    } else if (max == blue) {
      hue = 60.0 * ((dart.notNull(red) - dart.notNull(green)) / dart.notNull(delta) + 4);
    }
    hue = hue[$isNaN] ? 0.0 : hue;
    return hue;
  };
  colors._colorFromHue = function _colorFromHue(alpha, hue, chroma, secondary, match) {
    let red = null;
    let green = null;
    let blue = null;
    if (dart.notNull(hue) < 60.0) {
      red = chroma;
      green = secondary;
      blue = 0.0;
    } else if (dart.notNull(hue) < 120.0) {
      red = secondary;
      green = chroma;
      blue = 0.0;
    } else if (dart.notNull(hue) < 180.0) {
      red = 0.0;
      green = chroma;
      blue = secondary;
    } else if (dart.notNull(hue) < 240.0) {
      red = 0.0;
      green = secondary;
      blue = chroma;
    } else if (dart.notNull(hue) < 300.0) {
      red = secondary;
      green = 0.0;
      blue = chroma;
    } else {
      red = chroma;
      green = 0.0;
      blue = secondary;
    }
    return new ui.Color.fromARGB((dart.notNull(alpha) * 255)[$round](), ((dart.notNull(red) + dart.notNull(match)) * 255)[$round](), ((dart.notNull(green) + dart.notNull(match)) * 255)[$round](), ((dart.notNull(blue) + dart.notNull(match)) * 255)[$round]());
  };
  let C657;
  let C658;
  let C659;
  let C660;
  const _clipAndPaint = dart.privateName(clip, "_clipAndPaint");
  clip.ClipContext = class ClipContext extends core.Object {
    [_clipAndPaint](canvasClipCall, clipBehavior, bounds, painter) {
      if (!(canvasClipCall != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/clip.dart", 14, 12, "canvasClipCall != null");
      this.canvas.save();
      switch (clipBehavior) {
        case C657 || CT.C657:
        {
          break;
        }
        case C658 || CT.C658:
        {
          canvasClipCall(false);
          break;
        }
        case C659 || CT.C659:
        {
          canvasClipCall(true);
          break;
        }
        case C660 || CT.C660:
        {
          canvasClipCall(true);
          this.canvas.saveLayer(bounds, new ui.Paint.new());
          break;
        }
      }
      painter();
      if (dart.equals(clipBehavior, ui.Clip.antiAliasWithSaveLayer)) {
        this.canvas.restore();
      }
      this.canvas.restore();
    }
    clipPathAndPaint(path, clipBehavior, bounds, painter) {
      this[_clipAndPaint](dart.fn(doAntiAias => this.canvas.clipPath(path, {doAntiAlias: doAntiAias}), boolTovoid()), clipBehavior, bounds, painter);
    }
    clipRRectAndPaint(rrect, clipBehavior, bounds, painter) {
      this[_clipAndPaint](dart.fn(doAntiAias => this.canvas.clipRRect(rrect, {doAntiAlias: doAntiAias}), boolTovoid()), clipBehavior, bounds, painter);
    }
    clipRectAndPaint(rect, clipBehavior, bounds, painter) {
      this[_clipAndPaint](dart.fn(doAntiAias => this.canvas.clipRect(rect, {doAntiAlias: doAntiAias}), boolTovoid()), clipBehavior, bounds, painter);
    }
  };
  (clip.ClipContext.new = function() {
    ;
  }).prototype = clip.ClipContext.prototype;
  dart.addTypeTests(clip.ClipContext);
  dart.setMethodSignature(clip.ClipContext, () => ({
    __proto__: dart.getMethods(clip.ClipContext.__proto__),
    [_clipAndPaint]: dart.fnType(dart.void, [dart.fnType(dart.void, [core.bool]), ui.Clip, ui.Rect, dart.fnType(dart.void, [])]),
    clipPathAndPaint: dart.fnType(dart.void, [ui.Path, ui.Clip, ui.Rect, dart.fnType(dart.void, [])]),
    clipRRectAndPaint: dart.fnType(dart.void, [ui.RRect, ui.Clip, ui.Rect, dart.fnType(dart.void, [])]),
    clipRectAndPaint: dart.fnType(dart.void, [ui.Rect, ui.Clip, ui.Rect, dart.fnType(dart.void, [])])
  }));
  dart.setLibraryUri(clip.ClipContext, "package:flutter_web/src/painting/clip.dart");
  let C661;
  const _frictionSimulation = dart.privateName(scroll_simulation, "_frictionSimulation");
  const _springSimulation = dart.privateName(scroll_simulation, "_springSimulation");
  const _springTime = dart.privateName(scroll_simulation, "_springTime");
  const _timeOffset = dart.privateName(scroll_simulation, "_timeOffset");
  const _underscrollSimulation = dart.privateName(scroll_simulation, "_underscrollSimulation");
  const _overscrollSimulation = dart.privateName(scroll_simulation, "_overscrollSimulation");
  const _simulation = dart.privateName(scroll_simulation, "_simulation");
  scroll_simulation.BouncingScrollSimulation = class BouncingScrollSimulation extends simulation.Simulation {
    get leadingExtent() {
      return this[leadingExtent$];
    }
    set leadingExtent(value) {
      super.leadingExtent = value;
    }
    get trailingExtent() {
      return this[trailingExtent$];
    }
    set trailingExtent(value) {
      super.trailingExtent = value;
    }
    get spring() {
      return this[spring$];
    }
    set spring(value) {
      super.spring = value;
    }
    [_underscrollSimulation](x, dx) {
      return new spring_simulation.ScrollSpringSimulation.new(this.spring, x, this.leadingExtent, dx);
    }
    [_overscrollSimulation](x, dx) {
      return new spring_simulation.ScrollSpringSimulation.new(this.spring, x, this.trailingExtent, dx);
    }
    [_simulation](time) {
      let t16;
      let simulation = null;
      if (dart.notNull(time) > dart.notNull(this[_springTime])) {
        this[_timeOffset] = this[_springTime][$isFinite] ? this[_springTime] : 0.0;
        simulation = this[_springSimulation];
      } else {
        this[_timeOffset] = 0.0;
        simulation = this[_frictionSimulation];
      }
      t16 = simulation;
      t16.tolerance = this.tolerance;
      return t16;
    }
    x(time) {
      return this[_simulation](time).x(dart.notNull(time) - dart.notNull(this[_timeOffset]));
    }
    dx(time) {
      return this[_simulation](time).dx(dart.notNull(time) - dart.notNull(this[_timeOffset]));
    }
    isDone(time) {
      return this[_simulation](time).isDone(dart.notNull(time) - dart.notNull(this[_timeOffset]));
    }
    toString() {
      if (dart.test(util.assertionsEnabled)) {
        return dart.str(this[$runtimeType]) + "(leadingExtent: " + dart.str(this.leadingExtent) + ", " + "trailingExtent: " + dart.str(this.trailingExtent) + ")";
      } else {
        return super.toString();
      }
    }
  };
  (scroll_simulation.BouncingScrollSimulation.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : null;
    let leadingExtent = opts && 'leadingExtent' in opts ? opts.leadingExtent : null;
    let trailingExtent = opts && 'trailingExtent' in opts ? opts.trailingExtent : null;
    let spring = opts && 'spring' in opts ? opts.spring : null;
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C661 || CT.C661;
    this[_frictionSimulation] = null;
    this[_springSimulation] = null;
    this[_springTime] = null;
    this[_timeOffset] = 0.0;
    this[leadingExtent$] = leadingExtent;
    this[trailingExtent$] = trailingExtent;
    this[spring$] = spring;
    if (!(position != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 40, 16, "position != null");
    if (!(velocity != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 41, 16, "velocity != null");
    if (!(leadingExtent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 42, 16, "leadingExtent != null");
    if (!(trailingExtent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 43, 16, "trailingExtent != null");
    if (!(dart.notNull(leadingExtent) <= dart.notNull(trailingExtent))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 44, 16, "leadingExtent <= trailingExtent");
    if (!(spring != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 45, 16, "spring != null");
    scroll_simulation.BouncingScrollSimulation.__proto__.new.call(this, {tolerance: tolerance});
    if (dart.notNull(position) < dart.notNull(this.leadingExtent)) {
      this[_springSimulation] = this[_underscrollSimulation](position, velocity);
      this[_springTime] = -1 / 0;
    } else if (dart.notNull(position) > dart.notNull(this.trailingExtent)) {
      this[_springSimulation] = this[_overscrollSimulation](position, velocity);
      this[_springTime] = -1 / 0;
    } else {
      this[_frictionSimulation] = new friction_simulation.FrictionSimulation.new(0.135, position, velocity);
      let finalX = this[_frictionSimulation].finalX;
      if (dart.notNull(velocity) > 0.0 && dart.notNull(finalX) > dart.notNull(this.trailingExtent)) {
        this[_springTime] = this[_frictionSimulation].timeAtX(this.trailingExtent);
        this[_springSimulation] = this[_overscrollSimulation](this.trailingExtent, math.min(core.double, this[_frictionSimulation].dx(this[_springTime]), 5000));
        if (!this[_springTime][$isFinite]) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 63, 16, "_springTime.isFinite");
      } else if (dart.notNull(velocity) < 0.0 && dart.notNull(finalX) < dart.notNull(this.leadingExtent)) {
        this[_springTime] = this[_frictionSimulation].timeAtX(this.leadingExtent);
        this[_springSimulation] = this[_underscrollSimulation](this.leadingExtent, math.min(core.double, this[_frictionSimulation].dx(this[_springTime]), 5000));
        if (!this[_springTime][$isFinite]) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 71, 16, "_springTime.isFinite");
      } else {
        this[_springTime] = 1 / 0;
      }
    }
    if (!(this[_springTime] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 76, 12, "_springTime != null");
  }).prototype = scroll_simulation.BouncingScrollSimulation.prototype;
  dart.addTypeTests(scroll_simulation.BouncingScrollSimulation);
  const leadingExtent$ = Symbol("BouncingScrollSimulation.leadingExtent");
  const trailingExtent$ = Symbol("BouncingScrollSimulation.trailingExtent");
  const spring$ = Symbol("BouncingScrollSimulation.spring");
  dart.setMethodSignature(scroll_simulation.BouncingScrollSimulation, () => ({
    __proto__: dart.getMethods(scroll_simulation.BouncingScrollSimulation.__proto__),
    [_underscrollSimulation]: dart.fnType(simulation.Simulation, [core.double, core.double]),
    [_overscrollSimulation]: dart.fnType(simulation.Simulation, [core.double, core.double]),
    [_simulation]: dart.fnType(simulation.Simulation, [core.double]),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double]),
    isDone: dart.fnType(core.bool, [core.double])
  }));
  dart.setLibraryUri(scroll_simulation.BouncingScrollSimulation, "package:flutter_web/src/widgets/scroll_simulation.dart");
  dart.setFieldSignature(scroll_simulation.BouncingScrollSimulation, () => ({
    __proto__: dart.getFields(scroll_simulation.BouncingScrollSimulation.__proto__),
    leadingExtent: dart.finalFieldType(core.double),
    trailingExtent: dart.finalFieldType(core.double),
    spring: dart.finalFieldType(spring_simulation.SpringDescription),
    [_frictionSimulation]: dart.fieldType(friction_simulation.FrictionSimulation),
    [_springSimulation]: dart.fieldType(simulation.Simulation),
    [_springTime]: dart.fieldType(core.double),
    [_timeOffset]: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(scroll_simulation.BouncingScrollSimulation, ['toString']);
  dart.defineLazy(scroll_simulation.BouncingScrollSimulation, {
    /*scroll_simulation.BouncingScrollSimulation.maxSpringTransferVelocity*/get maxSpringTransferVelocity() {
      return 5000;
    }
  });
  const _duration$ = dart.privateName(scroll_simulation, "_duration");
  const _distance = dart.privateName(scroll_simulation, "_distance");
  const _flingDuration = dart.privateName(scroll_simulation, "_flingDuration");
  scroll_simulation.ClampingScrollSimulation = class ClampingScrollSimulation extends simulation.Simulation {
    get position() {
      return this[position$0];
    }
    set position(value) {
      super.position = value;
    }
    get velocity() {
      return this[velocity$0];
    }
    set velocity(value) {
      super.velocity = value;
    }
    get friction() {
      return this[friction$];
    }
    set friction(value) {
      super.friction = value;
    }
    static _decelerationForFriction(friction) {
      return dart.notNull(friction) * 61774.04968;
    }
    [_flingDuration](velocity) {
      let scaledFriction = dart.notNull(this.friction) * dart.notNull(scroll_simulation.ClampingScrollSimulation._decelerationForFriction(0.84));
      let deceleration = math.log(0.35 * velocity[$abs]() / scaledFriction);
      return math.exp(deceleration / (dart.notNull(scroll_simulation.ClampingScrollSimulation._kDecelerationRate) - 1.0));
    }
    static _flingDistancePenetration(t) {
      return 1.2 * dart.notNull(t) * dart.notNull(t) * dart.notNull(t) - 3.27 * dart.notNull(t) * dart.notNull(t) + 3.065 * dart.notNull(t);
    }
    static _flingVelocityPenetration(t) {
      return 3.6 * dart.notNull(t) * dart.notNull(t) - 6.54 * dart.notNull(t) + 3.065;
    }
    x(time) {
      let t = (dart.notNull(time) / dart.notNull(this[_duration$]))[$clamp](0.0, 1.0);
      return dart.notNull(this.position) + dart.notNull(this[_distance]) * dart.notNull(scroll_simulation.ClampingScrollSimulation._flingDistancePenetration(t)) * this.velocity[$sign];
    }
    dx(time) {
      let t = (dart.notNull(time) / dart.notNull(this[_duration$]))[$clamp](0.0, 1.0);
      return dart.notNull(this[_distance]) * dart.notNull(scroll_simulation.ClampingScrollSimulation._flingVelocityPenetration(t)) * this.velocity[$sign] / dart.notNull(this[_duration$]);
    }
    isDone(time) {
      return dart.notNull(time) >= dart.notNull(this[_duration$]);
    }
  };
  (scroll_simulation.ClampingScrollSimulation.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : null;
    let friction = opts && 'friction' in opts ? opts.friction : 0.015;
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C661 || CT.C661;
    this[_duration$] = null;
    this[_distance] = null;
    this[position$0] = position;
    this[velocity$0] = velocity;
    this[friction$] = friction;
    if (!(scroll_simulation.ClampingScrollSimulation._flingVelocityPenetration(0.0) === 3.065)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 160, 16, "_flingVelocityPenetration(0.0) == _initialVelocityPenetration");
    scroll_simulation.ClampingScrollSimulation.__proto__.new.call(this, {tolerance: tolerance});
    this[_duration$] = this[_flingDuration](this.velocity);
    this[_distance] = (dart.notNull(this.velocity) * dart.notNull(this[_duration$]) / 3.065)[$abs]();
  }).prototype = scroll_simulation.ClampingScrollSimulation.prototype;
  dart.addTypeTests(scroll_simulation.ClampingScrollSimulation);
  const position$0 = Symbol("ClampingScrollSimulation.position");
  const velocity$0 = Symbol("ClampingScrollSimulation.velocity");
  const friction$ = Symbol("ClampingScrollSimulation.friction");
  dart.setMethodSignature(scroll_simulation.ClampingScrollSimulation, () => ({
    __proto__: dart.getMethods(scroll_simulation.ClampingScrollSimulation.__proto__),
    [_flingDuration]: dart.fnType(core.double, [core.double]),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double]),
    isDone: dart.fnType(core.bool, [core.double])
  }));
  dart.setLibraryUri(scroll_simulation.ClampingScrollSimulation, "package:flutter_web/src/widgets/scroll_simulation.dart");
  dart.setFieldSignature(scroll_simulation.ClampingScrollSimulation, () => ({
    __proto__: dart.getFields(scroll_simulation.ClampingScrollSimulation.__proto__),
    position: dart.finalFieldType(core.double),
    velocity: dart.finalFieldType(core.double),
    friction: dart.finalFieldType(core.double),
    [_duration$]: dart.fieldType(core.double),
    [_distance]: dart.fieldType(core.double)
  }));
  dart.defineLazy(scroll_simulation.ClampingScrollSimulation, {
    /*scroll_simulation.ClampingScrollSimulation._kDecelerationRate*/get _kDecelerationRate() {
      return math.log(0.78) / math.log(0.9);
    },
    /*scroll_simulation.ClampingScrollSimulation._initialVelocityPenetration*/get _initialVelocityPenetration() {
      return 3.065;
    }
  });
  const _items = dart.privateName(tween_sequence, "_items");
  const _intervals = dart.privateName(tween_sequence, "_intervals");
  const _evaluateAt = dart.privateName(tween_sequence, "_evaluateAt");
  const _is_TweenSequence_default = Symbol('_is_TweenSequence_default');
  tween_sequence.TweenSequence$ = dart.generic(T => {
    let TweenSequenceItemOfT = () => (TweenSequenceItemOfT = dart.constFn(tween_sequence.TweenSequenceItem$(T)))();
    let JSArrayOfTweenSequenceItemOfT = () => (JSArrayOfTweenSequenceItemOfT = dart.constFn(_interceptors.JSArray$(TweenSequenceItemOfT())))();
    class TweenSequence extends tween.Animatable$(T) {
      [_evaluateAt](t, index) {
        let element = this[_items][$_get](index);
        let tInterval = this[_intervals][$_get](index).value(t);
        return element.tween.transform(tInterval);
      }
      transform(t) {
        if (!(dart.notNull(t) >= 0.0 && dart.notNull(t) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 79, 12, "t >= 0.0 && t <= 1.0");
        if (t === 1.0) return this[_evaluateAt](t, dart.notNull(this[_items][$length]) - 1);
        for (let index = 0; index < dart.notNull(this[_items][$length]); index = index + 1) {
          if (dart.test(this[_intervals][$_get](index).contains(t))) return this[_evaluateAt](t, index);
        }
        if (!false) dart.assertFailed("TweenSequence.evaluate() could not find a interval for " + dart.str(t), "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 87, 12, "false");
        return null;
      }
      toString() {
        return "TweenSequence(" + dart.str(this[_items][$length]) + " items)";
      }
    }
    (TweenSequence.new = function(items) {
      this[_items] = JSArrayOfTweenSequenceItemOfT().of([]);
      this[_intervals] = JSArrayOf_Interval().of([]);
      if (!(items != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 51, 16, "items != null");
      if (!dart.test(items[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 52, 16, "items.isNotEmpty");
      TweenSequence.__proto__.new.call(this);
      this[_items][$addAll](items);
      let totalWeight = 0.0;
      for (let item of this[_items])
        totalWeight = totalWeight + dart.notNull(item.weight);
      if (!(totalWeight > 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 58, 12, "totalWeight > 0.0");
      let start = 0.0;
      for (let i = 0; i < dart.notNull(this[_items][$length]); i = i + 1) {
        let end = i === dart.notNull(this[_items][$length]) - 1 ? 1.0 : start + dart.notNull(this[_items][$_get](i).weight) / totalWeight;
        this[_intervals][$add](new tween_sequence._Interval.new(start, end));
        start = end;
      }
    }).prototype = TweenSequence.prototype;
    dart.addTypeTests(TweenSequence);
    TweenSequence.prototype[_is_TweenSequence_default] = true;
    dart.setMethodSignature(TweenSequence, () => ({
      __proto__: dart.getMethods(TweenSequence.__proto__),
      [_evaluateAt]: dart.fnType(T, [core.double, core.int]),
      transform: dart.fnType(T, [core.double])
    }));
    dart.setLibraryUri(TweenSequence, "package:flutter_web/src/animation/tween_sequence.dart");
    dart.setFieldSignature(TweenSequence, () => ({
      __proto__: dart.getFields(TweenSequence.__proto__),
      [_items]: dart.finalFieldType(core.List$(tween_sequence.TweenSequenceItem$(T))),
      [_intervals]: dart.finalFieldType(core.List$(tween_sequence._Interval))
    }));
    dart.defineExtensionMethods(TweenSequence, ['toString']);
    return TweenSequence;
  });
  tween_sequence.TweenSequence = tween_sequence.TweenSequence$();
  dart.addTypeTests(tween_sequence.TweenSequence, _is_TweenSequence_default);
  const _is_TweenSequenceItem_default = Symbol('_is_TweenSequenceItem_default');
  tween_sequence.TweenSequenceItem$ = dart.generic(T => {
    class TweenSequenceItem extends core.Object {
      get tween() {
        return this[tween$];
      }
      set tween(value) {
        super.tween = value;
      }
      get weight() {
        return this[weight$];
      }
      set weight(value) {
        super.weight = value;
      }
    }
    (TweenSequenceItem.new = function(opts) {
      let tween = opts && 'tween' in opts ? opts.tween : null;
      let weight = opts && 'weight' in opts ? opts.weight : null;
      this[tween$] = tween;
      this[weight$] = weight;
      if (!(tween != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 103, 15, "tween != null");
      if (!(weight != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 104, 15, "weight != null");
      if (!(dart.notNull(weight) > 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 105, 15, "weight > 0.0");
      ;
    }).prototype = TweenSequenceItem.prototype;
    dart.addTypeTests(TweenSequenceItem);
    TweenSequenceItem.prototype[_is_TweenSequenceItem_default] = true;
    const tween$ = Symbol("TweenSequenceItem.tween");
    const weight$ = Symbol("TweenSequenceItem.weight");
    dart.setLibraryUri(TweenSequenceItem, "package:flutter_web/src/animation/tween_sequence.dart");
    dart.setFieldSignature(TweenSequenceItem, () => ({
      __proto__: dart.getFields(TweenSequenceItem.__proto__),
      tween: dart.finalFieldType(tween.Animatable$(T)),
      weight: dart.finalFieldType(core.double)
    }));
    return TweenSequenceItem;
  });
  tween_sequence.TweenSequenceItem = tween_sequence.TweenSequenceItem$();
  dart.addTypeTests(tween_sequence.TweenSequenceItem, _is_TweenSequenceItem_default);
  tween_sequence._Interval = class _Interval extends core.Object {
    contains(t) {
      return dart.notNull(t) >= dart.notNull(this.start) && dart.notNull(t) < dart.notNull(this.end);
    }
    value(t) {
      return (dart.notNull(t) - dart.notNull(this.start)) / (dart.notNull(this.end) - dart.notNull(this.start));
    }
    toString() {
      return "<" + dart.str(this.start) + ", " + dart.str(this.end) + ">";
    }
  };
  (tween_sequence._Interval.new = function(start, end) {
    this.start = start;
    this.end = end;
    if (!(dart.notNull(end) > dart.notNull(start))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 132, 50, "end > start");
    ;
  }).prototype = tween_sequence._Interval.prototype;
  dart.addTypeTests(tween_sequence._Interval);
  dart.setMethodSignature(tween_sequence._Interval, () => ({
    __proto__: dart.getMethods(tween_sequence._Interval.__proto__),
    contains: dart.fnType(core.bool, [core.double]),
    value: dart.fnType(core.double, [core.double])
  }));
  dart.setLibraryUri(tween_sequence._Interval, "package:flutter_web/src/animation/tween_sequence.dart");
  dart.setFieldSignature(tween_sequence._Interval, () => ({
    __proto__: dart.getFields(tween_sequence._Interval.__proto__),
    start: dart.finalFieldType(core.double),
    end: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(tween_sequence._Interval, ['toString']);
  const _name$8 = dart.privateName(scale, "_name");
  let C662;
  let C663;
  let C664;
  let C665;
  let C666;
  scale._ScaleState = class _ScaleState extends core.Object {
    toString() {
      return this[_name$8];
    }
  };
  (scale._ScaleState.new = function(index, _name) {
    this.index = index;
    this[_name$8] = _name;
    ;
  }).prototype = scale._ScaleState.prototype;
  dart.addTypeTests(scale._ScaleState);
  dart.setLibraryUri(scale._ScaleState, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(scale._ScaleState, () => ({
    __proto__: dart.getFields(scale._ScaleState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$8]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(scale._ScaleState, ['toString']);
  scale._ScaleState.ready = C662 || CT.C662;
  scale._ScaleState.possible = C663 || CT.C663;
  scale._ScaleState.accepted = C664 || CT.C664;
  scale._ScaleState.started = C665 || CT.C665;
  scale._ScaleState.values = C666 || CT.C666;
  scale.ScaleStartDetails = class ScaleStartDetails extends core.Object {
    get focalPoint() {
      return this[focalPoint$];
    }
    set focalPoint(value) {
      super.focalPoint = value;
    }
    toString() {
      return "ScaleStartDetails(focalPoint: " + dart.str(this.focalPoint) + ")";
    }
  };
  (scale.ScaleStartDetails.new = function(opts) {
    let focalPoint = opts && 'focalPoint' in opts ? opts.focalPoint : C130 || CT.C130;
    this[focalPoint$] = focalPoint;
    if (!(focalPoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 38, 14, "focalPoint != null");
    ;
  }).prototype = scale.ScaleStartDetails.prototype;
  dart.addTypeTests(scale.ScaleStartDetails);
  const focalPoint$ = Symbol("ScaleStartDetails.focalPoint");
  dart.setLibraryUri(scale.ScaleStartDetails, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(scale.ScaleStartDetails, () => ({
    __proto__: dart.getFields(scale.ScaleStartDetails.__proto__),
    focalPoint: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(scale.ScaleStartDetails, ['toString']);
  scale.ScaleUpdateDetails = class ScaleUpdateDetails extends core.Object {
    get focalPoint() {
      return this[focalPoint$0];
    }
    set focalPoint(value) {
      super.focalPoint = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    get horizontalScale() {
      return this[horizontalScale$];
    }
    set horizontalScale(value) {
      super.horizontalScale = value;
    }
    get verticalScale() {
      return this[verticalScale$];
    }
    set verticalScale(value) {
      super.verticalScale = value;
    }
    get rotation() {
      return this[rotation$];
    }
    set rotation(value) {
      super.rotation = value;
    }
    toString() {
      return "ScaleUpdateDetails(focalPoint: " + dart.str(this.focalPoint) + ", scale: " + dart.str(this.scale) + ", horizontalScale: " + dart.str(this.horizontalScale) + ", verticalScale: " + dart.str(this.verticalScale) + ", rotation: " + dart.str(this.rotation) + ")";
    }
  };
  (scale.ScaleUpdateDetails.new = function(opts) {
    let focalPoint = opts && 'focalPoint' in opts ? opts.focalPoint : C130 || CT.C130;
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let horizontalScale = opts && 'horizontalScale' in opts ? opts.horizontalScale : 1;
    let verticalScale = opts && 'verticalScale' in opts ? opts.verticalScale : 1;
    let rotation = opts && 'rotation' in opts ? opts.rotation : 0;
    this[focalPoint$0] = focalPoint;
    this[scale$] = scale;
    this[horizontalScale$] = horizontalScale;
    this[verticalScale$] = verticalScale;
    this[rotation$] = rotation;
    if (!(focalPoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 61, 15, "focalPoint != null");
    if (!(scale != null && dart.notNull(scale) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 62, 15, "scale != null && scale >= 0.0");
    if (!(horizontalScale != null && dart.notNull(horizontalScale) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 63, 15, "horizontalScale != null && horizontalScale >= 0.0");
    if (!(verticalScale != null && dart.notNull(verticalScale) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 64, 15, "verticalScale != null && verticalScale >= 0.0");
    if (!(rotation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 65, 15, "rotation != null");
    ;
  }).prototype = scale.ScaleUpdateDetails.prototype;
  dart.addTypeTests(scale.ScaleUpdateDetails);
  const focalPoint$0 = Symbol("ScaleUpdateDetails.focalPoint");
  const scale$ = Symbol("ScaleUpdateDetails.scale");
  const horizontalScale$ = Symbol("ScaleUpdateDetails.horizontalScale");
  const verticalScale$ = Symbol("ScaleUpdateDetails.verticalScale");
  const rotation$ = Symbol("ScaleUpdateDetails.rotation");
  dart.setLibraryUri(scale.ScaleUpdateDetails, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(scale.ScaleUpdateDetails, () => ({
    __proto__: dart.getFields(scale.ScaleUpdateDetails.__proto__),
    focalPoint: dart.finalFieldType(ui.Offset),
    scale: dart.finalFieldType(core.double),
    horizontalScale: dart.finalFieldType(core.double),
    verticalScale: dart.finalFieldType(core.double),
    rotation: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(scale.ScaleUpdateDetails, ['toString']);
  scale.ScaleEndDetails = class ScaleEndDetails extends core.Object {
    get velocity() {
      return this[velocity$1];
    }
    set velocity(value) {
      super.velocity = value;
    }
    toString() {
      return "ScaleEndDetails(velocity: " + dart.str(this.velocity) + ")";
    }
  };
  (scale.ScaleEndDetails.new = function(opts) {
    let velocity = opts && 'velocity' in opts ? opts.velocity : C652 || CT.C652;
    this[velocity$1] = velocity;
    if (!(velocity != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 121, 14, "velocity != null");
    ;
  }).prototype = scale.ScaleEndDetails.prototype;
  dart.addTypeTests(scale.ScaleEndDetails);
  const velocity$1 = Symbol("ScaleEndDetails.velocity");
  dart.setLibraryUri(scale.ScaleEndDetails, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(scale.ScaleEndDetails, () => ({
    __proto__: dart.getFields(scale.ScaleEndDetails.__proto__),
    velocity: dart.finalFieldType(velocity_tracker.Velocity)
  }));
  dart.defineExtensionMethods(scale.ScaleEndDetails, ['toString']);
  scale._LineBetweenPointers = class _LineBetweenPointers extends core.Object {};
  (scale._LineBetweenPointers.new = function(opts) {
    let pointerStartLocation = opts && 'pointerStartLocation' in opts ? opts.pointerStartLocation : C130 || CT.C130;
    let pointerStartId = opts && 'pointerStartId' in opts ? opts.pointerStartId : 0;
    let pointerEndLocation = opts && 'pointerEndLocation' in opts ? opts.pointerEndLocation : C130 || CT.C130;
    let pointerEndId = opts && 'pointerEndId' in opts ? opts.pointerEndId : 1;
    this.pointerStartLocation = pointerStartLocation;
    this.pointerStartId = pointerStartId;
    this.pointerEndLocation = pointerEndLocation;
    this.pointerEndId = pointerEndId;
    if (!(pointerStartLocation != null && pointerEndLocation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 162, 15, "pointerStartLocation != null && pointerEndLocation != null");
    if (!(pointerStartId != null && pointerEndId != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 163, 15, "pointerStartId != null && pointerEndId != null");
    if (!(pointerStartId != pointerEndId)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 164, 15, "pointerStartId != pointerEndId");
    ;
  }).prototype = scale._LineBetweenPointers.prototype;
  dart.addTypeTests(scale._LineBetweenPointers);
  dart.setLibraryUri(scale._LineBetweenPointers, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(scale._LineBetweenPointers, () => ({
    __proto__: dart.getFields(scale._LineBetweenPointers.__proto__),
    pointerStartLocation: dart.finalFieldType(ui.Offset),
    pointerStartId: dart.finalFieldType(core.int),
    pointerEndLocation: dart.finalFieldType(ui.Offset),
    pointerEndId: dart.finalFieldType(core.int)
  }));
  const _state = dart.privateName(scale, "_state");
  const _initialFocalPoint = dart.privateName(scale, "_initialFocalPoint");
  const _currentFocalPoint = dart.privateName(scale, "_currentFocalPoint");
  const _initialSpan = dart.privateName(scale, "_initialSpan");
  const _currentSpan = dart.privateName(scale, "_currentSpan");
  const _initialHorizontalSpan = dart.privateName(scale, "_initialHorizontalSpan");
  const _currentHorizontalSpan = dart.privateName(scale, "_currentHorizontalSpan");
  const _initialVerticalSpan = dart.privateName(scale, "_initialVerticalSpan");
  const _currentVerticalSpan = dart.privateName(scale, "_currentVerticalSpan");
  const _initialLine = dart.privateName(scale, "_initialLine");
  const _currentLine = dart.privateName(scale, "_currentLine");
  const _pointerLocations = dart.privateName(scale, "_pointerLocations");
  const _pointerQueue = dart.privateName(scale, "_pointerQueue");
  const _velocityTrackers = dart.privateName(scale, "_velocityTrackers");
  const _scaleFactor = dart.privateName(scale, "_scaleFactor");
  const _horizontalScaleFactor = dart.privateName(scale, "_horizontalScaleFactor");
  const _verticalScaleFactor = dart.privateName(scale, "_verticalScaleFactor");
  const _computeRotationFactor = dart.privateName(scale, "_computeRotationFactor");
  const _updateLines = dart.privateName(scale, "_updateLines");
  const _update = dart.privateName(scale, "_update");
  const _reconfigure = dart.privateName(scale, "_reconfigure");
  const _advanceStateMachine = dart.privateName(scale, "_advanceStateMachine");
  const _dispatchOnStartCallbackIfNeeded = dart.privateName(scale, "_dispatchOnStartCallbackIfNeeded");
  scale.ScaleGestureRecognizer = class ScaleGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get onStart() {
      return this[onStart];
    }
    set onStart(value) {
      this[onStart] = value;
    }
    get onUpdate() {
      return this[onUpdate];
    }
    set onUpdate(value) {
      this[onUpdate] = value;
    }
    get onEnd() {
      return this[onEnd];
    }
    set onEnd(value) {
      this[onEnd] = value;
    }
    get [_scaleFactor]() {
      return dart.notNull(this[_initialSpan]) > 0.0 ? dart.notNull(this[_currentSpan]) / dart.notNull(this[_initialSpan]) : 1.0;
    }
    get [_horizontalScaleFactor]() {
      return dart.notNull(this[_initialHorizontalSpan]) > 0.0 ? dart.notNull(this[_currentHorizontalSpan]) / dart.notNull(this[_initialHorizontalSpan]) : 1.0;
    }
    get [_verticalScaleFactor]() {
      return dart.notNull(this[_initialVerticalSpan]) > 0.0 ? dart.notNull(this[_currentVerticalSpan]) / dart.notNull(this[_initialVerticalSpan]) : 1.0;
    }
    [_computeRotationFactor]() {
      if (this[_initialLine] == null || this[_currentLine] == null) {
        return 0.0;
      }
      let fx = this[_initialLine].pointerStartLocation.dx;
      let fy = this[_initialLine].pointerStartLocation.dy;
      let sx = this[_initialLine].pointerEndLocation.dx;
      let sy = this[_initialLine].pointerEndLocation.dy;
      let nfx = this[_currentLine].pointerStartLocation.dx;
      let nfy = this[_currentLine].pointerStartLocation.dy;
      let nsx = this[_currentLine].pointerEndLocation.dx;
      let nsy = this[_currentLine].pointerEndLocation.dy;
      let angle1 = math.atan2(dart.notNull(fy) - dart.notNull(sy), dart.notNull(fx) - dart.notNull(sx));
      let angle2 = math.atan2(dart.notNull(nfy) - dart.notNull(nsy), dart.notNull(nfx) - dart.notNull(nsx));
      return angle2 - angle1;
    }
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer);
      this[_velocityTrackers][$_set](event.pointer, new velocity_tracker.VelocityTracker.new());
      if (dart.equals(this[_state], scale._ScaleState.ready)) {
        this[_state] = scale._ScaleState.possible;
        this[_initialSpan] = 0.0;
        this[_currentSpan] = 0.0;
        this[_initialHorizontalSpan] = 0.0;
        this[_currentHorizontalSpan] = 0.0;
        this[_initialVerticalSpan] = 0.0;
        this[_currentVerticalSpan] = 0.0;
        this[_pointerLocations] = new (IdentityMapOfint$Offset()).new();
        this[_pointerQueue] = JSArrayOfint().of([]);
      }
    }
    handleEvent(event) {
      if (!!dart.equals(this[_state], scale._ScaleState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 265, 12, "_state != _ScaleState.ready");
      let didChangeConfiguration = false;
      let shouldStartIfAccepted = false;
      if (events.PointerMoveEvent.is(event)) {
        let tracker = this[_velocityTrackers][$_get](event.pointer);
        if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 270, 14, "tracker != null");
        if (!dart.test(event.synthesized)) tracker.addPosition(event.timeStamp, event.position);
        this[_pointerLocations][$_set](event.pointer, event.position);
        shouldStartIfAccepted = true;
      } else if (events.PointerDownEvent.is(event)) {
        this[_pointerLocations][$_set](event.pointer, event.position);
        this[_pointerQueue][$add](event.pointer);
        didChangeConfiguration = true;
        shouldStartIfAccepted = true;
      } else if (events.PointerUpEvent.is(event) || events.PointerCancelEvent.is(event)) {
        this[_pointerLocations][$remove](event.pointer);
        this[_pointerQueue][$remove](event.pointer);
        didChangeConfiguration = true;
      }
      this[_updateLines]();
      this[_update]();
      if (!didChangeConfiguration || dart.test(this[_reconfigure](event.pointer))) this[_advanceStateMachine](shouldStartIfAccepted);
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    [_update]() {
      let count = this[_pointerLocations][$keys][$length];
      let focalPoint = ui.Offset.zero;
      for (let pointer of this[_pointerLocations][$keys])
        focalPoint = focalPoint['+'](this[_pointerLocations][$_get](pointer));
      this[_currentFocalPoint] = dart.notNull(count) > 0 ? focalPoint['/'](count[$toDouble]()) : ui.Offset.zero;
      let totalDeviation = 0.0;
      let totalHorizontalDeviation = 0.0;
      let totalVerticalDeviation = 0.0;
      for (let pointer of this[_pointerLocations][$keys]) {
        totalDeviation = totalDeviation + dart.notNull(this[_currentFocalPoint]['-'](this[_pointerLocations][$_get](pointer)).distance);
        totalHorizontalDeviation = totalHorizontalDeviation + (dart.notNull(this[_currentFocalPoint].dx) - dart.notNull(this[_pointerLocations][$_get](pointer).dx))[$abs]();
        totalVerticalDeviation = totalVerticalDeviation + (dart.notNull(this[_currentFocalPoint].dy) - dart.notNull(this[_pointerLocations][$_get](pointer).dy))[$abs]();
      }
      this[_currentSpan] = dart.notNull(count) > 0 ? totalDeviation / dart.notNull(count) : 0.0;
      this[_currentHorizontalSpan] = dart.notNull(count) > 0 ? totalHorizontalDeviation / dart.notNull(count) : 0.0;
      this[_currentVerticalSpan] = dart.notNull(count) > 0 ? totalVerticalDeviation / dart.notNull(count) : 0.0;
    }
    [_updateLines]() {
      let count = this[_pointerLocations][$keys][$length];
      if (!(dart.notNull(this[_pointerQueue][$length]) >= dart.notNull(count))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 323, 12, "_pointerQueue.length >= count");
      if (dart.notNull(count) < 2) {
        this[_initialLine] = this[_currentLine];
      } else if (this[_initialLine] != null && this[_initialLine].pointerStartId == this[_pointerQueue][$_get](0) && this[_initialLine].pointerEndId == this[_pointerQueue][$_get](1)) {
        this[_currentLine] = new scale._LineBetweenPointers.new({pointerStartId: this[_pointerQueue][$_get](0), pointerStartLocation: this[_pointerLocations][$_get](this[_pointerQueue][$_get](0)), pointerEndId: this[_pointerQueue][$_get](1), pointerEndLocation: this[_pointerLocations][$_get](this[_pointerQueue][$_get](1))});
      } else {
        this[_initialLine] = new scale._LineBetweenPointers.new({pointerStartId: this[_pointerQueue][$_get](0), pointerStartLocation: this[_pointerLocations][$_get](this[_pointerQueue][$_get](0)), pointerEndId: this[_pointerQueue][$_get](1), pointerEndLocation: this[_pointerLocations][$_get](this[_pointerQueue][$_get](1))});
        this[_currentLine] = null;
      }
    }
    [_reconfigure](pointer) {
      this[_initialFocalPoint] = this[_currentFocalPoint];
      this[_initialSpan] = this[_currentSpan];
      this[_initialLine] = this[_currentLine];
      this[_initialHorizontalSpan] = this[_currentHorizontalSpan];
      this[_initialVerticalSpan] = this[_currentVerticalSpan];
      if (dart.equals(this[_state], scale._ScaleState.started)) {
        if (this.onEnd != null) {
          let tracker = this[_velocityTrackers][$_get](pointer);
          if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 358, 16, "tracker != null");
          let velocity = tracker.getVelocity();
          if (dart.test(scale._isFlingGesture(velocity))) {
            let pixelsPerSecond = velocity.pixelsPerSecond;
            if (dart.notNull(pixelsPerSecond.distanceSquared) > 8000 * 8000) velocity = new velocity_tracker.Velocity.new({pixelsPerSecond: pixelsPerSecond['/'](pixelsPerSecond.distance)['*'](8000)});
            this.invokeCallback(dart.void, "onEnd", dart.fn(() => this.onEnd(new scale.ScaleEndDetails.new({velocity: velocity})), VoidTovoid()));
          } else {
            this.invokeCallback(dart.void, "onEnd", dart.fn(() => this.onEnd(new scale.ScaleEndDetails.new({velocity: velocity_tracker.Velocity.zero})), VoidTovoid()));
          }
        }
        this[_state] = scale._ScaleState.accepted;
        return false;
      }
      return true;
    }
    [_advanceStateMachine](shouldStartIfAccepted) {
      if (dart.equals(this[_state], scale._ScaleState.ready)) this[_state] = scale._ScaleState.possible;
      if (dart.equals(this[_state], scale._ScaleState.possible)) {
        let spanDelta = (dart.notNull(this[_currentSpan]) - dart.notNull(this[_initialSpan]))[$abs]();
        let focalPointDelta = this[_currentFocalPoint]['-'](this[_initialFocalPoint]).distance;
        if (spanDelta > 18 || dart.notNull(focalPointDelta) > 36) this.resolve(arena.GestureDisposition.accepted);
      } else if (dart.notNull(this[_state].index) >= dart.notNull(scale._ScaleState.accepted.index)) {
        this.resolve(arena.GestureDisposition.accepted);
      }
      if (dart.equals(this[_state], scale._ScaleState.accepted) && dart.test(shouldStartIfAccepted)) {
        this[_state] = scale._ScaleState.started;
        this[_dispatchOnStartCallbackIfNeeded]();
      }
      if (dart.equals(this[_state], scale._ScaleState.started) && this.onUpdate != null) this.invokeCallback(dart.void, "onUpdate", dart.fn(() => {
        this.onUpdate(new scale.ScaleUpdateDetails.new({scale: this[_scaleFactor], horizontalScale: this[_horizontalScaleFactor], verticalScale: this[_verticalScaleFactor], focalPoint: this[_currentFocalPoint], rotation: this[_computeRotationFactor]()}));
      }, VoidToNull()));
    }
    [_dispatchOnStartCallbackIfNeeded]() {
      if (!dart.equals(this[_state], scale._ScaleState.started)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 407, 12, "_state == _ScaleState.started");
      if (this.onStart != null) this.invokeCallback(dart.void, "onStart", dart.fn(() => this.onStart(new scale.ScaleStartDetails.new({focalPoint: this[_currentFocalPoint]})), VoidTovoid()));
    }
    acceptGesture(pointer) {
      if (dart.equals(this[_state], scale._ScaleState.possible)) {
        this[_state] = scale._ScaleState.started;
        this[_dispatchOnStartCallbackIfNeeded]();
      }
    }
    rejectGesture(pointer) {
      this.stopTrackingPointer(pointer);
    }
    didStopTrackingLastPointer(pointer) {
      switch (this[_state]) {
        case C663 || CT.C663:
        {
          this.resolve(arena.GestureDisposition.rejected);
          break;
        }
        case C662 || CT.C662:
        {
          if (!false) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 432, 16, "false");
          break;
        }
        case C664 || CT.C664:
        {
          break;
        }
        case C665 || CT.C665:
        {
          if (!false) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 437, 16, "false");
          break;
        }
      }
      this[_state] = scale._ScaleState.ready;
    }
    dispose() {
      this[_velocityTrackers][$clear]();
      super.dispose();
    }
    get debugDescription() {
      return "scale";
    }
  };
  (scale.ScaleGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onStart] = null;
    this[onUpdate] = null;
    this[onEnd] = null;
    this[_state] = scale._ScaleState.ready;
    this[_initialFocalPoint] = null;
    this[_currentFocalPoint] = null;
    this[_initialSpan] = null;
    this[_currentSpan] = null;
    this[_initialHorizontalSpan] = null;
    this[_currentHorizontalSpan] = null;
    this[_initialVerticalSpan] = null;
    this[_currentVerticalSpan] = null;
    this[_initialLine] = null;
    this[_currentLine] = null;
    this[_pointerLocations] = null;
    this[_pointerQueue] = null;
    this[_velocityTrackers] = new (IdentityMapOfint$VelocityTracker()).new();
    scale.ScaleGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = scale.ScaleGestureRecognizer.prototype;
  dart.addTypeTests(scale.ScaleGestureRecognizer);
  const onStart = Symbol("ScaleGestureRecognizer.onStart");
  const onUpdate = Symbol("ScaleGestureRecognizer.onUpdate");
  const onEnd = Symbol("ScaleGestureRecognizer.onEnd");
  dart.setMethodSignature(scale.ScaleGestureRecognizer, () => ({
    __proto__: dart.getMethods(scale.ScaleGestureRecognizer.__proto__),
    [_computeRotationFactor]: dart.fnType(core.double, []),
    addAllowedPointer: dart.fnType(dart.void, [events.PointerEvent]),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent]),
    [_update]: dart.fnType(dart.void, []),
    [_updateLines]: dart.fnType(dart.void, []),
    [_reconfigure]: dart.fnType(core.bool, [core.int]),
    [_advanceStateMachine]: dart.fnType(dart.void, [core.bool]),
    [_dispatchOnStartCallbackIfNeeded]: dart.fnType(dart.void, []),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(scale.ScaleGestureRecognizer, () => ({
    __proto__: dart.getGetters(scale.ScaleGestureRecognizer.__proto__),
    [_scaleFactor]: core.double,
    [_horizontalScaleFactor]: core.double,
    [_verticalScaleFactor]: core.double,
    debugDescription: core.String
  }));
  dart.setLibraryUri(scale.ScaleGestureRecognizer, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(scale.ScaleGestureRecognizer, () => ({
    __proto__: dart.getFields(scale.ScaleGestureRecognizer.__proto__),
    onStart: dart.fieldType(dart.fnType(dart.void, [scale.ScaleStartDetails])),
    onUpdate: dart.fieldType(dart.fnType(dart.void, [scale.ScaleUpdateDetails])),
    onEnd: dart.fieldType(dart.fnType(dart.void, [scale.ScaleEndDetails])),
    [_state]: dart.fieldType(scale._ScaleState),
    [_initialFocalPoint]: dart.fieldType(ui.Offset),
    [_currentFocalPoint]: dart.fieldType(ui.Offset),
    [_initialSpan]: dart.fieldType(core.double),
    [_currentSpan]: dart.fieldType(core.double),
    [_initialHorizontalSpan]: dart.fieldType(core.double),
    [_currentHorizontalSpan]: dart.fieldType(core.double),
    [_initialVerticalSpan]: dart.fieldType(core.double),
    [_currentVerticalSpan]: dart.fieldType(core.double),
    [_initialLine]: dart.fieldType(scale._LineBetweenPointers),
    [_currentLine]: dart.fieldType(scale._LineBetweenPointers),
    [_pointerLocations]: dart.fieldType(core.Map$(core.int, ui.Offset)),
    [_pointerQueue]: dart.fieldType(core.List$(core.int)),
    [_velocityTrackers]: dart.finalFieldType(core.Map$(core.int, velocity_tracker.VelocityTracker))
  }));
  scale._isFlingGesture = function _isFlingGesture(velocity) {
    if (!(velocity != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 142, 10, "velocity != null");
    let speedSquared = velocity.pixelsPerSecond.distanceSquared;
    return dart.notNull(speedSquared) > 50 * 50;
  };
  const _topLeft = dart.privateName(border_radius, "_topLeft");
  const _topRight = dart.privateName(border_radius, "_topRight");
  const _bottomLeft = dart.privateName(border_radius, "_bottomLeft");
  const _bottomRight = dart.privateName(border_radius, "_bottomRight");
  const _topStart = dart.privateName(border_radius, "_topStart");
  const _topEnd = dart.privateName(border_radius, "_topEnd");
  const _bottomStart = dart.privateName(border_radius, "_bottomStart");
  const _bottomEnd = dart.privateName(border_radius, "_bottomEnd");
  border_radius.BorderRadiusGeometry = class BorderRadiusGeometry extends core.Object {
    subtract(other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['-'](other[_topLeft]), this[_topRight]['-'](other[_topRight]), this[_bottomLeft]['-'](other[_bottomLeft]), this[_bottomRight]['-'](other[_bottomRight]), this[_topStart]['-'](other[_topStart]), this[_topEnd]['-'](other[_topEnd]), this[_bottomStart]['-'](other[_bottomStart]), this[_bottomEnd]['-'](other[_bottomEnd]));
    }
    add(other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['+'](other[_topLeft]), this[_topRight]['+'](other[_topRight]), this[_bottomLeft]['+'](other[_bottomLeft]), this[_bottomRight]['+'](other[_bottomRight]), this[_topStart]['+'](other[_topStart]), this[_topEnd]['+'](other[_topEnd]), this[_bottomStart]['+'](other[_bottomStart]), this[_bottomEnd]['+'](other[_bottomEnd]));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 148, 12, "t != null");
      if (a == null && b == null) return null;
      a == null ? a = border_radius.BorderRadius.zero : null;
      b == null ? b = border_radius.BorderRadius.zero : null;
      return a.add(b.subtract(a)['*'](t));
    }
    toString() {
      if (dart.test(util.assertionsEnabled)) {
        let visual = null;
        let logical = null;
        if (dart.equals(this[_topLeft], this[_topRight]) && dart.equals(this[_topRight], this[_bottomLeft]) && dart.equals(this[_bottomLeft], this[_bottomRight])) {
          if (!dart.equals(this[_topLeft], ui.Radius.zero)) {
            if (this[_topLeft].x == this[_topLeft].y) {
              visual = "BorderRadius.circular(" + this[_topLeft].x[$toStringAsFixed](1) + ")";
            } else {
              visual = "BorderRadius.all(" + dart.str(this[_topLeft]) + ")";
            }
          }
        } else {
          let result = new core.StringBuffer.new();
          result.write("BorderRadius.only(");
          let comma = false;
          if (!dart.equals(this[_topLeft], ui.Radius.zero)) {
            result.write("topLeft: " + dart.str(this[_topLeft]));
            comma = true;
          }
          if (!dart.equals(this[_topRight], ui.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("topRight: " + dart.str(this[_topRight]));
            comma = true;
          }
          if (!dart.equals(this[_bottomLeft], ui.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("bottomLeft: " + dart.str(this[_bottomLeft]));
            comma = true;
          }
          if (!dart.equals(this[_bottomRight], ui.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("bottomRight: " + dart.str(this[_bottomRight]));
          }
          result.write(")");
          visual = result.toString();
        }
        if (dart.equals(this[_topStart], this[_topEnd]) && dart.equals(this[_topEnd], this[_bottomEnd]) && dart.equals(this[_bottomEnd], this[_bottomStart])) {
          if (!dart.equals(this[_topStart], ui.Radius.zero)) {
            if (this[_topStart].x == this[_topStart].y) {
              logical = "BorderRadiusDirectional.circular" + "(" + this[_topStart].x[$toStringAsFixed](1) + ")";
            } else {
              logical = "BorderRadiusDirectional.all(" + dart.str(this[_topStart]) + ")";
            }
          }
        } else {
          let result = new core.StringBuffer.new();
          result.write("BorderRadiusDirectional.only(");
          let comma = false;
          if (!dart.equals(this[_topStart], ui.Radius.zero)) {
            result.write("topStart: " + dart.str(this[_topStart]));
            comma = true;
          }
          if (!dart.equals(this[_topEnd], ui.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("topEnd: " + dart.str(this[_topEnd]));
            comma = true;
          }
          if (!dart.equals(this[_bottomStart], ui.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("bottomStart: " + dart.str(this[_bottomStart]));
            comma = true;
          }
          if (!dart.equals(this[_bottomEnd], ui.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("bottomEnd: " + dart.str(this[_bottomEnd]));
          }
          result.write(")");
          logical = result.toString();
        }
        if (visual != null && logical != null) return dart.str(visual) + " + " + dart.str(logical);
        if (visual != null) return visual;
        if (logical != null) return logical;
        return "BorderRadius.zero";
      } else {
        return super[$toString]();
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = border_radius.BorderRadiusGeometry._check(other);
      return dart.equals(this[_topLeft], typedOther[_topLeft]) && dart.equals(this[_topRight], typedOther[_topRight]) && dart.equals(this[_bottomLeft], typedOther[_bottomLeft]) && dart.equals(this[_bottomRight], typedOther[_bottomRight]) && dart.equals(this[_topStart], typedOther[_topStart]) && dart.equals(this[_topEnd], typedOther[_topEnd]) && dart.equals(this[_bottomStart], typedOther[_bottomStart]) && dart.equals(this[_bottomEnd], typedOther[_bottomEnd]);
    }
    get hashCode() {
      return ui.hashValues(this[_topLeft], this[_topRight], this[_bottomLeft], this[_bottomRight], this[_topStart], this[_topEnd], this[_bottomStart], this[_bottomEnd]);
    }
  };
  (border_radius.BorderRadiusGeometry.new = function() {
    ;
  }).prototype = border_radius.BorderRadiusGeometry.prototype;
  dart.addTypeTests(border_radius.BorderRadiusGeometry);
  dart.setMethodSignature(border_radius.BorderRadiusGeometry, () => ({
    __proto__: dart.getMethods(border_radius.BorderRadiusGeometry.__proto__),
    subtract: dart.fnType(border_radius.BorderRadiusGeometry, [border_radius.BorderRadiusGeometry]),
    add: dart.fnType(border_radius.BorderRadiusGeometry, [border_radius.BorderRadiusGeometry])
  }));
  dart.setLibraryUri(border_radius.BorderRadiusGeometry, "package:flutter_web/src/painting/border_radius.dart");
  dart.defineExtensionMethods(border_radius.BorderRadiusGeometry, ['toString', '_equals']);
  dart.defineExtensionAccessors(border_radius.BorderRadiusGeometry, ['hashCode']);
  let C667;
  let C668;
  border_radius.BorderRadius = class BorderRadius extends border_radius.BorderRadiusGeometry {
    get topLeft() {
      return this[topLeft$];
    }
    set topLeft(value) {
      super.topLeft = value;
    }
    get topRight() {
      return this[topRight$];
    }
    set topRight(value) {
      super.topRight = value;
    }
    get bottomLeft() {
      return this[bottomLeft$];
    }
    set bottomLeft(value) {
      super.bottomLeft = value;
    }
    get bottomRight() {
      return this[bottomRight$];
    }
    set bottomRight(value) {
      super.bottomRight = value;
    }
    get [_topLeft]() {
      return this.topLeft;
    }
    get [_topRight]() {
      return this.topRight;
    }
    get [_bottomLeft]() {
      return this.bottomLeft;
    }
    get [_bottomRight]() {
      return this.bottomRight;
    }
    get [_topStart]() {
      return ui.Radius.zero;
    }
    get [_topEnd]() {
      return ui.Radius.zero;
    }
    get [_bottomStart]() {
      return ui.Radius.zero;
    }
    get [_bottomEnd]() {
      return ui.Radius.zero;
    }
    toRRect(rect) {
      return new ui.RRect.fromRectAndCorners(rect, {topLeft: this.topLeft, topRight: this.topRight, bottomLeft: this.bottomLeft, bottomRight: this.bottomRight});
    }
    subtract(other) {
      if (border_radius.BorderRadius.is(other)) return this['-'](other);
      return super.subtract(other);
    }
    add(other) {
      if (border_radius.BorderRadius.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['-'](other.topLeft), topRight: this.topRight['-'](other.topRight), bottomLeft: this.bottomLeft['-'](other.bottomLeft), bottomRight: this.bottomRight['-'](other.bottomRight)});
    }
    ['+'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['+'](other.topLeft), topRight: this.topRight['+'](other.topRight), bottomLeft: this.bottomLeft['+'](other.bottomLeft), bottomRight: this.bottomRight['+'](other.bottomRight)});
    }
    _negate() {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft._negate(), topRight: this.topRight._negate(), bottomLeft: this.bottomLeft._negate(), bottomRight: this.bottomRight._negate()});
    }
    ['*'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['*'](other), topRight: this.topRight['*'](other), bottomLeft: this.bottomLeft['*'](other), bottomRight: this.bottomRight['*'](other)});
    }
    ['/'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['/'](other), topRight: this.topRight['/'](other), bottomLeft: this.bottomLeft['/'](other), bottomRight: this.bottomRight['/'](other)});
    }
    ['~/'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['~/'](other), topRight: this.topRight['~/'](other), bottomLeft: this.bottomLeft['~/'](other), bottomRight: this.bottomRight['~/'](other)});
    }
    ['%'](other) {
      return new border_radius.BorderRadius.only({topLeft: this.topLeft['%'](other), topRight: this.topRight['%'](other), bottomLeft: this.bottomLeft['%'](other), bottomRight: this.bottomRight['%'](other)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 495, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      return new border_radius.BorderRadius.only({topLeft: ui.Radius.lerp(a.topLeft, b.topLeft, t), topRight: ui.Radius.lerp(a.topRight, b.topRight, t), bottomLeft: ui.Radius.lerp(a.bottomLeft, b.bottomLeft, t), bottomRight: ui.Radius.lerp(a.bottomRight, b.bottomRight, t)});
    }
    resolve(direction) {
      return this;
    }
  };
  (border_radius.BorderRadius.all = function(radius) {
    border_radius.BorderRadius.only.call(this, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.circular = function(radius) {
    border_radius.BorderRadius.all.call(this, new ui.Radius.circular(radius));
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.vertical = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C667 || CT.C667;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C667 || CT.C667;
    border_radius.BorderRadius.only.call(this, {topLeft: top, topRight: top, bottomLeft: bottom, bottomRight: bottom});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.horizontal = function(opts) {
    let left = opts && 'left' in opts ? opts.left : C667 || CT.C667;
    let right = opts && 'right' in opts ? opts.right : C667 || CT.C667;
    border_radius.BorderRadius.only.call(this, {topLeft: left, topRight: right, bottomLeft: left, bottomRight: right});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.only = function(opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : C667 || CT.C667;
    let topRight = opts && 'topRight' in opts ? opts.topRight : C667 || CT.C667;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : C667 || CT.C667;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : C667 || CT.C667;
    this[topLeft$] = topLeft;
    this[topRight$] = topRight;
    this[bottomLeft$] = bottomLeft;
    this[bottomRight$] = bottomRight;
    border_radius.BorderRadius.__proto__.new.call(this);
    ;
  }).prototype = border_radius.BorderRadius.prototype;
  dart.addTypeTests(border_radius.BorderRadius);
  const topLeft$ = Symbol("BorderRadius.topLeft");
  const topRight$ = Symbol("BorderRadius.topRight");
  const bottomLeft$ = Symbol("BorderRadius.bottomLeft");
  const bottomRight$ = Symbol("BorderRadius.bottomRight");
  dart.setMethodSignature(border_radius.BorderRadius, () => ({
    __proto__: dart.getMethods(border_radius.BorderRadius.__proto__),
    toRRect: dart.fnType(ui.RRect, [ui.Rect]),
    '-': dart.fnType(border_radius.BorderRadius, [border_radius.BorderRadius]),
    '+': dart.fnType(border_radius.BorderRadius, [border_radius.BorderRadius]),
    _negate: dart.fnType(border_radius.BorderRadius, []),
    '*': dart.fnType(border_radius.BorderRadius, [core.double]),
    '/': dart.fnType(border_radius.BorderRadius, [core.double]),
    '~/': dart.fnType(border_radius.BorderRadius, [core.double]),
    '%': dart.fnType(border_radius.BorderRadius, [core.double]),
    resolve: dart.fnType(border_radius.BorderRadius, [ui.TextDirection])
  }));
  dart.setGetterSignature(border_radius.BorderRadius, () => ({
    __proto__: dart.getGetters(border_radius.BorderRadius.__proto__),
    [_topLeft]: ui.Radius,
    [_topRight]: ui.Radius,
    [_bottomLeft]: ui.Radius,
    [_bottomRight]: ui.Radius,
    [_topStart]: ui.Radius,
    [_topEnd]: ui.Radius,
    [_bottomStart]: ui.Radius,
    [_bottomEnd]: ui.Radius
  }));
  dart.setLibraryUri(border_radius.BorderRadius, "package:flutter_web/src/painting/border_radius.dart");
  dart.setFieldSignature(border_radius.BorderRadius, () => ({
    __proto__: dart.getFields(border_radius.BorderRadius.__proto__),
    topLeft: dart.finalFieldType(ui.Radius),
    topRight: dart.finalFieldType(ui.Radius),
    bottomLeft: dart.finalFieldType(ui.Radius),
    bottomRight: dart.finalFieldType(ui.Radius)
  }));
  dart.defineLazy(border_radius.BorderRadius, {
    /*border_radius.BorderRadius.zero*/get zero() {
      return C668 || CT.C668;
    }
  });
  let C669;
  border_radius.BorderRadiusDirectional = class BorderRadiusDirectional extends border_radius.BorderRadiusGeometry {
    get topStart() {
      return this[topStart$];
    }
    set topStart(value) {
      super.topStart = value;
    }
    get topEnd() {
      return this[topEnd$];
    }
    set topEnd(value) {
      super.topEnd = value;
    }
    get bottomStart() {
      return this[bottomStart$];
    }
    set bottomStart(value) {
      super.bottomStart = value;
    }
    get bottomEnd() {
      return this[bottomEnd$];
    }
    set bottomEnd(value) {
      super.bottomEnd = value;
    }
    get [_topStart]() {
      return this.topStart;
    }
    get [_topEnd]() {
      return this.topEnd;
    }
    get [_bottomStart]() {
      return this.bottomStart;
    }
    get [_bottomEnd]() {
      return this.bottomEnd;
    }
    get [_topLeft]() {
      return ui.Radius.zero;
    }
    get [_topRight]() {
      return ui.Radius.zero;
    }
    get [_bottomLeft]() {
      return ui.Radius.zero;
    }
    get [_bottomRight]() {
      return ui.Radius.zero;
    }
    subtract(other) {
      if (border_radius.BorderRadiusDirectional.is(other)) return this['-'](other);
      return super.subtract(other);
    }
    add(other) {
      if (border_radius.BorderRadiusDirectional.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['-'](other.topStart), topEnd: this.topEnd['-'](other.topEnd), bottomStart: this.bottomStart['-'](other.bottomStart), bottomEnd: this.bottomEnd['-'](other.bottomEnd)});
    }
    ['+'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['+'](other.topStart), topEnd: this.topEnd['+'](other.topEnd), bottomStart: this.bottomStart['+'](other.bottomStart), bottomEnd: this.bottomEnd['+'](other.bottomEnd)});
    }
    _negate() {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart._negate(), topEnd: this.topEnd._negate(), bottomStart: this.bottomStart._negate(), bottomEnd: this.bottomEnd._negate()});
    }
    ['*'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['*'](other), topEnd: this.topEnd['*'](other), bottomStart: this.bottomStart['*'](other), bottomEnd: this.bottomEnd['*'](other)});
    }
    ['/'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['/'](other), topEnd: this.topEnd['/'](other), bottomStart: this.bottomStart['/'](other), bottomEnd: this.bottomEnd['/'](other)});
    }
    ['~/'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['~/'](other), topEnd: this.topEnd['~/'](other), bottomStart: this.bottomStart['~/'](other), bottomEnd: this.bottomEnd['~/'](other)});
    }
    ['%'](other) {
      return new border_radius.BorderRadiusDirectional.only({topStart: this.topStart['%'](other), topEnd: this.topEnd['%'](other), bottomStart: this.bottomStart['%'](other), bottomEnd: this.bottomEnd['%'](other)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 721, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      return new border_radius.BorderRadiusDirectional.only({topStart: ui.Radius.lerp(a.topStart, b.topStart, t), topEnd: ui.Radius.lerp(a.topEnd, b.topEnd, t), bottomStart: ui.Radius.lerp(a.bottomStart, b.bottomStart, t), bottomEnd: ui.Radius.lerp(a.bottomEnd, b.bottomEnd, t)});
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 735, 12, "direction != null");
      switch (direction) {
        case C11 || CT.C11:
        {
          return new border_radius.BorderRadius.only({topLeft: this.topEnd, topRight: this.topStart, bottomLeft: this.bottomEnd, bottomRight: this.bottomStart});
        }
        case C12 || CT.C12:
        {
          return new border_radius.BorderRadius.only({topLeft: this.topStart, topRight: this.topEnd, bottomLeft: this.bottomStart, bottomRight: this.bottomEnd});
        }
      }
      return null;
    }
  };
  (border_radius.BorderRadiusDirectional.all = function(radius) {
    border_radius.BorderRadiusDirectional.only.call(this, {topStart: radius, topEnd: radius, bottomStart: radius, bottomEnd: radius});
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  (border_radius.BorderRadiusDirectional.circular = function(radius) {
    border_radius.BorderRadiusDirectional.all.call(this, new ui.Radius.circular(radius));
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  (border_radius.BorderRadiusDirectional.vertical = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C667 || CT.C667;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C667 || CT.C667;
    border_radius.BorderRadiusDirectional.only.call(this, {topStart: top, topEnd: top, bottomStart: bottom, bottomEnd: bottom});
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  (border_radius.BorderRadiusDirectional.horizontal = function(opts) {
    let start = opts && 'start' in opts ? opts.start : C667 || CT.C667;
    let end = opts && 'end' in opts ? opts.end : C667 || CT.C667;
    border_radius.BorderRadiusDirectional.only.call(this, {topStart: start, topEnd: end, bottomStart: start, bottomEnd: end});
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  (border_radius.BorderRadiusDirectional.only = function(opts) {
    let topStart = opts && 'topStart' in opts ? opts.topStart : C667 || CT.C667;
    let topEnd = opts && 'topEnd' in opts ? opts.topEnd : C667 || CT.C667;
    let bottomStart = opts && 'bottomStart' in opts ? opts.bottomStart : C667 || CT.C667;
    let bottomEnd = opts && 'bottomEnd' in opts ? opts.bottomEnd : C667 || CT.C667;
    this[topStart$] = topStart;
    this[topEnd$] = topEnd;
    this[bottomStart$] = bottomStart;
    this[bottomEnd$] = bottomEnd;
    border_radius.BorderRadiusDirectional.__proto__.new.call(this);
    ;
  }).prototype = border_radius.BorderRadiusDirectional.prototype;
  dart.addTypeTests(border_radius.BorderRadiusDirectional);
  const topStart$ = Symbol("BorderRadiusDirectional.topStart");
  const topEnd$ = Symbol("BorderRadiusDirectional.topEnd");
  const bottomStart$ = Symbol("BorderRadiusDirectional.bottomStart");
  const bottomEnd$ = Symbol("BorderRadiusDirectional.bottomEnd");
  dart.setMethodSignature(border_radius.BorderRadiusDirectional, () => ({
    __proto__: dart.getMethods(border_radius.BorderRadiusDirectional.__proto__),
    '-': dart.fnType(border_radius.BorderRadiusDirectional, [border_radius.BorderRadiusDirectional]),
    '+': dart.fnType(border_radius.BorderRadiusDirectional, [border_radius.BorderRadiusDirectional]),
    _negate: dart.fnType(border_radius.BorderRadiusDirectional, []),
    '*': dart.fnType(border_radius.BorderRadiusDirectional, [core.double]),
    '/': dart.fnType(border_radius.BorderRadiusDirectional, [core.double]),
    '~/': dart.fnType(border_radius.BorderRadiusDirectional, [core.double]),
    '%': dart.fnType(border_radius.BorderRadiusDirectional, [core.double]),
    resolve: dart.fnType(border_radius.BorderRadius, [ui.TextDirection])
  }));
  dart.setGetterSignature(border_radius.BorderRadiusDirectional, () => ({
    __proto__: dart.getGetters(border_radius.BorderRadiusDirectional.__proto__),
    [_topStart]: ui.Radius,
    [_topEnd]: ui.Radius,
    [_bottomStart]: ui.Radius,
    [_bottomEnd]: ui.Radius,
    [_topLeft]: ui.Radius,
    [_topRight]: ui.Radius,
    [_bottomLeft]: ui.Radius,
    [_bottomRight]: ui.Radius
  }));
  dart.setLibraryUri(border_radius.BorderRadiusDirectional, "package:flutter_web/src/painting/border_radius.dart");
  dart.setFieldSignature(border_radius.BorderRadiusDirectional, () => ({
    __proto__: dart.getFields(border_radius.BorderRadiusDirectional.__proto__),
    topStart: dart.finalFieldType(ui.Radius),
    topEnd: dart.finalFieldType(ui.Radius),
    bottomStart: dart.finalFieldType(ui.Radius),
    bottomEnd: dart.finalFieldType(ui.Radius)
  }));
  dart.defineLazy(border_radius.BorderRadiusDirectional, {
    /*border_radius.BorderRadiusDirectional.zero*/get zero() {
      return C669 || CT.C669;
    }
  });
  border_radius._MixedBorderRadius = class _MixedBorderRadius extends border_radius.BorderRadiusGeometry {
    get [_topLeft]() {
      return this[_topLeft$];
    }
    set [_topLeft](value) {
      super[_topLeft] = value;
    }
    get [_topRight]() {
      return this[_topRight$];
    }
    set [_topRight](value) {
      super[_topRight] = value;
    }
    get [_bottomLeft]() {
      return this[_bottomLeft$];
    }
    set [_bottomLeft](value) {
      super[_bottomLeft] = value;
    }
    get [_bottomRight]() {
      return this[_bottomRight$];
    }
    set [_bottomRight](value) {
      super[_bottomRight] = value;
    }
    get [_topStart]() {
      return this[_topStart$];
    }
    set [_topStart](value) {
      super[_topStart] = value;
    }
    get [_topEnd]() {
      return this[_topEnd$];
    }
    set [_topEnd](value) {
      super[_topEnd] = value;
    }
    get [_bottomStart]() {
      return this[_bottomStart$];
    }
    set [_bottomStart](value) {
      super[_bottomStart] = value;
    }
    get [_bottomEnd]() {
      return this[_bottomEnd$];
    }
    set [_bottomEnd](value) {
      super[_bottomEnd] = value;
    }
    _negate() {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]._negate(), this[_topRight]._negate(), this[_bottomLeft]._negate(), this[_bottomRight]._negate(), this[_topStart]._negate(), this[_topEnd]._negate(), this[_bottomStart]._negate(), this[_bottomEnd]._negate());
    }
    ['*'](other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['*'](other), this[_topRight]['*'](other), this[_bottomLeft]['*'](other), this[_bottomRight]['*'](other), this[_topStart]['*'](other), this[_topEnd]['*'](other), this[_bottomStart]['*'](other), this[_bottomEnd]['*'](other));
    }
    ['/'](other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['/'](other), this[_topRight]['/'](other), this[_bottomLeft]['/'](other), this[_bottomRight]['/'](other), this[_topStart]['/'](other), this[_topEnd]['/'](other), this[_bottomStart]['/'](other), this[_bottomEnd]['/'](other));
    }
    ['~/'](other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['~/'](other), this[_topRight]['~/'](other), this[_bottomLeft]['~/'](other), this[_bottomRight]['~/'](other), this[_topStart]['~/'](other), this[_topEnd]['~/'](other), this[_bottomStart]['~/'](other), this[_bottomEnd]['~/'](other));
    }
    ['%'](other) {
      return new border_radius._MixedBorderRadius.new(this[_topLeft]['%'](other), this[_topRight]['%'](other), this[_bottomLeft]['%'](other), this[_bottomRight]['%'](other), this[_topStart]['%'](other), this[_topEnd]['%'](other), this[_bottomStart]['%'](other), this[_bottomEnd]['%'](other));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 865, 12, "direction != null");
      switch (direction) {
        case C11 || CT.C11:
        {
          return new border_radius.BorderRadius.only({topLeft: this[_topLeft]['+'](this[_topEnd]), topRight: this[_topRight]['+'](this[_topStart]), bottomLeft: this[_bottomLeft]['+'](this[_bottomEnd]), bottomRight: this[_bottomRight]['+'](this[_bottomStart])});
        }
        case C12 || CT.C12:
        {
          return new border_radius.BorderRadius.only({topLeft: this[_topLeft]['+'](this[_topStart]), topRight: this[_topRight]['+'](this[_topEnd]), bottomLeft: this[_bottomLeft]['+'](this[_bottomStart]), bottomRight: this[_bottomRight]['+'](this[_bottomEnd])});
        }
      }
      return null;
    }
  };
  (border_radius._MixedBorderRadius.new = function(_topLeft, _topRight, _bottomLeft, _bottomRight, _topStart, _topEnd, _bottomStart, _bottomEnd) {
    this[_topLeft$] = _topLeft;
    this[_topRight$] = _topRight;
    this[_bottomLeft$] = _bottomLeft;
    this[_bottomRight$] = _bottomRight;
    this[_topStart$] = _topStart;
    this[_topEnd$] = _topEnd;
    this[_bottomStart$] = _bottomStart;
    this[_bottomEnd$] = _bottomEnd;
    border_radius._MixedBorderRadius.__proto__.new.call(this);
    ;
  }).prototype = border_radius._MixedBorderRadius.prototype;
  dart.addTypeTests(border_radius._MixedBorderRadius);
  const _topLeft$ = Symbol("_MixedBorderRadius._topLeft");
  const _topRight$ = Symbol("_MixedBorderRadius._topRight");
  const _bottomLeft$ = Symbol("_MixedBorderRadius._bottomLeft");
  const _bottomRight$ = Symbol("_MixedBorderRadius._bottomRight");
  const _topStart$ = Symbol("_MixedBorderRadius._topStart");
  const _topEnd$ = Symbol("_MixedBorderRadius._topEnd");
  const _bottomStart$ = Symbol("_MixedBorderRadius._bottomStart");
  const _bottomEnd$ = Symbol("_MixedBorderRadius._bottomEnd");
  dart.setMethodSignature(border_radius._MixedBorderRadius, () => ({
    __proto__: dart.getMethods(border_radius._MixedBorderRadius.__proto__),
    _negate: dart.fnType(border_radius._MixedBorderRadius, []),
    '*': dart.fnType(border_radius._MixedBorderRadius, [core.double]),
    '/': dart.fnType(border_radius._MixedBorderRadius, [core.double]),
    '~/': dart.fnType(border_radius._MixedBorderRadius, [core.double]),
    '%': dart.fnType(border_radius._MixedBorderRadius, [core.double]),
    resolve: dart.fnType(border_radius.BorderRadius, [ui.TextDirection])
  }));
  dart.setLibraryUri(border_radius._MixedBorderRadius, "package:flutter_web/src/painting/border_radius.dart");
  dart.setFieldSignature(border_radius._MixedBorderRadius, () => ({
    __proto__: dart.getFields(border_radius._MixedBorderRadius.__proto__),
    [_topLeft]: dart.finalFieldType(ui.Radius),
    [_topRight]: dart.finalFieldType(ui.Radius),
    [_bottomLeft]: dart.finalFieldType(ui.Radius),
    [_bottomRight]: dart.finalFieldType(ui.Radius),
    [_topStart]: dart.finalFieldType(ui.Radius),
    [_topEnd]: dart.finalFieldType(ui.Radius),
    [_bottomStart]: dart.finalFieldType(ui.Radius),
    [_bottomEnd]: dart.finalFieldType(ui.Radius)
  }));
  paint_utilities.paintZigZag = function paintZigZag(canvas, paint, start, end, zigs, width) {
    let t16;
    if (!zigs[$isFinite]) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/paint_utilities.dart", 25, 10, "zigs.isFinite");
    if (!(dart.notNull(zigs) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/paint_utilities.dart", 26, 10, "zigs > 0");
    canvas.save();
    canvas.translate(start.dx, start.dy);
    end = end['-'](start);
    canvas.rotate(math.atan2(end.dy, end.dx));
    let length = end.distance;
    let spacing = dart.notNull(length) / (dart.notNull(zigs) * 2.0);
    let path = (t16 = ui.Path.new(), t16.moveTo(0.0, 0.0), t16);
    for (let index = 0; index < dart.notNull(zigs); index = index + 1) {
      let x = (index * 2.0 + 1.0) * spacing;
      let y = dart.notNull(width) * (index[$modulo](2.0) * 2.0 - 1.0);
      path.lineTo(x, y);
    }
    path.lineTo(length, 0.0);
    canvas.drawPath(path, paint);
    canvas.restore();
  };
  tap.TapDownDetails = class TapDownDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$2];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get kind() {
      return this[kind$0];
    }
    set kind(value) {
      super.kind = value;
    }
    get localPosition() {
      return this[localPosition$3];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
  };
  (tap.TapDownDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[globalPosition$2] = globalPosition;
    this[kind$0] = kind;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/tap.dart", 27, 15, "globalPosition != null");
    this[localPosition$3] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = tap.TapDownDetails.prototype;
  dart.addTypeTests(tap.TapDownDetails);
  const globalPosition$2 = Symbol("TapDownDetails.globalPosition");
  const kind$0 = Symbol("TapDownDetails.kind");
  const localPosition$3 = Symbol("TapDownDetails.localPosition");
  dart.setLibraryUri(tap.TapDownDetails, "package:flutter_web/src/gestures/tap.dart");
  dart.setFieldSignature(tap.TapDownDetails, () => ({
    __proto__: dart.getFields(tap.TapDownDetails.__proto__),
    globalPosition: dart.finalFieldType(ui.Offset),
    kind: dart.finalFieldType(ui.PointerDeviceKind),
    localPosition: dart.finalFieldType(ui.Offset)
  }));
  tap.TapUpDetails = class TapUpDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$3];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$4];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
  };
  (tap.TapUpDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[globalPosition$3] = globalPosition;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/tap.dart", 63, 15, "globalPosition != null");
    this[localPosition$4] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = tap.TapUpDetails.prototype;
  dart.addTypeTests(tap.TapUpDetails);
  const globalPosition$3 = Symbol("TapUpDetails.globalPosition");
  const localPosition$4 = Symbol("TapUpDetails.localPosition");
  dart.setLibraryUri(tap.TapUpDetails, "package:flutter_web/src/gestures/tap.dart");
  dart.setFieldSignature(tap.TapUpDetails, () => ({
    __proto__: dart.getFields(tap.TapUpDetails.__proto__),
    globalPosition: dart.finalFieldType(ui.Offset),
    localPosition: dart.finalFieldType(ui.Offset)
  }));
  const _sentTapDown = dart.privateName(tap, "_sentTapDown");
  const _wonArenaForPrimaryPointer = dart.privateName(tap, "_wonArenaForPrimaryPointer");
  const _finalPosition = dart.privateName(tap, "_finalPosition");
  const _initialButtons = dart.privateName(tap, "_initialButtons");
  const _checkUp = dart.privateName(tap, "_checkUp");
  const _checkCancel = dart.privateName(tap, "_checkCancel");
  const _reset = dart.privateName(tap, "_reset");
  const _checkDown = dart.privateName(tap, "_checkDown");
  tap.TapGestureRecognizer = class TapGestureRecognizer extends recognizer.PrimaryPointerGestureRecognizer {
    get onTapDown() {
      return this[onTapDown];
    }
    set onTapDown(value) {
      this[onTapDown] = value;
    }
    get onTapUp() {
      return this[onTapUp];
    }
    set onTapUp(value) {
      this[onTapUp] = value;
    }
    get onTap() {
      return this[onTap];
    }
    set onTap(value) {
      this[onTap] = value;
    }
    get onTapCancel() {
      return this[onTapCancel];
    }
    set onTapCancel(value) {
      this[onTapCancel] = value;
    }
    get onSecondaryTapDown() {
      return this[onSecondaryTapDown];
    }
    set onSecondaryTapDown(value) {
      this[onSecondaryTapDown] = value;
    }
    get onSecondaryTapUp() {
      return this[onSecondaryTapUp];
    }
    set onSecondaryTapUp(value) {
      this[onSecondaryTapUp] = value;
    }
    get onSecondaryTapCancel() {
      return this[onSecondaryTapCancel];
    }
    set onSecondaryTapCancel(value) {
      this[onSecondaryTapCancel] = value;
    }
    isPointerAllowed(event) {
      switch (event.buttons) {
        case 1:
        {
          if (this.onTapDown == null && this.onTap == null && this.onTapUp == null && this.onTapCancel == null) return false;
          break;
        }
        case 2:
        {
          if (this.onSecondaryTapDown == null && this.onSecondaryTapUp == null && this.onSecondaryTapCancel == null) return false;
          break;
        }
        default:
        {
          return false;
        }
      }
      return super.isPointerAllowed(event);
    }
    addAllowedPointer(event) {
      super.addAllowedPointer(event);
      this[_initialButtons] = event.buttons;
    }
    handlePrimaryPointer(event) {
      if (events.PointerUpEvent.is(event)) {
        this[_finalPosition] = new recognizer.OffsetPair.new({global: event.position, local: event.localPosition});
        this[_checkUp]();
      } else if (events.PointerCancelEvent.is(event)) {
        this.resolve(arena.GestureDisposition.rejected);
        if (dart.test(this[_sentTapDown])) {
          this[_checkCancel]("");
        }
        this[_reset]();
      } else if (event.buttons != this[_initialButtons]) {
        this.resolve(arena.GestureDisposition.rejected);
        this.stopTrackingPointer(this.primaryPointer);
      }
    }
    resolve(disposition) {
      if (dart.test(this[_wonArenaForPrimaryPointer]) && dart.equals(disposition, arena.GestureDisposition.rejected)) {
        if (!dart.test(this[_sentTapDown])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/tap.dart", 295, 14, "_sentTapDown");
        this[_checkCancel]("spontaneous ");
        this[_reset]();
      }
      super.resolve(disposition);
    }
    didExceedDeadlineWithEvent(event) {
      this[_checkDown](event.pointer);
    }
    acceptGesture(pointer) {
      super.acceptGesture(pointer);
      if (pointer == this.primaryPointer) {
        this[_checkDown](pointer);
        this[_wonArenaForPrimaryPointer] = true;
        this[_checkUp]();
      }
    }
    rejectGesture(pointer) {
      super.rejectGesture(pointer);
      if (pointer == this.primaryPointer) {
        if (!!dart.equals(this.state, recognizer.GestureRecognizerState.possible)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/tap.dart", 322, 14, "state != GestureRecognizerState.possible");
        if (dart.test(this[_sentTapDown])) this[_checkCancel]("forced ");
        this[_reset]();
      }
    }
    [_checkDown](pointer) {
      if (dart.test(this[_sentTapDown])) {
        return;
      }
      let details = new tap.TapDownDetails.new({globalPosition: this.initialPosition.global, localPosition: this.initialPosition.local, kind: this.getKindForPointer(pointer)});
      switch (this[_initialButtons]) {
        case 1:
        {
          if (this.onTapDown != null) this.invokeCallback(dart.void, "onTapDown", dart.fn(() => this.onTapDown(details), VoidTovoid()));
          break;
        }
        case 2:
        {
          if (this.onSecondaryTapDown != null) this.invokeCallback(dart.void, "onSecondaryTapDown", dart.fn(() => this.onSecondaryTapDown(details), VoidTovoid()));
          break;
        }
        default:
      }
      this[_sentTapDown] = true;
    }
    [_checkUp]() {
      if (!dart.test(this[_wonArenaForPrimaryPointer]) || this[_finalPosition] == null) {
        return;
      }
      let details = new tap.TapUpDetails.new({globalPosition: this[_finalPosition].global, localPosition: this[_finalPosition].local});
      switch (this[_initialButtons]) {
        case 1:
        {
          if (this.onTapUp != null) this.invokeCallback(dart.void, "onTapUp", dart.fn(() => this.onTapUp(details), VoidTovoid()));
          if (this.onTap != null) this.invokeCallback(dart.void, "onTap", this.onTap);
          break;
        }
        case 2:
        {
          if (this.onSecondaryTapUp != null) this.invokeCallback(dart.void, "onSecondaryTapUp", dart.fn(() => this.onSecondaryTapUp(details), VoidTovoid()));
          break;
        }
        default:
      }
      this[_reset]();
    }
    [_checkCancel](note) {
      switch (this[_initialButtons]) {
        case 1:
        {
          if (this.onTapCancel != null) this.invokeCallback(dart.void, dart.str(note) + "onTapCancel", this.onTapCancel);
          break;
        }
        case 2:
        {
          if (this.onSecondaryTapCancel != null) this.invokeCallback(dart.void, dart.str(note) + "onSecondaryTapCancel", this.onSecondaryTapCancel);
          break;
        }
        default:
      }
    }
    [_reset]() {
      this[_sentTapDown] = false;
      this[_wonArenaForPrimaryPointer] = false;
      this[_finalPosition] = null;
      this[_initialButtons] = null;
    }
    get debugDescription() {
      return "tap";
    }
    debugFillProperties(properties) {
      let t16, t16$, t16$0;
      super.debugFillProperties(properties);
      properties.add(new diagnostics.FlagProperty.new("wonArenaForPrimaryPointer", {value: this[_wonArenaForPrimaryPointer], ifTrue: "won arena"}));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("finalPosition", (t16 = this[_finalPosition], t16 == null ? null : t16.global), {defaultValue: null}));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("finalLocalPosition", (t16$ = this[_finalPosition], t16$ == null ? null : t16$.local), {defaultValue: (t16$0 = this[_finalPosition], t16$0 == null ? null : t16$0.global)}));
      properties.add(new diagnostics.FlagProperty.new("sentTapDown", {value: this[_sentTapDown], ifTrue: "sent tap down"}));
    }
  };
  (tap.TapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[onTapDown] = null;
    this[onTapUp] = null;
    this[onTap] = null;
    this[onTapCancel] = null;
    this[onSecondaryTapDown] = null;
    this[onSecondaryTapUp] = null;
    this[onSecondaryTapCancel] = null;
    this[_sentTapDown] = false;
    this[_wonArenaForPrimaryPointer] = false;
    this[_finalPosition] = null;
    this[_initialButtons] = null;
    tap.TapGestureRecognizer.__proto__.new.call(this, {deadline: constants.kPressTimeout, debugOwner: debugOwner});
    ;
  }).prototype = tap.TapGestureRecognizer.prototype;
  dart.addTypeTests(tap.TapGestureRecognizer);
  const onTapDown = Symbol("TapGestureRecognizer.onTapDown");
  const onTapUp = Symbol("TapGestureRecognizer.onTapUp");
  const onTap = Symbol("TapGestureRecognizer.onTap");
  const onTapCancel = Symbol("TapGestureRecognizer.onTapCancel");
  const onSecondaryTapDown = Symbol("TapGestureRecognizer.onSecondaryTapDown");
  const onSecondaryTapUp = Symbol("TapGestureRecognizer.onSecondaryTapUp");
  const onSecondaryTapCancel = Symbol("TapGestureRecognizer.onSecondaryTapCancel");
  dart.setMethodSignature(tap.TapGestureRecognizer, () => ({
    __proto__: dart.getMethods(tap.TapGestureRecognizer.__proto__),
    handlePrimaryPointer: dart.fnType(dart.void, [events.PointerEvent]),
    [_checkDown]: dart.fnType(dart.void, [core.int]),
    [_checkUp]: dart.fnType(dart.void, []),
    [_checkCancel]: dart.fnType(dart.void, [core.String]),
    [_reset]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(tap.TapGestureRecognizer, () => ({
    __proto__: dart.getGetters(tap.TapGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(tap.TapGestureRecognizer, "package:flutter_web/src/gestures/tap.dart");
  dart.setFieldSignature(tap.TapGestureRecognizer, () => ({
    __proto__: dart.getFields(tap.TapGestureRecognizer.__proto__),
    onTapDown: dart.fieldType(dart.fnType(dart.void, [tap.TapDownDetails])),
    onTapUp: dart.fieldType(dart.fnType(dart.void, [tap.TapUpDetails])),
    onTap: dart.fieldType(dart.fnType(dart.void, [])),
    onTapCancel: dart.fieldType(dart.fnType(dart.void, [])),
    onSecondaryTapDown: dart.fieldType(dart.fnType(dart.void, [tap.TapDownDetails])),
    onSecondaryTapUp: dart.fieldType(dart.fnType(dart.void, [tap.TapUpDetails])),
    onSecondaryTapCancel: dart.fieldType(dart.fnType(dart.void, [])),
    [_sentTapDown]: dart.fieldType(core.bool),
    [_wonArenaForPrimaryPointer]: dart.fieldType(core.bool),
    [_finalPosition]: dart.fieldType(recognizer.OffsetPair),
    [_initialButtons]: dart.fieldType(core.int)
  }));
  debug$0.debugAssertAllSchedulerVarsUnset = function debugAssertAllSchedulerVarsUnset(reason) {
    if (!dart.test(dart.fn(() => {
      if (dart.test(debug$0.debugPrintBeginFrameBanner) || dart.test(debug$0.debugPrintEndFrameBanner)) {
        dart.throw(assertions.FlutterError.new(reason));
      }
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/scheduler/debug.dart", 62, 10, "() {\n    if (debugPrintBeginFrameBanner || debugPrintEndFrameBanner) {\n      throw new FlutterError(reason);\n    }\n    return true;\n  }()");
    return true;
  };
  dart.defineLazy(debug$0, {
    /*debug$0.debugPrintBeginFrameBanner*/get debugPrintBeginFrameBanner() {
      return false;
    },
    set debugPrintBeginFrameBanner(_) {},
    /*debug$0.debugPrintEndFrameBanner*/get debugPrintEndFrameBanner() {
      return false;
    },
    set debugPrintEndFrameBanner(_) {},
    /*debug$0.debugPrintScheduleFrameStacks*/get debugPrintScheduleFrameStacks() {
      return false;
    },
    set debugPrintScheduleFrameStacks(_) {}
  });
  notched_shapes.NotchedShape = class NotchedShape extends core.Object {};
  (notched_shapes.NotchedShape.new = function() {
    ;
  }).prototype = notched_shapes.NotchedShape.prototype;
  dart.addTypeTests(notched_shapes.NotchedShape);
  dart.setLibraryUri(notched_shapes.NotchedShape, "package:flutter_web/src/painting/notched_shapes.dart");
  notched_shapes.CircularNotchedRectangle = class CircularNotchedRectangle extends core.Object {
    getOuterPath(host, guest) {
      let t16, t17, t16$, t16$0;
      if (!dart.test(host.overlaps(guest))) {
        t16 = ui.Path.new();
        t16.addRect(host);
        return t16;
      }
      let notchRadius = dart.notNull(guest.width) / 2.0;
      let r = notchRadius;
      let a = -1.0 * r - 1;
      let b = dart.notNull(host.top) - dart.notNull(guest.center.dy);
      let n2 = math.sqrt(b * b * r * r * (a * a + b * b - r * r));
      let p2xA = (a * r * r - n2) / (a * a + b * b);
      let p2xB = (a * r * r + n2) / (a * a + b * b);
      let p2yA = math.sqrt(r * r - p2xA * p2xA);
      let p2yB = math.sqrt(r * r - p2xB * p2xB);
      let p = ListOfOffset().new(6);
      p[$_set](0, new ui.Offset.new(a - 15, b));
      p[$_set](1, new ui.Offset.new(a, b));
      let cmp = b < 0 ? -1.0 : 1.0;
      p[$_set](2, cmp * p2yA > cmp * p2yB ? new ui.Offset.new(p2xA, p2yA) : new ui.Offset.new(p2xB, p2yB));
      p[$_set](3, new ui.Offset.new(-1.0 * dart.notNull(p[$_get](2).dx), p[$_get](2).dy));
      p[$_set](4, new ui.Offset.new(-1.0 * dart.notNull(p[$_get](1).dx), p[$_get](1).dy));
      p[$_set](5, new ui.Offset.new(-1.0 * dart.notNull(p[$_get](0).dx), p[$_get](0).dy));
      for (let i = 0; i < dart.notNull(p[$length]); i = i + 1) {
        t16$ = p;
        t17 = i;
        t16$[$_set](t17, t16$[$_get](t17)['+'](guest.center));
      }
      t16$0 = ui.Path.new();
      t16$0.moveTo(host.left, host.top);
      t16$0.lineTo(p[$_get](0).dx, p[$_get](0).dy);
      t16$0.quadraticBezierTo(p[$_get](1).dx, p[$_get](1).dy, p[$_get](2).dx, p[$_get](2).dy);
      t16$0.arcToPoint(p[$_get](3), {radius: new ui.Radius.circular(notchRadius), clockwise: false});
      t16$0.quadraticBezierTo(p[$_get](4).dx, p[$_get](4).dy, p[$_get](5).dx, p[$_get](5).dy);
      t16$0.lineTo(host.right, host.top);
      t16$0.lineTo(host.right, host.bottom);
      t16$0.lineTo(host.left, host.bottom);
      t16$0.close();
      return t16$0;
    }
  };
  (notched_shapes.CircularNotchedRectangle.new = function() {
    ;
  }).prototype = notched_shapes.CircularNotchedRectangle.prototype;
  dart.addTypeTests(notched_shapes.CircularNotchedRectangle);
  notched_shapes.CircularNotchedRectangle[dart.implements] = () => [notched_shapes.NotchedShape];
  dart.setMethodSignature(notched_shapes.CircularNotchedRectangle, () => ({
    __proto__: dart.getMethods(notched_shapes.CircularNotchedRectangle.__proto__),
    getOuterPath: dart.fnType(ui.Path, [ui.Rect, ui.Rect])
  }));
  dart.setLibraryUri(notched_shapes.CircularNotchedRectangle, "package:flutter_web/src/painting/notched_shapes.dart");
  geometry.positionDependentBox = function positionDependentBox(opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    let childSize = opts && 'childSize' in opts ? opts.childSize : null;
    let target = opts && 'target' in opts ? opts.target : null;
    let preferBelow = opts && 'preferBelow' in opts ? opts.preferBelow : null;
    let verticalOffset = opts && 'verticalOffset' in opts ? opts.verticalOffset : 0;
    let margin = opts && 'margin' in opts ? opts.margin : 10;
    if (!(size != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 49, 10, "size != null");
    if (!(childSize != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 50, 10, "childSize != null");
    if (!(target != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 51, 10, "target != null");
    if (!(verticalOffset != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 52, 10, "verticalOffset != null");
    if (!(preferBelow != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 53, 10, "preferBelow != null");
    if (!(margin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 54, 10, "margin != null");
    let fitsBelow = dart.notNull(target.dy) + dart.notNull(verticalOffset) + dart.notNull(childSize.height) <= dart.notNull(size.height) - dart.notNull(margin);
    let fitsAbove = dart.notNull(target.dy) - dart.notNull(verticalOffset) - dart.notNull(childSize.height) >= dart.notNull(margin);
    let tooltipBelow = dart.test(preferBelow) ? fitsBelow || !fitsAbove : !(fitsAbove || !fitsBelow);
    let y = null;
    if (tooltipBelow)
      y = math.min(core.double, dart.notNull(target.dy) + dart.notNull(verticalOffset), dart.notNull(size.height) - dart.notNull(margin));
    else
      y = math.max(core.double, dart.notNull(target.dy) - dart.notNull(verticalOffset) - dart.notNull(childSize.height), margin);
    let x = null;
    if (dart.notNull(size.width) - dart.notNull(margin) * 2.0 < dart.notNull(childSize.width)) {
      x = (dart.notNull(size.width) - dart.notNull(childSize.width)) / 2.0;
    } else {
      let normalizedTargetX = target.dx[$clamp](margin, dart.notNull(size.width) - dart.notNull(margin));
      let edge = dart.notNull(margin) + dart.notNull(childSize.width) / 2.0;
      if (normalizedTargetX < edge) {
        x = margin;
      } else if (normalizedTargetX > dart.notNull(size.width) - edge) {
        x = dart.notNull(size.width) - dart.notNull(margin) - dart.notNull(childSize.width);
      } else {
        x = normalizedTargetX - dart.notNull(childSize.width) / 2.0;
      }
    }
    return new ui.Offset.new(x, y);
  };
  const _name$9 = dart.privateName(force_press, "_name");
  let C670;
  let C671;
  let C672;
  let C673;
  let C674;
  let C675;
  force_press._ForceState = class _ForceState extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (force_press._ForceState.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = force_press._ForceState.prototype;
  dart.addTypeTests(force_press._ForceState);
  dart.setLibraryUri(force_press._ForceState, "package:flutter_web/src/gestures/force_press.dart");
  dart.setFieldSignature(force_press._ForceState, () => ({
    __proto__: dart.getFields(force_press._ForceState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$9]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(force_press._ForceState, ['toString']);
  force_press._ForceState.ready = C670 || CT.C670;
  force_press._ForceState.possible = C671 || CT.C671;
  force_press._ForceState.accepted = C672 || CT.C672;
  force_press._ForceState.started = C673 || CT.C673;
  force_press._ForceState.peaked = C674 || CT.C674;
  force_press._ForceState.values = C675 || CT.C675;
  force_press.ForcePressDetails = class ForcePressDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$4];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$5];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get pressure() {
      return this[pressure$0];
    }
    set pressure(value) {
      super.pressure = value;
    }
  };
  (force_press.ForcePressDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let pressure = opts && 'pressure' in opts ? opts.pressure : null;
    this[globalPosition$4] = globalPosition;
    this[pressure$0] = pressure;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 57, 15, "globalPosition != null");
    if (!(pressure != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 58, 15, "pressure != null");
    this[localPosition$5] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = force_press.ForcePressDetails.prototype;
  dart.addTypeTests(force_press.ForcePressDetails);
  const globalPosition$4 = Symbol("ForcePressDetails.globalPosition");
  const localPosition$5 = Symbol("ForcePressDetails.localPosition");
  const pressure$0 = Symbol("ForcePressDetails.pressure");
  dart.setLibraryUri(force_press.ForcePressDetails, "package:flutter_web/src/gestures/force_press.dart");
  dart.setFieldSignature(force_press.ForcePressDetails, () => ({
    __proto__: dart.getFields(force_press.ForcePressDetails.__proto__),
    globalPosition: dart.finalFieldType(ui.Offset),
    localPosition: dart.finalFieldType(ui.Offset),
    pressure: dart.finalFieldType(core.double)
  }));
  let C676;
  const _lastPosition = dart.privateName(force_press, "_lastPosition");
  const _lastPressure = dart.privateName(force_press, "_lastPressure");
  const _state$ = dart.privateName(force_press, "_state");
  force_press.ForcePressGestureRecognizer = class ForcePressGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get onStart() {
      return this[onStart$];
    }
    set onStart(value) {
      this[onStart$] = value;
    }
    get onUpdate() {
      return this[onUpdate$];
    }
    set onUpdate(value) {
      this[onUpdate$] = value;
    }
    get onPeak() {
      return this[onPeak];
    }
    set onPeak(value) {
      this[onPeak] = value;
    }
    get onEnd() {
      return this[onEnd$];
    }
    set onEnd(value) {
      this[onEnd$] = value;
    }
    get startPressure() {
      return this[startPressure$];
    }
    set startPressure(value) {
      super.startPressure = value;
    }
    get peakPressure() {
      return this[peakPressure$];
    }
    set peakPressure(value) {
      super.peakPressure = value;
    }
    get interpolation() {
      return this[interpolation$];
    }
    set interpolation(value) {
      super.interpolation = value;
    }
    addAllowedPointer(event) {
      if (!events.PointerUpEvent.is(event) && dart.notNull(event.pressureMax) <= 1.0) {
        this.resolve(arena.GestureDisposition.rejected);
      } else {
        this.startTrackingPointer(event.pointer, event.transform);
        if (dart.equals(this[_state$], force_press._ForceState.ready)) {
          this[_state$] = force_press._ForceState.possible;
          this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
        }
      }
    }
    handleEvent(event) {
      if (!!dart.equals(this[_state$], force_press._ForceState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 234, 12, "_state != _ForceState.ready");
      if (events.PointerMoveEvent.is(event) || events.PointerDownEvent.is(event)) {
        if (dart.notNull(event.pressure) > dart.notNull(event.pressureMax) || dart.notNull(event.pressure) < dart.notNull(event.pressureMin)) {
          print.debugPrint("The reported device pressure " + dart.toString(event.pressure) + " is outside of the device pressure range where: " + dart.toString(event.pressureMin) + " <= pressure <= " + dart.toString(event.pressureMax));
        }
        let pressure = this.interpolation(event.pressureMin, event.pressureMax, event.pressure);
        if (!(dart.notNull(pressure) >= 0.0 && dart.notNull(pressure) <= 1.0 || pressure[$isNaN])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 247, 9, "(pressure >= 0.0 && pressure <= 1.0) || // Interpolated pressure must be between 1.0 and 0.0...\n        pressure.isNaN");
        this[_lastPosition] = recognizer.OffsetPair.fromEventPosition(event);
        this[_lastPressure] = pressure;
        if (dart.equals(this[_state$], force_press._ForceState.possible)) {
          if (dart.notNull(pressure) > dart.notNull(this.startPressure)) {
            this[_state$] = force_press._ForceState.started;
            this.resolve(arena.GestureDisposition.accepted);
          } else if (dart.notNull(event.delta.distanceSquared) > 18) {
            this.resolve(arena.GestureDisposition.rejected);
          }
        }
        if (dart.notNull(pressure) > dart.notNull(this.startPressure) && dart.equals(this[_state$], force_press._ForceState.accepted)) {
          this[_state$] = force_press._ForceState.started;
          if (this.onStart != null) {
            this.invokeCallback(dart.void, "onStart", dart.fn(() => this.onStart(new force_press.ForcePressDetails.new({pressure: pressure, globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local})), VoidTovoid()));
          }
        }
        if (this.onPeak != null && dart.notNull(pressure) > dart.notNull(this.peakPressure) && dart.equals(this[_state$], force_press._ForceState.started)) {
          this[_state$] = force_press._ForceState.peaked;
          if (this.onPeak != null) {
            this.invokeCallback(dart.void, "onPeak", dart.fn(() => this.onPeak(new force_press.ForcePressDetails.new({pressure: pressure, globalPosition: event.position, localPosition: event.localPosition})), VoidTovoid()));
          }
        }
        if (this.onUpdate != null && !pressure[$isNaN] && (dart.equals(this[_state$], force_press._ForceState.started) || dart.equals(this[_state$], force_press._ForceState.peaked))) {
          if (this.onUpdate != null) {
            this.invokeCallback(dart.void, "onUpdate", dart.fn(() => this.onUpdate(new force_press.ForcePressDetails.new({pressure: pressure, globalPosition: event.position, localPosition: event.localPosition})), VoidTovoid()));
          }
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    acceptGesture(pointer) {
      if (dart.equals(this[_state$], force_press._ForceState.possible)) this[_state$] = force_press._ForceState.accepted;
      if (this.onStart != null && dart.equals(this[_state$], force_press._ForceState.started)) {
        this.invokeCallback(dart.void, "onStart", dart.fn(() => this.onStart(new force_press.ForcePressDetails.new({pressure: this[_lastPressure], globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local})), VoidTovoid()));
      }
    }
    didStopTrackingLastPointer(pointer) {
      let wasAccepted = dart.equals(this[_state$], force_press._ForceState.started) || dart.equals(this[_state$], force_press._ForceState.peaked);
      if (dart.equals(this[_state$], force_press._ForceState.possible)) {
        this.resolve(arena.GestureDisposition.rejected);
        return;
      }
      if (wasAccepted && this.onEnd != null) {
        if (this.onEnd != null) {
          this.invokeCallback(dart.void, "onEnd", dart.fn(() => this.onEnd(new force_press.ForcePressDetails.new({pressure: 0.0, globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local})), VoidTovoid()));
        }
      }
      this[_state$] = force_press._ForceState.ready;
    }
    rejectGesture(pointer) {
      this.stopTrackingPointer(pointer);
      this.didStopTrackingLastPointer(pointer);
    }
    static _inverseLerp(min, max, t) {
      if (!(dart.notNull(min) <= dart.notNull(max))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 339, 12, "min <= max");
      let value = (dart.notNull(t) - dart.notNull(min)) / (dart.notNull(max) - dart.notNull(min));
      if (!value[$isNaN]) value = value[$clamp](0.0, 1.0);
      return value;
    }
    get debugDescription() {
      return "force press";
    }
  };
  (force_press.ForcePressGestureRecognizer.new = function(opts) {
    let startPressure = opts && 'startPressure' in opts ? opts.startPressure : 0.4;
    let peakPressure = opts && 'peakPressure' in opts ? opts.peakPressure : 0.85;
    let interpolation = opts && 'interpolation' in opts ? opts.interpolation : C676 || CT.C676;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onStart$] = null;
    this[onUpdate$] = null;
    this[onPeak] = null;
    this[onEnd$] = null;
    this[_lastPosition] = null;
    this[_lastPressure] = null;
    this[_state$] = force_press._ForceState.ready;
    this[startPressure$] = startPressure;
    this[peakPressure$] = peakPressure;
    this[interpolation$] = interpolation;
    if (!(startPressure != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 133, 15, "startPressure != null");
    if (!(peakPressure != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 134, 15, "peakPressure != null");
    if (!(interpolation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 135, 15, "interpolation != null");
    if (!(dart.notNull(peakPressure) > dart.notNull(startPressure))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 136, 15, "peakPressure > startPressure");
    force_press.ForcePressGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = force_press.ForcePressGestureRecognizer.prototype;
  dart.addTypeTests(force_press.ForcePressGestureRecognizer);
  const onStart$ = Symbol("ForcePressGestureRecognizer.onStart");
  const onUpdate$ = Symbol("ForcePressGestureRecognizer.onUpdate");
  const onPeak = Symbol("ForcePressGestureRecognizer.onPeak");
  const onEnd$ = Symbol("ForcePressGestureRecognizer.onEnd");
  const startPressure$ = Symbol("ForcePressGestureRecognizer.startPressure");
  const peakPressure$ = Symbol("ForcePressGestureRecognizer.peakPressure");
  const interpolation$ = Symbol("ForcePressGestureRecognizer.interpolation");
  dart.setMethodSignature(force_press.ForcePressGestureRecognizer, () => ({
    __proto__: dart.getMethods(force_press.ForcePressGestureRecognizer.__proto__),
    addAllowedPointer: dart.fnType(dart.void, [events.PointerEvent]),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent]),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(force_press.ForcePressGestureRecognizer, () => ({
    __proto__: dart.getGetters(force_press.ForcePressGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(force_press.ForcePressGestureRecognizer, "package:flutter_web/src/gestures/force_press.dart");
  dart.setFieldSignature(force_press.ForcePressGestureRecognizer, () => ({
    __proto__: dart.getFields(force_press.ForcePressGestureRecognizer.__proto__),
    onStart: dart.fieldType(dart.fnType(dart.void, [force_press.ForcePressDetails])),
    onUpdate: dart.fieldType(dart.fnType(dart.void, [force_press.ForcePressDetails])),
    onPeak: dart.fieldType(dart.fnType(dart.void, [force_press.ForcePressDetails])),
    onEnd: dart.fieldType(dart.fnType(dart.void, [force_press.ForcePressDetails])),
    startPressure: dart.finalFieldType(core.double),
    peakPressure: dart.finalFieldType(core.double),
    interpolation: dart.finalFieldType(dart.fnType(core.double, [core.double, core.double, core.double])),
    [_lastPosition]: dart.fieldType(recognizer.OffsetPair),
    [_lastPressure]: dart.fieldType(core.double),
    [_state$]: dart.fieldType(force_press._ForceState)
  }));
  long_press.LongPressStartDetails = class LongPressStartDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$5];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$6];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
  };
  (long_press.LongPressStartDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[globalPosition$5] = globalPosition;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 59, 15, "globalPosition != null");
    this[localPosition$6] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = long_press.LongPressStartDetails.prototype;
  dart.addTypeTests(long_press.LongPressStartDetails);
  const globalPosition$5 = Symbol("LongPressStartDetails.globalPosition");
  const localPosition$6 = Symbol("LongPressStartDetails.localPosition");
  dart.setLibraryUri(long_press.LongPressStartDetails, "package:flutter_web/src/gestures/long_press.dart");
  dart.setFieldSignature(long_press.LongPressStartDetails, () => ({
    __proto__: dart.getFields(long_press.LongPressStartDetails.__proto__),
    globalPosition: dart.finalFieldType(ui.Offset),
    localPosition: dart.finalFieldType(ui.Offset)
  }));
  long_press.LongPressMoveUpdateDetails = class LongPressMoveUpdateDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$6];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$7];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get offsetFromOrigin() {
      return this[offsetFromOrigin$];
    }
    set offsetFromOrigin(value) {
      super.offsetFromOrigin = value;
    }
    get localOffsetFromOrigin() {
      return this[localOffsetFromOrigin$];
    }
    set localOffsetFromOrigin(value) {
      super.localOffsetFromOrigin = value;
    }
  };
  (long_press.LongPressMoveUpdateDetails.new = function(opts) {
    let t16, t16$;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let offsetFromOrigin = opts && 'offsetFromOrigin' in opts ? opts.offsetFromOrigin : C130 || CT.C130;
    let localOffsetFromOrigin = opts && 'localOffsetFromOrigin' in opts ? opts.localOffsetFromOrigin : null;
    this[globalPosition$6] = globalPosition;
    this[offsetFromOrigin$] = offsetFromOrigin;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 85, 15, "globalPosition != null");
    if (!(offsetFromOrigin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 86, 15, "offsetFromOrigin != null");
    this[localPosition$7] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    this[localOffsetFromOrigin$] = (t16$ = localOffsetFromOrigin, t16$ == null ? offsetFromOrigin : t16$);
    ;
  }).prototype = long_press.LongPressMoveUpdateDetails.prototype;
  dart.addTypeTests(long_press.LongPressMoveUpdateDetails);
  const globalPosition$6 = Symbol("LongPressMoveUpdateDetails.globalPosition");
  const localPosition$7 = Symbol("LongPressMoveUpdateDetails.localPosition");
  const offsetFromOrigin$ = Symbol("LongPressMoveUpdateDetails.offsetFromOrigin");
  const localOffsetFromOrigin$ = Symbol("LongPressMoveUpdateDetails.localOffsetFromOrigin");
  dart.setLibraryUri(long_press.LongPressMoveUpdateDetails, "package:flutter_web/src/gestures/long_press.dart");
  dart.setFieldSignature(long_press.LongPressMoveUpdateDetails, () => ({
    __proto__: dart.getFields(long_press.LongPressMoveUpdateDetails.__proto__),
    globalPosition: dart.finalFieldType(ui.Offset),
    localPosition: dart.finalFieldType(ui.Offset),
    offsetFromOrigin: dart.finalFieldType(ui.Offset),
    localOffsetFromOrigin: dart.finalFieldType(ui.Offset)
  }));
  long_press.LongPressEndDetails = class LongPressEndDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$7];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$8];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get velocity() {
      return this[velocity$2];
    }
    set velocity(value) {
      super.velocity = value;
    }
  };
  (long_press.LongPressEndDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : C130 || CT.C130;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : C652 || CT.C652;
    this[globalPosition$7] = globalPosition;
    this[velocity$2] = velocity;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 122, 15, "globalPosition != null");
    this[localPosition$8] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = long_press.LongPressEndDetails.prototype;
  dart.addTypeTests(long_press.LongPressEndDetails);
  const globalPosition$7 = Symbol("LongPressEndDetails.globalPosition");
  const localPosition$8 = Symbol("LongPressEndDetails.localPosition");
  const velocity$2 = Symbol("LongPressEndDetails.velocity");
  dart.setLibraryUri(long_press.LongPressEndDetails, "package:flutter_web/src/gestures/long_press.dart");
  dart.setFieldSignature(long_press.LongPressEndDetails, () => ({
    __proto__: dart.getFields(long_press.LongPressEndDetails.__proto__),
    globalPosition: dart.finalFieldType(ui.Offset),
    localPosition: dart.finalFieldType(ui.Offset),
    velocity: dart.finalFieldType(velocity_tracker.Velocity)
  }));
  const _longPressAccepted = dart.privateName(long_press, "_longPressAccepted");
  const _longPressOrigin = dart.privateName(long_press, "_longPressOrigin");
  const _initialButtons$ = dart.privateName(long_press, "_initialButtons");
  const _velocityTracker$ = dart.privateName(long_press, "_velocityTracker");
  const _checkLongPressStart = dart.privateName(long_press, "_checkLongPressStart");
  const _checkLongPressEnd = dart.privateName(long_press, "_checkLongPressEnd");
  const _reset$ = dart.privateName(long_press, "_reset");
  const _checkLongPressMoveUpdate = dart.privateName(long_press, "_checkLongPressMoveUpdate");
  long_press.LongPressGestureRecognizer = class LongPressGestureRecognizer extends recognizer.PrimaryPointerGestureRecognizer {
    get onLongPress() {
      return this[onLongPress];
    }
    set onLongPress(value) {
      this[onLongPress] = value;
    }
    get onLongPressStart() {
      return this[onLongPressStart];
    }
    set onLongPressStart(value) {
      this[onLongPressStart] = value;
    }
    get onLongPressMoveUpdate() {
      return this[onLongPressMoveUpdate];
    }
    set onLongPressMoveUpdate(value) {
      this[onLongPressMoveUpdate] = value;
    }
    get onLongPressUp() {
      return this[onLongPressUp];
    }
    set onLongPressUp(value) {
      this[onLongPressUp] = value;
    }
    get onLongPressEnd() {
      return this[onLongPressEnd];
    }
    set onLongPressEnd(value) {
      this[onLongPressEnd] = value;
    }
    isPointerAllowed(event) {
      switch (event.buttons) {
        case 1:
        {
          if (this.onLongPressStart == null && this.onLongPress == null && this.onLongPressMoveUpdate == null && this.onLongPressEnd == null && this.onLongPressUp == null) return false;
          break;
        }
        default:
        {
          return false;
        }
      }
      return super.isPointerAllowed(event);
    }
    didExceedDeadline() {
      this.resolve(arena.GestureDisposition.accepted);
      this[_longPressAccepted] = true;
      super.acceptGesture(this.primaryPointer);
      this[_checkLongPressStart]();
    }
    handlePrimaryPointer(event) {
      if (!dart.test(event.synthesized)) {
        if (events.PointerDownEvent.is(event)) {
          this[_velocityTracker$] = new velocity_tracker.VelocityTracker.new();
          this[_velocityTracker$].addPosition(event.timeStamp, event.localPosition);
        }
        if (events.PointerMoveEvent.is(event)) {
          if (!(this[_velocityTracker$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 261, 16, "_velocityTracker != null");
          this[_velocityTracker$].addPosition(event.timeStamp, event.localPosition);
        }
      }
      if (events.PointerUpEvent.is(event)) {
        if (dart.equals(this[_longPressAccepted], true)) {
          this[_checkLongPressEnd](event);
        } else {
          this.resolve(arena.GestureDisposition.rejected);
        }
        this[_reset$]();
      } else if (events.PointerCancelEvent.is(event)) {
        this[_reset$]();
      } else if (events.PointerDownEvent.is(event)) {
        this[_longPressOrigin] = recognizer.OffsetPair.fromEventPosition(event);
        this[_initialButtons$] = event.buttons;
      } else if (events.PointerMoveEvent.is(event)) {
        if (event.buttons != this[_initialButtons$]) {
          this.resolve(arena.GestureDisposition.rejected);
          this.stopTrackingPointer(this.primaryPointer);
        } else if (dart.test(this[_longPressAccepted])) {
          this[_checkLongPressMoveUpdate](event);
        }
      }
    }
    [_checkLongPressStart]() {
      if (!(this[_initialButtons$] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 291, 12, "_initialButtons == kPrimaryButton");
      if (this.onLongPressStart != null) {
        let details = new long_press.LongPressStartDetails.new({globalPosition: this[_longPressOrigin].global, localPosition: this[_longPressOrigin].local});
        this.invokeCallback(dart.void, "onLongPressStart", dart.fn(() => this.onLongPressStart(details), VoidTovoid()));
      }
      if (this.onLongPress != null) this.invokeCallback(dart.void, "onLongPress", this.onLongPress);
    }
    [_checkLongPressMoveUpdate](event) {
      if (!(this[_initialButtons$] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 305, 12, "_initialButtons == kPrimaryButton");
      let details = new long_press.LongPressMoveUpdateDetails.new({globalPosition: event.position, localPosition: event.localPosition, offsetFromOrigin: event.position['-'](this[_longPressOrigin].global), localOffsetFromOrigin: event.localPosition['-'](this[_longPressOrigin].local)});
      if (this.onLongPressMoveUpdate != null) this.invokeCallback(dart.void, "onLongPressMoveUpdate", dart.fn(() => this.onLongPressMoveUpdate(details), VoidTovoid()));
    }
    [_checkLongPressEnd](event) {
      if (!(this[_initialButtons$] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 318, 12, "_initialButtons == kPrimaryButton");
      let estimate = this[_velocityTracker$].getVelocityEstimate();
      let velocity = estimate == null ? velocity_tracker.Velocity.zero : new velocity_tracker.Velocity.new({pixelsPerSecond: estimate.pixelsPerSecond});
      let details = new long_press.LongPressEndDetails.new({globalPosition: event.position, localPosition: event.localPosition, velocity: velocity});
      this[_velocityTracker$] = null;
      if (this.onLongPressEnd != null) this.invokeCallback(dart.void, "onLongPressEnd", dart.fn(() => this.onLongPressEnd(details), VoidTovoid()));
      if (this.onLongPressUp != null) this.invokeCallback(dart.void, "onLongPressUp", this.onLongPressUp);
    }
    [_reset$]() {
      this[_longPressAccepted] = false;
      this[_longPressOrigin] = null;
      this[_initialButtons$] = null;
      this[_velocityTracker$] = null;
    }
    resolve(disposition) {
      if (dart.test(this[_longPressAccepted]) && dart.equals(disposition, arena.GestureDisposition.rejected)) {
        this[_reset$]();
      }
      super.resolve(disposition);
    }
    acceptGesture(pointer) {
    }
    get debugDescription() {
      return "long press";
    }
  };
  (long_press.LongPressGestureRecognizer.new = function(opts) {
    let postAcceptSlopTolerance = opts && 'postAcceptSlopTolerance' in opts ? opts.postAcceptSlopTolerance : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[_longPressAccepted] = false;
    this[_longPressOrigin] = null;
    this[_initialButtons$] = null;
    this[onLongPress] = null;
    this[onLongPressStart] = null;
    this[onLongPressMoveUpdate] = null;
    this[onLongPressUp] = null;
    this[onLongPressEnd] = null;
    this[_velocityTracker$] = null;
    long_press.LongPressGestureRecognizer.__proto__.new.call(this, {deadline: constants.kLongPressTimeout, postAcceptSlopTolerance: postAcceptSlopTolerance, kind: kind, debugOwner: debugOwner});
    ;
  }).prototype = long_press.LongPressGestureRecognizer.prototype;
  dart.addTypeTests(long_press.LongPressGestureRecognizer);
  const onLongPress = Symbol("LongPressGestureRecognizer.onLongPress");
  const onLongPressStart = Symbol("LongPressGestureRecognizer.onLongPressStart");
  const onLongPressMoveUpdate = Symbol("LongPressGestureRecognizer.onLongPressMoveUpdate");
  const onLongPressUp = Symbol("LongPressGestureRecognizer.onLongPressUp");
  const onLongPressEnd = Symbol("LongPressGestureRecognizer.onLongPressEnd");
  dart.setMethodSignature(long_press.LongPressGestureRecognizer, () => ({
    __proto__: dart.getMethods(long_press.LongPressGestureRecognizer.__proto__),
    handlePrimaryPointer: dart.fnType(dart.void, [events.PointerEvent]),
    [_checkLongPressStart]: dart.fnType(dart.void, []),
    [_checkLongPressMoveUpdate]: dart.fnType(dart.void, [events.PointerEvent]),
    [_checkLongPressEnd]: dart.fnType(dart.void, [events.PointerEvent]),
    [_reset$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(long_press.LongPressGestureRecognizer, () => ({
    __proto__: dart.getGetters(long_press.LongPressGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(long_press.LongPressGestureRecognizer, "package:flutter_web/src/gestures/long_press.dart");
  dart.setFieldSignature(long_press.LongPressGestureRecognizer, () => ({
    __proto__: dart.getFields(long_press.LongPressGestureRecognizer.__proto__),
    [_longPressAccepted]: dart.fieldType(core.bool),
    [_longPressOrigin]: dart.fieldType(recognizer.OffsetPair),
    [_initialButtons$]: dart.fieldType(core.int),
    onLongPress: dart.fieldType(dart.fnType(dart.void, [])),
    onLongPressStart: dart.fieldType(dart.fnType(dart.void, [long_press.LongPressStartDetails])),
    onLongPressMoveUpdate: dart.fieldType(dart.fnType(dart.void, [long_press.LongPressMoveUpdateDetails])),
    onLongPressUp: dart.fieldType(dart.fnType(dart.void, [])),
    onLongPressEnd: dart.fieldType(dart.fnType(dart.void, [long_press.LongPressEndDetails])),
    [_velocityTracker$]: dart.fieldType(velocity_tracker.VelocityTracker)
  }));
  const _fontFamilyFallback = dart.privateName(strut_style, "_fontFamilyFallback");
  const _package = dart.privateName(strut_style, "_package");
  let C677;
  strut_style.StrutStyle = class StrutStyle extends diagnostics.Diagnosticable {
    get fontFamily() {
      return this[fontFamily$0];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get leading() {
      return this[leading$];
    }
    set leading(value) {
      super.leading = value;
    }
    get forceStrutHeight() {
      return this[forceStrutHeight$];
    }
    set forceStrutHeight(value) {
      super.forceStrutHeight = value;
    }
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get fontFamilyFallback() {
      if (this[_package] != null && this[_fontFamilyFallback] != null) return this[_fontFamilyFallback][$map](core.String, dart.fn(family => "packages/" + dart.str(this[_package]) + "/" + dart.str(family), StringToString()))[$toList]();
      return this[_fontFamilyFallback];
    }
    compareTo(other) {
      if (this === other) return basic_types.RenderComparison.identical;
      if (this.fontFamily != other.fontFamily || this.fontSize != other.fontSize || !dart.equals(this.fontWeight, other.fontWeight) || !dart.equals(this.fontStyle, other.fontStyle) || this.height != other.height || this.leading != other.leading || !dart.equals(this.forceStrutHeight, other.forceStrutHeight) || !dart.test(collections.listEquals(core.String, this.fontFamilyFallback, other.fontFamilyFallback))) return basic_types.RenderComparison.layout;
      return basic_types.RenderComparison.identical;
    }
    inheritFromTextStyle(other) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4;
      if (other == null) return this;
      return new strut_style.StrutStyle.new({fontFamily: (t16 = this.fontFamily, t16 == null ? other.fontFamily : t16), fontFamilyFallback: (t16$ = this.fontFamilyFallback, t16$ == null ? other.fontFamilyFallback : t16$), fontSize: (t16$0 = this.fontSize, t16$0 == null ? other.fontSize : t16$0), height: (t16$1 = this.height, t16$1 == null ? other.height : t16$1), leading: this.leading, fontWeight: (t16$2 = this.fontWeight, t16$2 == null ? other.fontWeight : t16$2), fontStyle: (t16$3 = this.fontStyle, t16$3 == null ? other.fontStyle : t16$3), forceStrutHeight: this.forceStrutHeight, debugLabel: (t16$4 = this.debugLabel, t16$4 == null ? other.debugLabel : t16$4)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = strut_style.StrutStyle._check(other);
      return this.fontFamily == typedOther.fontFamily && this.fontSize == typedOther.fontSize && dart.equals(this.fontWeight, typedOther.fontWeight) && dart.equals(this.fontStyle, typedOther.fontStyle) && this.height == typedOther.height && this.leading == typedOther.leading && dart.equals(this.forceStrutHeight, typedOther.forceStrutHeight);
    }
    get hashCode() {
      return ui.hashValues(this.fontFamily, this.fontSize, this.fontWeight, this.fontStyle, this.height, this.leading, this.forceStrutHeight);
    }
    toStringShort() {
      return dart.str(this[$runtimeType]);
    }
    debugFillProperties(properties, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : "";
      super.debugFillProperties(properties);
      if (this.debugLabel != null) properties.add(new diagnostics.MessageProperty.new(dart.str(prefix) + "debugLabel", this.debugLabel));
      let styles = JSArrayOfDiagnosticsNode().of([]);
      styles[$add](new diagnostics.StringProperty.new(dart.str(prefix) + "family", this.fontFamily, {defaultValue: null, quoted: false}));
      styles[$add](new (IterablePropertyOfString()).new(dart.str(prefix) + "familyFallback", this.fontFamilyFallback, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(dart.str(prefix) + "size", this.fontSize, {defaultValue: null}));
      let weightDescription = null;
      if (this.fontWeight != null) {
        weightDescription = "w" + dart.str(dart.notNull(this.fontWeight.index) + 1) + "00";
      }
      styles[$add](new (DiagnosticsPropertyOfFontWeight()).new(dart.str(prefix) + "weight", this.fontWeight, {description: weightDescription, defaultValue: null}));
      styles[$add](new (EnumPropertyOfFontStyle()).new(dart.str(prefix) + "style", this.fontStyle, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(dart.str(prefix) + "height", this.height, {unit: "x", defaultValue: null}));
      styles[$add](new diagnostics.FlagProperty.new(dart.str(prefix) + "forceStrutHeight", {value: this.forceStrutHeight, defaultValue: null}));
      let styleSpecified = styles[$any](dart.fn(n => !dart.test(n.isFiltered(diagnostics.DiagnosticLevel.info)), DiagnosticsNodeTobool()));
      styles[$forEach](dart.bind(properties, 'add'));
      if (!dart.test(styleSpecified)) properties.add(new diagnostics.FlagProperty.new("forceStrutHeight", {value: this.forceStrutHeight, ifTrue: dart.str(prefix) + "<strut height forced>", ifFalse: dart.str(prefix) + "<strut height normal>"}));
    }
  };
  (strut_style.StrutStyle.new = function(opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let package$ = opts && 'package' in opts ? opts.package : null;
    this[fontSize$] = fontSize;
    this[height$] = height;
    this[leading$] = leading;
    this[fontWeight$] = fontWeight;
    this[fontStyle$] = fontStyle;
    this[forceStrutHeight$] = forceStrutHeight;
    this[debugLabel$] = debugLabel;
    this[fontFamily$0] = package$ == null ? fontFamily : "packages/" + dart.str(package$) + "/" + dart.str(fontFamily);
    this[_fontFamilyFallback] = fontFamilyFallback;
    this[_package] = package$;
    if (!(fontSize == null || dart.notNull(fontSize) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 290, 15, "t(fontSize == null || fontSize >");
    if (!(leading == null || dart.notNull(leading) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 291, 15, "t(leading == null || leading >=");
    if (!(package$ == null || package$ != null && (fontFamily != null || fontFamilyFallback != null))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 292, 15, "t(package == null || (package != null && (fontFamily != null || fontFamilyFallback != null");
    strut_style.StrutStyle.__proto__.new.call(this);
    ;
  }).prototype = strut_style.StrutStyle.prototype;
  (strut_style.StrutStyle.fromTextStyle = function(textStyle, opts) {
    let t16, t16$, t16$0, t16$1, t16$2, t16$3;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let package$ = opts && 'package' in opts ? opts.package : null;
    this[leading$] = leading;
    this[forceStrutHeight$] = forceStrutHeight;
    if (!(textStyle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 322, 15, "t(textStyle != nu");
    if (!(fontSize == null || dart.notNull(fontSize) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 323, 15, "t(fontSize == null || fontSize >");
    if (!(leading == null || dart.notNull(leading) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 324, 15, "t(leading == null || leading >=");
    if (!(package$ == null || package$ != null && (fontFamily != null || fontFamilyFallback != null))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 325, 15, "t(package == null || (package != null && (fontFamily != null || fontFamilyFallback != null");
    this[fontFamily$0] = fontFamily != null ? package$ == null ? fontFamily : "packages/" + dart.str(package$) + "/" + dart.str(fontFamily) : textStyle.fontFamily;
    this[_fontFamilyFallback] = (t16 = fontFamilyFallback, t16 == null ? textStyle.fontFamilyFallback : t16);
    this[height$] = (t16$ = height, t16$ == null ? textStyle.height : t16$);
    this[fontSize$] = (t16$0 = fontSize, t16$0 == null ? textStyle.fontSize : t16$0);
    this[fontWeight$] = (t16$1 = fontWeight, t16$1 == null ? textStyle.fontWeight : t16$1);
    this[fontStyle$] = (t16$2 = fontStyle, t16$2 == null ? textStyle.fontStyle : t16$2);
    this[debugLabel$] = (t16$3 = debugLabel, t16$3 == null ? textStyle.debugLabel : t16$3);
    this[_package] = package$;
    strut_style.StrutStyle.__proto__.new.call(this);
    ;
  }).prototype = strut_style.StrutStyle.prototype;
  dart.addTypeTests(strut_style.StrutStyle);
  const fontFamily$0 = Symbol("StrutStyle.fontFamily");
  const fontSize$ = Symbol("StrutStyle.fontSize");
  const height$ = Symbol("StrutStyle.height");
  const fontWeight$ = Symbol("StrutStyle.fontWeight");
  const fontStyle$ = Symbol("StrutStyle.fontStyle");
  const leading$ = Symbol("StrutStyle.leading");
  const forceStrutHeight$ = Symbol("StrutStyle.forceStrutHeight");
  const debugLabel$ = Symbol("StrutStyle.debugLabel");
  dart.setMethodSignature(strut_style.StrutStyle, () => ({
    __proto__: dart.getMethods(strut_style.StrutStyle.__proto__),
    compareTo: dart.fnType(basic_types.RenderComparison, [strut_style.StrutStyle]),
    inheritFromTextStyle: dart.fnType(strut_style.StrutStyle, [text_style.TextStyle]),
    debugFillProperties: dart.fnType(dart.void, [diagnostics.DiagnosticPropertiesBuilder], {prefix: core.String})
  }));
  dart.setGetterSignature(strut_style.StrutStyle, () => ({
    __proto__: dart.getGetters(strut_style.StrutStyle.__proto__),
    fontFamilyFallback: core.List$(core.String)
  }));
  dart.setLibraryUri(strut_style.StrutStyle, "package:flutter_web/src/painting/strut_style.dart");
  dart.setFieldSignature(strut_style.StrutStyle, () => ({
    __proto__: dart.getFields(strut_style.StrutStyle.__proto__),
    fontFamily: dart.finalFieldType(core.String),
    [_fontFamilyFallback]: dart.finalFieldType(core.List$(core.String)),
    [_package]: dart.finalFieldType(core.String),
    fontSize: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    fontWeight: dart.finalFieldType(ui.FontWeight),
    fontStyle: dart.finalFieldType(ui.FontStyle),
    leading: dart.finalFieldType(core.double),
    forceStrutHeight: dart.finalFieldType(core.bool),
    debugLabel: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(strut_style.StrutStyle, ['_equals']);
  dart.defineExtensionAccessors(strut_style.StrutStyle, ['hashCode']);
  dart.defineLazy(strut_style.StrutStyle, {
    /*strut_style.StrutStyle.disabled*/get disabled() {
      return C677 || CT.C677;
    }
  });
  const _fontFamilyFallback$ = dart.privateName(text_style, "_fontFamilyFallback");
  const _package$ = dart.privateName(text_style, "_package");
  text_style.TextStyle = class TextStyle extends diagnostics.Diagnosticable {
    get inherit() {
      return this[inherit$];
    }
    set inherit(value) {
      super.inherit = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get fontFamily() {
      return this[fontFamily$1];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$0];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get fontWeight() {
      return this[fontWeight$0];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$0];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get textBaseline() {
      return this[textBaseline$];
    }
    set textBaseline(value) {
      super.textBaseline = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get foreground() {
      return this[foreground$];
    }
    set foreground(value) {
      super.foreground = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    get decoration() {
      return this[decoration$];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get decorationColor() {
      return this[decorationColor$];
    }
    set decorationColor(value) {
      super.decorationColor = value;
    }
    get decorationStyle() {
      return this[decorationStyle$];
    }
    set decorationStyle(value) {
      super.decorationStyle = value;
    }
    get decorationThickness() {
      return this[decorationThickness$];
    }
    set decorationThickness(value) {
      super.decorationThickness = value;
    }
    get debugLabel() {
      return this[debugLabel$0];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get shadows() {
      return this[shadows$];
    }
    set shadows(value) {
      super.shadows = value;
    }
    get fontFamilyFallback() {
      return this[_package$] != null && this[_fontFamilyFallback$] != null ? this[_fontFamilyFallback$][$map](core.String, dart.fn(str => "packages/" + dart.str(this[_package$]) + "/" + dart.str(str), StringToString()))[$toList]() : this[_fontFamilyFallback$];
    }
    copyWith(opts) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4, t16$5, t16$6, t16$7, t16$8, t16$9, t16$10, t16$11, t16$12, t16$13, t16$14, t16$15, t16$16, t16$17;
      let inherit = opts && 'inherit' in opts ? opts.inherit : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      if (!(color == null || foreground == null)) dart.assertFailed(text_style._kColorForegroundWarning, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 598, 12, "color == null || foreground == null");
      if (!(backgroundColor == null || background == null)) dart.assertFailed(text_style._kColorBackgroundWarning, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 599, 12, "backgroundColor == null || background == null");
      let newDebugLabel = null;
      if (!dart.test(dart.fn(() => {
        let t16;
        if (this.debugLabel != null) newDebugLabel = (t16 = debugLabel, t16 == null ? "(" + dart.str(this.debugLabel) + ").copyWith" : t16);
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 601, 12, "() {\n      if (this.debugLabel != null)\n        newDebugLabel = debugLabel ?? '(${this.debugLabel}).copyWith';\n      return true;\n    }()");
      return new text_style.TextStyle.new({inherit: (t16 = inherit, t16 == null ? this.inherit : t16), color: this.foreground == null && foreground == null ? (t16$ = color, t16$ == null ? this.color : t16$) : null, backgroundColor: this.background == null && background == null ? (t16$0 = backgroundColor, t16$0 == null ? this.backgroundColor : t16$0) : null, fontFamily: (t16$1 = fontFamily, t16$1 == null ? this.fontFamily : t16$1), fontFamilyFallback: (t16$2 = fontFamilyFallback, t16$2 == null ? this.fontFamilyFallback : t16$2), fontSize: (t16$3 = fontSize, t16$3 == null ? this.fontSize : t16$3), fontWeight: (t16$4 = fontWeight, t16$4 == null ? this.fontWeight : t16$4), fontStyle: (t16$5 = fontStyle, t16$5 == null ? this.fontStyle : t16$5), letterSpacing: (t16$6 = letterSpacing, t16$6 == null ? this.letterSpacing : t16$6), wordSpacing: (t16$7 = wordSpacing, t16$7 == null ? this.wordSpacing : t16$7), textBaseline: (t16$8 = textBaseline, t16$8 == null ? this.textBaseline : t16$8), height: (t16$9 = height, t16$9 == null ? this.height : t16$9), locale: (t16$10 = locale, t16$10 == null ? this.locale : t16$10), foreground: (t16$11 = foreground, t16$11 == null ? this.foreground : t16$11), background: (t16$12 = background, t16$12 == null ? this.background : t16$12), shadows: (t16$13 = shadows, t16$13 == null ? this.shadows : t16$13), decoration: (t16$14 = decoration, t16$14 == null ? this.decoration : t16$14), decorationColor: (t16$15 = decorationColor, t16$15 == null ? this.decorationColor : t16$15), decorationStyle: (t16$16 = decorationStyle, t16$16 == null ? this.decorationStyle : t16$16), decorationThickness: (t16$17 = decorationThickness, t16$17 == null ? this.decorationThickness : t16$17), debugLabel: newDebugLabel});
    }
    apply(opts) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThicknessFactor = opts && 'decorationThicknessFactor' in opts ? opts.decorationThicknessFactor : 1;
      let decorationThicknessDelta = opts && 'decorationThicknessDelta' in opts ? opts.decorationThicknessDelta : 0;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
      let fontSizeFactor = opts && 'fontSizeFactor' in opts ? opts.fontSizeFactor : 1;
      let fontSizeDelta = opts && 'fontSizeDelta' in opts ? opts.fontSizeDelta : 0;
      let fontWeightDelta = opts && 'fontWeightDelta' in opts ? opts.fontWeightDelta : 0;
      let letterSpacingFactor = opts && 'letterSpacingFactor' in opts ? opts.letterSpacingFactor : 1;
      let letterSpacingDelta = opts && 'letterSpacingDelta' in opts ? opts.letterSpacingDelta : 0;
      let wordSpacingFactor = opts && 'wordSpacingFactor' in opts ? opts.wordSpacingFactor : 1;
      let wordSpacingDelta = opts && 'wordSpacingDelta' in opts ? opts.wordSpacingDelta : 0;
      let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : 1;
      let heightDelta = opts && 'heightDelta' in opts ? opts.heightDelta : 0;
      if (!(fontSizeFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 680, 12, "fontSizeFactor != null");
      if (!(fontSizeDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 681, 12, "fontSizeDelta != null");
      if (!(this.fontSize != null || fontSizeFactor === 1.0 && fontSizeDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 682, 12, "fontSize != null || (fontSizeFactor == 1.0 && fontSizeDelta == 0.0)");
      if (!(fontWeightDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 683, 12, "fontWeightDelta != null");
      if (!(this.fontWeight != null || fontWeightDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 684, 12, "fontWeight != null || fontWeightDelta == 0.0");
      if (!(letterSpacingFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 685, 12, "letterSpacingFactor != null");
      if (!(letterSpacingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 686, 12, "letterSpacingDelta != null");
      if (!(this.letterSpacing != null || letterSpacingFactor === 1.0 && letterSpacingDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 687, 12, "letterSpacing != null || (letterSpacingFactor == 1.0 && letterSpacingDelta == 0.0)");
      if (!(wordSpacingFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 688, 12, "wordSpacingFactor != null");
      if (!(wordSpacingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 689, 12, "wordSpacingDelta != null");
      if (!(this.wordSpacing != null || wordSpacingFactor === 1.0 && wordSpacingDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 690, 12, "wordSpacing != null || (wordSpacingFactor == 1.0 && wordSpacingDelta == 0.0)");
      if (!(heightFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 691, 12, "heightFactor != null");
      if (!(heightDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 692, 12, "heightDelta != null");
      if (!(heightFactor != null || heightFactor === 1.0 && heightDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 693, 12, "heightFactor != null || (heightFactor == 1.0 && heightDelta == 0.0)");
      if (!(decorationThicknessFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 694, 12, "decorationThicknessFactor != null");
      if (!(decorationThicknessDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 695, 12, "decorationThicknessDelta != null");
      if (!(this.decorationThickness != null || decorationThicknessFactor === 1.0 && decorationThicknessDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 696, 12, "decorationThickness != null || (decorationThicknessFactor == 1.0 && decorationThicknessDelta == 0.0)");
      let modifiedDebugLabel = null;
      if (!dart.test(dart.fn(() => {
        if (this.debugLabel != null) modifiedDebugLabel = "(" + dart.str(this.debugLabel) + ").apply";
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 699, 12, "() {\n      if (debugLabel != null)\n        modifiedDebugLabel = '($debugLabel).apply';\n      return true;\n    }()");
      return new text_style.TextStyle.new({inherit: this.inherit, color: this.foreground == null ? (t16 = color, t16 == null ? this.color : t16) : null, backgroundColor: this.background == null ? (t16$ = backgroundColor, t16$ == null ? this.backgroundColor : t16$) : null, fontFamily: (t16$0 = fontFamily, t16$0 == null ? this.fontFamily : t16$0), fontFamilyFallback: (t16$1 = fontFamilyFallback, t16$1 == null ? this.fontFamilyFallback : t16$1), fontSize: this.fontSize == null ? null : dart.notNull(this.fontSize) * dart.notNull(fontSizeFactor) + dart.notNull(fontSizeDelta), fontWeight: this.fontWeight == null ? null : ui.FontWeight.values[$_get](dart.asInt((dart.notNull(this.fontWeight.index) + dart.notNull(fontWeightDelta))[$clamp](0, dart.notNull(ui.FontWeight.values[$length]) - 1))), fontStyle: this.fontStyle, letterSpacing: this.letterSpacing == null ? null : dart.notNull(this.letterSpacing) * dart.notNull(letterSpacingFactor) + dart.notNull(letterSpacingDelta), wordSpacing: this.wordSpacing == null ? null : dart.notNull(this.wordSpacing) * dart.notNull(wordSpacingFactor) + dart.notNull(wordSpacingDelta), textBaseline: this.textBaseline, height: this.height == null ? null : dart.notNull(this.height) * dart.notNull(heightFactor) + dart.notNull(heightDelta), locale: this.locale, foreground: this.foreground, background: this.background, shadows: this.shadows, decoration: (t16$2 = decoration, t16$2 == null ? this.decoration : t16$2), decorationColor: (t16$3 = decorationColor, t16$3 == null ? this.decorationColor : t16$3), decorationStyle: (t16$4 = decorationStyle, t16$4 == null ? this.decorationStyle : t16$4), decorationThickness: this.decorationThickness == null ? null : dart.notNull(this.decorationThickness) * dart.notNull(decorationThicknessFactor) + dart.notNull(decorationThicknessDelta), debugLabel: modifiedDebugLabel});
    }
    merge(other) {
      if (other == null) return this;
      if (!dart.test(other.inherit)) return other;
      let mergedDebugLabel = null;
      if (!dart.test(dart.fn(() => {
        let t16, t16$;
        if (other.debugLabel != null || this.debugLabel != null) mergedDebugLabel = "(" + dart.str((t16 = this.debugLabel, t16 == null ? "unknown" : t16)) + ").merge(" + dart.str((t16$ = other.debugLabel, t16$ == null ? "unknown" : t16$)) + ")";
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 758, 12, "() {\n      if (other.debugLabel != null || debugLabel != null)\n        mergedDebugLabel = '(${debugLabel ?? _kDefaultDebugLabel}).merge(${other.debugLabel ?? _kDefaultDebugLabel})';\n      return true;\n    }()");
      return this.copyWith({color: other.color, backgroundColor: other.backgroundColor, fontFamily: other.fontFamily, fontFamilyFallback: other.fontFamilyFallback, fontSize: other.fontSize, fontWeight: other.fontWeight, fontStyle: other.fontStyle, letterSpacing: other.letterSpacing, wordSpacing: other.wordSpacing, textBaseline: other.textBaseline, height: other.height, locale: other.locale, foreground: other.foreground, background: other.background, shadows: other.shadows, decoration: other.decoration, decorationColor: other.decorationColor, decorationStyle: other.decorationStyle, decorationThickness: other.decorationThickness, debugLabel: mergedDebugLabel});
    }
    static lerp(a, b, t) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4, t16$5, t17, t16$6, t17$, t16$7, t17$0, t16$8, t17$1, t16$9, t16$10, t16$11;
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 802, 12, "t != null");
      if (!(a == null || b == null || dart.equals(a.inherit, b.inherit))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 803, 12, "a == null || b == null || a.inherit == b.inherit");
      if (a == null && b == null) {
        return null;
      }
      let lerpDebugLabel = null;
      if (!dart.test(dart.fn(() => {
        let t16, t16$, t16$0, t16$1;
        lerpDebugLabel = "lerp(" + dart.str((t16$ = (t16 = a, t16 == null ? null : t16.debugLabel), t16$ == null ? "unknown" : t16$)) + " ⎯" + t[$toStringAsFixed](1) + "→ " + dart.str((t16$1 = (t16$0 = b, t16$0 == null ? null : t16$0.debugLabel), t16$1 == null ? "unknown" : t16$1)) + ")";
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 809, 12, "() {\n      lerpDebugLabel = 'lerp(${a?.debugLabel ?? _kDefaultDebugLabel} ⎯${t.toStringAsFixed(1)}→ ${b?.debugLabel ?? _kDefaultDebugLabel})';\n      return true;\n   ");
      if (a == null) {
        return new text_style.TextStyle.new({inherit: b.inherit, color: ui.Color.lerp(null, b.color, t), backgroundColor: ui.Color.lerp(null, b.backgroundColor, t), fontFamily: dart.notNull(t) < 0.5 ? null : b.fontFamily, fontFamilyFallback: dart.notNull(t) < 0.5 ? null : b.fontFamilyFallback, fontSize: dart.notNull(t) < 0.5 ? null : b.fontSize, fontWeight: ui.FontWeight.lerp(null, b.fontWeight, t), fontStyle: dart.notNull(t) < 0.5 ? null : b.fontStyle, letterSpacing: dart.notNull(t) < 0.5 ? null : b.letterSpacing, wordSpacing: dart.notNull(t) < 0.5 ? null : b.wordSpacing, textBaseline: dart.notNull(t) < 0.5 ? null : b.textBaseline, height: dart.notNull(t) < 0.5 ? null : b.height, locale: dart.notNull(t) < 0.5 ? null : b.locale, foreground: dart.notNull(t) < 0.5 ? null : b.foreground, background: dart.notNull(t) < 0.5 ? null : b.background, decoration: dart.notNull(t) < 0.5 ? null : b.decoration, shadows: dart.notNull(t) < 0.5 ? null : b.shadows, decorationColor: ui.Color.lerp(null, b.decorationColor, t), decorationStyle: dart.notNull(t) < 0.5 ? null : b.decorationStyle, decorationThickness: dart.notNull(t) < 0.5 ? null : b.decorationThickness, debugLabel: lerpDebugLabel});
      }
      if (b == null) {
        return new text_style.TextStyle.new({inherit: a.inherit, color: ui.Color.lerp(a.color, null, t), backgroundColor: ui.Color.lerp(null, a.backgroundColor, t), fontFamily: dart.notNull(t) < 0.5 ? a.fontFamily : null, fontFamilyFallback: dart.notNull(t) < 0.5 ? a.fontFamilyFallback : null, fontSize: dart.notNull(t) < 0.5 ? a.fontSize : null, fontWeight: ui.FontWeight.lerp(a.fontWeight, null, t), fontStyle: dart.notNull(t) < 0.5 ? a.fontStyle : null, letterSpacing: dart.notNull(t) < 0.5 ? a.letterSpacing : null, wordSpacing: dart.notNull(t) < 0.5 ? a.wordSpacing : null, textBaseline: dart.notNull(t) < 0.5 ? a.textBaseline : null, height: dart.notNull(t) < 0.5 ? a.height : null, locale: dart.notNull(t) < 0.5 ? a.locale : null, foreground: dart.notNull(t) < 0.5 ? a.foreground : null, background: dart.notNull(t) < 0.5 ? a.background : null, shadows: dart.notNull(t) < 0.5 ? a.shadows : null, decoration: dart.notNull(t) < 0.5 ? a.decoration : null, decorationColor: ui.Color.lerp(a.decorationColor, null, t), decorationStyle: dart.notNull(t) < 0.5 ? a.decorationStyle : null, decorationThickness: dart.notNull(t) < 0.5 ? a.decorationThickness : null, debugLabel: lerpDebugLabel});
      }
      return new text_style.TextStyle.new({inherit: b.inherit, color: a.foreground == null && b.foreground == null ? ui.Color.lerp(a.color, b.color, t) : null, backgroundColor: a.background == null && b.background == null ? ui.Color.lerp(a.backgroundColor, b.backgroundColor, t) : null, fontFamily: dart.notNull(t) < 0.5 ? a.fontFamily : b.fontFamily, fontFamilyFallback: dart.notNull(t) < 0.5 ? a.fontFamilyFallback : b.fontFamilyFallback, fontSize: ui.lerpDouble((t16 = a.fontSize, t16 == null ? b.fontSize : t16), (t16$ = b.fontSize, t16$ == null ? a.fontSize : t16$), t), fontWeight: ui.FontWeight.lerp(a.fontWeight, b.fontWeight, t), fontStyle: dart.notNull(t) < 0.5 ? a.fontStyle : b.fontStyle, letterSpacing: ui.lerpDouble((t16$0 = a.letterSpacing, t16$0 == null ? b.letterSpacing : t16$0), (t16$1 = b.letterSpacing, t16$1 == null ? a.letterSpacing : t16$1), t), wordSpacing: ui.lerpDouble((t16$2 = a.wordSpacing, t16$2 == null ? b.wordSpacing : t16$2), (t16$3 = b.wordSpacing, t16$3 == null ? a.wordSpacing : t16$3), t), textBaseline: dart.notNull(t) < 0.5 ? a.textBaseline : b.textBaseline, height: ui.lerpDouble((t16$4 = a.height, t16$4 == null ? b.height : t16$4), (t16$5 = b.height, t16$5 == null ? a.height : t16$5), t), locale: dart.notNull(t) < 0.5 ? a.locale : b.locale, foreground: a.foreground != null || b.foreground != null ? dart.notNull(t) < 0.5 ? (t16$6 = a.foreground, t16$6 == null ? (t17 = new ui.Paint.new(), t17.color = a.color, t17) : t16$6) : (t16$7 = b.foreground, t16$7 == null ? (t17$ = new ui.Paint.new(), t17$.color = b.color, t17$) : t16$7) : null, background: a.background != null || b.background != null ? dart.notNull(t) < 0.5 ? (t16$8 = a.background, t16$8 == null ? (t17$0 = new ui.Paint.new(), t17$0.color = a.backgroundColor, t17$0) : t16$8) : (t16$9 = b.background, t16$9 == null ? (t17$1 = new ui.Paint.new(), t17$1.color = b.backgroundColor, t17$1) : t16$9) : null, shadows: dart.notNull(t) < 0.5 ? a.shadows : b.shadows, decoration: dart.notNull(t) < 0.5 ? a.decoration : b.decoration, decorationColor: ui.Color.lerp(a.decorationColor, b.decorationColor, t), decorationStyle: dart.notNull(t) < 0.5 ? a.decorationStyle : b.decorationStyle, decorationThickness: ui.lerpDouble((t16$10 = a.decorationThickness, t16$10 == null ? b.decorationThickness : t16$10), (t16$11 = b.decorationThickness, t16$11 == null ? a.decorationThickness : t16$11), t), debugLabel: lerpDebugLabel});
    }
    getTextStyle(opts) {
      let t17, t16;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      return new engine.EngineTextStyle.new({color: this.color, decoration: this.decoration, decorationColor: this.decorationColor, decorationStyle: this.decorationStyle, decorationThickness: this.decorationThickness, fontWeight: this.fontWeight, fontStyle: this.fontStyle, textBaseline: this.textBaseline, fontFamily: this.fontFamily, fontFamilyFallback: this.fontFamilyFallback, fontSize: this.fontSize == null ? null : dart.notNull(this.fontSize) * dart.notNull(textScaleFactor), letterSpacing: this.letterSpacing, wordSpacing: this.wordSpacing, height: this.height, locale: this.locale, foreground: this.foreground, background: (t16 = this.background, t16 == null ? this.backgroundColor != null ? (t17 = new ui.Paint.new(), t17.color = this.backgroundColor, t17) : null : t16), shadows: this.shadows});
    }
    getParagraphStyle(opts) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      if (!(textScaleFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 948, 12, "ert(textScaleFactor != ");
      if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 949, 12, "ert(maxLines == null || maxLines");
      return new engine.EngineParagraphStyle.new({textAlign: textAlign, textDirection: textDirection, fontWeight: (t16 = fontWeight, t16 == null ? this.fontWeight : t16), fontStyle: (t16$ = fontStyle, t16$ == null ? this.fontStyle : t16$), fontFamily: (t16$0 = fontFamily, t16$0 == null ? this.fontFamily : t16$0), fontSize: dart.notNull((t16$2 = (t16$1 = fontSize, t16$1 == null ? this.fontSize : t16$1), t16$2 == null ? 14 : t16$2)) * dart.notNull(textScaleFactor), height: (t16$3 = height, t16$3 == null ? this.height : t16$3), strutStyle: strutStyle == null ? null : new engine.EngineStrutStyle.new({fontFamily: strutStyle.fontFamily, fontFamilyFallback: strutStyle.fontFamilyFallback, fontSize: strutStyle.fontSize, height: strutStyle.height, leading: strutStyle.leading, fontWeight: strutStyle.fontWeight, fontStyle: strutStyle.fontStyle, forceStrutHeight: strutStyle.forceStrutHeight}), maxLines: maxLines, ellipsis: ellipsis, locale: locale});
    }
    compareTo(other) {
      if (this === other) return basic_types.RenderComparison.identical;
      if (!dart.equals(this.inherit, other.inherit) || this.fontFamily != other.fontFamily || this.fontSize != other.fontSize || !dart.equals(this.fontWeight, other.fontWeight) || !dart.equals(this.fontStyle, other.fontStyle) || this.letterSpacing != other.letterSpacing || this.wordSpacing != other.wordSpacing || !dart.equals(this.textBaseline, other.textBaseline) || this.height != other.height || !dart.equals(this.locale, other.locale) || !dart.equals(this.foreground, other.foreground) || !dart.equals(this.background, other.background) || !dart.test(collections.listEquals(ui.Shadow, this.shadows, other.shadows)) || !dart.test(collections.listEquals(core.String, this.fontFamilyFallback, other.fontFamilyFallback))) return basic_types.RenderComparison.layout;
      if (!dart.equals(this.color, other.color) || !dart.equals(this.backgroundColor, other.backgroundColor) || !dart.equals(this.decoration, other.decoration) || !dart.equals(this.decorationColor, other.decorationColor) || !dart.equals(this.decorationStyle, other.decorationStyle) || this.decorationThickness != other.decorationThickness) return basic_types.RenderComparison.paint;
      return basic_types.RenderComparison.identical;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = text_style.TextStyle._check(other);
      return dart.equals(this.inherit, typedOther.inherit) && dart.equals(this.color, typedOther.color) && dart.equals(this.backgroundColor, typedOther.backgroundColor) && this.fontFamily == typedOther.fontFamily && this.fontSize == typedOther.fontSize && dart.equals(this.fontWeight, typedOther.fontWeight) && dart.equals(this.fontStyle, typedOther.fontStyle) && this.letterSpacing == typedOther.letterSpacing && this.wordSpacing == typedOther.wordSpacing && dart.equals(this.textBaseline, typedOther.textBaseline) && this.height == typedOther.height && dart.equals(this.locale, typedOther.locale) && dart.equals(this.foreground, typedOther.foreground) && dart.equals(this.background, typedOther.background) && dart.equals(this.decoration, typedOther.decoration) && dart.equals(this.decorationColor, typedOther.decorationColor) && dart.equals(this.decorationStyle, typedOther.decorationStyle) && this.decorationThickness == typedOther.decorationThickness && dart.test(collections.listEquals(ui.Shadow, this.shadows, typedOther.shadows)) && dart.test(collections.listEquals(core.String, this.fontFamilyFallback, typedOther.fontFamilyFallback));
    }
    get hashCode() {
      return ui.hashValues(this.inherit, this.color, this.backgroundColor, this.fontFamily, this.fontFamilyFallback, this.fontSize, this.fontWeight, this.fontStyle, this.letterSpacing, this.wordSpacing, this.textBaseline, this.height, this.locale, this.foreground, this.background, this.decoration, this.decorationColor, this.decorationStyle, this.shadows);
    }
    toStringShort() {
      return dart.str(this[$runtimeType]);
    }
    debugFillProperties(properties, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : "";
      super.debugFillProperties(properties);
      if (this.debugLabel != null) properties.add(new diagnostics.MessageProperty.new(dart.str(prefix) + "debugLabel", this.debugLabel));
      let styles = JSArrayOfDiagnosticsNode().of([]);
      styles[$add](new (DiagnosticsPropertyOfColor()).new(dart.str(prefix) + "color", this.color, {defaultValue: null}));
      styles[$add](new (DiagnosticsPropertyOfColor()).new(dart.str(prefix) + "backgroundColor", this.backgroundColor, {defaultValue: null}));
      styles[$add](new diagnostics.StringProperty.new(dart.str(prefix) + "family", this.fontFamily, {defaultValue: null, quoted: false}));
      styles[$add](new (IterablePropertyOfString()).new(dart.str(prefix) + "familyFallback", this.fontFamilyFallback, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(dart.str(prefix) + "size", this.fontSize, {defaultValue: null}));
      let weightDescription = null;
      if (this.fontWeight != null) {
        weightDescription = dart.str(dart.notNull(this.fontWeight.index) + 1) + "00";
      }
      styles[$add](new (DiagnosticsPropertyOfFontWeight()).new(dart.str(prefix) + "weight", this.fontWeight, {description: weightDescription, defaultValue: null}));
      styles[$add](new (EnumPropertyOfFontStyle()).new(dart.str(prefix) + "style", this.fontStyle, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(dart.str(prefix) + "letterSpacing", this.letterSpacing, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(dart.str(prefix) + "wordSpacing", this.wordSpacing, {defaultValue: null}));
      styles[$add](new (EnumPropertyOfTextBaseline()).new(dart.str(prefix) + "baseline", this.textBaseline, {defaultValue: null}));
      styles[$add](new diagnostics.DoubleProperty.new(dart.str(prefix) + "height", this.height, {unit: "x", defaultValue: null}));
      styles[$add](new (DiagnosticsPropertyOfLocale()).new(dart.str(prefix) + "locale", this.locale, {defaultValue: null}));
      styles[$add](new (DiagnosticsPropertyOfPaint()).new(dart.str(prefix) + "foreground", this.foreground, {defaultValue: null}));
      styles[$add](new (DiagnosticsPropertyOfPaint()).new(dart.str(prefix) + "background", this.background, {defaultValue: null}));
      if (this.decoration != null || this.decorationColor != null || this.decorationStyle != null || this.decorationThickness != null) {
        let decorationDescription = JSArrayOfString().of([]);
        if (this.decorationStyle != null) decorationDescription[$add](diagnostics.describeEnum(this.decorationStyle));
        styles[$add](new (DiagnosticsPropertyOfColor()).new(dart.str(prefix) + "decorationColor", this.decorationColor, {defaultValue: null, level: diagnostics.DiagnosticLevel.fine}));
        if (this.decorationColor != null) decorationDescription[$add](dart.str(this.decorationColor));
        styles[$add](new (DiagnosticsPropertyOfTextDecoration()).new(dart.str(prefix) + "decoration", this.decoration, {defaultValue: null, level: diagnostics.DiagnosticLevel.hidden}));
        if (this.decoration != null) decorationDescription[$add](dart.str(this.decoration));
        if (!dart.test(decorationDescription[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 1118, 14, "ert(decorationDescription.isNotE");
        styles[$add](new diagnostics.MessageProperty.new(dart.str(prefix) + "decoration", decorationDescription[$join](" ")));
        styles[$add](new diagnostics.DoubleProperty.new(dart.str(prefix) + "decorationThickness", this.decorationThickness, {unit: "x", defaultValue: null}));
      }
      let styleSpecified = styles[$any](dart.fn(n => !dart.test(n.isFiltered(diagnostics.DiagnosticLevel.info)), DiagnosticsNodeTobool()));
      properties.add(new (DiagnosticsPropertyOfbool()).new(dart.str(prefix) + "inherit", this.inherit, {level: !dart.test(styleSpecified) && dart.test(this.inherit) ? diagnostics.DiagnosticLevel.fine : diagnostics.DiagnosticLevel.info}));
      styles[$forEach](dart.bind(properties, 'add'));
      if (!dart.test(styleSpecified)) properties.add(new diagnostics.FlagProperty.new("inherit", {value: this.inherit, ifTrue: dart.str(prefix) + "<all styles inherited>", ifFalse: dart.str(prefix) + "<no style specified>"}));
    }
  };
  (text_style.TextStyle.new = function(opts) {
    let inherit = opts && 'inherit' in opts ? opts.inherit : true;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let foreground = opts && 'foreground' in opts ? opts.foreground : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let shadows = opts && 'shadows' in opts ? opts.shadows : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let package$ = opts && 'package' in opts ? opts.package : null;
    this[inherit$] = inherit;
    this[color$] = color;
    this[backgroundColor$] = backgroundColor;
    this[fontSize$0] = fontSize;
    this[fontWeight$0] = fontWeight;
    this[fontStyle$0] = fontStyle;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[textBaseline$] = textBaseline;
    this[height$0] = height;
    this[locale$] = locale;
    this[foreground$] = foreground;
    this[background$] = background;
    this[shadows$] = shadows;
    this[decoration$] = decoration;
    this[decorationColor$] = decorationColor;
    this[decorationStyle$] = decorationStyle;
    this[decorationThickness$] = decorationThickness;
    this[debugLabel$0] = debugLabel;
    this[fontFamily$1] = package$ == null ? fontFamily : "packages/" + dart.str(package$) + "/" + dart.str(fontFamily);
    this[_fontFamilyFallback$] = fontFamilyFallback;
    this[_package$] = package$;
    if (!(inherit != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 331, 15, "inherit != null");
    if (!(color == null || foreground == null)) dart.assertFailed(text_style._kColorForegroundWarning, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 332, 15, "color == null || foreground == null");
    if (!(backgroundColor == null || background == null)) dart.assertFailed(text_style._kColorBackgroundWarning, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 333, 15, "backgroundColor == null || background == null");
    text_style.TextStyle.__proto__.new.call(this);
    ;
  }).prototype = text_style.TextStyle.prototype;
  dart.addTypeTests(text_style.TextStyle);
  const inherit$ = Symbol("TextStyle.inherit");
  const color$ = Symbol("TextStyle.color");
  const backgroundColor$ = Symbol("TextStyle.backgroundColor");
  const fontFamily$1 = Symbol("TextStyle.fontFamily");
  const fontSize$0 = Symbol("TextStyle.fontSize");
  const fontWeight$0 = Symbol("TextStyle.fontWeight");
  const fontStyle$0 = Symbol("TextStyle.fontStyle");
  const letterSpacing$ = Symbol("TextStyle.letterSpacing");
  const wordSpacing$ = Symbol("TextStyle.wordSpacing");
  const textBaseline$ = Symbol("TextStyle.textBaseline");
  const height$0 = Symbol("TextStyle.height");
  const locale$ = Symbol("TextStyle.locale");
  const foreground$ = Symbol("TextStyle.foreground");
  const background$ = Symbol("TextStyle.background");
  const decoration$ = Symbol("TextStyle.decoration");
  const decorationColor$ = Symbol("TextStyle.decorationColor");
  const decorationStyle$ = Symbol("TextStyle.decorationStyle");
  const decorationThickness$ = Symbol("TextStyle.decorationThickness");
  const debugLabel$0 = Symbol("TextStyle.debugLabel");
  const shadows$ = Symbol("TextStyle.shadows");
  dart.setMethodSignature(text_style.TextStyle, () => ({
    __proto__: dart.getMethods(text_style.TextStyle.__proto__),
    copyWith: dart.fnType(text_style.TextStyle, [], {background: ui.Paint, backgroundColor: ui.Color, color: ui.Color, debugLabel: core.String, decoration: ui.TextDecoration, decorationColor: ui.Color, decorationStyle: ui.TextDecorationStyle, decorationThickness: core.double, fontFamily: core.String, fontFamilyFallback: core.List$(core.String), fontSize: core.double, fontStyle: ui.FontStyle, fontWeight: ui.FontWeight, foreground: ui.Paint, height: core.double, inherit: core.bool, letterSpacing: core.double, locale: ui.Locale, shadows: core.List$(ui.Shadow), textBaseline: ui.TextBaseline, wordSpacing: core.double}),
    apply: dart.fnType(text_style.TextStyle, [], {backgroundColor: ui.Color, color: ui.Color, decoration: ui.TextDecoration, decorationColor: ui.Color, decorationStyle: ui.TextDecorationStyle, decorationThicknessDelta: core.double, decorationThicknessFactor: core.double, fontFamily: core.String, fontFamilyFallback: core.List$(core.String), fontSizeDelta: core.double, fontSizeFactor: core.double, fontWeightDelta: core.int, heightDelta: core.double, heightFactor: core.double, letterSpacingDelta: core.double, letterSpacingFactor: core.double, wordSpacingDelta: core.double, wordSpacingFactor: core.double}),
    merge: dart.fnType(text_style.TextStyle, [text_style.TextStyle]),
    getTextStyle: dart.fnType(ui.TextStyle, [], {textScaleFactor: core.double}),
    getParagraphStyle: dart.fnType(ui.ParagraphStyle, [], {ellipsis: core.String, fontFamily: core.String, fontSize: core.double, fontStyle: ui.FontStyle, fontWeight: ui.FontWeight, height: core.double, locale: ui.Locale, maxLines: core.int, strutStyle: strut_style.StrutStyle, textAlign: ui.TextAlign, textDirection: ui.TextDirection, textScaleFactor: core.double}),
    compareTo: dart.fnType(basic_types.RenderComparison, [text_style.TextStyle]),
    debugFillProperties: dart.fnType(dart.void, [diagnostics.DiagnosticPropertiesBuilder], {prefix: core.String})
  }));
  dart.setGetterSignature(text_style.TextStyle, () => ({
    __proto__: dart.getGetters(text_style.TextStyle.__proto__),
    fontFamilyFallback: core.List$(core.String)
  }));
  dart.setLibraryUri(text_style.TextStyle, "package:flutter_web/src/painting/text_style.dart");
  dart.setFieldSignature(text_style.TextStyle, () => ({
    __proto__: dart.getFields(text_style.TextStyle.__proto__),
    inherit: dart.finalFieldType(core.bool),
    color: dart.finalFieldType(ui.Color),
    backgroundColor: dart.finalFieldType(ui.Color),
    fontFamily: dart.finalFieldType(core.String),
    [_fontFamilyFallback$]: dart.finalFieldType(core.List$(core.String)),
    [_package$]: dart.finalFieldType(core.String),
    fontSize: dart.finalFieldType(core.double),
    fontWeight: dart.finalFieldType(ui.FontWeight),
    fontStyle: dart.finalFieldType(ui.FontStyle),
    letterSpacing: dart.finalFieldType(core.double),
    wordSpacing: dart.finalFieldType(core.double),
    textBaseline: dart.finalFieldType(ui.TextBaseline),
    height: dart.finalFieldType(core.double),
    locale: dart.finalFieldType(ui.Locale),
    foreground: dart.finalFieldType(ui.Paint),
    background: dart.finalFieldType(ui.Paint),
    decoration: dart.finalFieldType(ui.TextDecoration),
    decorationColor: dart.finalFieldType(ui.Color),
    decorationStyle: dart.finalFieldType(ui.TextDecorationStyle),
    decorationThickness: dart.finalFieldType(core.double),
    debugLabel: dart.finalFieldType(core.String),
    shadows: dart.finalFieldType(core.List$(ui.Shadow))
  }));
  dart.defineExtensionMethods(text_style.TextStyle, ['_equals']);
  dart.defineExtensionAccessors(text_style.TextStyle, ['hashCode']);
  dart.defineLazy(text_style.TextStyle, {
    /*text_style.TextStyle._defaultFontSize*/get _defaultFontSize() {
      return 14;
    }
  });
  dart.defineLazy(text_style, {
    /*text_style._kDefaultDebugLabel*/get _kDefaultDebugLabel() {
      return "unknown";
    },
    /*text_style._kColorForegroundWarning*/get _kColorForegroundWarning() {
      return "Cannot provide both a color and a foreground\nThe color argument is just a shorthand for \"foreground: new Paint()..color = color\".";
    },
    /*text_style._kColorBackgroundWarning*/get _kColorBackgroundWarning() {
      return "Cannot provide both a backgroundColor and a background\nThe backgroundColor argument is just a shorthand for \"background: new Paint()..color = color\".";
    }
  });
  const _value$0 = dart.privateName(priority, "_value");
  let C678;
  let C679;
  let C680;
  priority.Priority = class Priority extends core.Object {
    get value() {
      return this[_value$0];
    }
    ['+'](offset) {
      if (offset[$abs]() > 10000) {
        offset = 10000 * offset[$sign];
      }
      return new priority.Priority.__(dart.notNull(this[_value$0]) + dart.notNull(offset));
    }
    ['-'](offset) {
      return this['+'](-dart.notNull(offset));
    }
  };
  (priority.Priority.__ = function(_value) {
    this[_value$0] = _value;
    ;
  }).prototype = priority.Priority.prototype;
  dart.addTypeTests(priority.Priority);
  dart.setMethodSignature(priority.Priority, () => ({
    __proto__: dart.getMethods(priority.Priority.__proto__),
    '+': dart.fnType(priority.Priority, [core.int]),
    '-': dart.fnType(priority.Priority, [core.int])
  }));
  dart.setGetterSignature(priority.Priority, () => ({
    __proto__: dart.getGetters(priority.Priority.__proto__),
    value: core.int
  }));
  dart.setLibraryUri(priority.Priority, "package:flutter_web/src/scheduler/priority.dart");
  dart.setFieldSignature(priority.Priority, () => ({
    __proto__: dart.getFields(priority.Priority.__proto__),
    [_value$0]: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(priority.Priority, {
    /*priority.Priority.idle*/get idle() {
      return C678 || CT.C678;
    },
    /*priority.Priority.animation*/get animation() {
      return C679 || CT.C679;
    },
    /*priority.Priority.touch*/get touch() {
      return C680 || CT.C680;
    },
    /*priority.Priority.kMaxOffset*/get kMaxOffset() {
      return 10000;
    }
  });
  const _opacity = dart.privateName(icon_theme_data, "_opacity");
  icon_theme_data.IconThemeData = class IconThemeData extends diagnostics.Diagnosticable {
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    copyWith(opts) {
      let t16, t16$, t16$0;
      let color = opts && 'color' in opts ? opts.color : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let size = opts && 'size' in opts ? opts.size : null;
      return new icon_theme_data.IconThemeData.new({color: (t16 = color, t16 == null ? this.color : t16), opacity: (t16$ = opacity, t16$ == null ? this.opacity : t16$), size: (t16$0 = size, t16$0 == null ? this.size : t16$0)});
    }
    merge(other) {
      if (other == null) return this;
      return this.copyWith({color: other.color, opacity: other.opacity, size: other.size});
    }
    get isConcrete() {
      return this.color != null && this.opacity != null && this.size != null;
    }
    get opacity() {
      let t16;
      t16 = this[_opacity];
      return t16 == null ? null : t16[$clamp](0.0, 1.0);
    }
    static lerp(a, b, t) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3;
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/icon_theme_data.dart", 73, 12, "t != null");
      return new icon_theme_data.IconThemeData.new({color: ui.Color.lerp((t16 = a, t16 == null ? null : t16.color), (t16$ = b, t16$ == null ? null : t16$.color), t), opacity: ui.lerpDouble((t16$0 = a, t16$0 == null ? null : t16$0.opacity), (t16$1 = b, t16$1 == null ? null : t16$1.opacity), t), size: ui.lerpDouble((t16$2 = a, t16$2 == null ? null : t16$2.size), (t16$3 = b, t16$3 == null ? null : t16$3.size), t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = icon_theme_data.IconThemeData._check(other);
      return dart.equals(this.color, typedOther.color) && this.opacity == typedOther.opacity && this.size == typedOther.size;
    }
    get hashCode() {
      return ui.hashValues(this.color, this.opacity, this.size);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfColor()).new("color", this.color, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("opacity", this.opacity, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("size", this.size, {defaultValue: null}));
    }
  };
  (icon_theme_data.IconThemeData.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let size = opts && 'size' in opts ? opts.size : null;
    this[color$0] = color;
    this[size$0] = size;
    this[_opacity] = opacity;
    icon_theme_data.IconThemeData.__proto__.new.call(this);
    ;
  }).prototype = icon_theme_data.IconThemeData.prototype;
  (icon_theme_data.IconThemeData.fallback = function() {
    this[color$0] = C52 || CT.C52;
    this[_opacity] = 1.0;
    this[size$0] = 24.0;
    icon_theme_data.IconThemeData.__proto__.new.call(this);
    ;
  }).prototype = icon_theme_data.IconThemeData.prototype;
  dart.addTypeTests(icon_theme_data.IconThemeData);
  const color$0 = Symbol("IconThemeData.color");
  const size$0 = Symbol("IconThemeData.size");
  dart.setMethodSignature(icon_theme_data.IconThemeData, () => ({
    __proto__: dart.getMethods(icon_theme_data.IconThemeData.__proto__),
    copyWith: dart.fnType(icon_theme_data.IconThemeData, [], {color: ui.Color, opacity: core.double, size: core.double}),
    merge: dart.fnType(icon_theme_data.IconThemeData, [icon_theme_data.IconThemeData])
  }));
  dart.setGetterSignature(icon_theme_data.IconThemeData, () => ({
    __proto__: dart.getGetters(icon_theme_data.IconThemeData.__proto__),
    isConcrete: core.bool,
    opacity: core.double
  }));
  dart.setLibraryUri(icon_theme_data.IconThemeData, "package:flutter_web/src/widgets/icon_theme_data.dart");
  dart.setFieldSignature(icon_theme_data.IconThemeData, () => ({
    __proto__: dart.getFields(icon_theme_data.IconThemeData.__proto__),
    color: dart.finalFieldType(ui.Color),
    [_opacity]: dart.finalFieldType(core.double),
    size: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(icon_theme_data.IconThemeData, ['_equals']);
  dart.defineExtensionAccessors(icon_theme_data.IconThemeData, ['hashCode']);
  debug$1.debugAssertAllPaintingVarsUnset = function debugAssertAllPaintingVarsUnset(reason, opts) {
    let debugDisableShadowsOverride = opts && 'debugDisableShadowsOverride' in opts ? opts.debugDisableShadowsOverride : false;
    if (!dart.test(dart.fn(() => {
      if (!dart.equals(debug$1.debugDisableShadows, debugDisableShadowsOverride)) {
        dart.throw(assertions.FlutterError.new(reason));
      }
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/debug.dart", 28, 10, "() {\n    if (debugDisableShadows != debugDisableShadowsOverride) {\n      throw new FlutterError(reason);\n    }\n    return true;\n  }()");
    return true;
  };
  dart.defineLazy(debug$1, {
    /*debug$1.debugDisableShadows*/get debugDisableShadows() {
      return false;
    },
    set debugDisableShadows(_) {}
  });
  const _timeout = dart.privateName(multitap, "_timeout");
  const _timer$0 = dart.privateName(multitap, "_timer");
  const _onTimeout = dart.privateName(multitap, "_onTimeout");
  multitap._CountdownZoned = class _CountdownZoned extends core.Object {
    get timeout() {
      return this[_timeout];
    }
    [_onTimeout]() {
      this[_timeout] = true;
    }
  };
  (multitap._CountdownZoned.new = function(opts) {
    let duration = opts && 'duration' in opts ? opts.duration : null;
    this[_timeout] = false;
    this[_timer$0] = null;
    if (!(duration != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 48, 17, "duration != null");
    this[_timer$0] = async.Timer.new(duration, dart.bind(this, _onTimeout));
  }).prototype = multitap._CountdownZoned.prototype;
  dart.addTypeTests(multitap._CountdownZoned);
  dart.setMethodSignature(multitap._CountdownZoned, () => ({
    __proto__: dart.getMethods(multitap._CountdownZoned.__proto__),
    [_onTimeout]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(multitap._CountdownZoned, () => ({
    __proto__: dart.getGetters(multitap._CountdownZoned.__proto__),
    timeout: core.bool
  }));
  dart.setLibraryUri(multitap._CountdownZoned, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(multitap._CountdownZoned, () => ({
    __proto__: dart.getFields(multitap._CountdownZoned.__proto__),
    [_timeout]: dart.fieldType(core.bool),
    [_timer$0]: dart.fieldType(async.Timer)
  }));
  const _isTrackingPointer = dart.privateName(multitap, "_isTrackingPointer");
  const _initialGlobalPosition = dart.privateName(multitap, "_initialGlobalPosition");
  const _doubleTapMinTimeCountdown = dart.privateName(multitap, "_doubleTapMinTimeCountdown");
  multitap._TapTracker = class _TapTracker extends core.Object {
    startTrackingPointer(route, transform) {
      if (!dart.test(this[_isTrackingPointer])) {
        this[_isTrackingPointer] = true;
        binding$.GestureBinding.instance.pointerRouter.addRoute(this.pointer, route, transform);
      }
    }
    stopTrackingPointer(route) {
      if (dart.test(this[_isTrackingPointer])) {
        this[_isTrackingPointer] = false;
        binding$.GestureBinding.instance.pointerRouter.removeRoute(this.pointer, route);
      }
    }
    isWithinGlobalTolerance(event, tolerance) {
      let offset = event.position['-'](this[_initialGlobalPosition]);
      return dart.notNull(offset.distance) <= dart.notNull(tolerance);
    }
    hasElapsedMinTime() {
      return this[_doubleTapMinTimeCountdown].timeout;
    }
    hasSameButton(event) {
      return event.buttons == this.initialButtons;
    }
  };
  (multitap._TapTracker.new = function(opts) {
    let event = opts && 'event' in opts ? opts.event : null;
    let entry = opts && 'entry' in opts ? opts.entry : null;
    let doubleTapMinTime = opts && 'doubleTapMinTime' in opts ? opts.doubleTapMinTime : null;
    this[_isTrackingPointer] = false;
    this.entry = entry;
    if (!(doubleTapMinTime != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 69, 15, "doubleTapMinTime != null");
    if (!(event != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 70, 15, "event != null");
    if (!(event.buttons != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 71, 15, "event.buttons != null");
    this.pointer = event.pointer;
    this[_initialGlobalPosition] = event.position;
    this.initialButtons = event.buttons;
    this[_doubleTapMinTimeCountdown] = new multitap._CountdownZoned.new({duration: doubleTapMinTime});
    ;
  }).prototype = multitap._TapTracker.prototype;
  dart.addTypeTests(multitap._TapTracker);
  dart.setMethodSignature(multitap._TapTracker, () => ({
    __proto__: dart.getMethods(multitap._TapTracker.__proto__),
    startTrackingPointer: dart.fnType(dart.void, [dart.fnType(dart.void, [events.PointerEvent]), vector_math_64.Matrix4]),
    stopTrackingPointer: dart.fnType(dart.void, [dart.fnType(dart.void, [events.PointerEvent])]),
    isWithinGlobalTolerance: dart.fnType(core.bool, [events.PointerEvent, core.double]),
    hasElapsedMinTime: dart.fnType(core.bool, []),
    hasSameButton: dart.fnType(core.bool, [events.PointerDownEvent])
  }));
  dart.setLibraryUri(multitap._TapTracker, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(multitap._TapTracker, () => ({
    __proto__: dart.getFields(multitap._TapTracker.__proto__),
    pointer: dart.finalFieldType(core.int),
    entry: dart.finalFieldType(arena.GestureArenaEntry),
    [_initialGlobalPosition]: dart.finalFieldType(ui.Offset),
    initialButtons: dart.finalFieldType(core.int),
    [_doubleTapMinTimeCountdown]: dart.finalFieldType(multitap._CountdownZoned),
    [_isTrackingPointer]: dart.fieldType(core.bool)
  }));
  const _doubleTapTimer = dart.privateName(multitap, "_doubleTapTimer");
  const _firstTap = dart.privateName(multitap, "_firstTap");
  const _trackers = dart.privateName(multitap, "_trackers");
  const _reset$0 = dart.privateName(multitap, "_reset");
  const _trackFirstTap = dart.privateName(multitap, "_trackFirstTap");
  const _stopDoubleTapTimer = dart.privateName(multitap, "_stopDoubleTapTimer");
  const _handleEvent$ = dart.privateName(multitap, "_handleEvent");
  const _registerFirstTap = dart.privateName(multitap, "_registerFirstTap");
  const _registerSecondTap = dart.privateName(multitap, "_registerSecondTap");
  const _reject = dart.privateName(multitap, "_reject");
  const _freezeTracker = dart.privateName(multitap, "_freezeTracker");
  const _clearTrackers = dart.privateName(multitap, "_clearTrackers");
  const _startDoubleTapTimer = dart.privateName(multitap, "_startDoubleTapTimer");
  const _checkUp$ = dart.privateName(multitap, "_checkUp");
  multitap.DoubleTapGestureRecognizer = class DoubleTapGestureRecognizer extends recognizer.GestureRecognizer {
    get onDoubleTap() {
      return this[onDoubleTap];
    }
    set onDoubleTap(value) {
      this[onDoubleTap] = value;
    }
    isPointerAllowed(event) {
      if (this[_firstTap] == null) {
        switch (event.buttons) {
          case 1:
          {
            if (this.onDoubleTap == null) return false;
            break;
          }
          default:
          {
            return false;
          }
        }
      }
      return super.isPointerAllowed(events.PointerDownEvent._check(event));
    }
    addAllowedPointer(event) {
      if (this[_firstTap] != null) {
        if (!dart.test(this[_firstTap].isWithinGlobalTolerance(event, 100))) {
          return;
        } else if (!dart.test(this[_firstTap].hasElapsedMinTime()) || !dart.test(this[_firstTap].hasSameButton(events.PointerDownEvent._check(event)))) {
          this[_reset$0]();
          return this[_trackFirstTap](event);
        }
      }
      this[_trackFirstTap](event);
    }
    [_trackFirstTap](event) {
      this[_stopDoubleTapTimer]();
      let tracker = new multitap._TapTracker.new({event: events.PointerDownEvent._check(event), entry: binding$.GestureBinding.instance.gestureArena.add(event.pointer, this), doubleTapMinTime: constants.kDoubleTapMinTime});
      this[_trackers][$_set](event.pointer, tracker);
      tracker.startTrackingPointer(dart.bind(this, _handleEvent$), event.transform);
    }
    [_handleEvent$](event) {
      let tracker = this[_trackers][$_get](event.pointer);
      if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 207, 12, "tracker != null");
      if (events.PointerUpEvent.is(event)) {
        if (this[_firstTap] == null)
          this[_registerFirstTap](tracker);
        else
          this[_registerSecondTap](tracker);
      } else if (events.PointerMoveEvent.is(event)) {
        if (!dart.test(tracker.isWithinGlobalTolerance(event, 18))) this[_reject](tracker);
      } else if (events.PointerCancelEvent.is(event)) {
        this[_reject](tracker);
      }
    }
    acceptGesture(pointer) {
    }
    rejectGesture(pointer) {
      let tracker = this[_trackers][$_get](pointer);
      if (tracker == null && this[_firstTap] != null && this[_firstTap].pointer == pointer) tracker = this[_firstTap];
      if (tracker != null) this[_reject](tracker);
    }
    [_reject](tracker) {
      this[_trackers][$remove](tracker.pointer);
      tracker.entry.resolve(arena.GestureDisposition.rejected);
      this[_freezeTracker](tracker);
      if (this[_firstTap] != null && (dart.test(this[_trackers][$isEmpty]) || dart.equals(tracker, this[_firstTap]))) this[_reset$0]();
    }
    dispose() {
      this[_reset$0]();
      super.dispose();
    }
    [_reset$0]() {
      this[_stopDoubleTapTimer]();
      if (this[_firstTap] != null) {
        let tracker = this[_firstTap];
        this[_firstTap] = null;
        this[_reject](tracker);
        binding$.GestureBinding.instance.gestureArena.release(tracker.pointer);
      }
      this[_clearTrackers]();
    }
    [_registerFirstTap](tracker) {
      this[_startDoubleTapTimer]();
      binding$.GestureBinding.instance.gestureArena.hold(tracker.pointer);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_clearTrackers]();
      this[_firstTap] = tracker;
    }
    [_registerSecondTap](tracker) {
      this[_firstTap].entry.resolve(arena.GestureDisposition.accepted);
      tracker.entry.resolve(arena.GestureDisposition.accepted);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_checkUp$](tracker.initialButtons);
      this[_reset$0]();
    }
    [_clearTrackers]() {
      this[_trackers][$values][$toList]()[$forEach](dart.bind(this, _reject));
      if (!dart.test(this[_trackers][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 290, 12, "_trackers.isEmpty");
    }
    [_freezeTracker](tracker) {
      tracker.stopTrackingPointer(dart.bind(this, _handleEvent$));
    }
    [_startDoubleTapTimer]() {
      this[_doubleTapTimer] == null ? this[_doubleTapTimer] = async.Timer.new(constants.kDoubleTapTimeout, dart.bind(this, _reset$0)) : null;
    }
    [_stopDoubleTapTimer]() {
      if (this[_doubleTapTimer] != null) {
        this[_doubleTapTimer].cancel();
        this[_doubleTapTimer] = null;
      }
    }
    [_checkUp$](buttons) {
      if (!(buttons === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 309, 12, "buttons == kPrimaryButton");
      if (this.onDoubleTap != null) this.invokeCallback(dart.void, "onDoubleTap", this.onDoubleTap);
    }
    get debugDescription() {
      return "double tap";
    }
  };
  (multitap.DoubleTapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onDoubleTap] = null;
    this[_doubleTapTimer] = null;
    this[_firstTap] = null;
    this[_trackers] = new (IdentityMapOfint$_TapTracker()).new();
    multitap.DoubleTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multitap.DoubleTapGestureRecognizer.prototype;
  dart.addTypeTests(multitap.DoubleTapGestureRecognizer);
  const onDoubleTap = Symbol("DoubleTapGestureRecognizer.onDoubleTap");
  dart.setMethodSignature(multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(multitap.DoubleTapGestureRecognizer.__proto__),
    isPointerAllowed: dart.fnType(core.bool, [events.PointerEvent]),
    addAllowedPointer: dart.fnType(dart.void, [events.PointerEvent]),
    [_trackFirstTap]: dart.fnType(dart.void, [events.PointerEvent]),
    [_handleEvent$]: dart.fnType(dart.void, [events.PointerEvent]),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    [_reject]: dart.fnType(dart.void, [multitap._TapTracker]),
    [_reset$0]: dart.fnType(dart.void, []),
    [_registerFirstTap]: dart.fnType(dart.void, [multitap._TapTracker]),
    [_registerSecondTap]: dart.fnType(dart.void, [multitap._TapTracker]),
    [_clearTrackers]: dart.fnType(dart.void, []),
    [_freezeTracker]: dart.fnType(dart.void, [multitap._TapTracker]),
    [_startDoubleTapTimer]: dart.fnType(dart.void, []),
    [_stopDoubleTapTimer]: dart.fnType(dart.void, []),
    [_checkUp$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getGetters(multitap.DoubleTapGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(multitap.DoubleTapGestureRecognizer, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getFields(multitap.DoubleTapGestureRecognizer.__proto__),
    onDoubleTap: dart.fieldType(dart.fnType(dart.void, [])),
    [_doubleTapTimer]: dart.fieldType(async.Timer),
    [_firstTap]: dart.fieldType(multitap._TapTracker),
    [_trackers]: dart.finalFieldType(core.Map$(core.int, multitap._TapTracker))
  }));
  const _wonArena = dart.privateName(multitap, "_wonArena");
  const _finalPosition$ = dart.privateName(multitap, "_finalPosition");
  const _lastPosition$ = dart.privateName(multitap, "_lastPosition");
  const _dispatchLongTap = dart.privateName(multitap, "_dispatchLongTap");
  const _check = dart.privateName(multitap, "_check");
  const _dispatchCancel = dart.privateName(multitap, "_dispatchCancel");
  const _dispatchTap = dart.privateName(multitap, "_dispatchTap");
  multitap._TapGesture = class _TapGesture extends multitap._TapTracker {
    handleEvent(event) {
      if (!(event.pointer == this.pointer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 351, 12, "event.pointer == pointer");
      if (events.PointerMoveEvent.is(event)) {
        if (!dart.test(this.isWithinGlobalTolerance(event, 18)))
          this.cancel();
        else
          this[_lastPosition$] = recognizer.OffsetPair.fromEventPosition(event);
      } else if (events.PointerCancelEvent.is(event)) {
        this.cancel();
      } else if (events.PointerUpEvent.is(event)) {
        this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
        this[_finalPosition$] = recognizer.OffsetPair.fromEventPosition(event);
        this[_check]();
      }
    }
    stopTrackingPointer(route) {
      let t16;
      t16 = this[_timer$0];
      t16 == null ? null : t16.cancel();
      this[_timer$0] = null;
      super.stopTrackingPointer(route);
    }
    accept() {
      this[_wonArena] = true;
      this[_check]();
    }
    reject() {
      this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
      this.gestureRecognizer[_dispatchCancel](this.pointer);
    }
    cancel() {
      if (dart.test(this[_wonArena]))
        this.reject();
      else
        this.entry.resolve(arena.GestureDisposition.rejected);
    }
    [_check]() {
      if (dart.test(this[_wonArena]) && this[_finalPosition$] != null) this.gestureRecognizer[_dispatchTap](this.pointer, this[_finalPosition$]);
    }
  };
  (multitap._TapGesture.new = function(opts) {
    let gestureRecognizer = opts && 'gestureRecognizer' in opts ? opts.gestureRecognizer : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : null;
    this[_wonArena] = false;
    this[_timer$0] = null;
    this[_finalPosition$] = null;
    this.gestureRecognizer = gestureRecognizer;
    this[_lastPosition$] = recognizer.OffsetPair.fromEventPosition(event);
    multitap._TapGesture.__proto__.new.call(this, {event: events.PointerDownEvent._check(event), entry: binding$.GestureBinding.instance.gestureArena.add(event.pointer, gestureRecognizer), doubleTapMinTime: constants.kDoubleTapMinTime});
    this.startTrackingPointer(dart.bind(this, 'handleEvent'), event.transform);
    if (dart.test(longTapDelay['>'](core.Duration.zero))) {
      this[_timer$0] = async.Timer.new(longTapDelay, dart.fn(() => {
        this[_timer$0] = null;
        this.gestureRecognizer[_dispatchLongTap](event.pointer, this[_lastPosition$]);
      }, VoidToNull()));
    }
  }).prototype = multitap._TapGesture.prototype;
  dart.addTypeTests(multitap._TapGesture);
  dart.setMethodSignature(multitap._TapGesture, () => ({
    __proto__: dart.getMethods(multitap._TapGesture.__proto__),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent]),
    accept: dart.fnType(dart.void, []),
    reject: dart.fnType(dart.void, []),
    cancel: dart.fnType(dart.void, []),
    [_check]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(multitap._TapGesture, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(multitap._TapGesture, () => ({
    __proto__: dart.getFields(multitap._TapGesture.__proto__),
    gestureRecognizer: dart.finalFieldType(multitap.MultiTapGestureRecognizer),
    [_wonArena]: dart.fieldType(core.bool),
    [_timer$0]: dart.fieldType(async.Timer),
    [_lastPosition$]: dart.fieldType(recognizer.OffsetPair),
    [_finalPosition$]: dart.fieldType(recognizer.OffsetPair)
  }));
  const _gestureMap = dart.privateName(multitap, "_gestureMap");
  multitap.MultiTapGestureRecognizer = class MultiTapGestureRecognizer extends recognizer.GestureRecognizer {
    get onTapDown() {
      return this[onTapDown$];
    }
    set onTapDown(value) {
      this[onTapDown$] = value;
    }
    get onTapUp() {
      return this[onTapUp$];
    }
    set onTapUp(value) {
      this[onTapUp$] = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      this[onTap$] = value;
    }
    get onTapCancel() {
      return this[onTapCancel$];
    }
    set onTapCancel(value) {
      this[onTapCancel$] = value;
    }
    get longTapDelay() {
      return this[longTapDelay$];
    }
    set longTapDelay(value) {
      this[longTapDelay$] = value;
    }
    get onLongTapDown() {
      return this[onLongTapDown];
    }
    set onLongTapDown(value) {
      this[onLongTapDown] = value;
    }
    addAllowedPointer(event) {
      if (!!dart.test(this[_gestureMap][$containsKey](event.pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 444, 12, "!_gestureMap.containsKey(event.pointer)");
      this[_gestureMap][$_set](event.pointer, new multitap._TapGesture.new({gestureRecognizer: this, event: event, longTapDelay: this.longTapDelay}));
      if (this.onTapDown != null) this.invokeCallback(dart.void, "onTapDown", dart.fn(() => {
        this.onTapDown(event.pointer, new tap.TapDownDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: event.kind}));
      }, VoidToNull()));
    }
    acceptGesture(pointer) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 462, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$_get](pointer).accept();
    }
    rejectGesture(pointer) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 468, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$_get](pointer).reject();
      if (!!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 470, 12, "!_gestureMap.containsKey(pointer)");
    }
    [_dispatchCancel](pointer) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 474, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapCancel != null) this.invokeCallback(dart.void, "onTapCancel", dart.fn(() => this.onTapCancel(pointer), VoidTovoid()));
    }
    [_dispatchTap](pointer, position) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 481, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapUp != null) this.invokeCallback(dart.void, "onTapUp", dart.fn(() => {
        this.onTapUp(pointer, new tap.TapUpDetails.new({localPosition: position.local, globalPosition: position.global}));
      }, VoidToNull()));
      if (this.onTap != null) this.invokeCallback(dart.void, "onTap", dart.fn(() => this.onTap(pointer), VoidTovoid()));
    }
    [_dispatchLongTap](pointer, lastPosition) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 495, 12, "_gestureMap.containsKey(pointer)");
      if (this.onLongTapDown != null) this.invokeCallback(dart.void, "onLongTapDown", dart.fn(() => {
        this.onLongTapDown(pointer, new tap.TapDownDetails.new({globalPosition: lastPosition.global, localPosition: lastPosition.local, kind: this.getKindForPointer(pointer)}));
      }, VoidToNull()));
    }
    dispose() {
      let localGestures = ListOf_TapGesture().from(this[_gestureMap][$values]);
      for (let gesture of localGestures)
        gesture.cancel();
      if (!dart.test(this[_gestureMap][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 515, 12, "_gestureMap.isEmpty");
      super.dispose();
    }
    get debugDescription() {
      return "multitap";
    }
  };
  (multitap.MultiTapGestureRecognizer.new = function(opts) {
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : C131 || CT.C131;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onTapDown$] = null;
    this[onTapUp$] = null;
    this[onTap$] = null;
    this[onTapCancel$] = null;
    this[onLongTapDown] = null;
    this[_gestureMap] = new (IdentityMapOfint$_TapGesture()).new();
    this[longTapDelay$] = longTapDelay;
    multitap.MultiTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = multitap.MultiTapGestureRecognizer.prototype;
  dart.addTypeTests(multitap.MultiTapGestureRecognizer);
  const onTapDown$ = Symbol("MultiTapGestureRecognizer.onTapDown");
  const onTapUp$ = Symbol("MultiTapGestureRecognizer.onTapUp");
  const onTap$ = Symbol("MultiTapGestureRecognizer.onTap");
  const onTapCancel$ = Symbol("MultiTapGestureRecognizer.onTapCancel");
  const longTapDelay$ = Symbol("MultiTapGestureRecognizer.longTapDelay");
  const onLongTapDown = Symbol("MultiTapGestureRecognizer.onLongTapDown");
  dart.setMethodSignature(multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(multitap.MultiTapGestureRecognizer.__proto__),
    addAllowedPointer: dart.fnType(dart.void, [events.PointerEvent]),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    [_dispatchCancel]: dart.fnType(dart.void, [core.int]),
    [_dispatchTap]: dart.fnType(dart.void, [core.int, recognizer.OffsetPair]),
    [_dispatchLongTap]: dart.fnType(dart.void, [core.int, recognizer.OffsetPair])
  }));
  dart.setGetterSignature(multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getGetters(multitap.MultiTapGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(multitap.MultiTapGestureRecognizer, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getFields(multitap.MultiTapGestureRecognizer.__proto__),
    onTapDown: dart.fieldType(dart.fnType(dart.void, [core.int, tap.TapDownDetails])),
    onTapUp: dart.fieldType(dart.fnType(dart.void, [core.int, tap.TapUpDetails])),
    onTap: dart.fieldType(dart.fnType(dart.void, [core.int])),
    onTapCancel: dart.fieldType(dart.fnType(dart.void, [core.int])),
    longTapDelay: dart.fieldType(core.Duration),
    onLongTapDown: dart.fieldType(dart.fnType(dart.void, [core.int, tap.TapDownDetails])),
    [_gestureMap]: dart.finalFieldType(core.Map$(core.int, multitap._TapGesture))
  }));
  const _accessibilityFeatures = dart.privateName(binding$0, "_accessibilityFeatures");
  binding$0.SemanticsBinding = class SemanticsBinding extends binding.BindingBase {
    static get instance() {
      return binding$0.SemanticsBinding._instance;
    }
  };
  binding$0.SemanticsBinding[dart.mixinOn] = BindingBase => class SemanticsBinding extends BindingBase {
    initInstances() {
      super.initInstances();
      binding$0.SemanticsBinding._instance = this;
      this[_accessibilityFeatures] = ui.window.accessibilityFeatures;
    }
    handleAccessibilityFeaturesChanged() {
      this[_accessibilityFeatures] = ui.window.accessibilityFeatures;
    }
    get accessibilityFeatures() {
      return this[_accessibilityFeatures];
    }
    get disableAnimations() {
      let value = this[_accessibilityFeatures].disableAnimations;
      if (!dart.test(dart.fn(() => {
        if (debug$2.debugSemanticsDisableAnimations != null) value = debug$2.debugSemanticsDisableAnimations;
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/semantics/binding.dart", 51, 12, "() {\n      if (debugSemanticsDisableAnimations != null)\n        value = debugSemanticsDisableAnimations;\n      return true;\n    }()");
      return value;
    }
  };
  (binding$0.SemanticsBinding[dart.mixinNew] = function() {
    this[_accessibilityFeatures] = null;
  }).prototype = binding$0.SemanticsBinding.prototype;
  dart.addTypeTests(binding$0.SemanticsBinding);
  binding$0.SemanticsBinding[dart.implements] = () => [binding.BindingBase];
  dart.setMethodSignature(binding$0.SemanticsBinding, () => ({
    __proto__: dart.getMethods(binding$0.SemanticsBinding.__proto__),
    handleAccessibilityFeaturesChanged: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(binding$0.SemanticsBinding, () => ({
    __proto__: dart.getGetters(binding$0.SemanticsBinding.__proto__),
    accessibilityFeatures: ui.AccessibilityFeatures,
    disableAnimations: core.bool
  }));
  dart.setLibraryUri(binding$0.SemanticsBinding, "package:flutter_web/src/semantics/binding.dart");
  dart.setFieldSignature(binding$0.SemanticsBinding, () => ({
    __proto__: dart.getFields(binding$0.SemanticsBinding.__proto__),
    [_accessibilityFeatures]: dart.fieldType(ui.AccessibilityFeatures)
  }));
  dart.defineLazy(binding$0.SemanticsBinding, {
    /*binding$0.SemanticsBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  dart.defineLazy(debug$2, {
    /*debug$2.debugSemanticsDisableAnimations*/get debugSemanticsDisableAnimations() {
      return null;
    },
    set debugSemanticsDisableAnimations(_) {}
  });
  let C681;
  let C682;
  let C683;
  let C684;
  let C685;
  let C686;
  let C687;
  let C688;
  let C689;
  fractional_offset.FractionalOffset = class FractionalOffset extends alignment.Alignment {
    static fromOffsetAndSize(offset, size) {
      if (!(size != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 67, 12, "size != null");
      if (!(offset != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 68, 12, "offset != null");
      return new fractional_offset.FractionalOffset.new(dart.notNull(offset.dx) / dart.notNull(size.width), dart.notNull(offset.dy) / dart.notNull(size.height));
    }
    static fromOffsetAndRect(offset, rect) {
      return fractional_offset.FractionalOffset.fromOffsetAndSize(offset['-'](rect.topLeft), rect.size);
    }
    get dx() {
      return (dart.notNull(this.x) + 1.0) / 2.0;
    }
    get dy() {
      return (dart.notNull(this.y) + 1.0) / 2.0;
    }
    ['-'](other) {
      if (!fractional_offset.FractionalOffset.is(other)) return super['-'](other);
      let typedOther = fractional_offset.FractionalOffset._check(other);
      return new fractional_offset.FractionalOffset.new(dart.notNull(this.dx) - dart.notNull(typedOther.dx), dart.notNull(this.dy) - dart.notNull(typedOther.dy));
    }
    ['+'](other) {
      if (!fractional_offset.FractionalOffset.is(other)) return super['+'](other);
      let typedOther = fractional_offset.FractionalOffset._check(other);
      return new fractional_offset.FractionalOffset.new(dart.notNull(this.dx) + dart.notNull(typedOther.dx), dart.notNull(this.dy) + dart.notNull(typedOther.dy));
    }
    _negate() {
      return new fractional_offset.FractionalOffset.new(-dart.notNull(this.dx), -dart.notNull(this.dy));
    }
    ['*'](other) {
      return new fractional_offset.FractionalOffset.new(dart.notNull(this.dx) * dart.notNull(other), dart.notNull(this.dy) * dart.notNull(other));
    }
    ['/'](other) {
      return new fractional_offset.FractionalOffset.new(dart.notNull(this.dx) / dart.notNull(other), dart.notNull(this.dy) / dart.notNull(other));
    }
    ['~/'](other) {
      return new fractional_offset.FractionalOffset.new((dart.notNull(this.dx) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this.dy) / dart.notNull(other))[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new fractional_offset.FractionalOffset.new(this.dx[$modulo](other), this.dy[$modulo](other));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 181, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return new fractional_offset.FractionalOffset.new(ui.lerpDouble(0.5, b.dx, t), ui.lerpDouble(0.5, b.dy, t));
      if (b == null) return new fractional_offset.FractionalOffset.new(ui.lerpDouble(a.dx, 0.5, t), ui.lerpDouble(a.dy, 0.5, t));
      return new fractional_offset.FractionalOffset.new(ui.lerpDouble(a.dx, b.dx, t), ui.lerpDouble(a.dy, b.dy, t));
    }
    toString() {
      return "FractionalOffset(" + this.dx[$toStringAsFixed](1) + ", " + this.dy[$toStringAsFixed](1) + ")";
    }
  };
  (fractional_offset.FractionalOffset.new = function(dx, dy) {
    if (!(dx != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 58, 16, "dx != null");
    if (!(dy != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 59, 16, "dy != null");
    fractional_offset.FractionalOffset.__proto__.new.call(this, dart.notNull(dx) * 2.0 - 1.0, dart.notNull(dy) * 2.0 - 1.0);
    ;
  }).prototype = fractional_offset.FractionalOffset.prototype;
  dart.addTypeTests(fractional_offset.FractionalOffset);
  dart.setMethodSignature(fractional_offset.FractionalOffset, () => ({
    __proto__: dart.getMethods(fractional_offset.FractionalOffset.__proto__),
    _negate: dart.fnType(fractional_offset.FractionalOffset, []),
    '*': dart.fnType(fractional_offset.FractionalOffset, [core.double]),
    '/': dart.fnType(fractional_offset.FractionalOffset, [core.double]),
    '~/': dart.fnType(fractional_offset.FractionalOffset, [core.double]),
    '%': dart.fnType(fractional_offset.FractionalOffset, [core.double])
  }));
  dart.setGetterSignature(fractional_offset.FractionalOffset, () => ({
    __proto__: dart.getGetters(fractional_offset.FractionalOffset.__proto__),
    dx: core.double,
    dy: core.double
  }));
  dart.setLibraryUri(fractional_offset.FractionalOffset, "package:flutter_web/src/painting/fractional_offset.dart");
  dart.defineExtensionMethods(fractional_offset.FractionalOffset, ['toString']);
  dart.defineLazy(fractional_offset.FractionalOffset, {
    /*fractional_offset.FractionalOffset.topLeft*/get topLeft() {
      return C681 || CT.C681;
    },
    /*fractional_offset.FractionalOffset.topCenter*/get topCenter() {
      return C682 || CT.C682;
    },
    /*fractional_offset.FractionalOffset.topRight*/get topRight() {
      return C683 || CT.C683;
    },
    /*fractional_offset.FractionalOffset.centerLeft*/get centerLeft() {
      return C684 || CT.C684;
    },
    /*fractional_offset.FractionalOffset.center*/get center() {
      return C685 || CT.C685;
    },
    /*fractional_offset.FractionalOffset.centerRight*/get centerRight() {
      return C686 || CT.C686;
    },
    /*fractional_offset.FractionalOffset.bottomLeft*/get bottomLeft() {
      return C687 || CT.C687;
    },
    /*fractional_offset.FractionalOffset.bottomCenter*/get bottomCenter() {
      return C688 || CT.C688;
    },
    /*fractional_offset.FractionalOffset.bottomRight*/get bottomRight() {
      return C689 || CT.C689;
    }
  });
  haptic_feedback.HapticFeedback = class HapticFeedback extends core.Object {
    static vibrate() {
      return async.async(dart.void, function* vibrate() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate");
      });
    }
    static lightImpact() {
      return async.async(dart.void, function* lightImpact() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate", "HapticFeedbackType.lightImpact");
      });
    }
    static mediumImpact() {
      return async.async(dart.void, function* mediumImpact() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate", "HapticFeedbackType.mediumImpact");
      });
    }
    static heavyImpact() {
      return async.async(dart.void, function* heavyImpact() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate", "HapticFeedbackType.heavyImpact");
      });
    }
    static selectionClick() {
      return async.async(dart.void, function* selectionClick() {
        yield system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate", "HapticFeedbackType.selectionClick");
      });
    }
  };
  (haptic_feedback.HapticFeedback.__ = function() {
    ;
  }).prototype = haptic_feedback.HapticFeedback.prototype;
  dart.addTypeTests(haptic_feedback.HapticFeedback);
  dart.setLibraryUri(haptic_feedback.HapticFeedback, "package:flutter_web/src/services/haptic_feedback.dart");
  box_shadow.BoxShadow = class BoxShadow extends ui.Shadow {
    get spreadRadius() {
      return this[spreadRadius$];
    }
    set spreadRadius(value) {
      super.spreadRadius = value;
    }
    toPaint() {
      let t16;
      let result = (t16 = new ui.Paint.new(), t16.color = this.color, t16.maskFilter = new ui.MaskFilter.blur(ui.BlurStyle.normal, this.blurSigma), t16);
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$1.debugDisableShadows)) result.maskFilter = null;
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/box_shadow.dart", 54, 12, "() {\n      if (debugDisableShadows)\n        result.maskFilter = null;\n      return true;\n    }()");
      return result;
    }
    scale(factor) {
      return new box_shadow.BoxShadow.new({color: this.color, offset: this.offset['*'](factor), blurRadius: dart.notNull(this.blurRadius) * dart.notNull(factor), spreadRadius: dart.notNull(this.spreadRadius) * dart.notNull(factor)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/box_shadow.dart", 81, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b.scale(t);
      if (b == null) return a.scale(1.0 - dart.notNull(t));
      return new box_shadow.BoxShadow.new({color: ui.Color.lerp(a.color, b.color, t), offset: ui.Offset.lerp(a.offset, b.offset, t), blurRadius: ui.lerpDouble(a.blurRadius, b.blurRadius, t), spreadRadius: ui.lerpDouble(a.spreadRadius, b.spreadRadius, t)});
    }
    static lerpList(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/box_shadow.dart", 102, 12, "t != null");
      if (a == null && b == null) return null;
      a == null ? a = JSArrayOfBoxShadow().of([]) : null;
      b == null ? b = JSArrayOfBoxShadow().of([]) : null;
      let result = JSArrayOfBoxShadow().of([]);
      let commonLength = math.min(core.int, a[$length], b[$length]);
      for (let i = 0; i < commonLength; i = i + 1)
        result[$add](box_shadow.BoxShadow.lerp(a[$_get](i), b[$_get](i), t));
      for (let i = commonLength; i < dart.notNull(a[$length]); i = i + 1)
        result[$add](a[$_get](i).scale(1.0 - dart.notNull(t)));
      for (let i = commonLength; i < dart.notNull(b[$length]); i = i + 1)
        result[$add](b[$_get](i).scale(t));
      return result;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = box_shadow.BoxShadow._check(other);
      return dart.equals(this.color, typedOther.color) && dart.equals(this.offset, typedOther.offset) && this.blurRadius == typedOther.blurRadius && this.spreadRadius == typedOther.spreadRadius;
    }
    get hashCode() {
      return ui.hashValues(this.color, this.offset, this.blurRadius, this.spreadRadius);
    }
    toString() {
      return "BoxShadow(" + dart.str(this.color) + ", " + dart.str(this.offset) + ", " + dart.str(debug.debugFormatDouble(this.blurRadius)) + ", " + dart.str(debug.debugFormatDouble(this.spreadRadius)) + ")";
    }
  };
  (box_shadow.BoxShadow.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C52 || CT.C52;
    let offset = opts && 'offset' in opts ? opts.offset : C130 || CT.C130;
    let blurRadius = opts && 'blurRadius' in opts ? opts.blurRadius : 0;
    let spreadRadius = opts && 'spreadRadius' in opts ? opts.spreadRadius : 0;
    this[spreadRadius$] = spreadRadius;
    box_shadow.BoxShadow.__proto__.new.call(this, {color: color, offset: offset, blurRadius: blurRadius});
    ;
  }).prototype = box_shadow.BoxShadow.prototype;
  dart.addTypeTests(box_shadow.BoxShadow);
  const spreadRadius$ = Symbol("BoxShadow.spreadRadius");
  dart.setMethodSignature(box_shadow.BoxShadow, () => ({
    __proto__: dart.getMethods(box_shadow.BoxShadow.__proto__),
    scale: dart.fnType(box_shadow.BoxShadow, [core.double])
  }));
  dart.setLibraryUri(box_shadow.BoxShadow, "package:flutter_web/src/painting/box_shadow.dart");
  dart.setFieldSignature(box_shadow.BoxShadow, () => ({
    __proto__: dart.getFields(box_shadow.BoxShadow.__proto__),
    spreadRadius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(box_shadow.BoxShadow, ['_equals', 'toString']);
  dart.defineExtensionAccessors(box_shadow.BoxShadow, ['hashCode']);
  const _name$10 = dart.privateName(box_fit, "_name");
  let C690;
  let C691;
  let C692;
  let C693;
  let C694;
  let C695;
  let C696;
  let C697;
  box_fit.BoxFit = class BoxFit extends core.Object {
    toString() {
      return this[_name$10];
    }
  };
  (box_fit.BoxFit.new = function(index, _name) {
    this.index = index;
    this[_name$10] = _name;
    ;
  }).prototype = box_fit.BoxFit.prototype;
  dart.addTypeTests(box_fit.BoxFit);
  dart.setLibraryUri(box_fit.BoxFit, "package:flutter_web/src/painting/box_fit.dart");
  dart.setFieldSignature(box_fit.BoxFit, () => ({
    __proto__: dart.getFields(box_fit.BoxFit.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$10]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(box_fit.BoxFit, ['toString']);
  box_fit.BoxFit.fill = C690 || CT.C690;
  box_fit.BoxFit.contain = C691 || CT.C691;
  box_fit.BoxFit.cover = C692 || CT.C692;
  box_fit.BoxFit.fitWidth = C693 || CT.C693;
  box_fit.BoxFit.fitHeight = C694 || CT.C694;
  box_fit.BoxFit.none = C695 || CT.C695;
  box_fit.BoxFit.scaleDown = C696 || CT.C696;
  box_fit.BoxFit.values = C697 || CT.C697;
  box_fit.FittedSizes = class FittedSizes extends core.Object {
    get source() {
      return this[source$];
    }
    set source(value) {
      super.source = value;
    }
    get destination() {
      return this[destination$];
    }
    set destination(value) {
      super.destination = value;
    }
  };
  (box_fit.FittedSizes.new = function(source, destination) {
    this[source$] = source;
    this[destination$] = destination;
    ;
  }).prototype = box_fit.FittedSizes.prototype;
  dart.addTypeTests(box_fit.FittedSizes);
  const source$ = Symbol("FittedSizes.source");
  const destination$ = Symbol("FittedSizes.destination");
  dart.setLibraryUri(box_fit.FittedSizes, "package:flutter_web/src/painting/box_fit.dart");
  dart.setFieldSignature(box_fit.FittedSizes, () => ({
    __proto__: dart.getFields(box_fit.FittedSizes.__proto__),
    source: dart.finalFieldType(ui.Size),
    destination: dart.finalFieldType(ui.Size)
  }));
  let C699;
  let C698;
  box_fit.applyBoxFit = function applyBoxFit(fit, inputSize, outputSize) {
    if (dart.notNull(inputSize.height) <= 0.0 || dart.notNull(inputSize.width) <= 0.0 || dart.notNull(outputSize.height) <= 0.0 || dart.notNull(outputSize.width) <= 0.0) return C698 || CT.C698;
    let sourceSize = null;
    let destinationSize = null;
    switch (fit) {
      case C690 || CT.C690:
      {
        sourceSize = inputSize;
        destinationSize = outputSize;
        break;
      }
      case C691 || CT.C691:
      {
        sourceSize = inputSize;
        if (dart.notNull(outputSize.width) / dart.notNull(outputSize.height) > dart.notNull(sourceSize.width) / dart.notNull(sourceSize.height))
          destinationSize = new ui.Size.new(dart.notNull(sourceSize.width) * dart.notNull(outputSize.height) / dart.notNull(sourceSize.height), outputSize.height);
        else
          destinationSize = new ui.Size.new(outputSize.width, dart.notNull(sourceSize.height) * dart.notNull(outputSize.width) / dart.notNull(sourceSize.width));
        break;
      }
      case C692 || CT.C692:
      {
        if (dart.notNull(outputSize.width) / dart.notNull(outputSize.height) > dart.notNull(inputSize.width) / dart.notNull(inputSize.height)) {
          sourceSize = new ui.Size.new(inputSize.width, dart.notNull(inputSize.width) * dart.notNull(outputSize.height) / dart.notNull(outputSize.width));
        } else {
          sourceSize = new ui.Size.new(dart.notNull(inputSize.height) * dart.notNull(outputSize.width) / dart.notNull(outputSize.height), inputSize.height);
        }
        destinationSize = outputSize;
        break;
      }
      case C693 || CT.C693:
      {
        sourceSize = new ui.Size.new(inputSize.width, dart.notNull(inputSize.width) * dart.notNull(outputSize.height) / dart.notNull(outputSize.width));
        destinationSize = new ui.Size.new(outputSize.width, dart.notNull(sourceSize.height) * dart.notNull(outputSize.width) / dart.notNull(sourceSize.width));
        break;
      }
      case C694 || CT.C694:
      {
        sourceSize = new ui.Size.new(dart.notNull(inputSize.height) * dart.notNull(outputSize.width) / dart.notNull(outputSize.height), inputSize.height);
        destinationSize = new ui.Size.new(dart.notNull(sourceSize.width) * dart.notNull(outputSize.height) / dart.notNull(sourceSize.height), outputSize.height);
        break;
      }
      case C695 || CT.C695:
      {
        sourceSize = new ui.Size.new(math.min(core.double, inputSize.width, outputSize.width), math.min(core.double, inputSize.height, outputSize.height));
        destinationSize = sourceSize;
        break;
      }
      case C696 || CT.C696:
      {
        sourceSize = inputSize;
        destinationSize = inputSize;
        let aspectRatio = dart.notNull(inputSize.width) / dart.notNull(inputSize.height);
        if (dart.notNull(destinationSize.height) > dart.notNull(outputSize.height)) destinationSize = new ui.Size.new(dart.notNull(outputSize.height) * aspectRatio, outputSize.height);
        if (dart.notNull(destinationSize.width) > dart.notNull(outputSize.width)) destinationSize = new ui.Size.new(outputSize.width, dart.notNull(outputSize.width) / aspectRatio);
        break;
      }
    }
    return new box_fit.FittedSizes.new(sourceSize, destinationSize);
  };
  const _name$11 = dart.privateName(monodrag, "_name");
  let C700;
  let C701;
  let C702;
  let C703;
  monodrag._DragState = class _DragState extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (monodrag._DragState.new = function(index, _name) {
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = monodrag._DragState.prototype;
  dart.addTypeTests(monodrag._DragState);
  dart.setLibraryUri(monodrag._DragState, "package:flutter_web/src/gestures/monodrag.dart");
  dart.setFieldSignature(monodrag._DragState, () => ({
    __proto__: dart.getFields(monodrag._DragState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(monodrag._DragState, ['toString']);
  monodrag._DragState.ready = C700 || CT.C700;
  monodrag._DragState.possible = C701 || CT.C701;
  monodrag._DragState.accepted = C702 || CT.C702;
  monodrag._DragState.values = C703 || CT.C703;
  const _state$0 = dart.privateName(monodrag, "_state");
  const _initialPosition = dart.privateName(monodrag, "_initialPosition");
  const _pendingDragOffset = dart.privateName(monodrag, "_pendingDragOffset");
  const _lastPendingEventTimestamp$ = dart.privateName(monodrag, "_lastPendingEventTimestamp");
  const _initialButtons$0 = dart.privateName(monodrag, "_initialButtons");
  const _lastTransform = dart.privateName(monodrag, "_lastTransform");
  const _globalDistanceMoved = dart.privateName(monodrag, "_globalDistanceMoved");
  const _velocityTrackers$ = dart.privateName(monodrag, "_velocityTrackers");
  const _checkDown$ = dart.privateName(monodrag, "_checkDown");
  const _getDeltaForDetails = dart.privateName(monodrag, "_getDeltaForDetails");
  const _getPrimaryValueFromOffset = dart.privateName(monodrag, "_getPrimaryValueFromOffset");
  const _checkUpdate = dart.privateName(monodrag, "_checkUpdate");
  const _hasSufficientGlobalDistanceToAccept = dart.privateName(monodrag, "_hasSufficientGlobalDistanceToAccept");
  const _checkStart = dart.privateName(monodrag, "_checkStart");
  const _checkCancel$ = dart.privateName(monodrag, "_checkCancel");
  const _checkEnd = dart.privateName(monodrag, "_checkEnd");
  monodrag.DragGestureRecognizer = class DragGestureRecognizer extends recognizer.OneSequenceGestureRecognizer {
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      this[dragStartBehavior$] = value;
    }
    get onDown() {
      return this[onDown];
    }
    set onDown(value) {
      this[onDown] = value;
    }
    get onStart() {
      return this[onStart$0];
    }
    set onStart(value) {
      this[onStart$0] = value;
    }
    get onUpdate() {
      return this[onUpdate$0];
    }
    set onUpdate(value) {
      this[onUpdate$0] = value;
    }
    get onEnd() {
      return this[onEnd$0];
    }
    set onEnd(value) {
      this[onEnd$0] = value;
    }
    get onCancel() {
      return this[onCancel];
    }
    set onCancel(value) {
      this[onCancel] = value;
    }
    get minFlingDistance() {
      return this[minFlingDistance];
    }
    set minFlingDistance(value) {
      this[minFlingDistance] = value;
    }
    get minFlingVelocity() {
      return this[minFlingVelocity];
    }
    set minFlingVelocity(value) {
      this[minFlingVelocity] = value;
    }
    get maxFlingVelocity() {
      return this[maxFlingVelocity];
    }
    set maxFlingVelocity(value) {
      this[maxFlingVelocity] = value;
    }
    isPointerAllowed(event) {
      if (this[_initialButtons$0] == null) {
        switch (event.buttons) {
          case 1:
          {
            if (this.onDown == null && this.onStart == null && this.onUpdate == null && this.onEnd == null && this.onCancel == null) return false;
            break;
          }
          default:
          {
            return false;
          }
        }
      } else {
        if (event.buttons != this[_initialButtons$0]) {
          return false;
        }
      }
      return super.isPointerAllowed(events.PointerDownEvent._check(event));
    }
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer, event.transform);
      this[_velocityTrackers$][$_set](event.pointer, new velocity_tracker.VelocityTracker.new());
      if (dart.equals(this[_state$0], monodrag._DragState.ready)) {
        this[_state$0] = monodrag._DragState.possible;
        this[_initialPosition] = new recognizer.OffsetPair.new({global: event.position, local: event.localPosition});
        this[_initialButtons$0] = event.buttons;
        this[_pendingDragOffset] = recognizer.OffsetPair.zero;
        this[_globalDistanceMoved] = 0.0;
        this[_lastPendingEventTimestamp$] = event.timeStamp;
        this[_lastTransform] = event.transform;
        this[_checkDown$]();
      } else if (dart.equals(this[_state$0], monodrag._DragState.accepted)) {
        this.resolve(arena.GestureDisposition.accepted);
      }
    }
    handleEvent(event) {
      let t16;
      if (!!dart.equals(this[_state$0], monodrag._DragState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 245, 12, "_state != _DragState.ready");
      if (!dart.test(event.synthesized) && (events.PointerDownEvent.is(event) || events.PointerMoveEvent.is(event))) {
        let tracker = this[_velocityTrackers$][$_get](event.pointer);
        if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 249, 14, "tracker != null");
        tracker.addPosition(event.timeStamp, event.localPosition);
      }
      if (events.PointerMoveEvent.is(event)) {
        if (event.buttons != this[_initialButtons$0]) {
          this.resolve(arena.GestureDisposition.rejected);
          this.stopTrackingPointer(event.pointer);
          return;
        }
        if (dart.equals(this[_state$0], monodrag._DragState.accepted)) {
          this[_checkUpdate]({sourceTimeStamp: event.timeStamp, delta: this[_getDeltaForDetails](event.localDelta), primaryDelta: this[_getPrimaryValueFromOffset](event.localDelta), globalPosition: event.position, localPosition: event.localPosition});
        } else {
          this[_pendingDragOffset] = this[_pendingDragOffset]['+'](new recognizer.OffsetPair.new({local: event.localDelta, global: event.delta}));
          this[_lastPendingEventTimestamp$] = event.timeStamp;
          this[_lastTransform] = event.transform;
          let movedLocally = this[_getDeltaForDetails](event.localDelta);
          let localToGlobalTransform = event.transform == null ? null : vector_math_64.Matrix4.tryInvert(event.transform);
          this[_globalDistanceMoved] = dart.notNull(this[_globalDistanceMoved]) + dart.notNull(events.PointerEvent.transformDeltaViaPositions({transform: localToGlobalTransform, untransformedDelta: movedLocally, untransformedEndPosition: event.localPosition}).distance) * (t16 = this[_getPrimaryValueFromOffset](movedLocally), t16 == null ? 1.0 : t16)[$sign];
          if (dart.test(this[_hasSufficientGlobalDistanceToAccept])) this.resolve(arena.GestureDisposition.accepted);
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    acceptGesture(pointer) {
      if (!dart.equals(this[_state$0], monodrag._DragState.accepted)) {
        this[_state$0] = monodrag._DragState.accepted;
        let delta = this[_pendingDragOffset];
        let timestamp = this[_lastPendingEventTimestamp$];
        let transform = this[_lastTransform];
        let localUpdateDelta = null;
        switch (this.dragStartBehavior) {
          case C123 || CT.C123:
          {
            this[_initialPosition] = this[_initialPosition]['+'](delta);
            localUpdateDelta = ui.Offset.zero;
            break;
          }
          case C122 || CT.C122:
          {
            localUpdateDelta = this[_getDeltaForDetails](delta.local);
            break;
          }
        }
        this[_pendingDragOffset] = recognizer.OffsetPair.zero;
        this[_lastPendingEventTimestamp$] = null;
        this[_lastTransform] = null;
        this[_checkStart](timestamp);
        if (!dart.equals(localUpdateDelta, ui.Offset.zero) && this.onUpdate != null) {
          let localToGlobal = transform != null ? vector_math_64.Matrix4.tryInvert(transform) : null;
          let correctedLocalPosition = this[_initialPosition].local['+'](localUpdateDelta);
          let globalUpdateDelta = events.PointerEvent.transformDeltaViaPositions({untransformedEndPosition: correctedLocalPosition, untransformedDelta: localUpdateDelta, transform: localToGlobal});
          let updateDelta = new recognizer.OffsetPair.new({local: localUpdateDelta, global: globalUpdateDelta});
          let correctedPosition = this[_initialPosition]['+'](updateDelta);
          this[_checkUpdate]({sourceTimeStamp: timestamp, delta: localUpdateDelta, primaryDelta: this[_getPrimaryValueFromOffset](localUpdateDelta), globalPosition: correctedPosition.global, localPosition: correctedPosition.local});
        }
      }
    }
    rejectGesture(pointer) {
      this.stopTrackingPointer(pointer);
    }
    didStopTrackingLastPointer(pointer) {
      if (!!dart.equals(this[_state$0], monodrag._DragState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 334, 12, "_state != _DragState.ready");
      switch (this[_state$0]) {
        case C700 || CT.C700:
        {
          break;
        }
        case C701 || CT.C701:
        {
          this.resolve(arena.GestureDisposition.rejected);
          this[_checkCancel$]();
          break;
        }
        case C702 || CT.C702:
        {
          this[_checkEnd](pointer);
          break;
        }
      }
      this[_velocityTrackers$][$clear]();
      this[_initialButtons$0] = null;
      this[_state$0] = monodrag._DragState.ready;
    }
    [_checkDown$]() {
      if (!(this[_initialButtons$0] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 354, 12, "_initialButtons == kPrimaryButton");
      let details = new drag_details.DragDownDetails.new({globalPosition: this[_initialPosition].global, localPosition: this[_initialPosition].local});
      if (this.onDown != null) this.invokeCallback(dart.void, "onDown", dart.fn(() => this.onDown(details), VoidTovoid()));
    }
    [_checkStart](timestamp) {
      if (!(this[_initialButtons$0] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 364, 12, "_initialButtons == kPrimaryButton");
      let details = new drag_details.DragStartDetails.new({sourceTimeStamp: timestamp, globalPosition: this[_initialPosition].global, localPosition: this[_initialPosition].local});
      if (this.onStart != null) this.invokeCallback(dart.void, "onStart", dart.fn(() => this.onStart(details), VoidTovoid()));
    }
    [_checkUpdate](opts) {
      let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let primaryDelta = opts && 'primaryDelta' in opts ? opts.primaryDelta : null;
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      if (!(this[_initialButtons$0] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 381, 12, "_initialButtons == kPrimaryButton");
      let details = new drag_details.DragUpdateDetails.new({sourceTimeStamp: sourceTimeStamp, delta: delta, primaryDelta: primaryDelta, globalPosition: globalPosition, localPosition: localPosition});
      if (this.onUpdate != null) this.invokeCallback(dart.void, "onUpdate", dart.fn(() => this.onUpdate(details), VoidTovoid()));
    }
    [_checkEnd](pointer) {
      let t16, t16$;
      if (!(this[_initialButtons$0] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 394, 12, "_initialButtons == kPrimaryButton");
      if (this.onEnd == null) return;
      let tracker = this[_velocityTrackers$][$_get](pointer);
      if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 399, 12, "tracker != null");
      let details = null;
      let debugReport = null;
      let estimate = tracker.getVelocityEstimate();
      if (estimate != null && dart.test(this.isFlingGesture(estimate))) {
        let velocity = new velocity_tracker.Velocity.new({pixelsPerSecond: estimate.pixelsPerSecond}).clampMagnitude((t16 = this.minFlingVelocity, t16 == null ? 50 : t16), (t16$ = this.maxFlingVelocity, t16$ == null ? 8000 : t16$));
        details = new drag_details.DragEndDetails.new({velocity: velocity, primaryVelocity: this[_getPrimaryValueFromOffset](velocity.pixelsPerSecond)});
        debugReport = dart.fn(() => dart.str(estimate) + "; fling at " + dart.str(velocity) + ".", VoidToString());
      } else {
        details = new drag_details.DragEndDetails.new({velocity: velocity_tracker.Velocity.zero, primaryVelocity: 0.0});
        debugReport = dart.fn(() => {
          if (estimate == null) return "Could not estimate velocity.";
          return dart.str(estimate) + "; judged to not be a fling.";
        }, VoidToString());
      }
      this.invokeCallback(dart.void, "onEnd", dart.fn(() => this.onEnd(details), VoidTovoid()), {debugReport: VoidToString()._check(debugReport)});
    }
    [_checkCancel$]() {
      if (!(this[_initialButtons$0] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 430, 12, "_initialButtons == kPrimaryButton");
      if (this.onCancel != null) this.invokeCallback(dart.void, "onCancel", this.onCancel);
    }
    dispose() {
      this[_velocityTrackers$][$clear]();
      super.dispose();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (EnumPropertyOfDragStartBehavior()).new("start behavior", this.dragStartBehavior));
    }
  };
  (monodrag.DragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C123 || CT.C123;
    this[onDown] = null;
    this[onStart$0] = null;
    this[onUpdate$0] = null;
    this[onEnd$0] = null;
    this[onCancel] = null;
    this[minFlingDistance] = null;
    this[minFlingVelocity] = null;
    this[maxFlingVelocity] = null;
    this[_state$0] = monodrag._DragState.ready;
    this[_initialPosition] = null;
    this[_pendingDragOffset] = null;
    this[_lastPendingEventTimestamp$] = null;
    this[_initialButtons$0] = null;
    this[_lastTransform] = null;
    this[_globalDistanceMoved] = null;
    this[_velocityTrackers$] = new (IdentityMapOfint$VelocityTracker()).new();
    this[dragStartBehavior$] = dragStartBehavior;
    if (!(dragStartBehavior != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 67, 15, "dragStartBehavior != null");
    monodrag.DragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = monodrag.DragGestureRecognizer.prototype;
  dart.addTypeTests(monodrag.DragGestureRecognizer);
  const dragStartBehavior$ = Symbol("DragGestureRecognizer.dragStartBehavior");
  const onDown = Symbol("DragGestureRecognizer.onDown");
  const onStart$0 = Symbol("DragGestureRecognizer.onStart");
  const onUpdate$0 = Symbol("DragGestureRecognizer.onUpdate");
  const onEnd$0 = Symbol("DragGestureRecognizer.onEnd");
  const onCancel = Symbol("DragGestureRecognizer.onCancel");
  const minFlingDistance = Symbol("DragGestureRecognizer.minFlingDistance");
  const minFlingVelocity = Symbol("DragGestureRecognizer.minFlingVelocity");
  const maxFlingVelocity = Symbol("DragGestureRecognizer.maxFlingVelocity");
  dart.setMethodSignature(monodrag.DragGestureRecognizer, () => ({
    __proto__: dart.getMethods(monodrag.DragGestureRecognizer.__proto__),
    isPointerAllowed: dart.fnType(core.bool, [events.PointerEvent]),
    addAllowedPointer: dart.fnType(dart.void, [events.PointerEvent]),
    handleEvent: dart.fnType(dart.void, [events.PointerEvent]),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int]),
    [_checkDown$]: dart.fnType(dart.void, []),
    [_checkStart]: dart.fnType(dart.void, [core.Duration]),
    [_checkUpdate]: dart.fnType(dart.void, [], {delta: ui.Offset, globalPosition: ui.Offset, localPosition: ui.Offset, primaryDelta: core.double, sourceTimeStamp: core.Duration}),
    [_checkEnd]: dart.fnType(dart.void, [core.int]),
    [_checkCancel$]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(monodrag.DragGestureRecognizer, "package:flutter_web/src/gestures/monodrag.dart");
  dart.setFieldSignature(monodrag.DragGestureRecognizer, () => ({
    __proto__: dart.getFields(monodrag.DragGestureRecognizer.__proto__),
    dragStartBehavior: dart.fieldType(recognizer.DragStartBehavior),
    onDown: dart.fieldType(dart.fnType(dart.void, [drag_details.DragDownDetails])),
    onStart: dart.fieldType(dart.fnType(dart.void, [drag_details.DragStartDetails])),
    onUpdate: dart.fieldType(dart.fnType(dart.void, [drag_details.DragUpdateDetails])),
    onEnd: dart.fieldType(dart.fnType(dart.void, [drag_details.DragEndDetails])),
    onCancel: dart.fieldType(dart.fnType(dart.void, [])),
    minFlingDistance: dart.fieldType(core.double),
    minFlingVelocity: dart.fieldType(core.double),
    maxFlingVelocity: dart.fieldType(core.double),
    [_state$0]: dart.fieldType(monodrag._DragState),
    [_initialPosition]: dart.fieldType(recognizer.OffsetPair),
    [_pendingDragOffset]: dart.fieldType(recognizer.OffsetPair),
    [_lastPendingEventTimestamp$]: dart.fieldType(core.Duration),
    [_initialButtons$0]: dart.fieldType(core.int),
    [_lastTransform]: dart.fieldType(vector_math_64.Matrix4),
    [_globalDistanceMoved]: dart.fieldType(core.double),
    [_velocityTrackers$]: dart.finalFieldType(core.Map$(core.int, velocity_tracker.VelocityTracker))
  }));
  monodrag.VerticalDragGestureRecognizer = class VerticalDragGestureRecognizer extends monodrag.DragGestureRecognizer {
    isFlingGesture(estimate) {
      let t16, t16$;
      let minVelocity = (t16 = this.minFlingVelocity, t16 == null ? 50 : t16);
      let minDistance = (t16$ = this.minFlingDistance, t16$ == null ? 18 : t16$);
      return estimate.pixelsPerSecond.dy[$abs]() > dart.notNull(minVelocity) && estimate.offset.dy[$abs]() > dart.notNull(minDistance);
    }
    get [_hasSufficientGlobalDistanceToAccept]() {
      return this[_globalDistanceMoved][$abs]() > 18;
    }
    [_getDeltaForDetails](delta) {
      return new ui.Offset.new(0.0, delta.dy);
    }
    [_getPrimaryValueFromOffset](value) {
      return value.dy;
    }
    get debugDescription() {
      return "vertical drag";
    }
  };
  (monodrag.VerticalDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    monodrag.VerticalDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = monodrag.VerticalDragGestureRecognizer.prototype;
  dart.addTypeTests(monodrag.VerticalDragGestureRecognizer);
  dart.setMethodSignature(monodrag.VerticalDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(monodrag.VerticalDragGestureRecognizer.__proto__),
    isFlingGesture: dart.fnType(core.bool, [velocity_tracker.VelocityEstimate]),
    [_getDeltaForDetails]: dart.fnType(ui.Offset, [ui.Offset]),
    [_getPrimaryValueFromOffset]: dart.fnType(core.double, [ui.Offset])
  }));
  dart.setGetterSignature(monodrag.VerticalDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(monodrag.VerticalDragGestureRecognizer.__proto__),
    [_hasSufficientGlobalDistanceToAccept]: core.bool,
    debugDescription: core.String
  }));
  dart.setLibraryUri(monodrag.VerticalDragGestureRecognizer, "package:flutter_web/src/gestures/monodrag.dart");
  monodrag.HorizontalDragGestureRecognizer = class HorizontalDragGestureRecognizer extends monodrag.DragGestureRecognizer {
    isFlingGesture(estimate) {
      let t16, t16$;
      let minVelocity = (t16 = this.minFlingVelocity, t16 == null ? 50 : t16);
      let minDistance = (t16$ = this.minFlingDistance, t16$ == null ? 18 : t16$);
      return estimate.pixelsPerSecond.dx[$abs]() > dart.notNull(minVelocity) && estimate.offset.dx[$abs]() > dart.notNull(minDistance);
    }
    get [_hasSufficientGlobalDistanceToAccept]() {
      return this[_globalDistanceMoved][$abs]() > 18;
    }
    [_getDeltaForDetails](delta) {
      return new ui.Offset.new(delta.dx, 0.0);
    }
    [_getPrimaryValueFromOffset](value) {
      return value.dx;
    }
    get debugDescription() {
      return "horizontal drag";
    }
  };
  (monodrag.HorizontalDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    monodrag.HorizontalDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = monodrag.HorizontalDragGestureRecognizer.prototype;
  dart.addTypeTests(monodrag.HorizontalDragGestureRecognizer);
  dart.setMethodSignature(monodrag.HorizontalDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(monodrag.HorizontalDragGestureRecognizer.__proto__),
    isFlingGesture: dart.fnType(core.bool, [velocity_tracker.VelocityEstimate]),
    [_getDeltaForDetails]: dart.fnType(ui.Offset, [ui.Offset]),
    [_getPrimaryValueFromOffset]: dart.fnType(core.double, [ui.Offset])
  }));
  dart.setGetterSignature(monodrag.HorizontalDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(monodrag.HorizontalDragGestureRecognizer.__proto__),
    [_hasSufficientGlobalDistanceToAccept]: core.bool,
    debugDescription: core.String
  }));
  dart.setLibraryUri(monodrag.HorizontalDragGestureRecognizer, "package:flutter_web/src/gestures/monodrag.dart");
  monodrag.PanGestureRecognizer = class PanGestureRecognizer extends monodrag.DragGestureRecognizer {
    isFlingGesture(estimate) {
      let t16, t16$;
      let minVelocity = (t16 = this.minFlingVelocity, t16 == null ? 50 : t16);
      let minDistance = (t16$ = this.minFlingDistance, t16$ == null ? 18 : t16$);
      return dart.notNull(estimate.pixelsPerSecond.distanceSquared) > dart.notNull(minVelocity) * dart.notNull(minVelocity) && dart.notNull(estimate.offset.distanceSquared) > dart.notNull(minDistance) * dart.notNull(minDistance);
    }
    get [_hasSufficientGlobalDistanceToAccept]() {
      return this[_globalDistanceMoved][$abs]() > 36;
    }
    [_getDeltaForDetails](delta) {
      return delta;
    }
    [_getPrimaryValueFromOffset](value) {
      return null;
    }
    get debugDescription() {
      return "pan";
    }
  };
  (monodrag.PanGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    monodrag.PanGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner});
    ;
  }).prototype = monodrag.PanGestureRecognizer.prototype;
  dart.addTypeTests(monodrag.PanGestureRecognizer);
  dart.setMethodSignature(monodrag.PanGestureRecognizer, () => ({
    __proto__: dart.getMethods(monodrag.PanGestureRecognizer.__proto__),
    isFlingGesture: dart.fnType(core.bool, [velocity_tracker.VelocityEstimate]),
    [_getDeltaForDetails]: dart.fnType(ui.Offset, [ui.Offset]),
    [_getPrimaryValueFromOffset]: dart.fnType(core.double, [ui.Offset])
  }));
  dart.setGetterSignature(monodrag.PanGestureRecognizer, () => ({
    __proto__: dart.getGetters(monodrag.PanGestureRecognizer.__proto__),
    [_hasSufficientGlobalDistanceToAccept]: core.bool,
    debugDescription: core.String
  }));
  dart.setLibraryUri(monodrag.PanGestureRecognizer, "package:flutter_web/src/gestures/monodrag.dart");
  dart.trackLibraries("packages/flutter_web/src/animation/animation", {
    "package:flutter_web/src/services/text_editing.dart": text_editing,
    "package:flutter_web/src/painting/alignment.dart": alignment,
    "package:flutter_web/src/painting/basic_types.dart": basic_types,
    "package:flutter_web/src/services/system_chrome.dart": system_chrome,
    "package:flutter_web/src/services/system_channels.dart": system_channels,
    "package:flutter_web/src/services/platform_channel.dart": platform_channel,
    "package:flutter_web/src/services/platform_messages.dart": platform_messages,
    "package:flutter_web/src/services/message_codecs.dart": message_codecs,
    "package:flutter_web/src/services/message_codec.dart": message_codec,
    "package:flutter_web/src/animation/animations.dart": animations,
    "package:flutter_web/src/animation/listener_helpers.dart": listener_helpers,
    "package:flutter_web/src/animation/animation.dart": animation$,
    "package:flutter_web/src/animation/tween.dart": tween,
    "package:flutter_web/src/animation/curves.dart": curves,
    "package:flutter_web/src/gestures/eager.dart": eager,
    "package:flutter_web/src/gestures/recognizer.dart": recognizer,
    "package:flutter_web/src/gestures/pointer_router.dart": pointer_router,
    "package:flutter_web/src/gestures/events.dart": events,
    "package:flutter_web/src/gestures/team.dart": team,
    "package:flutter_web/src/gestures/binding.dart": binding$,
    "package:flutter_web/src/gestures/pointer_signal_resolver.dart": pointer_signal_resolver,
    "package:flutter_web/src/gestures/hit_test.dart": hit_test,
    "package:flutter_web/src/gestures/debug.dart": debug$,
    "package:flutter_web/src/gestures/converter.dart": converter,
    "package:flutter_web/src/gestures/arena.dart": arena,
    "package:flutter_web/src/util.dart": util,
    "package:flutter_web/src/gestures/constants.dart": constants,
    "package:flutter_web/src/services/system_sound.dart": system_sound,
    "package:flutter_web/src/painting/gradient.dart": gradient,
    "package:flutter_web/src/services/raw_keyboard_fuchsia.dart": raw_keyboard_fuchsia,
    "package:flutter_web/src/services/raw_keyboard.dart": raw_keyboard,
    "package:flutter_web/src/services/raw_keyboard_linux.dart": raw_keyboard_linux,
    "package:flutter_web/src/services/keyboard_maps.dart": keyboard_maps,
    "package:flutter_web/src/services/keyboard_key.dart": keyboard_key,
    "package:flutter_web/src/services/raw_keyboard_macos.dart": raw_keyboard_macos,
    "package:flutter_web/src/services/raw_keyboard_android.dart": raw_keyboard_android,
    "package:flutter_web/src/gestures/drag.dart": drag$,
    "package:flutter_web/src/gestures/drag_details.dart": drag_details,
    "package:flutter_web/src/gestures/velocity_tracker.dart": velocity_tracker,
    "package:flutter_web/src/gestures/lsq_solver.dart": lsq_solver,
    "package:flutter_web/src/painting/matrix_utils.dart": matrix_utils,
    "package:flutter_web/src/services/clipboard.dart": clipboard,
    "package:flutter_web/src/services/system_navigator.dart": system_navigator,
    "package:flutter_web/src/widgets/icon_data.dart": icon_data,
    "package:flutter_web/src/gestures/multidrag.dart": multidrag,
    "package:flutter_web/src/painting/colors.dart": colors,
    "package:flutter_web/src/painting/clip.dart": clip,
    "package:flutter_web/src/widgets/scroll_simulation.dart": scroll_simulation,
    "package:flutter_web/src/animation/tween_sequence.dart": tween_sequence,
    "package:flutter_web/src/gestures/scale.dart": scale,
    "package:flutter_web/src/painting/border_radius.dart": border_radius,
    "package:flutter_web/src/painting/paint_utilities.dart": paint_utilities,
    "package:flutter_web/src/gestures/tap.dart": tap,
    "package:flutter_web/src/scheduler/debug.dart": debug$0,
    "package:flutter_web/src/painting/notched_shapes.dart": notched_shapes,
    "package:flutter_web/src/painting/geometry.dart": geometry,
    "package:flutter_web/src/gestures/force_press.dart": force_press,
    "package:flutter_web/src/gestures/long_press.dart": long_press,
    "package:flutter_web/src/painting/strut_style.dart": strut_style,
    "package:flutter_web/src/painting/text_style.dart": text_style,
    "package:flutter_web/src/scheduler/priority.dart": priority,
    "package:flutter_web/src/widgets/icon_theme_data.dart": icon_theme_data,
    "package:flutter_web/src/painting/debug.dart": debug$1,
    "package:flutter_web/src/gestures/multitap.dart": multitap,
    "package:flutter_web/src/semantics/binding.dart": binding$0,
    "package:flutter_web/src/semantics/debug.dart": debug$2,
    "package:flutter_web/src/painting/fractional_offset.dart": fractional_offset,
    "package:flutter_web/src/services/haptic_feedback.dart": haptic_feedback,
    "package:flutter_web/src/painting/box_shadow.dart": box_shadow,
    "package:flutter_web/src/painting/box_fit.dart": box_fit,
    "package:flutter_web/src/gestures/monodrag.dart": monodrag
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../services/text_editing.dart","../painting/alignment.dart","../painting/basic_types.dart","../services/system_chrome.dart","../services/system_channels.dart","../services/platform_channel.dart","../services/platform_messages.dart","../services/message_codecs.dart","../services/message_codec.dart","animation.dart","animations.dart","listener_helpers.dart","tween.dart","curves.dart","../gestures/arena.dart","../gestures/recognizer.dart","../gestures/eager.dart","../gestures/pointer_router.dart","../gestures/events.dart","../gestures/team.dart","../gestures/binding.dart","../gestures/pointer_signal_resolver.dart","../gestures/hit_test.dart","../gestures/debug.dart","../gestures/converter.dart","../util.dart","../gestures/constants.dart","../services/system_sound.dart","../painting/gradient.dart","../services/raw_keyboard.dart","../services/raw_keyboard_fuchsia.dart","../services/raw_keyboard_linux.dart","../services/keyboard_maps.dart","../services/keyboard_key.dart","../services/raw_keyboard_macos.dart","../services/raw_keyboard_android.dart","../gestures/drag.dart","../gestures/drag_details.dart","../gestures/velocity_tracker.dart","../gestures/lsq_solver.dart","../painting/matrix_utils.dart","../services/clipboard.dart","../services/system_navigator.dart","../widgets/icon_data.dart","../gestures/multidrag.dart","../painting/colors.dart","../painting/clip.dart","../widgets/scroll_simulation.dart","tween_sequence.dart","../gestures/scale.dart","../painting/border_radius.dart","../painting/paint_utilities.dart","../gestures/tap.dart","../scheduler/debug.dart","../painting/notched_shapes.dart","../painting/geometry.dart","../gestures/force_press.dart","../gestures/long_press.dart","../painting/strut_style.dart","../painting/text_style.dart","../scheduler/priority.dart","../widgets/icon_theme_data.dart","../painting/debug.dart","../gestures/multitap.dart","../semantics/binding.dart","../semantics/debug.dart","../painting/fractional_offset.dart","../services/haptic_feedback.dart","../painting/box_shadow.dart","../painting/box_fit.dart","../gestures/monodrag.dart"],"names":[],"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ACF,2BACA,2BACA,SAAS,+CACD,MAAT,sBAAS,OAAG;IAE1B;;;QAlDW;QACS;QACd;QACG;QACA;QACF;QACE;QACA;QACA;QACA;QACA;QACC;QACY;AACjB,oEACa,SAAS,QACd,IAAI,UACF,MAAM,YACJ,QAAQ,iBACH,aAAa,YAClB,QAAQ,YACR,kBACG,WAAW,eACX,WAAW,eACX,WAAW,aACb,SAAS,aACT,SAAS,aACT,SAAS,YACV,QAAQ;;EACnB;;;;;;;;gBA4FgC;;AACpC,UAAI,AAAU,SAAD,IAAI,QAAkB,YAAV,SAAS,EAAS;AACzC,cAAO;;AAEI,gCAAmC,sCAAkB,SAAS,EAAE;AAC7E,YAAO,8CACM,sBACL,mBACE,uBACE,8BACK,mBAAmB,SAC3B,wBACkB,2DACZ,SAAS,sBACA,sCACM,uCACF,mBAAmB,aAEpC,wBACC,4BACG,+BACA,4BACH,4BACG,wBACP,wBACO,+BACA,6BACF,2BACA,6BACE,wBACP,wBACO,6BACF,SAAS,6CACD,MAAT,sBAAS,OAAG;IAE1B;;;QAvFW;QACS;QACd;QACG;QACA;QACA;QACA;QACH;QACC;QACE;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACF;QACG;QACU;AACf,kEACa,SAAS,QACd,IAAI,UACF,MAAM,YACJ,QAAQ,iBACH,aAAa,SACrB,KAAK,cACA,UAAU,WACb,OAAO,QACV,iBACI,QAAQ,YACR,kBACG,WAAW,eACX,WAAW,YACd,QAAQ,eACL,WAAW,QAClB,IAAI,eACG,WAAW,eACX,WAAW,aACb,SAAS,aACT,SAAS,eACP,WAAW,QAClB,IAAI,eACG,WAAW,aACb,SAAS,YACV,QAAQ;;EACnB;;;;;;;;gBA+IgC;;AACpC,UAAI,AAAU,SAAD,IAAI,QAAkB,YAAV,SAAS,EAAS;AACzC,cAAO;;AAEI,gCAAmC,sCAAkB,SAAS,EAAE;AAC7E,YAAO,8CACM,sBACL,mBACE,uBACE,8BACK,mBAAmB,SAC3B,wBACkB,2DACZ,SAAS,sBACA,sCACM,uCACF,mBAAmB,aAEpC,wBACC,4BACG,+BACA,4BACH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,yBAChD,wBACC,yBACA,4BACG,+BACA,+BACA,wBACP,wBACO,+BACA,6BACF,2BACA,6BACE,wBACP,sBACK,SAAS,4CACD,MAAT,sBAAS,OAAG;IAE1B;;;QA3EW;QACL;QACc;QACd;QACG;QACA;QACH;QACC;QACE;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACC;QACS;AACd,iEACa,SAAS,WACX,OAAO,QACV,IAAI,UACF,MAAM,YACJ,QAAQ,iBACH,aAAa,WACnB,OAAO,QACV,gBACI,QAAQ,YACR,QAAQ,eACL,WAAW,eACX,WAAW,YACd,kBACG,WAAW,QAClB,IAAI,eACG,WAAW,eACX,WAAW,aACb,SAAS,aACT,SAAS,eACP,WAAW,QAClB,IAAI,aACC,SAAS,YACV,QAAQ;;EACnB;;;;;;;;gBAqG+B;;AACnC,UAAI,AAAU,SAAD,IAAI,QAAkB,YAAV,SAAS,EAAS;AACzC,cAAO;;AAEI,gCAAmC,sCAAkB,SAAS,EAAE;AAE7E,YAAO,6CACM,yBACF,oBACH,mBACE,uBACE,8BACK,mBAAmB,SAC3B,wBACkB,2DACZ,SAAS,sBACA,sCACM,uCACF,mBAAmB,aAEpC,wBACC,yBACA,4BACG,+BACA,+BACA,wBACP,wBACO,+BACA,6BACF,2BACA,6BACE,wBACP,yBACQ,gCACD,6BACF,SAAS,4CACD,MAAT,sBAAS,OAAG;IAE1B;;;QA9FW;QACL;QACc;QACd;QACG;QACA;QACA;QACA;QACH;QACC;QACE;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACH;QACC;QACG;QACS;AACd,iEACa,SAAS,WACX,OAAO,QACV,IAAI,UACF,MAAM,YACJ,QAAQ,iBACH,aAAa,SACrB,KAAK,cACA,UAAU,WACb,OAAO,QACV,gBACI,QAAQ,YACR,QAAQ,eACL,WAAW,eACX,WAAW,YACd,kBACG,WAAW,QAClB,IAAI,eACG,WAAW,eACX,WAAW,aACb,SAAS,aACT,SAAS,eACP,WAAW,QAClB,IAAI,gBACI,YAAY,eACb,WAAW,aACb,SAAS,YACV,QA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","file":"animation.ddc.js"}');
  // Exports:
  return {
    src__services__text_editing: text_editing,
    src__painting__alignment: alignment,
    src__painting__basic_types: basic_types,
    src__services__system_chrome: system_chrome,
    src__services__system_channels: system_channels,
    src__services__platform_channel: platform_channel,
    src__services__platform_messages: platform_messages,
    src__services__message_codecs: message_codecs,
    src__services__message_codec: message_codec,
    src__animation__animations: animations,
    src__animation__listener_helpers: listener_helpers,
    src__animation__animation: animation$,
    src__animation__tween: tween,
    src__animation__curves: curves,
    src__gestures__eager: eager,
    src__gestures__recognizer: recognizer,
    src__gestures__pointer_router: pointer_router,
    src__gestures__events: events,
    src__gestures__team: team,
    src__gestures__binding: binding$,
    src__gestures__pointer_signal_resolver: pointer_signal_resolver,
    src__gestures__hit_test: hit_test,
    src__gestures__debug: debug$,
    src__gestures__converter: converter,
    src__gestures__arena: arena,
    src__util: util,
    src__gestures__constants: constants,
    src__services__system_sound: system_sound,
    src__painting__gradient: gradient,
    src__services__raw_keyboard_fuchsia: raw_keyboard_fuchsia,
    src__services__raw_keyboard: raw_keyboard,
    src__services__raw_keyboard_linux: raw_keyboard_linux,
    src__services__keyboard_maps: keyboard_maps,
    src__services__keyboard_key: keyboard_key,
    src__services__raw_keyboard_macos: raw_keyboard_macos,
    src__services__raw_keyboard_android: raw_keyboard_android,
    src__gestures__drag: drag$,
    src__gestures__drag_details: drag_details,
    src__gestures__velocity_tracker: velocity_tracker,
    src__gestures__lsq_solver: lsq_solver,
    src__painting__matrix_utils: matrix_utils,
    src__services__clipboard: clipboard,
    src__services__system_navigator: system_navigator,
    src__widgets__icon_data: icon_data,
    src__gestures__multidrag: multidrag,
    src__painting__colors: colors,
    src__painting__clip: clip,
    src__widgets__scroll_simulation: scroll_simulation,
    src__animation__tween_sequence: tween_sequence,
    src__gestures__scale: scale,
    src__painting__border_radius: border_radius,
    src__painting__paint_utilities: paint_utilities,
    src__gestures__tap: tap,
    src__scheduler__debug: debug$0,
    src__painting__notched_shapes: notched_shapes,
    src__painting__geometry: geometry,
    src__gestures__force_press: force_press,
    src__gestures__long_press: long_press,
    src__painting__strut_style: strut_style,
    src__painting__text_style: text_style,
    src__scheduler__priority: priority,
    src__widgets__icon_theme_data: icon_theme_data,
    src__painting__debug: debug$1,
    src__gestures__multitap: multitap,
    src__semantics__binding: binding$0,
    src__semantics__debug: debug$2,
    src__painting__fractional_offset: fractional_offset,
    src__services__haptic_feedback: haptic_feedback,
    src__painting__box_shadow: box_shadow,
    src__painting__box_fit: box_fit,
    src__gestures__monodrag: monodrag
  };
});

//# sourceMappingURL=animation.ddc.js.map
