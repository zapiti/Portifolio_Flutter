define(['dart_sdk'], function(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const html = dart_sdk.html;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const convert = dart_sdk.convert;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const js_util = dart_sdk.js_util;
  const collection = dart_sdk.collection;
  const developer = dart_sdk.developer;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const engine = Object.create(dart.library);
  const ui = Object.create(dart.library);
  const $document = dartx.document;
  const $querySelectorAll = dartx.querySelectorAll;
  const $whereType = dartx.whereType;
  const $firstWhere = dartx.firstWhere;
  const $response = dartx.response;
  const $asByteData = dartx.asByteData;
  const $target = dartx.target;
  const $console = dartx.console;
  const $buffer = dartx.buffer;
  const $length = dartx.length;
  const $_get = dartx._get;
  const $setUint8 = dartx.setUint8;
  const $position = dartx.position;
  const $ceil = dartx.ceil;
  const $width = dartx.width;
  const $height = dartx.height;
  const $context2D = dartx.context2D;
  const $append = dartx.append;
  const $remove = dartx.remove;
  const $clear = dartx.clear;
  const $transformOrigin = dartx.transformOrigin;
  const $transform = dartx.transform;
  const $floor = dartx.floor;
  const $toDouble = dartx.toDouble;
  const $abs = dartx.abs;
  const $isNotEmpty = dartx.isNotEmpty;
  const $clone = dartx.clone;
  const $drawImageScaledFromSource = dartx.drawImageScaledFromSource;
  const $fillText = dartx.fillText;
  const $add = dartx.add;
  const $isEmpty = dartx.isEmpty;
  const $removeLast = dartx.removeLast;
  const $_set = dartx._set;
  const $substring = dartx.substring;
  const $location = dartx.location;
  const $addEventListener = dartx.addEventListener;
  const $removeEventListener = dartx.removeEventListener;
  const $pushState = dartx.pushState;
  const $replaceState = dartx.replaceState;
  const $asUint8List = dartx.asUint8List;
  const $keys = dartx.keys;
  const $fetch = dartx.fetch;
  const $putIfAbsent = dartx.putIfAbsent;
  const $first = dartx.first;
  const $values = dartx.values;
  const $noSuchMethod = dartx.noSuchMethod;
  const $leftShift = dartx['<<'];
  const $isNaN = dartx.isNaN;
  const $isFinite = dartx.isFinite;
  const $top = dartx.top;
  const $right = dartx.right;
  const $bottom = dartx.bottom;
  const $left = dartx.left;
  const $backgroundColor = dartx.backgroundColor;
  const $setAttribute = dartx.setAttribute;
  const $filter = dartx.filter;
  const $border = dartx.border;
  const $last = dartx.last;
  const $addAll = dartx.addAll;
  const $classes = dartx.classes;
  const $parent = dartx.parent;
  const $createElement = dartx.createElement;
  const $appendText = dartx.appendText;
  const $setProperty = dartx.setProperty;
  const $text = dartx.text;
  const $children = dartx.children;
  const $title = dartx.title;
  const $head = dartx.head;
  const $hasAttribute = dartx.hasAttribute;
  const $pointerEvents = dartx.pointerEvents;
  const $onResize = dartx.onResize;
  const $singleWhere = dartx.singleWhere;
  const $outerHtml = dartx.outerHtml;
  const $trim = dartx.trim;
  const $state = dartx.state;
  const $backgroundImage = dartx.backgroundImage;
  const $overflow = dartx.overflow;
  const $borderTopLeftRadius = dartx.borderTopLeftRadius;
  const $borderTopRightRadius = dartx.borderTopRightRadius;
  const $borderBottomRightRadius = dartx.borderBottomRightRadius;
  const $borderBottomLeftRadius = dartx.borderBottomLeftRadius;
  const $toInt = dartx.toInt;
  const $backgroundRepeat = dartx.backgroundRepeat;
  const $backgroundSize = dartx.backgroundSize;
  const $onLoad = dartx.onLoad;
  const $onError = dartx.onError;
  const $decode = dartx.decode;
  const $codeUnits = dartx.codeUnits;
  const $containsKey = dartx.containsKey;
  const $forEach = dartx.forEach;
  const $client = dartx.client;
  const $runtimeType = dartx.runtimeType;
  const $times = dartx['*'];
  const $toString = dartx.toString;
  const $join = dartx.join;
  const $removeAttribute = dartx.removeAttribute;
  const $fontSize = dartx.fontSize;
  const $attributes = dartx.attributes;
  const $touchAction = dartx.touchAction;
  const $scrollTop = dartx.scrollTop;
  const $scrollLeft = dartx.scrollLeft;
  const $overflowY = dartx.overflowY;
  const $overflowX = dartx.overflowX;
  const $color = dartx.color;
  const $outline = dartx.outline;
  const $getAttribute = dartx.getAttribute;
  const $contains = dartx.contains;
  const $offset = dartx.offset;
  const $toList = dartx.toList;
  const $setRange = dartx.setRange;
  const $elementSizeInBytes = dartx.elementSizeInBytes;
  const $offsetInBytes = dartx.offsetInBytes;
  const $insertAll = dartx.insertAll;
  const $lengthInBytes = dartx.lengthInBytes;
  const $setUint16 = dartx.setUint16;
  const $setUint32 = dartx.setUint32;
  const $setInt32 = dartx.setInt32;
  const $setInt64 = dartx.setInt64;
  const $setFloat64 = dartx.setFloat64;
  const $modulo = dartx['%'];
  const $getUint8 = dartx.getUint8;
  const $getUint16 = dartx.getUint16;
  const $getUint32 = dartx.getUint32;
  const $getInt32 = dartx.getInt32;
  const $getInt64 = dartx.getInt64;
  const $getFloat64 = dartx.getFloat64;
  const $asInt32List = dartx.asInt32List;
  const $asInt64List = dartx.asInt64List;
  const $asFloat64List = dartx.asFloat64List;
  const $transition = dartx.transition;
  const $boxShadow = dartx.boxShadow;
  const $opacity = dartx.opacity;
  const $compareTo = dartx.compareTo;
  const $sort = dartx.sort;
  const $toLowerCase = dartx.toLowerCase;
  const $hashCode = dartx.hashCode;
  const $borderRadius = dartx.borderRadius;
  const $fontWeight = dartx.fontWeight;
  const $textDecoration = dartx.textDecoration;
  const $attachShadow = dartx.attachShadow;
  const $innerHtml = dartx.innerHtml;
  const $removeRange = dartx.removeRange;
  const $load = dartx.load;
  const $visibility = dartx.visibility;
  const $fontFamily = dartx.fontFamily;
  const $fontStyle = dartx.fontStyle;
  const $offsetWidth = dartx.offsetWidth;
  const $map = dartx.map;
  const $truncate = dartx.truncate;
  const $toStringAsFixed = dartx.toStringAsFixed;
  const $endsWith = dartx.endsWith;
  const $letterSpacing = dartx.letterSpacing;
  const $wordSpacing = dartx.wordSpacing;
  const $lineHeight = dartx.lineHeight;
  const $display = dartx.display;
  const $flexDirection = dartx.flexDirection;
  const $alignItems = dartx.alignItems;
  const $margin = dartx.margin;
  const $padding = dartx.padding;
  const $whiteSpace = dartx.whiteSpace;
  const $flex = dartx.flex;
  const $overflowWrap = dartx.overflowWrap;
  const $textOverflow = dartx.textOverflow;
  const $getClientRects = dartx.getClientRects;
  const $removeAt = dartx.removeAt;
  const $rightShift = dartx['>>'];
  const $codeUnitAt = dartx.codeUnitAt;
  const $onBlur = dartx.onBlur;
  const $onSelectionChange = dartx.onSelectionChange;
  const $onInput = dartx.onInput;
  const $textAlign = dartx.textAlign;
  const $font = dartx.font;
  const $clamp = dartx.clamp;
  const $isInfinite = dartx.isInfinite;
  const $requestAnimationFrame = dartx.requestAnimationFrame;
  const $startsWith = dartx.startsWith;
  const $round = dartx.round;
  const $sublist = dartx.sublist;
  const $zIndex = dartx.zIndex;
  const $trimRight = dartx.trimRight;
  const $split = dartx.split;
  const $take = dartx.take;
  const $single = dartx.single;
  const $insert = dartx.insert;
  const $deltaX = dartx.deltaX;
  const $deltaY = dartx.deltaY;
  const $deltaMode = dartx.deltaMode;
  const $cast = dartx.cast;
  const $fold = dartx.fold;
  const $direction = dartx.direction;
  const $textDecorationColor = dartx.textDecorationColor;
  const $alignContent = dartx.alignContent;
  const $background = dartx.background;
  const $resize = dartx.resize;
  const $textShadow = dartx.textShadow;
  const $isNegative = dartx.isNegative;
  const $iterator = dartx.iterator;
  const $toRadixString = dartx.toRadixString;
  const $padLeft = dartx.padLeft;
  const $_equals = dartx._equals;
  let dynamicTobool = () => (dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))();
  let VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  let FutureOfByteData = () => (FutureOfByteData = dart.constFn(async.Future$(typed_data.ByteData)))();
  let JSArrayOfElement = () => (JSArrayOfElement = dart.constFn(_interceptors.JSArray$(html.Element)))();
  let JSArrayOfString = () => (JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))();
  let JSArrayOf_SaveStackEntry = () => (JSArrayOf_SaveStackEntry = dart.constFn(_interceptors.JSArray$(engine._SaveStackEntry)))();
  let ListOf_SaveClipEntry = () => (ListOf_SaveClipEntry = dart.constFn(core.List$(engine._SaveClipEntry)))();
  let JSArrayOf_SaveClipEntry = () => (JSArrayOf_SaveClipEntry = dart.constFn(_interceptors.JSArray$(engine._SaveClipEntry)))();
  let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  let CompleterOfvoid = () => (CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))();
  let EventToNull = () => (EventToNull = dart.constFn(dart.fnType(core.Null, [html.Event])))();
  let JSArrayOfJsObject = () => (JSArrayOfJsObject = dart.constFn(_interceptors.JSArray$(js.JsObject)))();
  let JSArrayOfint = () => (JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))();
  let JSArrayOfdouble = () => (JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))();
  let JsArrayOfdouble = () => (JsArrayOfdouble = dart.constFn(js.JsArray$(core.double)))();
  let JSArrayOfJsArrayOfdouble = () => (JSArrayOfJsArrayOfdouble = dart.constFn(_interceptors.JSArray$(JsArrayOfdouble())))();
  let ByteDataToNull = () => (ByteDataToNull = dart.constFn(dart.fnType(core.Null, [typed_data.ByteData])))();
  let MapOfString$String = () => (MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))();
  let MapOfMapOfString$String$JsObject = () => (MapOfMapOfString$String$JsObject = dart.constFn(core.Map$(MapOfString$String(), js.JsObject)))();
  let IdentityMapOfString$MapOfMapOfString$String$JsObject = () => (IdentityMapOfString$MapOfMapOfString$String$JsObject = dart.constFn(_js_helper.IdentityMap$(core.String, MapOfMapOfString$String$JsObject())))();
  let FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
  let JSArrayOfFutureOfvoid = () => (JSArrayOfFutureOfvoid = dart.constFn(_interceptors.JSArray$(FutureOfvoid())))();
  let IdentityMapOfString$String = () => (IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))();
  let MapOfString$dynamic = () => (MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))();
  let JSArrayOfUint8List = () => (JSArrayOfUint8List = dart.constFn(_interceptors.JSArray$(typed_data.Uint8List)))();
  let LinkedMapOfMapOfString$String$JsObject = () => (LinkedMapOfMapOfString$String$JsObject = dart.constFn(_js_helper.LinkedMap$(MapOfString$String(), js.JsObject)))();
  let VoidToMapOfMapOfString$String$JsObject = () => (VoidToMapOfMapOfString$String$JsObject = dart.constFn(dart.fnType(MapOfMapOfString$String$JsObject(), [])))();
  let FutureOfFrameInfo = () => (FutureOfFrameInfo = dart.constFn(async.Future$(ui.FrameInfo)))();
  let JSArrayOfLayer = () => (JSArrayOfLayer = dart.constFn(_interceptors.JSArray$(engine.Layer)))();
  let ListOfPersistedContainerSurface = () => (ListOfPersistedContainerSurface = dart.constFn(core.List$(engine.PersistedContainerSurface)))();
  let ListOfPathCommand = () => (ListOfPathCommand = dart.constFn(core.List$(engine.PathCommand)))();
  let IdentityMapOfString$dynamic = () => (IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))();
  let JSArrayOfOffset = () => (JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))();
  let ListOfConic = () => (ListOfConic = dart.constFn(core.List$(engine.Conic)))();
  let VoidTobool = () => (VoidTobool = dart.constFn(dart.fnType(core.bool, [])))();
  let JSArrayOf_SaveElementStackEntry = () => (JSArrayOf_SaveElementStackEntry = dart.constFn(_interceptors.JSArray$(engine._SaveElementStackEntry)))();
  let ListOfElement = () => (ListOfElement = dart.constFn(core.List$(html.Element)))();
  let TimerToNull = () => (TimerToNull = dart.constFn(dart.fnType(core.Null, [async.Timer])))();
  let ElementTobool = () => (ElementTobool = dart.constFn(dart.fnType(core.bool, [html.Element])))();
  let JSArrayOfnum = () => (JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))();
  let EventTodynamic = () => (EventTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html.Event])))();
  let JSArrayOfList = () => (JSArrayOfList = dart.constFn(_interceptors.JSArray$(core.List)))();
  let CompleterOfFrameInfo = () => (CompleterOfFrameInfo = dart.constFn(async.Completer$(ui.FrameInfo)))();
  let dynamicToNull = () => (dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))();
  let Uint8ListToNull = () => (Uint8ListToNull = dart.constFn(dart.fnType(core.Null, [typed_data.Uint8List])))();
  let ByteDataTovoid = () => (ByteDataTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.ByteData])))();
  let FnToString = () => (FnToString = dart.constFn(dart.fnType(core.String, [ByteDataTovoid()])))();
  let intToElement = () => (intToElement = dart.constFn(dart.fnType(html.Element, [core.int])))();
  let IdentityMapOfString$intToElement = () => (IdentityMapOfString$intToElement = dart.constFn(_js_helper.IdentityMap$(core.String, intToElement())))();
  let IdentityMapOfint$Element = () => (IdentityMapOfint$Element = dart.constFn(_js_helper.IdentityMap$(core.int, html.Element)))();
  let LinkedHashSetOfint = () => (LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))();
  let IdentityMapOfint$bool = () => (IdentityMapOfint$bool = dart.constFn(_js_helper.IdentityMap$(core.int, core.bool)))();
  let StringAndFnToNull = () => (StringAndFnToNull = dart.constFn(dart.fnType(core.Null, [core.String, EventTodynamic()])))();
  let IdentityMapOfString$EventTodynamic = () => (IdentityMapOfString$EventTodynamic = dart.constFn(_js_helper.IdentityMap$(core.String, EventTodynamic())))();
  let WheelEventToNull = () => (WheelEventToNull = dart.constFn(dart.fnType(core.Null, [html.WheelEvent])))();
  let JSArrayOfPointerData = () => (JSArrayOfPointerData = dart.constFn(_interceptors.JSArray$(ui.PointerData)))();
  let JSArrayOfPointerEvent = () => (JSArrayOfPointerEvent = dart.constFn(_interceptors.JSArray$(html.PointerEvent)))();
  let ListOfPointerData = () => (ListOfPointerData = dart.constFn(core.List$(ui.PointerData)))();
  let JSArrayOfPaintCommand = () => (JSArrayOfPaintCommand = dart.constFn(_interceptors.JSArray$(engine.PaintCommand)))();
  let ObjectTovoid = () => (ObjectTovoid = dart.constFn(dart.fnType(dart.void, [core.Object])))();
  let JSArrayOfPathCommand = () => (JSArrayOfPathCommand = dart.constFn(_interceptors.JSArray$(engine.PathCommand)))();
  let JSArrayOfRect = () => (JSArrayOfRect = dart.constFn(_interceptors.JSArray$(ui.Rect)))();
  let JSArrayOfMatrix4 = () => (JSArrayOfMatrix4 = dart.constFn(_interceptors.JSArray$(engine.Matrix4)))();
  let GestureModeToNull = () => (GestureModeToNull = dart.constFn(dart.fnType(core.Null, [engine.GestureMode])))();
  let LinkedMapOfRole$RoleManager = () => (LinkedMapOfRole$RoleManager = dart.constFn(_js_helper.LinkedMap$(engine.Role, engine.RoleManager)))();
  let IdentityMapOfint$SemanticsObject = () => (IdentityMapOfint$SemanticsObject = dart.constFn(_js_helper.IdentityMap$(core.int, engine.SemanticsObject)))();
  let JSArrayOfSemanticsObject = () => (JSArrayOfSemanticsObject = dart.constFn(_interceptors.JSArray$(engine.SemanticsObject)))();
  let JSArrayOfVoidTovoid = () => (JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(VoidTovoid())))();
  let VoidToDateTime = () => (VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))();
  let GestureModeTovoid = () => (GestureModeTovoid = dart.constFn(dart.fnType(dart.void, [engine.GestureMode])))();
  let JSArrayOfGestureModeTovoid = () => (JSArrayOfGestureModeTovoid = dart.constFn(_interceptors.JSArray$(GestureModeTovoid())))();
  let intAndSemanticsObjectToNull = () => (intAndSemanticsObjectToNull = dart.constFn(dart.fnType(core.Null, [core.int, engine.SemanticsObject])))();
  let dynamicAnddynamicToNull = () => (dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))();
  let JsArrayOfnum = () => (JsArrayOfnum = dart.constFn(js.JsArray$(core.num)))();
  let JSArrayOfCanvasShadow = () => (JSArrayOfCanvasShadow = dart.constFn(_interceptors.JSArray$(engine.CanvasShadow)))();
  let JSArrayOfPersistedSurface = () => (JSArrayOfPersistedSurface = dart.constFn(_interceptors.JSArray$(engine.PersistedSurface)))();
  let FrameReferenceOfPersistedSurface = () => (FrameReferenceOfPersistedSurface = dart.constFn(engine.FrameReference$(engine.PersistedSurface)))();
  let PersistedSurfaceTovoid = () => (PersistedSurfaceTovoid = dart.constFn(dart.fnType(dart.void, [engine.PersistedSurface])))();
  let JSArrayOf_PersistedSurfaceMatch = () => (JSArrayOf_PersistedSurfaceMatch = dart.constFn(_interceptors.JSArray$(engine._PersistedSurfaceMatch)))();
  let _PersistedSurfaceMatchAnd_PersistedSurfaceMatchToint = () => (_PersistedSurfaceMatchAnd_PersistedSurfaceMatchToint = dart.constFn(dart.fnType(core.int, [engine._PersistedSurfaceMatch, engine._PersistedSurfaceMatch])))();
  let LinkedMapOfPersistedSurface$PersistedSurface = () => (LinkedMapOfPersistedSurface$PersistedSurface = dart.constFn(_js_helper.LinkedMap$(engine.PersistedSurface, engine.PersistedSurface)))();
  let LinkedHashSetOfPersistedSurface = () => (LinkedHashSetOfPersistedSurface = dart.constFn(collection.LinkedHashSet$(engine.PersistedSurface)))();
  let EventTovoid = () => (EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))();
  let FrameReferenceOfbool = () => (FrameReferenceOfbool = dart.constFn(engine.FrameReference$(core.bool)))();
  let JSArrayOfEventTodynamic = () => (JSArrayOfEventTodynamic = dart.constFn(_interceptors.JSArray$(EventTodynamic())))();
  let JSArrayOf_HistoryEntry = () => (JSArrayOf_HistoryEntry = dart.constFn(_interceptors.JSArray$(engine._HistoryEntry)))();
  let voidTovoid = () => (voidTovoid = dart.constFn(dart.fnType(dart.void, [dart.void])))();
  let ListOfString = () => (ListOfString = dart.constFn(core.List$(core.String)))();
  let FontFaceToFontFaceSet = () => (FontFaceToFontFaceSet = dart.constFn(dart.fnType(html.FontFaceSet, [html.FontFace])))();
  let StringToString = () => (StringToString = dart.constFn(dart.fnType(core.String, [core.String])))();
  let LinkedMapOfParagraphGeometricStyle$ParagraphRuler = () => (LinkedMapOfParagraphGeometricStyle$ParagraphRuler = dart.constFn(_js_helper.LinkedMap$(engine.ParagraphGeometricStyle, engine.ParagraphRuler)))();
  let ParagraphGeometricStyleAndParagraphRulerToNull = () => (ParagraphGeometricStyleAndParagraphRulerToNull = dart.constFn(dart.fnType(core.Null, [engine.ParagraphGeometricStyle, engine.ParagraphRuler])))();
  let ParagraphRulerAndParagraphRulerToint = () => (ParagraphRulerAndParagraphRulerToint = dart.constFn(dart.fnType(core.int, [engine.ParagraphRuler, engine.ParagraphRuler])))();
  let intTobool = () => (intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))();
  let JSArrayOfTextBox = () => (JSArrayOfTextBox = dart.constFn(_interceptors.JSArray$(ui.TextBox)))();
  let VoidTodynamic = () => (VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))();
  let ListOfMeasurementResult = () => (ListOfMeasurementResult = dart.constFn(core.List$(engine.MeasurementResult)))();
  let IdentityMapOfString$ListOfMeasurementResult = () => (IdentityMapOfString$ListOfMeasurementResult = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfMeasurementResult())))();
  let JSArrayOfNode = () => (JSArrayOfNode = dart.constFn(_interceptors.JSArray$(html.Node)))();
  let JSArrayOfMeasurementResult = () => (JSArrayOfMeasurementResult = dart.constFn(_interceptors.JSArray$(engine.MeasurementResult)))();
  let StreamSubscriptionOfEvent = () => (StreamSubscriptionOfEvent = dart.constFn(async.StreamSubscription$(html.Event)))();
  let JSArrayOfStreamSubscriptionOfEvent = () => (JSArrayOfStreamSubscriptionOfEvent = dart.constFn(_interceptors.JSArray$(StreamSubscriptionOfEvent())))();
  let ListOfdouble = () => (ListOfdouble = dart.constFn(core.List$(core.double)))();
  let dynamicTovoid = () => (dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))();
  let voidToNull = () => (voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))();
  let SkCanvasToNull = () => (SkCanvasToNull = dart.constFn(dart.fnType(core.Null, [engine.SkCanvas])))();
  let FutureOfServiceExtensionResponse = () => (FutureOfServiceExtensionResponse = dart.constFn(async.Future$(developer.ServiceExtensionResponse)))();
  let StringAndMapOfString$StringToFutureOfServiceExtensionResponse = () => (StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(FutureOfServiceExtensionResponse(), [core.String, MapOfString$String()])))();
  let numToNull = () => (numToNull = dart.constFn(dart.fnType(core.Null, [core.num])))();
  let StringAndStringToString = () => (StringAndStringToString = dart.constFn(dart.fnType(core.String, [core.String, core.String])))();
  let JsObjectToNull = () => (JsObjectToNull = dart.constFn(dart.fnType(core.Null, [js.JsObject])))();
  let JSArrayOfbool = () => (JSArrayOfbool = dart.constFn(_interceptors.JSArray$(core.bool)))();
  let LinkedHashSetOfString = () => (LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))();
  let WheelEventTovoid = () => (WheelEventTovoid = dart.constFn(dart.fnType(dart.void, [html.WheelEvent])))();
  let ListOfint = () => (ListOfint = dart.constFn(core.List$(core.int)))();
  let _PaintRequestAnd_PaintRequestToint = () => (_PaintRequestAnd_PaintRequestToint = dart.constFn(dart.fnType(core.int, [engine._PaintRequest, engine._PaintRequest])))();
  let JSArrayOf_PaintRequest = () => (JSArrayOf_PaintRequest = dart.constFn(_interceptors.JSArray$(engine._PaintRequest)))();
  let JSArrayOfFrameReference = () => (JSArrayOfFrameReference = dart.constFn(_interceptors.JSArray$(engine.FrameReference)))();
  let LinkedMapOfPersistedSurface$_DebugSurfaceStats = () => (LinkedMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_js_helper.LinkedMap$(engine.PersistedSurface, engine._DebugSurfaceStats)))();
  let VoidTo_DebugSurfaceStats = () => (VoidTo_DebugSurfaceStats = dart.constFn(dart.fnType(engine._DebugSurfaceStats, [])))();
  let CanvasElementToint = () => (CanvasElementToint = dart.constFn(dart.fnType(core.int, [html.CanvasElement])))();
  let intAndintToint = () => (intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))();
  let IdentityMapOfString$bool = () => (IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))();
  let JSArrayOf_LogMessage = () => (JSArrayOf_LogMessage = dart.constFn(_interceptors.JSArray$(engine._LogMessage)))();
  let SemanticsObjectToIncrementable = () => (SemanticsObjectToIncrementable = dart.constFn(dart.fnType(engine.Incrementable, [engine.SemanticsObject])))();
  let SemanticsObjectToScrollable = () => (SemanticsObjectToScrollable = dart.constFn(dart.fnType(engine.Scrollable, [engine.SemanticsObject])))();
  let SemanticsObjectToLabelAndValue = () => (SemanticsObjectToLabelAndValue = dart.constFn(dart.fnType(engine.LabelAndValue, [engine.SemanticsObject])))();
  let SemanticsObjectToTappable = () => (SemanticsObjectToTappable = dart.constFn(dart.fnType(engine.Tappable, [engine.SemanticsObject])))();
  let SemanticsObjectToTextField = () => (SemanticsObjectToTextField = dart.constFn(dart.fnType(engine.TextField, [engine.SemanticsObject])))();
  let SemanticsObjectToCheckable = () => (SemanticsObjectToCheckable = dart.constFn(dart.fnType(engine.Checkable, [engine.SemanticsObject])))();
  let SemanticsObjectToImageRoleManager = () => (SemanticsObjectToImageRoleManager = dart.constFn(dart.fnType(engine.ImageRoleManager, [engine.SemanticsObject])))();
  let SemanticsObjectToLiveRegion = () => (SemanticsObjectToLiveRegion = dart.constFn(dart.fnType(engine.LiveRegion, [engine.SemanticsObject])))();
  let SemanticsObjectToRoleManager = () => (SemanticsObjectToRoleManager = dart.constFn(dart.fnType(engine.RoleManager, [engine.SemanticsObject])))();
  let LinkedMapOfRole$SemanticsObjectToRoleManager = () => (LinkedMapOfRole$SemanticsObjectToRoleManager = dart.constFn(_js_helper.LinkedMap$(engine.Role, SemanticsObjectToRoleManager())))();
  let JSArrayOfBitmapCanvas = () => (JSArrayOfBitmapCanvas = dart.constFn(_interceptors.JSArray$(engine.BitmapCanvas)))();
  let doubleAnddoubleAndPicture__ToPersistedStandardPicture = () => (doubleAnddoubleAndPicture__ToPersistedStandardPicture = dart.constFn(dart.fnType(engine.PersistedStandardPicture, [core.double, core.double, ui.Picture, core.int])))();
  let MapOfPersistedSurface$_DebugSurfaceStats = () => (MapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(core.Map$(engine.PersistedSurface, engine._DebugSurfaceStats)))();
  let JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats = () => (JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_interceptors.JSArray$(MapOfPersistedSurface$_DebugSurfaceStats())))();
  let UnicodePropertyLookupOfCharProperty = () => (UnicodePropertyLookupOfCharProperty = dart.constFn(engine.UnicodePropertyLookup$(engine.CharProperty)))();
  let UnicodeRangeOfCharProperty = () => (UnicodeRangeOfCharProperty = dart.constFn(engine.UnicodeRange$(engine.CharProperty)))();
  let JSArrayOfSubpath = () => (JSArrayOfSubpath = dart.constFn(_interceptors.JSArray$(engine.Subpath)))();
  let ListOfSubpath = () => (ListOfSubpath = dart.constFn(core.List$(engine.Subpath)))();
  let JSArrayOfPersistedContainerSurface = () => (JSArrayOfPersistedContainerSurface = dart.constFn(_interceptors.JSArray$(engine.PersistedContainerSurface)))();
  let PersistedContainerSurfaceToType = () => (PersistedContainerSurfaceToType = dart.constFn(dart.fnType(core.Type, [engine.PersistedContainerSurface])))();
  let JSArrayOfShadow = () => (JSArrayOfShadow = dart.constFn(_interceptors.JSArray$(ui.Shadow)))();
  let JSArrayOfSemanticsNodeUpdate = () => (JSArrayOfSemanticsNodeUpdate = dart.constFn(_interceptors.JSArray$(engine.SemanticsNodeUpdate)))();
  let CodecTovoid = () => (CodecTovoid = dart.constFn(dart.fnType(dart.void, [ui.Codec])))();
  let FnToString$ = () => (FnToString$ = dart.constFn(dart.fnType(core.String, [CodecTovoid()])))();
  let CodecToFutureOfFrameInfo = () => (CodecToFutureOfFrameInfo = dart.constFn(dart.fnType(FutureOfFrameInfo(), [ui.Codec])))();
  let FrameInfoTovoid = () => (FrameInfoTovoid = dart.constFn(dart.fnType(dart.void, [ui.FrameInfo])))();
  let voidTodynamic = () => (voidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.void])))();
  let FutureOfNull = () => (FutureOfNull = dart.constFn(async.Future$(core.Null)))();
  let VoidToFutureOfNull = () => (VoidToFutureOfNull = dart.constFn(dart.fnType(FutureOfNull(), [])))();
  const CT = Object.create(null);
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: ui.PaintingStyle.prototype,
        [_name$]: "PaintingStyle.stroke",
        index: 1
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: ui.PaintingStyle.prototype,
        [_name$]: "PaintingStyle.fill",
        index: 0
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: engine.BrowserEngine.prototype,
        [_name$0]: "BrowserEngine.blink",
        index: 0
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: engine.BrowserEngine.prototype,
        [_name$0]: "BrowserEngine.webkit",
        index: 1
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: engine.BrowserEngine.prototype,
        [_name$0]: "BrowserEngine.firefox",
        index: 2
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: engine.BrowserEngine.prototype,
        [_name$0]: "BrowserEngine.unknown",
        index: 3
      });
    },
    get C6() {
      return C6 = dart.constList([C2 || CT.C2, C3 || CT.C3, C4 || CT.C4, C5 || CT.C5], engine.BrowserEngine);
    },
    get C7() {
      return C7 = dart.const({
        __proto__: engine.OperatingSystem.prototype,
        [_name$0]: "OperatingSystem.iOs",
        index: 0
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: engine.OperatingSystem.prototype,
        [_name$0]: "OperatingSystem.android",
        index: 1
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: engine.OperatingSystem.prototype,
        [_name$0]: "OperatingSystem.linux",
        index: 2
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: engine.OperatingSystem.prototype,
        [_name$0]: "OperatingSystem.windows",
        index: 3
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: engine.OperatingSystem.prototype,
        [_name$0]: "OperatingSystem.macOs",
        index: 4
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: engine.OperatingSystem.prototype,
        [_name$0]: "OperatingSystem.unknown",
        index: 5
      });
    },
    get C13() {
      return C13 = dart.constList([C7 || CT.C7, C8 || CT.C8, C9 || CT.C9, C10 || CT.C10, C11 || CT.C11, C12 || CT.C12], engine.OperatingSystem);
    },
    get C14() {
      return C14 = dart.const({
        __proto__: engine.BrowserPlatformLocation.prototype
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: ui.ImageByteFormat.prototype,
        [_name$]: "ImageByteFormat.rawRgba",
        index: 0
      });
    },
    get C16() {
      return C16 = dart.const(new _js_helper.PrivateSymbol.new('_getNextFrame', _getNextFrame));
    },
    get C17() {
      return C17 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$]: "Clip.hardEdge",
        index: 1
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$]: "Clip.antiAlias",
        index: 2
      });
    },
    get C19() {
      return C19 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$]: "Clip.antiAliasWithSaveLayer",
        index: 3
      });
    },
    get C20() {
      return C20 = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$]: "Clip.none",
        index: 0
      });
    },
    get C21() {
      return C21 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C22() {
      return C22 = dart.const(new _js_helper.PrivateSymbol.new('_addTexture', _addTexture));
    },
    get C23() {
      return C23 = dart.const(new _js_helper.PrivateSymbol.new('_surfaceStack', _surfaceStack));
    },
    get C24() {
      return C24 = dart.const(new _js_helper.PrivateSymbol.new('_addSurface', _addSurface));
    },
    get C25() {
      return C25 = dart.const(new _js_helper.PrivateSymbol.new('_adoptSurface', _adoptSurface));
    },
    get C26() {
      return C26 = dart.const(new _js_helper.PrivateSymbol.new('_currentSurface', _currentSurface));
    },
    get C27() {
      return C27 = dart.const(new _js_helper.PrivateSymbol.new('_addChildScene', _addChildScene));
    },
    get C28() {
      return C28 = dart.const(new _js_helper.PrivateSymbol.new('_pushSurface', _pushSurface));
    },
    get C29() {
      return C29 = dart.const(new _js_helper.PrivateSymbol.new('_addPlatformView', _addPlatformView));
    },
    get C30() {
      return C30 = dart.const(new _js_helper.PrivateSymbol.new('_addPerformanceOverlay', _addPerformanceOverlay));
    },
    get C31() {
      return C31 = dart.const(new _js_helper.PrivateSymbol.new('_persistedScene', _persistedScene));
    },
    get C32() {
      return C32 = dart.const({
        __proto__: ui.PathFillType.prototype,
        [_name$]: "PathFillType.nonZero",
        index: 0
      });
    },
    get C33() {
      return C33 = dart.const({
        __proto__: ui.PathFillType.prototype,
        [_name$]: "PathFillType.evenOdd",
        index: 1
      });
    },
    get C34() {
      return C34 = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C35() {
      return C35 = dart.const(new _js_helper.PrivateSymbol.new('_currentY', _currentY));
    },
    get C36() {
      return C36 = dart.const(new _js_helper.PrivateSymbol.new('_ensurePathStarted', _ensurePathStarted));
    },
    get C37() {
      return C37 = dart.const(new _js_helper.PrivateSymbol.new('_setCurrentPoint', _setCurrentPoint));
    },
    get C38() {
      return C38 = dart.const(new _js_helper.PrivateSymbol.new('_extendWithPathAndMatrix', _extendWithPathAndMatrix));
    },
    get C39() {
      return C39 = dart.const(new _js_helper.PrivateSymbol.new('_commands', _commands));
    },
    get C40() {
      return C40 = dart.const(new _js_helper.PrivateSymbol.new('_openNewSubpath', _openNewSubpath));
    },
    get C41() {
      return C41 = dart.const(new _js_helper.PrivateSymbol.new('_currentSubpath', _currentSubpath));
    },
    get C42() {
      return C42 = dart.const(new _js_helper.PrivateSymbol.new('_addPath', _addPath));
    },
    get C43() {
      return C43 = dart.const(new _js_helper.PrivateSymbol.new('_currentX', _currentX));
    },
    get C44() {
      return C44 = dart.const(new _js_helper.PrivateSymbol.new('_addPathWithMatrix', _addPathWithMatrix));
    },
    get C45() {
      return C45 = dart.const(new _js_helper.PrivateSymbol.new('_extendWithPath', _extendWithPath));
    },
    get C46() {
      return C46 = dart.const(new _js_helper.PrivateSymbol.new('_canvas', _canvas));
    },
    get C47() {
      return C47 = dart.const(new _js_helper.PrivateSymbol.new('_isRecording', _isRecording));
    },
    get C48() {
      return C48 = dart.const(new _js_helper.PrivateSymbol.new('_canvas=', _canvas_));
    },
    get C49() {
      return C49 = dart.const(new _js_helper.PrivateSymbol.new('_isRecording=', _isRecording_));
    },
    get C50() {
      return C50 = dart.const({
        __proto__: ui.ClipOp.prototype,
        [_name$]: "ClipOp.intersect",
        index: 1
      });
    },
    get C51() {
      return C51 = dart.const({
        __proto__: ui.ClipOp.prototype,
        [_name$]: "ClipOp.difference",
        index: 0
      });
    },
    get C52() {
      return C52 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 100000
      });
    },
    get C53() {
      return C53 = dart.const({
        __proto__: engine.JSONMethodCodec.prototype
      });
    },
    get C54() {
      return C54 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C55() {
      return C55 = dart.const(new _js_helper.PrivateSymbol.new('_durationMillis', _durationMillis));
    },
    get C56() {
      return C56 = dart.fn(engine._noopCallback, ByteDataTovoid());
    },
    get C57() {
      return C57 = dart.const({
        __proto__: engine.JSONMessageCodec.prototype
      });
    },
    get C58() {
      return C58 = dart.const({
        __proto__: engine.PointerSupportDetector.prototype
      });
    },
    get C59() {
      return C59 = dart.const({
        __proto__: engine.PaintSave.prototype
      });
    },
    get C60() {
      return C60 = dart.const({
        __proto__: engine.PaintRestore.prototype
      });
    },
    get C61() {
      return C61 = dart.fn(core.print, ObjectTovoid());
    },
    get C62() {
      return C62 = dart.constList([1], core.int);
    },
    get C63() {
      return C63 = dart.constList([2], core.int);
    },
    get C64() {
      return C64 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 5000000
      });
    },
    get C65() {
      return C65 = dart.const({
        __proto__: engine.StandardMessageCodec.prototype
      });
    },
    get C66() {
      return C66 = dart.const({
        __proto__: engine._CheckableKind.prototype,
        [_name$0]: "_CheckableKind.checkbox",
        index: 0
      });
    },
    get C67() {
      return C67 = dart.const({
        __proto__: engine._CheckableKind.prototype,
        [_name$0]: "_CheckableKind.radio",
        index: 1
      });
    },
    get C68() {
      return C68 = dart.const({
        __proto__: engine._CheckableKind.prototype,
        [_name$0]: "_CheckableKind.toggle",
        index: 2
      });
    },
    get C69() {
      return C69 = dart.constList([C66 || CT.C66, C67 || CT.C67, C68 || CT.C68], engine._CheckableKind);
    },
    get C70() {
      return C70 = dart.const({
        __proto__: engine.GestureMode.prototype,
        [_name$0]: "GestureMode.browserGestures",
        index: 1
      });
    },
    get C71() {
      return C71 = dart.const({
        __proto__: engine.GestureMode.prototype,
        [_name$0]: "GestureMode.pointerEvents",
        index: 0
      });
    },
    get C72() {
      return C72 = dart.const({
        __proto__: engine.Role.prototype,
        [_name$0]: "Role.incrementable",
        index: 0
      });
    },
    get C73() {
      return C73 = dart.const({
        __proto__: engine.Role.prototype,
        [_name$0]: "Role.scrollable",
        index: 1
      });
    },
    get C74() {
      return C74 = dart.const({
        __proto__: engine.Role.prototype,
        [_name$0]: "Role.labelAndValue",
        index: 2
      });
    },
    get C75() {
      return C75 = dart.const({
        __proto__: engine.Role.prototype,
        [_name$0]: "Role.tappable",
        index: 3
      });
    },
    get C76() {
      return C76 = dart.const({
        __proto__: engine.Role.prototype,
        [_name$0]: "Role.textField",
        index: 4
      });
    },
    get C77() {
      return C77 = dart.const({
        __proto__: engine.Role.prototype,
        [_name$0]: "Role.checkable",
        index: 5
      });
    },
    get C78() {
      return C78 = dart.const({
        __proto__: engine.Role.prototype,
        [_name$0]: "Role.image",
        index: 6
      });
    },
    get C79() {
      return C79 = dart.const({
        __proto__: engine.Role.prototype,
        [_name$0]: "Role.liveRegion",
        index: 7
      });
    },
    get C80() {
      return C80 = dart.constList([C72 || CT.C72, C73 || CT.C73, C74 || CT.C74, C75 || CT.C75, C76 || CT.C76, C77 || CT.C77, C78 || CT.C78, C79 || CT.C79], engine.Role);
    },
    get C81() {
      return C81 = dart.const({
        __proto__: engine.AccessibilityMode.prototype,
        [_name$0]: "AccessibilityMode.unknown",
        index: 0
      });
    },
    get C82() {
      return C82 = dart.const({
        __proto__: engine.AccessibilityMode.prototype,
        [_name$0]: "AccessibilityMode.known",
        index: 1
      });
    },
    get C83() {
      return C83 = dart.constList([C81 || CT.C81, C82 || CT.C82], engine.AccessibilityMode);
    },
    get C84() {
      return C84 = dart.constList([C71 || CT.C71, C70 || CT.C70], engine.GestureMode);
    },
    get C85() {
      return C85 = dart.constList(["click", "touchstart", "touchend"], core.String);
    },
    get C86() {
      return C86 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C87() {
      return C87 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    },
    get C88() {
      return C88 = dart.constList(["pointerdown", "pointermove", "pointerup", "pointercancel", "touchstart", "touchend", "touchmove", "touchcancel", "mousedown", "mousemove", "mouseup"], core.String);
    },
    get C89() {
      return C89 = dart.constList(["click", "scroll"], core.String);
    },
    get C90() {
      return C90 = dart.const({
        __proto__: engine.StringCodec.prototype
      });
    },
    get C91() {
      return C91 = dart.const({
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Message corrupted"
      });
    },
    get C92() {
      return C92 = dart.const({
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid method call"
      });
    },
    get C93() {
      return C93 = dart.const({
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Expected envelope, got nothing"
      });
    },
    get C94() {
      return C94 = dart.const({
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid envelope"
      });
    },
    get C95() {
      return C95 = dart.constList([], engine.CanvasShadow);
    },
    get C96() {
      return C96 = dart.constMap(engine.PersistedSurface, engine.PersistedSurface, []);
    },
    get C97() {
      return C97 = dart.const({
        __proto__: engine.PersistedSurfaceState.prototype,
        [_name$0]: "PersistedSurfaceState.created",
        index: 0
      });
    },
    get C98() {
      return C98 = dart.const({
        __proto__: engine.PersistedSurfaceState.prototype,
        [_name$0]: "PersistedSurfaceState.active",
        index: 1
      });
    },
    get C99() {
      return C99 = dart.const({
        __proto__: engine.PersistedSurfaceState.prototype,
        [_name$0]: "PersistedSurfaceState.pendingRetention",
        index: 2
      });
    },
    get C100() {
      return C100 = dart.const({
        __proto__: engine.PersistedSurfaceState.prototype,
        [_name$0]: "PersistedSurfaceState.pendingUpdate",
        index: 3
      });
    },
    get C101() {
      return C101 = dart.const({
        __proto__: engine.PersistedSurfaceState.prototype,
        [_name$0]: "PersistedSurfaceState.released",
        index: 4
      });
    },
    get C102() {
      return C102 = dart.constList([C97 || CT.C97, C98 || CT.C98, C99 || CT.C99, C100 || CT.C100, C101 || CT.C101], engine.PersistedSurfaceState);
    },
    get C103() {
      return C103 = dart.constMap(core.String, core.String, []);
    },
    get C104() {
      return C104 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 2000000
      });
    },
    get C105() {
      return C105 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 50000
      });
    },
    get C106() {
      return C106 = dart.const({
        __proto__: engine.LineBreakType.prototype,
        [_name$0]: "LineBreakType.opportunity",
        index: 0
      });
    },
    get C107() {
      return C107 = dart.const({
        __proto__: engine.LineBreakType.prototype,
        [_name$0]: "LineBreakType.mandatory",
        index: 1
      });
    },
    get C108() {
      return C108 = dart.const({
        __proto__: engine.LineBreakType.prototype,
        [_name$0]: "LineBreakType.endOfText",
        index: 2
      });
    },
    get C109() {
      return C109 = dart.constList([C106 || CT.C106, C107 || CT.C107, C108 || CT.C108], engine.LineBreakType);
    },
    get C111() {
      return C111 = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name$]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C110() {
      return C110 = dart.const({
        __proto__: ui.TextPosition.prototype,
        [TextPosition_affinity]: C111 || CT.C111,
        [TextPosition_offset]: 0
      });
    },
    get C112() {
      return C112 = dart.fn(engine._whitespacePredicate, intTobool());
    },
    get C113() {
      return C113 = dart.fn(engine._newlinePredicate, intTobool());
    },
    get C114() {
      return C114 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.center",
        index: 2
      });
    },
    get C115() {
      return C115 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.right",
        index: 1
      });
    },
    get C116() {
      return C116 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.start",
        index: 4
      });
    },
    get C117() {
      return C117 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.end",
        index: 5
      });
    },
    get C118() {
      return C118 = dart.constList([], ui.TextBox);
    },
    get C119() {
      return C119 = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$]: "BoxHeightStyle.tight",
        index: 0
      });
    },
    get C120() {
      return C120 = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name$]: "BoxWidthStyle.tight",
        index: 0
      });
    },
    get C121() {
      return C121 = dart.const({
        __proto__: engine._ComparisonResult.prototype,
        [_name$0]: "_ComparisonResult.inside",
        index: 0
      });
    },
    get C122() {
      return C122 = dart.const({
        __proto__: engine._ComparisonResult.prototype,
        [_name$0]: "_ComparisonResult.higher",
        index: 1
      });
    },
    get C123() {
      return C123 = dart.const({
        __proto__: engine._ComparisonResult.prototype,
        [_name$0]: "_ComparisonResult.lower",
        index: 2
      });
    },
    get C124() {
      return C124 = dart.constList([C121 || CT.C121, C122 || CT.C122, C123 || CT.C123], engine._ComparisonResult);
    },
    get C125() {
      return C125 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.DoubleQuote",
        index: 0
      });
    },
    get C126() {
      return C126 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.SingleQuote",
        index: 1
      });
    },
    get C127() {
      return C127 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.HebrewLetter",
        index: 2
      });
    },
    get C128() {
      return C128 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.CR",
        index: 3
      });
    },
    get C129() {
      return C129 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.LF",
        index: 4
      });
    },
    get C130() {
      return C130 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.Newline",
        index: 5
      });
    },
    get C131() {
      return C131 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.Extend",
        index: 6
      });
    },
    get C132() {
      return C132 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.RegionalIndicator",
        index: 7
      });
    },
    get C133() {
      return C133 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.Format",
        index: 8
      });
    },
    get C134() {
      return C134 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.Katakana",
        index: 9
      });
    },
    get C135() {
      return C135 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.ALetter",
        index: 10
      });
    },
    get C136() {
      return C136 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.MidLetter",
        index: 11
      });
    },
    get C137() {
      return C137 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.MidNum",
        index: 12
      });
    },
    get C138() {
      return C138 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.MidNumLet",
        index: 13
      });
    },
    get C139() {
      return C139 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.Numeric",
        index: 14
      });
    },
    get C140() {
      return C140 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.ExtendNumLet",
        index: 15
      });
    },
    get C141() {
      return C141 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.ZWJ",
        index: 16
      });
    },
    get C142() {
      return C142 = dart.const({
        __proto__: engine.CharProperty.prototype,
        [_name$0]: "CharProperty.WSegSpace",
        index: 17
      });
    },
    get C143() {
      return C143 = dart.constList([C125 || CT.C125, C126 || CT.C126, C127 || CT.C127, C128 || CT.C128, C129 || CT.C129, C130 || CT.C130, C131 || CT.C131, C132 || CT.C132, C133 || CT.C133, C134 || CT.C134, C135 || CT.C135, C136 || CT.C136, C137 || CT.C137, C138 || CT.C138, C139 || CT.C139, C140 || CT.C140, C141 || CT.C141, C142 || CT.C142], engine.CharProperty);
    },
    get C144() {
      return C144 = dart.const({
        __proto__: engine._FindBreakDirection.prototype,
        [_name$0]: "_FindBreakDirection.forward",
        index: 0
      });
    },
    get C145() {
      return C145 = dart.const({
        __proto__: engine._FindBreakDirection.prototype,
        [_name$0]: "_FindBreakDirection.backward",
        index: 1
      });
    },
    get C146() {
      return C146 = dart.constList([C144 || CT.C144, C145 || CT.C145], engine._FindBreakDirection);
    },
    get C147() {
      return C147 = dart.const({
        __proto__: engine.InputType.prototype,
        [_name$0]: "InputType.text",
        index: 0
      });
    },
    get C148() {
      return C148 = dart.const({
        __proto__: engine.InputType.prototype,
        [_name$0]: "InputType.multiline",
        index: 1
      });
    },
    get C149() {
      return C149 = dart.constList([C147 || CT.C147, C148 || CT.C148], engine.InputType);
    },
    get C150() {
      return C150 = dart.const({
        __proto__: engine.ElementType.prototype,
        [_name$0]: "ElementType.input",
        index: 0
      });
    },
    get C151() {
      return C151 = dart.const({
        __proto__: engine.ElementType.prototype,
        [_name$0]: "ElementType.textarea",
        index: 1
      });
    },
    get C152() {
      return C152 = dart.const({
        __proto__: engine.ElementType.prototype,
        [_name$0]: "ElementType.contentEditable",
        index: 2
      });
    },
    get C153() {
      return C153 = dart.constList([C150 || CT.C150, C151 || CT.C151, C152 || CT.C152], engine.ElementType);
    },
    get C154() {
      return C154 = dart.fn(engine._emptyCallback, dynamicTovoid());
    },
    get C156() {
      return C156 = dart.const({
        __proto__: ui.Locale.prototype,
        [Locale__countryCode]: "US",
        [Locale_scriptCode]: null,
        [Locale__languageCode]: "en"
      });
    },
    get C155() {
      return C155 = dart.constList([C156 || CT.C156], ui.Locale);
    },
    get C157() {
      return C157 = dart.const({
        __proto__: ui.AccessibilityFeatures.prototype,
        [AccessibilityFeatures__index]: 0
      });
    },
    get C158() {
      return C158 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.srcOver",
        index: 3
      });
    },
    get C159() {
      return C159 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.srcIn",
        index: 5
      });
    },
    get C160() {
      return C160 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.srcOut",
        index: 7
      });
    },
    get C161() {
      return C161 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.srcATop",
        index: 9
      });
    },
    get C162() {
      return C162 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.dstOver",
        index: 4
      });
    },
    get C163() {
      return C163 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.dstIn",
        index: 6
      });
    },
    get C164() {
      return C164 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.dstOut",
        index: 8
      });
    },
    get C165() {
      return C165 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.dstATop",
        index: 10
      });
    },
    get C166() {
      return C166 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.plus",
        index: 12
      });
    },
    get C167() {
      return C167 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.src",
        index: 1
      });
    },
    get C168() {
      return C168 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.xor",
        index: 11
      });
    },
    get C169() {
      return C169 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.multiply",
        index: 24
      });
    },
    get C170() {
      return C170 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.modulate",
        index: 13
      });
    },
    get C171() {
      return C171 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.screen",
        index: 14
      });
    },
    get C172() {
      return C172 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.overlay",
        index: 15
      });
    },
    get C173() {
      return C173 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.darken",
        index: 16
      });
    },
    get C174() {
      return C174 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.lighten",
        index: 17
      });
    },
    get C175() {
      return C175 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.colorDodge",
        index: 18
      });
    },
    get C176() {
      return C176 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.colorBurn",
        index: 19
      });
    },
    get C177() {
      return C177 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.hardLight",
        index: 20
      });
    },
    get C178() {
      return C178 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.softLight",
        index: 21
      });
    },
    get C179() {
      return C179 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.difference",
        index: 22
      });
    },
    get C180() {
      return C180 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.exclusion",
        index: 23
      });
    },
    get C181() {
      return C181 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.hue",
        index: 25
      });
    },
    get C182() {
      return C182 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.saturation",
        index: 26
      });
    },
    get C183() {
      return C183 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.color",
        index: 27
      });
    },
    get C184() {
      return C184 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.luminosity",
        index: 28
      });
    },
    get C185() {
      return C185 = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name$]: "StrokeCap.butt",
        index: 0
      });
    },
    get C186() {
      return C186 = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name$]: "StrokeCap.round",
        index: 1
      });
    },
    get C187() {
      return C187 = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name$]: "StrokeCap.square",
        index: 2
      });
    },
    get C188() {
      return C188 = dart.const({
        __proto__: ui.StrokeJoin.prototype,
        [_name$]: "StrokeJoin.round",
        index: 1
      });
    },
    get C189() {
      return C189 = dart.const({
        __proto__: ui.StrokeJoin.prototype,
        [_name$]: "StrokeJoin.bevel",
        index: 2
      });
    },
    get C190() {
      return C190 = dart.const({
        __proto__: ui.StrokeJoin.prototype,
        [_name$]: "StrokeJoin.miter",
        index: 0
      });
    },
    get C191() {
      return C191 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.clear",
        index: 0
      });
    },
    get C192() {
      return C192 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$]: "BlendMode.dst",
        index: 2
      });
    },
    get C193() {
      return C193 = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$]: "BlurStyle.normal",
        index: 0
      });
    },
    get C194() {
      return C194 = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$]: "BlurStyle.solid",
        index: 1
      });
    },
    get C195() {
      return C195 = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$]: "BlurStyle.outer",
        index: 2
      });
    },
    get C196() {
      return C196 = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$]: "BlurStyle.inner",
        index: 3
      });
    },
    get C197() {
      return C197 = dart.constList(["dart:async-patch", "dart:async", "dart:_runtime"], core.String);
    },
    get C198() {
      return C198 = dart.const({
        __proto__: engine.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C65 || CT.C65
      });
    },
    get C199() {
      return C199 = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$]: "TextDecorationStyle.dashed",
        index: 3
      });
    },
    get C200() {
      return C200 = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$]: "TextDecorationStyle.dotted",
        index: 2
      });
    },
    get C201() {
      return C201 = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$]: "TextDecorationStyle.double",
        index: 1
      });
    },
    get C202() {
      return C202 = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$]: "TextDecorationStyle.solid",
        index: 0
      });
    },
    get C203() {
      return C203 = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$]: "TextDecorationStyle.wavy",
        index: 4
      });
    },
    get C204() {
      return C204 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.left",
        index: 0
      });
    },
    get C205() {
      return C205 = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.justify",
        index: 3
      });
    },
    get C206() {
      return C206 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$]: "TextDirection.ltr",
        index: 1
      });
    },
    get C207() {
      return C207 = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$]: "TextDirection.rtl",
        index: 0
      });
    },
    get C208() {
      return C208 = dart.constList(["serif", "sans-serif", "cursive", "fantasy", "monospace"], core.String);
    },
    get C209() {
      return C209 = dart.constList([0, 4, 12, 1, 5, 13, 3, 7, 15], core.int);
    },
    get C210() {
      return C210 = dart.const({
        __proto__: engine.MethodCall.prototype,
        [MethodCall_arguments]: null,
        [MethodCall_method]: "popRoute"
      });
    },
    get C211() {
      return C211 = dart.fn(engine.standardPictureFactory, doubleAnddoubleAndPicture__ToPersistedStandardPicture());
    },
    get C214() {
      return C214 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C129 || CT.C129,
        [UnicodeRange_end]: 10,
        [UnicodeRange_start]: 10
      });
    },
    get C215() {
      return C215 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C130 || CT.C130,
        [UnicodeRange_end]: 12,
        [UnicodeRange_start]: 11
      });
    },
    get C216() {
      return C216 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C128 || CT.C128,
        [UnicodeRange_end]: 13,
        [UnicodeRange_start]: 13
      });
    },
    get C217() {
      return C217 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C142 || CT.C142,
        [UnicodeRange_end]: 32,
        [UnicodeRange_start]: 32
      });
    },
    get C218() {
      return C218 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C125 || CT.C125,
        [UnicodeRange_end]: 34,
        [UnicodeRange_start]: 34
      });
    },
    get C219() {
      return C219 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C126 || CT.C126,
        [UnicodeRange_end]: 39,
        [UnicodeRange_start]: 39
      });
    },
    get C220() {
      return C220 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 44,
        [UnicodeRange_start]: 44
      });
    },
    get C221() {
      return C221 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C138 || CT.C138,
        [UnicodeRange_end]: 46,
        [UnicodeRange_start]: 46
      });
    },
    get C222() {
      return C222 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 57,
        [UnicodeRange_start]: 48
      });
    },
    get C223() {
      return C223 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C136 || CT.C136,
        [UnicodeRange_end]: 58,
        [UnicodeRange_start]: 58
      });
    },
    get C224() {
      return C224 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 59,
        [UnicodeRange_start]: 59
      });
    },
    get C225() {
      return C225 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 90,
        [UnicodeRange_start]: 65
      });
    },
    get C226() {
      return C226 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C140 || CT.C140,
        [UnicodeRange_end]: 95,
        [UnicodeRange_start]: 95
      });
    },
    get C227() {
      return C227 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 122,
        [UnicodeRange_start]: 97
      });
    },
    get C228() {
      return C228 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C130 || CT.C130,
        [UnicodeRange_end]: 133,
        [UnicodeRange_start]: 133
      });
    },
    get C229() {
      return C229 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 170,
        [UnicodeRange_start]: 170
      });
    },
    get C230() {
      return C230 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 173,
        [UnicodeRange_start]: 173
      });
    },
    get C231() {
      return C231 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 181,
        [UnicodeRange_start]: 181
      });
    },
    get C232() {
      return C232 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C136 || CT.C136,
        [UnicodeRange_end]: 183,
        [UnicodeRange_start]: 183
      });
    },
    get C233() {
      return C233 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 186,
        [UnicodeRange_start]: 186
      });
    },
    get C234() {
      return C234 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 214,
        [UnicodeRange_start]: 192
      });
    },
    get C235() {
      return C235 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 246,
        [UnicodeRange_start]: 216
      });
    },
    get C236() {
      return C236 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 727,
        [UnicodeRange_start]: 248
      });
    },
    get C237() {
      return C237 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 740,
        [UnicodeRange_start]: 734
      });
    },
    get C238() {
      return C238 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 767,
        [UnicodeRange_start]: 748
      });
    },
    get C239() {
      return C239 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 879,
        [UnicodeRange_start]: 768
      });
    },
    get C240() {
      return C240 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 884,
        [UnicodeRange_start]: 880
      });
    },
    get C241() {
      return C241 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 887,
        [UnicodeRange_start]: 886
      });
    },
    get C242() {
      return C242 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 893,
        [UnicodeRange_start]: 890
      });
    },
    get C243() {
      return C243 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 894,
        [UnicodeRange_start]: 894
      });
    },
    get C244() {
      return C244 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 895,
        [UnicodeRange_start]: 895
      });
    },
    get C245() {
      return C245 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 902,
        [UnicodeRange_start]: 902
      });
    },
    get C246() {
      return C246 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C136 || CT.C136,
        [UnicodeRange_end]: 903,
        [UnicodeRange_start]: 903
      });
    },
    get C247() {
      return C247 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 906,
        [UnicodeRange_start]: 904
      });
    },
    get C248() {
      return C248 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 908,
        [UnicodeRange_start]: 908
      });
    },
    get C249() {
      return C249 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 929,
        [UnicodeRange_start]: 910
      });
    },
    get C250() {
      return C250 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1013,
        [UnicodeRange_start]: 931
      });
    },
    get C251() {
      return C251 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1153,
        [UnicodeRange_start]: 1015
      });
    },
    get C252() {
      return C252 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1161,
        [UnicodeRange_start]: 1155
      });
    },
    get C253() {
      return C253 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1327,
        [UnicodeRange_start]: 1162
      });
    },
    get C254() {
      return C254 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1366,
        [UnicodeRange_start]: 1329
      });
    },
    get C255() {
      return C255 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1369,
        [UnicodeRange_start]: 1369
      });
    },
    get C256() {
      return C256 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1372,
        [UnicodeRange_start]: 1371
      });
    },
    get C257() {
      return C257 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1374,
        [UnicodeRange_start]: 1374
      });
    },
    get C258() {
      return C258 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1416,
        [UnicodeRange_start]: 1376
      });
    },
    get C259() {
      return C259 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 1417,
        [UnicodeRange_start]: 1417
      });
    },
    get C260() {
      return C260 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1469,
        [UnicodeRange_start]: 1425
      });
    },
    get C261() {
      return C261 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1471,
        [UnicodeRange_start]: 1471
      });
    },
    get C262() {
      return C262 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1474,
        [UnicodeRange_start]: 1473
      });
    },
    get C263() {
      return C263 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1477,
        [UnicodeRange_start]: 1476
      });
    },
    get C264() {
      return C264 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1479,
        [UnicodeRange_start]: 1479
      });
    },
    get C265() {
      return C265 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 1514,
        [UnicodeRange_start]: 1488
      });
    },
    get C266() {
      return C266 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 1522,
        [UnicodeRange_start]: 1519
      });
    },
    get C267() {
      return C267 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1523,
        [UnicodeRange_start]: 1523
      });
    },
    get C268() {
      return C268 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C136 || CT.C136,
        [UnicodeRange_end]: 1524,
        [UnicodeRange_start]: 1524
      });
    },
    get C269() {
      return C269 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 1541,
        [UnicodeRange_start]: 1536
      });
    },
    get C270() {
      return C270 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 1549,
        [UnicodeRange_start]: 1548
      });
    },
    get C271() {
      return C271 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1562,
        [UnicodeRange_start]: 1552
      });
    },
    get C272() {
      return C272 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 1564,
        [UnicodeRange_start]: 1564
      });
    },
    get C273() {
      return C273 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1610,
        [UnicodeRange_start]: 1568
      });
    },
    get C274() {
      return C274 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1631,
        [UnicodeRange_start]: 1611
      });
    },
    get C275() {
      return C275 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 1641,
        [UnicodeRange_start]: 1632
      });
    },
    get C276() {
      return C276 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 1643,
        [UnicodeRange_start]: 1643
      });
    },
    get C277() {
      return C277 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 1644,
        [UnicodeRange_start]: 1644
      });
    },
    get C278() {
      return C278 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1647,
        [UnicodeRange_start]: 1646
      });
    },
    get C279() {
      return C279 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1648,
        [UnicodeRange_start]: 1648
      });
    },
    get C280() {
      return C280 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1747,
        [UnicodeRange_start]: 1649
      });
    },
    get C281() {
      return C281 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1749,
        [UnicodeRange_start]: 1749
      });
    },
    get C282() {
      return C282 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1756,
        [UnicodeRange_start]: 1750
      });
    },
    get C283() {
      return C283 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 1757,
        [UnicodeRange_start]: 1757
      });
    },
    get C284() {
      return C284 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1764,
        [UnicodeRange_start]: 1759
      });
    },
    get C285() {
      return C285 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1766,
        [UnicodeRange_start]: 1765
      });
    },
    get C286() {
      return C286 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1768,
        [UnicodeRange_start]: 1767
      });
    },
    get C287() {
      return C287 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1773,
        [UnicodeRange_start]: 1770
      });
    },
    get C288() {
      return C288 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1775,
        [UnicodeRange_start]: 1774
      });
    },
    get C289() {
      return C289 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 1785,
        [UnicodeRange_start]: 1776
      });
    },
    get C290() {
      return C290 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1788,
        [UnicodeRange_start]: 1786
      });
    },
    get C291() {
      return C291 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1791,
        [UnicodeRange_start]: 1791
      });
    },
    get C292() {
      return C292 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 1807,
        [UnicodeRange_start]: 1807
      });
    },
    get C293() {
      return C293 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1808,
        [UnicodeRange_start]: 1808
      });
    },
    get C294() {
      return C294 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1809,
        [UnicodeRange_start]: 1809
      });
    },
    get C295() {
      return C295 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1839,
        [UnicodeRange_start]: 1810
      });
    },
    get C296() {
      return C296 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1866,
        [UnicodeRange_start]: 1840
      });
    },
    get C297() {
      return C297 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1957,
        [UnicodeRange_start]: 1869
      });
    },
    get C298() {
      return C298 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 1968,
        [UnicodeRange_start]: 1958
      });
    },
    get C299() {
      return C299 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 1969,
        [UnicodeRange_start]: 1969
      });
    },
    get C300() {
      return C300 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 1993,
        [UnicodeRange_start]: 1984
      });
    },
    get C301() {
      return C301 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2026,
        [UnicodeRange_start]: 1994
      });
    },
    get C302() {
      return C302 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2035,
        [UnicodeRange_start]: 2027
      });
    },
    get C303() {
      return C303 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2037,
        [UnicodeRange_start]: 2036
      });
    },
    get C304() {
      return C304 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 2040,
        [UnicodeRange_start]: 2040
      });
    },
    get C305() {
      return C305 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2042,
        [UnicodeRange_start]: 2042
      });
    },
    get C306() {
      return C306 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2045,
        [UnicodeRange_start]: 2045
      });
    },
    get C307() {
      return C307 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2069,
        [UnicodeRange_start]: 2048
      });
    },
    get C308() {
      return C308 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2073,
        [UnicodeRange_start]: 2070
      });
    },
    get C309() {
      return C309 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2074,
        [UnicodeRange_start]: 2074
      });
    },
    get C310() {
      return C310 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2083,
        [UnicodeRange_start]: 2075
      });
    },
    get C311() {
      return C311 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2084,
        [UnicodeRange_start]: 2084
      });
    },
    get C312() {
      return C312 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2087,
        [UnicodeRange_start]: 2085
      });
    },
    get C313() {
      return C313 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2088,
        [UnicodeRange_start]: 2088
      });
    },
    get C314() {
      return C314 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2093,
        [UnicodeRange_start]: 2089
      });
    },
    get C315() {
      return C315 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2136,
        [UnicodeRange_start]: 2112
      });
    },
    get C316() {
      return C316 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2139,
        [UnicodeRange_start]: 2137
      });
    },
    get C317() {
      return C317 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2154,
        [UnicodeRange_start]: 2144
      });
    },
    get C318() {
      return C318 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2228,
        [UnicodeRange_start]: 2208
      });
    },
    get C319() {
      return C319 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2237,
        [UnicodeRange_start]: 2230
      });
    },
    get C320() {
      return C320 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2273,
        [UnicodeRange_start]: 2259
      });
    },
    get C321() {
      return C321 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 2274,
        [UnicodeRange_start]: 2274
      });
    },
    get C322() {
      return C322 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2307,
        [UnicodeRange_start]: 2275
      });
    },
    get C323() {
      return C323 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2361,
        [UnicodeRange_start]: 2308
      });
    },
    get C324() {
      return C324 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2364,
        [UnicodeRange_start]: 2362
      });
    },
    get C325() {
      return C325 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2365,
        [UnicodeRange_start]: 2365
      });
    },
    get C326() {
      return C326 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2383,
        [UnicodeRange_start]: 2366
      });
    },
    get C327() {
      return C327 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2384,
        [UnicodeRange_start]: 2384
      });
    },
    get C328() {
      return C328 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2391,
        [UnicodeRange_start]: 2385
      });
    },
    get C329() {
      return C329 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2401,
        [UnicodeRange_start]: 2392
      });
    },
    get C330() {
      return C330 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2403,
        [UnicodeRange_start]: 2402
      });
    },
    get C331() {
      return C331 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 2415,
        [UnicodeRange_start]: 2406
      });
    },
    get C332() {
      return C332 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2432,
        [UnicodeRange_start]: 2417
      });
    },
    get C333() {
      return C333 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2435,
        [UnicodeRange_start]: 2433
      });
    },
    get C334() {
      return C334 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2444,
        [UnicodeRange_start]: 2437
      });
    },
    get C335() {
      return C335 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2448,
        [UnicodeRange_start]: 2447
      });
    },
    get C336() {
      return C336 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2472,
        [UnicodeRange_start]: 2451
      });
    },
    get C337() {
      return C337 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2480,
        [UnicodeRange_start]: 2474
      });
    },
    get C338() {
      return C338 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2482,
        [UnicodeRange_start]: 2482
      });
    },
    get C339() {
      return C339 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2489,
        [UnicodeRange_start]: 2486
      });
    },
    get C340() {
      return C340 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2492,
        [UnicodeRange_start]: 2492
      });
    },
    get C341() {
      return C341 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2493,
        [UnicodeRange_start]: 2493
      });
    },
    get C342() {
      return C342 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2500,
        [UnicodeRange_start]: 2494
      });
    },
    get C343() {
      return C343 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2504,
        [UnicodeRange_start]: 2503
      });
    },
    get C344() {
      return C344 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2509,
        [UnicodeRange_start]: 2507
      });
    },
    get C345() {
      return C345 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2510,
        [UnicodeRange_start]: 2510
      });
    },
    get C346() {
      return C346 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2519,
        [UnicodeRange_start]: 2519
      });
    },
    get C347() {
      return C347 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2525,
        [UnicodeRange_start]: 2524
      });
    },
    get C348() {
      return C348 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2529,
        [UnicodeRange_start]: 2527
      });
    },
    get C349() {
      return C349 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2531,
        [UnicodeRange_start]: 2530
      });
    },
    get C350() {
      return C350 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 2543,
        [UnicodeRange_start]: 2534
      });
    },
    get C351() {
      return C351 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2545,
        [UnicodeRange_start]: 2544
      });
    },
    get C352() {
      return C352 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2556,
        [UnicodeRange_start]: 2556
      });
    },
    get C353() {
      return C353 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2558,
        [UnicodeRange_start]: 2558
      });
    },
    get C354() {
      return C354 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2563,
        [UnicodeRange_start]: 2561
      });
    },
    get C355() {
      return C355 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2570,
        [UnicodeRange_start]: 2565
      });
    },
    get C356() {
      return C356 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2576,
        [UnicodeRange_start]: 2575
      });
    },
    get C357() {
      return C357 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2600,
        [UnicodeRange_start]: 2579
      });
    },
    get C358() {
      return C358 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2608,
        [UnicodeRange_start]: 2602
      });
    },
    get C359() {
      return C359 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2611,
        [UnicodeRange_start]: 2610
      });
    },
    get C360() {
      return C360 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2614,
        [UnicodeRange_start]: 2613
      });
    },
    get C361() {
      return C361 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2617,
        [UnicodeRange_start]: 2616
      });
    },
    get C362() {
      return C362 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2620,
        [UnicodeRange_start]: 2620
      });
    },
    get C363() {
      return C363 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2626,
        [UnicodeRange_start]: 2622
      });
    },
    get C364() {
      return C364 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2632,
        [UnicodeRange_start]: 2631
      });
    },
    get C365() {
      return C365 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2637,
        [UnicodeRange_start]: 2635
      });
    },
    get C366() {
      return C366 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2641,
        [UnicodeRange_start]: 2641
      });
    },
    get C367() {
      return C367 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2652,
        [UnicodeRange_start]: 2649
      });
    },
    get C368() {
      return C368 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2654,
        [UnicodeRange_start]: 2654
      });
    },
    get C369() {
      return C369 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 2671,
        [UnicodeRange_start]: 2662
      });
    },
    get C370() {
      return C370 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2673,
        [UnicodeRange_start]: 2672
      });
    },
    get C371() {
      return C371 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2676,
        [UnicodeRange_start]: 2674
      });
    },
    get C372() {
      return C372 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2677,
        [UnicodeRange_start]: 2677
      });
    },
    get C373() {
      return C373 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2691,
        [UnicodeRange_start]: 2689
      });
    },
    get C374() {
      return C374 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2701,
        [UnicodeRange_start]: 2693
      });
    },
    get C375() {
      return C375 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2705,
        [UnicodeRange_start]: 2703
      });
    },
    get C376() {
      return C376 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2728,
        [UnicodeRange_start]: 2707
      });
    },
    get C377() {
      return C377 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2736,
        [UnicodeRange_start]: 2730
      });
    },
    get C378() {
      return C378 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2739,
        [UnicodeRange_start]: 2738
      });
    },
    get C379() {
      return C379 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2745,
        [UnicodeRange_start]: 2741
      });
    },
    get C380() {
      return C380 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2748,
        [UnicodeRange_start]: 2748
      });
    },
    get C381() {
      return C381 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2749,
        [UnicodeRange_start]: 2749
      });
    },
    get C382() {
      return C382 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2757,
        [UnicodeRange_start]: 2750
      });
    },
    get C383() {
      return C383 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2761,
        [UnicodeRange_start]: 2759
      });
    },
    get C384() {
      return C384 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2765,
        [UnicodeRange_start]: 2763
      });
    },
    get C385() {
      return C385 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2768,
        [UnicodeRange_start]: 2768
      });
    },
    get C386() {
      return C386 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2785,
        [UnicodeRange_start]: 2784
      });
    },
    get C387() {
      return C387 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2787,
        [UnicodeRange_start]: 2786
      });
    },
    get C388() {
      return C388 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 2799,
        [UnicodeRange_start]: 2790
      });
    },
    get C389() {
      return C389 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2809,
        [UnicodeRange_start]: 2809
      });
    },
    get C390() {
      return C390 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2815,
        [UnicodeRange_start]: 2810
      });
    },
    get C391() {
      return C391 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2819,
        [UnicodeRange_start]: 2817
      });
    },
    get C392() {
      return C392 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2828,
        [UnicodeRange_start]: 2821
      });
    },
    get C393() {
      return C393 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2832,
        [UnicodeRange_start]: 2831
      });
    },
    get C394() {
      return C394 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2856,
        [UnicodeRange_start]: 2835
      });
    },
    get C395() {
      return C395 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2864,
        [UnicodeRange_start]: 2858
      });
    },
    get C396() {
      return C396 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2867,
        [UnicodeRange_start]: 2866
      });
    },
    get C397() {
      return C397 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2873,
        [UnicodeRange_start]: 2869
      });
    },
    get C398() {
      return C398 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2876,
        [UnicodeRange_start]: 2876
      });
    },
    get C399() {
      return C399 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2877,
        [UnicodeRange_start]: 2877
      });
    },
    get C400() {
      return C400 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2884,
        [UnicodeRange_start]: 2878
      });
    },
    get C401() {
      return C401 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2888,
        [UnicodeRange_start]: 2887
      });
    },
    get C402() {
      return C402 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2893,
        [UnicodeRange_start]: 2891
      });
    },
    get C403() {
      return C403 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2903,
        [UnicodeRange_start]: 2902
      });
    },
    get C404() {
      return C404 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2909,
        [UnicodeRange_start]: 2908
      });
    },
    get C405() {
      return C405 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2913,
        [UnicodeRange_start]: 2911
      });
    },
    get C406() {
      return C406 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2915,
        [UnicodeRange_start]: 2914
      });
    },
    get C407() {
      return C407 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 2927,
        [UnicodeRange_start]: 2918
      });
    },
    get C408() {
      return C408 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2929,
        [UnicodeRange_start]: 2929
      });
    },
    get C409() {
      return C409 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 2946,
        [UnicodeRange_start]: 2946
      });
    },
    get C410() {
      return C410 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2947,
        [UnicodeRange_start]: 2947
      });
    },
    get C411() {
      return C411 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2954,
        [UnicodeRange_start]: 2949
      });
    },
    get C412() {
      return C412 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2960,
        [UnicodeRange_start]: 2958
      });
    },
    get C413() {
      return C413 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2965,
        [UnicodeRange_start]: 2962
      });
    },
    get C414() {
      return C414 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2970,
        [UnicodeRange_start]: 2969
      });
    },
    get C415() {
      return C415 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2972,
        [UnicodeRange_start]: 2972
      });
    },
    get C416() {
      return C416 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2975,
        [UnicodeRange_start]: 2974
      });
    },
    get C417() {
      return C417 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2980,
        [UnicodeRange_start]: 2979
      });
    },
    get C418() {
      return C418 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 2986,
        [UnicodeRange_start]: 2984
      });
    },
    get C419() {
      return C419 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3001,
        [UnicodeRange_start]: 2990
      });
    },
    get C420() {
      return C420 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3010,
        [UnicodeRange_start]: 3006
      });
    },
    get C421() {
      return C421 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3016,
        [UnicodeRange_start]: 3014
      });
    },
    get C422() {
      return C422 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3021,
        [UnicodeRange_start]: 3018
      });
    },
    get C423() {
      return C423 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3024,
        [UnicodeRange_start]: 3024
      });
    },
    get C424() {
      return C424 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3031,
        [UnicodeRange_start]: 3031
      });
    },
    get C425() {
      return C425 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 3055,
        [UnicodeRange_start]: 3046
      });
    },
    get C426() {
      return C426 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3076,
        [UnicodeRange_start]: 3072
      });
    },
    get C427() {
      return C427 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3084,
        [UnicodeRange_start]: 3077
      });
    },
    get C428() {
      return C428 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3088,
        [UnicodeRange_start]: 3086
      });
    },
    get C429() {
      return C429 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3112,
        [UnicodeRange_start]: 3090
      });
    },
    get C430() {
      return C430 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3129,
        [UnicodeRange_start]: 3114
      });
    },
    get C431() {
      return C431 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3133,
        [UnicodeRange_start]: 3133
      });
    },
    get C432() {
      return C432 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3140,
        [UnicodeRange_start]: 3134
      });
    },
    get C433() {
      return C433 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3144,
        [UnicodeRange_start]: 3142
      });
    },
    get C434() {
      return C434 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3149,
        [UnicodeRange_start]: 3146
      });
    },
    get C435() {
      return C435 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3158,
        [UnicodeRange_start]: 3157
      });
    },
    get C436() {
      return C436 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3162,
        [UnicodeRange_start]: 3160
      });
    },
    get C437() {
      return C437 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3169,
        [UnicodeRange_start]: 3168
      });
    },
    get C438() {
      return C438 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3171,
        [UnicodeRange_start]: 3170
      });
    },
    get C439() {
      return C439 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 3183,
        [UnicodeRange_start]: 3174
      });
    },
    get C440() {
      return C440 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3200,
        [UnicodeRange_start]: 3200
      });
    },
    get C441() {
      return C441 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3203,
        [UnicodeRange_start]: 3201
      });
    },
    get C442() {
      return C442 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3212,
        [UnicodeRange_start]: 3205
      });
    },
    get C443() {
      return C443 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3216,
        [UnicodeRange_start]: 3214
      });
    },
    get C444() {
      return C444 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3240,
        [UnicodeRange_start]: 3218
      });
    },
    get C445() {
      return C445 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3251,
        [UnicodeRange_start]: 3242
      });
    },
    get C446() {
      return C446 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3257,
        [UnicodeRange_start]: 3253
      });
    },
    get C447() {
      return C447 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3260,
        [UnicodeRange_start]: 3260
      });
    },
    get C448() {
      return C448 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3261,
        [UnicodeRange_start]: 3261
      });
    },
    get C449() {
      return C449 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3268,
        [UnicodeRange_start]: 3262
      });
    },
    get C450() {
      return C450 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3272,
        [UnicodeRange_start]: 3270
      });
    },
    get C451() {
      return C451 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3277,
        [UnicodeRange_start]: 3274
      });
    },
    get C452() {
      return C452 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3286,
        [UnicodeRange_start]: 3285
      });
    },
    get C453() {
      return C453 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3294,
        [UnicodeRange_start]: 3294
      });
    },
    get C454() {
      return C454 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3297,
        [UnicodeRange_start]: 3296
      });
    },
    get C455() {
      return C455 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3299,
        [UnicodeRange_start]: 3298
      });
    },
    get C456() {
      return C456 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 3311,
        [UnicodeRange_start]: 3302
      });
    },
    get C457() {
      return C457 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3314,
        [UnicodeRange_start]: 3313
      });
    },
    get C458() {
      return C458 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3331,
        [UnicodeRange_start]: 3328
      });
    },
    get C459() {
      return C459 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3340,
        [UnicodeRange_start]: 3333
      });
    },
    get C460() {
      return C460 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3344,
        [UnicodeRange_start]: 3342
      });
    },
    get C461() {
      return C461 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3386,
        [UnicodeRange_start]: 3346
      });
    },
    get C462() {
      return C462 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3388,
        [UnicodeRange_start]: 3387
      });
    },
    get C463() {
      return C463 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3389,
        [UnicodeRange_start]: 3389
      });
    },
    get C464() {
      return C464 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3396,
        [UnicodeRange_start]: 3390
      });
    },
    get C465() {
      return C465 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3400,
        [UnicodeRange_start]: 3398
      });
    },
    get C466() {
      return C466 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3405,
        [UnicodeRange_start]: 3402
      });
    },
    get C467() {
      return C467 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3406,
        [UnicodeRange_start]: 3406
      });
    },
    get C468() {
      return C468 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3414,
        [UnicodeRange_start]: 3412
      });
    },
    get C469() {
      return C469 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3415,
        [UnicodeRange_start]: 3415
      });
    },
    get C470() {
      return C470 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3425,
        [UnicodeRange_start]: 3423
      });
    },
    get C471() {
      return C471 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3427,
        [UnicodeRange_start]: 3426
      });
    },
    get C472() {
      return C472 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 3439,
        [UnicodeRange_start]: 3430
      });
    },
    get C473() {
      return C473 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3455,
        [UnicodeRange_start]: 3450
      });
    },
    get C474() {
      return C474 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3459,
        [UnicodeRange_start]: 3458
      });
    },
    get C475() {
      return C475 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3478,
        [UnicodeRange_start]: 3461
      });
    },
    get C476() {
      return C476 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3505,
        [UnicodeRange_start]: 3482
      });
    },
    get C477() {
      return C477 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3515,
        [UnicodeRange_start]: 3507
      });
    },
    get C478() {
      return C478 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3517,
        [UnicodeRange_start]: 3517
      });
    },
    get C479() {
      return C479 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3526,
        [UnicodeRange_start]: 3520
      });
    },
    get C480() {
      return C480 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3530,
        [UnicodeRange_start]: 3530
      });
    },
    get C481() {
      return C481 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3540,
        [UnicodeRange_start]: 3535
      });
    },
    get C482() {
      return C482 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3542,
        [UnicodeRange_start]: 3542
      });
    },
    get C483() {
      return C483 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3551,
        [UnicodeRange_start]: 3544
      });
    },
    get C484() {
      return C484 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 3567,
        [UnicodeRange_start]: 3558
      });
    },
    get C485() {
      return C485 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3571,
        [UnicodeRange_start]: 3570
      });
    },
    get C486() {
      return C486 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3633,
        [UnicodeRange_start]: 3633
      });
    },
    get C487() {
      return C487 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3642,
        [UnicodeRange_start]: 3636
      });
    },
    get C488() {
      return C488 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3662,
        [UnicodeRange_start]: 3655
      });
    },
    get C489() {
      return C489 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 3673,
        [UnicodeRange_start]: 3664
      });
    },
    get C490() {
      return C490 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3761,
        [UnicodeRange_start]: 3761
      });
    },
    get C491() {
      return C491 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3772,
        [UnicodeRange_start]: 3764
      });
    },
    get C492() {
      return C492 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3789,
        [UnicodeRange_start]: 3784
      });
    },
    get C493() {
      return C493 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 3801,
        [UnicodeRange_start]: 3792
      });
    },
    get C494() {
      return C494 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3840,
        [UnicodeRange_start]: 3840
      });
    },
    get C495() {
      return C495 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3865,
        [UnicodeRange_start]: 3864
      });
    },
    get C496() {
      return C496 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 3881,
        [UnicodeRange_start]: 3872
      });
    },
    get C497() {
      return C497 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3893,
        [UnicodeRange_start]: 3893
      });
    },
    get C498() {
      return C498 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3895,
        [UnicodeRange_start]: 3895
      });
    },
    get C499() {
      return C499 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3897,
        [UnicodeRange_start]: 3897
      });
    },
    get C500() {
      return C500 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3903,
        [UnicodeRange_start]: 3902
      });
    },
    get C501() {
      return C501 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3911,
        [UnicodeRange_start]: 3904
      });
    },
    get C502() {
      return C502 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3948,
        [UnicodeRange_start]: 3913
      });
    },
    get C503() {
      return C503 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3972,
        [UnicodeRange_start]: 3953
      });
    },
    get C504() {
      return C504 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3975,
        [UnicodeRange_start]: 3974
      });
    },
    get C505() {
      return C505 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 3980,
        [UnicodeRange_start]: 3976
      });
    },
    get C506() {
      return C506 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 3991,
        [UnicodeRange_start]: 3981
      });
    },
    get C507() {
      return C507 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4028,
        [UnicodeRange_start]: 3993
      });
    },
    get C508() {
      return C508 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4038,
        [UnicodeRange_start]: 4038
      });
    },
    get C509() {
      return C509 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4158,
        [UnicodeRange_start]: 4139
      });
    },
    get C510() {
      return C510 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 4169,
        [UnicodeRange_start]: 4160
      });
    },
    get C511() {
      return C511 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4185,
        [UnicodeRange_start]: 4182
      });
    },
    get C512() {
      return C512 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4192,
        [UnicodeRange_start]: 4190
      });
    },
    get C513() {
      return C513 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4196,
        [UnicodeRange_start]: 4194
      });
    },
    get C514() {
      return C514 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4205,
        [UnicodeRange_start]: 4199
      });
    },
    get C515() {
      return C515 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4212,
        [UnicodeRange_start]: 4209
      });
    },
    get C516() {
      return C516 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4237,
        [UnicodeRange_start]: 4226
      });
    },
    get C517() {
      return C517 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4239,
        [UnicodeRange_start]: 4239
      });
    },
    get C518() {
      return C518 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 4249,
        [UnicodeRange_start]: 4240
      });
    },
    get C519() {
      return C519 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4253,
        [UnicodeRange_start]: 4250
      });
    },
    get C520() {
      return C520 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4293,
        [UnicodeRange_start]: 4256
      });
    },
    get C521() {
      return C521 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4295,
        [UnicodeRange_start]: 4295
      });
    },
    get C522() {
      return C522 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4301,
        [UnicodeRange_start]: 4301
      });
    },
    get C523() {
      return C523 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4346,
        [UnicodeRange_start]: 4304
      });
    },
    get C524() {
      return C524 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4680,
        [UnicodeRange_start]: 4348
      });
    },
    get C525() {
      return C525 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4685,
        [UnicodeRange_start]: 4682
      });
    },
    get C526() {
      return C526 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4694,
        [UnicodeRange_start]: 4688
      });
    },
    get C527() {
      return C527 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4696,
        [UnicodeRange_start]: 4696
      });
    },
    get C528() {
      return C528 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4701,
        [UnicodeRange_start]: 4698
      });
    },
    get C529() {
      return C529 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4744,
        [UnicodeRange_start]: 4704
      });
    },
    get C530() {
      return C530 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4749,
        [UnicodeRange_start]: 4746
      });
    },
    get C531() {
      return C531 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4784,
        [UnicodeRange_start]: 4752
      });
    },
    get C532() {
      return C532 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4789,
        [UnicodeRange_start]: 4786
      });
    },
    get C533() {
      return C533 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4798,
        [UnicodeRange_start]: 4792
      });
    },
    get C534() {
      return C534 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4800,
        [UnicodeRange_start]: 4800
      });
    },
    get C535() {
      return C535 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4805,
        [UnicodeRange_start]: 4802
      });
    },
    get C536() {
      return C536 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4822,
        [UnicodeRange_start]: 4808
      });
    },
    get C537() {
      return C537 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4880,
        [UnicodeRange_start]: 4824
      });
    },
    get C538() {
      return C538 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4885,
        [UnicodeRange_start]: 4882
      });
    },
    get C539() {
      return C539 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 4954,
        [UnicodeRange_start]: 4888
      });
    },
    get C540() {
      return C540 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 4959,
        [UnicodeRange_start]: 4957
      });
    },
    get C541() {
      return C541 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5007,
        [UnicodeRange_start]: 4992
      });
    },
    get C542() {
      return C542 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5109,
        [UnicodeRange_start]: 5024
      });
    },
    get C543() {
      return C543 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5117,
        [UnicodeRange_start]: 5112
      });
    },
    get C544() {
      return C544 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5740,
        [UnicodeRange_start]: 5121
      });
    },
    get C545() {
      return C545 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5759,
        [UnicodeRange_start]: 5743
      });
    },
    get C546() {
      return C546 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C142 || CT.C142,
        [UnicodeRange_end]: 5760,
        [UnicodeRange_start]: 5760
      });
    },
    get C547() {
      return C547 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5786,
        [UnicodeRange_start]: 5761
      });
    },
    get C548() {
      return C548 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5866,
        [UnicodeRange_start]: 5792
      });
    },
    get C549() {
      return C549 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5880,
        [UnicodeRange_start]: 5870
      });
    },
    get C550() {
      return C550 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5900,
        [UnicodeRange_start]: 5888
      });
    },
    get C551() {
      return C551 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5905,
        [UnicodeRange_start]: 5902
      });
    },
    get C552() {
      return C552 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 5908,
        [UnicodeRange_start]: 5906
      });
    },
    get C553() {
      return C553 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5937,
        [UnicodeRange_start]: 5920
      });
    },
    get C554() {
      return C554 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 5940,
        [UnicodeRange_start]: 5938
      });
    },
    get C555() {
      return C555 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5969,
        [UnicodeRange_start]: 5952
      });
    },
    get C556() {
      return C556 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 5971,
        [UnicodeRange_start]: 5970
      });
    },
    get C557() {
      return C557 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 5996,
        [UnicodeRange_start]: 5984
      });
    },
    get C558() {
      return C558 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6000,
        [UnicodeRange_start]: 5998
      });
    },
    get C559() {
      return C559 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6003,
        [UnicodeRange_start]: 6002
      });
    },
    get C560() {
      return C560 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6099,
        [UnicodeRange_start]: 6068
      });
    },
    get C561() {
      return C561 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6109,
        [UnicodeRange_start]: 6109
      });
    },
    get C562() {
      return C562 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 6121,
        [UnicodeRange_start]: 6112
      });
    },
    get C563() {
      return C563 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6157,
        [UnicodeRange_start]: 6155
      });
    },
    get C564() {
      return C564 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 6158,
        [UnicodeRange_start]: 6158
      });
    },
    get C565() {
      return C565 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 6169,
        [UnicodeRange_start]: 6160
      });
    },
    get C566() {
      return C566 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6264,
        [UnicodeRange_start]: 6176
      });
    },
    get C567() {
      return C567 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6276,
        [UnicodeRange_start]: 6272
      });
    },
    get C568() {
      return C568 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6278,
        [UnicodeRange_start]: 6277
      });
    },
    get C569() {
      return C569 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6312,
        [UnicodeRange_start]: 6279
      });
    },
    get C570() {
      return C570 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6313,
        [UnicodeRange_start]: 6313
      });
    },
    get C571() {
      return C571 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6314,
        [UnicodeRange_start]: 6314
      });
    },
    get C572() {
      return C572 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6389,
        [UnicodeRange_start]: 6320
      });
    },
    get C573() {
      return C573 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6430,
        [UnicodeRange_start]: 6400
      });
    },
    get C574() {
      return C574 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6443,
        [UnicodeRange_start]: 6432
      });
    },
    get C575() {
      return C575 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6459,
        [UnicodeRange_start]: 6448
      });
    },
    get C576() {
      return C576 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 6479,
        [UnicodeRange_start]: 6470
      });
    },
    get C577() {
      return C577 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 6617,
        [UnicodeRange_start]: 6608
      });
    },
    get C578() {
      return C578 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6678,
        [UnicodeRange_start]: 6656
      });
    },
    get C579() {
      return C579 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6683,
        [UnicodeRange_start]: 6679
      });
    },
    get C580() {
      return C580 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6750,
        [UnicodeRange_start]: 6741
      });
    },
    get C581() {
      return C581 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6780,
        [UnicodeRange_start]: 6752
      });
    },
    get C582() {
      return C582 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6783,
        [UnicodeRange_start]: 6783
      });
    },
    get C583() {
      return C583 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 6793,
        [UnicodeRange_start]: 6784
      });
    },
    get C584() {
      return C584 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 6809,
        [UnicodeRange_start]: 6800
      });
    },
    get C585() {
      return C585 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6846,
        [UnicodeRange_start]: 6832
      });
    },
    get C586() {
      return C586 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6916,
        [UnicodeRange_start]: 6912
      });
    },
    get C587() {
      return C587 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6963,
        [UnicodeRange_start]: 6917
      });
    },
    get C588() {
      return C588 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 6980,
        [UnicodeRange_start]: 6964
      });
    },
    get C589() {
      return C589 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 6987,
        [UnicodeRange_start]: 6981
      });
    },
    get C590() {
      return C590 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 7001,
        [UnicodeRange_start]: 6992
      });
    },
    get C591() {
      return C591 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7027,
        [UnicodeRange_start]: 7019
      });
    },
    get C592() {
      return C592 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7042,
        [UnicodeRange_start]: 7040
      });
    },
    get C593() {
      return C593 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7072,
        [UnicodeRange_start]: 7043
      });
    },
    get C594() {
      return C594 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7085,
        [UnicodeRange_start]: 7073
      });
    },
    get C595() {
      return C595 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7087,
        [UnicodeRange_start]: 7086
      });
    },
    get C596() {
      return C596 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 7097,
        [UnicodeRange_start]: 7088
      });
    },
    get C597() {
      return C597 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7141,
        [UnicodeRange_start]: 7098
      });
    },
    get C598() {
      return C598 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7155,
        [UnicodeRange_start]: 7142
      });
    },
    get C599() {
      return C599 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7203,
        [UnicodeRange_start]: 7168
      });
    },
    get C600() {
      return C600 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7223,
        [UnicodeRange_start]: 7204
      });
    },
    get C601() {
      return C601 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 7241,
        [UnicodeRange_start]: 7232
      });
    },
    get C602() {
      return C602 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7247,
        [UnicodeRange_start]: 7245
      });
    },
    get C603() {
      return C603 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 7257,
        [UnicodeRange_start]: 7248
      });
    },
    get C604() {
      return C604 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7293,
        [UnicodeRange_start]: 7258
      });
    },
    get C605() {
      return C605 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7304,
        [UnicodeRange_start]: 7296
      });
    },
    get C606() {
      return C606 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7354,
        [UnicodeRange_start]: 7312
      });
    },
    get C607() {
      return C607 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7359,
        [UnicodeRange_start]: 7357
      });
    },
    get C608() {
      return C608 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7378,
        [UnicodeRange_start]: 7376
      });
    },
    get C609() {
      return C609 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7400,
        [UnicodeRange_start]: 7380
      });
    },
    get C610() {
      return C610 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7404,
        [UnicodeRange_start]: 7401
      });
    },
    get C611() {
      return C611 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7405,
        [UnicodeRange_start]: 7405
      });
    },
    get C612() {
      return C612 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7411,
        [UnicodeRange_start]: 7406
      });
    },
    get C613() {
      return C613 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7412,
        [UnicodeRange_start]: 7412
      });
    },
    get C614() {
      return C614 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7414,
        [UnicodeRange_start]: 7413
      });
    },
    get C615() {
      return C615 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7417,
        [UnicodeRange_start]: 7415
      });
    },
    get C616() {
      return C616 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7418,
        [UnicodeRange_start]: 7418
      });
    },
    get C617() {
      return C617 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7615,
        [UnicodeRange_start]: 7424
      });
    },
    get C618() {
      return C618 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7673,
        [UnicodeRange_start]: 7616
      });
    },
    get C619() {
      return C619 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 7679,
        [UnicodeRange_start]: 7675
      });
    },
    get C620() {
      return C620 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7957,
        [UnicodeRange_start]: 7680
      });
    },
    get C621() {
      return C621 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 7965,
        [UnicodeRange_start]: 7960
      });
    },
    get C622() {
      return C622 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8005,
        [UnicodeRange_start]: 7968
      });
    },
    get C623() {
      return C623 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8013,
        [UnicodeRange_start]: 8008
      });
    },
    get C624() {
      return C624 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8023,
        [UnicodeRange_start]: 8016
      });
    },
    get C625() {
      return C625 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8025,
        [UnicodeRange_start]: 8025
      });
    },
    get C626() {
      return C626 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8027,
        [UnicodeRange_start]: 8027
      });
    },
    get C627() {
      return C627 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8029,
        [UnicodeRange_start]: 8029
      });
    },
    get C628() {
      return C628 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8061,
        [UnicodeRange_start]: 8031
      });
    },
    get C629() {
      return C629 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8116,
        [UnicodeRange_start]: 8064
      });
    },
    get C630() {
      return C630 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8124,
        [UnicodeRange_start]: 8118
      });
    },
    get C631() {
      return C631 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8126,
        [UnicodeRange_start]: 8126
      });
    },
    get C632() {
      return C632 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8132,
        [UnicodeRange_start]: 8130
      });
    },
    get C633() {
      return C633 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8140,
        [UnicodeRange_start]: 8134
      });
    },
    get C634() {
      return C634 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8147,
        [UnicodeRange_start]: 8144
      });
    },
    get C635() {
      return C635 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8155,
        [UnicodeRange_start]: 8150
      });
    },
    get C636() {
      return C636 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8172,
        [UnicodeRange_start]: 8160
      });
    },
    get C637() {
      return C637 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8180,
        [UnicodeRange_start]: 8178
      });
    },
    get C638() {
      return C638 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8188,
        [UnicodeRange_start]: 8182
      });
    },
    get C639() {
      return C639 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C142 || CT.C142,
        [UnicodeRange_end]: 8198,
        [UnicodeRange_start]: 8192
      });
    },
    get C640() {
      return C640 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C142 || CT.C142,
        [UnicodeRange_end]: 8202,
        [UnicodeRange_start]: 8200
      });
    },
    get C641() {
      return C641 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 8204,
        [UnicodeRange_start]: 8204
      });
    },
    get C642() {
      return C642 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C141 || CT.C141,
        [UnicodeRange_end]: 8205,
        [UnicodeRange_start]: 8205
      });
    },
    get C643() {
      return C643 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 8207,
        [UnicodeRange_start]: 8206
      });
    },
    get C644() {
      return C644 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C138 || CT.C138,
        [UnicodeRange_end]: 8217,
        [UnicodeRange_start]: 8216
      });
    },
    get C645() {
      return C645 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C138 || CT.C138,
        [UnicodeRange_end]: 8228,
        [UnicodeRange_start]: 8228
      });
    },
    get C646() {
      return C646 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C136 || CT.C136,
        [UnicodeRange_end]: 8231,
        [UnicodeRange_start]: 8231
      });
    },
    get C647() {
      return C647 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C130 || CT.C130,
        [UnicodeRange_end]: 8233,
        [UnicodeRange_start]: 8232
      });
    },
    get C648() {
      return C648 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 8238,
        [UnicodeRange_start]: 8234
      });
    },
    get C649() {
      return C649 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C140 || CT.C140,
        [UnicodeRange_end]: 8239,
        [UnicodeRange_start]: 8239
      });
    },
    get C650() {
      return C650 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C140 || CT.C140,
        [UnicodeRange_end]: 8256,
        [UnicodeRange_start]: 8255
      });
    },
    get C651() {
      return C651 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 8260,
        [UnicodeRange_start]: 8260
      });
    },
    get C652() {
      return C652 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C140 || CT.C140,
        [UnicodeRange_end]: 8276,
        [UnicodeRange_start]: 8276
      });
    },
    get C653() {
      return C653 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C142 || CT.C142,
        [UnicodeRange_end]: 8287,
        [UnicodeRange_start]: 8287
      });
    },
    get C654() {
      return C654 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 8292,
        [UnicodeRange_start]: 8288
      });
    },
    get C655() {
      return C655 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 8303,
        [UnicodeRange_start]: 8294
      });
    },
    get C656() {
      return C656 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8305,
        [UnicodeRange_start]: 8305
      });
    },
    get C657() {
      return C657 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8319,
        [UnicodeRange_start]: 8319
      });
    },
    get C658() {
      return C658 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8348,
        [UnicodeRange_start]: 8336
      });
    },
    get C659() {
      return C659 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 8432,
        [UnicodeRange_start]: 8400
      });
    },
    get C660() {
      return C660 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8450,
        [UnicodeRange_start]: 8450
      });
    },
    get C661() {
      return C661 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8455,
        [UnicodeRange_start]: 8455
      });
    },
    get C662() {
      return C662 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8467,
        [UnicodeRange_start]: 8458
      });
    },
    get C663() {
      return C663 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8469,
        [UnicodeRange_start]: 8469
      });
    },
    get C664() {
      return C664 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8477,
        [UnicodeRange_start]: 8473
      });
    },
    get C665() {
      return C665 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8484,
        [UnicodeRange_start]: 8484
      });
    },
    get C666() {
      return C666 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8486,
        [UnicodeRange_start]: 8486
      });
    },
    get C667() {
      return C667 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8488,
        [UnicodeRange_start]: 8488
      });
    },
    get C668() {
      return C668 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8493,
        [UnicodeRange_start]: 8490
      });
    },
    get C669() {
      return C669 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8505,
        [UnicodeRange_start]: 8495
      });
    },
    get C670() {
      return C670 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8511,
        [UnicodeRange_start]: 8508
      });
    },
    get C671() {
      return C671 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8521,
        [UnicodeRange_start]: 8517
      });
    },
    get C672() {
      return C672 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8526,
        [UnicodeRange_start]: 8526
      });
    },
    get C673() {
      return C673 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 8584,
        [UnicodeRange_start]: 8544
      });
    },
    get C674() {
      return C674 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 9449,
        [UnicodeRange_start]: 9398
      });
    },
    get C675() {
      return C675 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11310,
        [UnicodeRange_start]: 11264
      });
    },
    get C676() {
      return C676 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11358,
        [UnicodeRange_start]: 11312
      });
    },
    get C677() {
      return C677 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11492,
        [UnicodeRange_start]: 11360
      });
    },
    get C678() {
      return C678 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11502,
        [UnicodeRange_start]: 11499
      });
    },
    get C679() {
      return C679 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 11505,
        [UnicodeRange_start]: 11503
      });
    },
    get C680() {
      return C680 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11507,
        [UnicodeRange_start]: 11506
      });
    },
    get C681() {
      return C681 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11557,
        [UnicodeRange_start]: 11520
      });
    },
    get C682() {
      return C682 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11559,
        [UnicodeRange_start]: 11559
      });
    },
    get C683() {
      return C683 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11565,
        [UnicodeRange_start]: 11565
      });
    },
    get C684() {
      return C684 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11623,
        [UnicodeRange_start]: 11568
      });
    },
    get C685() {
      return C685 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11631,
        [UnicodeRange_start]: 11631
      });
    },
    get C686() {
      return C686 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 11647,
        [UnicodeRange_start]: 11647
      });
    },
    get C687() {
      return C687 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11670,
        [UnicodeRange_start]: 11648
      });
    },
    get C688() {
      return C688 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11686,
        [UnicodeRange_start]: 11680
      });
    },
    get C689() {
      return C689 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11694,
        [UnicodeRange_start]: 11688
      });
    },
    get C690() {
      return C690 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11702,
        [UnicodeRange_start]: 11696
      });
    },
    get C691() {
      return C691 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11710,
        [UnicodeRange_start]: 11704
      });
    },
    get C692() {
      return C692 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11718,
        [UnicodeRange_start]: 11712
      });
    },
    get C693() {
      return C693 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11726,
        [UnicodeRange_start]: 11720
      });
    },
    get C694() {
      return C694 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11734,
        [UnicodeRange_start]: 11728
      });
    },
    get C695() {
      return C695 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11742,
        [UnicodeRange_start]: 11736
      });
    },
    get C696() {
      return C696 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 11775,
        [UnicodeRange_start]: 11744
      });
    },
    get C697() {
      return C697 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 11823,
        [UnicodeRange_start]: 11823
      });
    },
    get C698() {
      return C698 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C142 || CT.C142,
        [UnicodeRange_end]: 12288,
        [UnicodeRange_start]: 12288
      });
    },
    get C699() {
      return C699 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 12293,
        [UnicodeRange_start]: 12293
      });
    },
    get C700() {
      return C700 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 12335,
        [UnicodeRange_start]: 12330
      });
    },
    get C701() {
      return C701 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 12341,
        [UnicodeRange_start]: 12337
      });
    },
    get C702() {
      return C702 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 12348,
        [UnicodeRange_start]: 12347
      });
    },
    get C703() {
      return C703 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 12442,
        [UnicodeRange_start]: 12441
      });
    },
    get C704() {
      return C704 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 12444,
        [UnicodeRange_start]: 12443
      });
    },
    get C705() {
      return C705 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 12538,
        [UnicodeRange_start]: 12448
      });
    },
    get C706() {
      return C706 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 12543,
        [UnicodeRange_start]: 12540
      });
    },
    get C707() {
      return C707 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 12591,
        [UnicodeRange_start]: 12549
      });
    },
    get C708() {
      return C708 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 12686,
        [UnicodeRange_start]: 12593
      });
    },
    get C709() {
      return C709 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 12730,
        [UnicodeRange_start]: 12704
      });
    },
    get C710() {
      return C710 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 12799,
        [UnicodeRange_start]: 12784
      });
    },
    get C711() {
      return C711 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 13054,
        [UnicodeRange_start]: 13008
      });
    },
    get C712() {
      return C712 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 13143,
        [UnicodeRange_start]: 13056
      });
    },
    get C713() {
      return C713 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42124,
        [UnicodeRange_start]: 40960
      });
    },
    get C714() {
      return C714 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42237,
        [UnicodeRange_start]: 42192
      });
    },
    get C715() {
      return C715 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42508,
        [UnicodeRange_start]: 42240
      });
    },
    get C716() {
      return C716 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42527,
        [UnicodeRange_start]: 42512
      });
    },
    get C717() {
      return C717 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 42537,
        [UnicodeRange_start]: 42528
      });
    },
    get C718() {
      return C718 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42539,
        [UnicodeRange_start]: 42538
      });
    },
    get C719() {
      return C719 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42606,
        [UnicodeRange_start]: 42560
      });
    },
    get C720() {
      return C720 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 42610,
        [UnicodeRange_start]: 42607
      });
    },
    get C721() {
      return C721 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 42621,
        [UnicodeRange_start]: 42612
      });
    },
    get C722() {
      return C722 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42653,
        [UnicodeRange_start]: 42623
      });
    },
    get C723() {
      return C723 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 42655,
        [UnicodeRange_start]: 42654
      });
    },
    get C724() {
      return C724 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42735,
        [UnicodeRange_start]: 42656
      });
    },
    get C725() {
      return C725 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 42737,
        [UnicodeRange_start]: 42736
      });
    },
    get C726() {
      return C726 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42943,
        [UnicodeRange_start]: 42775
      });
    },
    get C727() {
      return C727 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 42950,
        [UnicodeRange_start]: 42946
      });
    },
    get C728() {
      return C728 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43009,
        [UnicodeRange_start]: 42999
      });
    },
    get C729() {
      return C729 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43010,
        [UnicodeRange_start]: 43010
      });
    },
    get C730() {
      return C730 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43013,
        [UnicodeRange_start]: 43011
      });
    },
    get C731() {
      return C731 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43014,
        [UnicodeRange_start]: 43014
      });
    },
    get C732() {
      return C732 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43018,
        [UnicodeRange_start]: 43015
      });
    },
    get C733() {
      return C733 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43019,
        [UnicodeRange_start]: 43019
      });
    },
    get C734() {
      return C734 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43042,
        [UnicodeRange_start]: 43020
      });
    },
    get C735() {
      return C735 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43047,
        [UnicodeRange_start]: 43043
      });
    },
    get C736() {
      return C736 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43123,
        [UnicodeRange_start]: 43072
      });
    },
    get C737() {
      return C737 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43137,
        [UnicodeRange_start]: 43136
      });
    },
    get C738() {
      return C738 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43187,
        [UnicodeRange_start]: 43138
      });
    },
    get C739() {
      return C739 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43205,
        [UnicodeRange_start]: 43188
      });
    },
    get C740() {
      return C740 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 43225,
        [UnicodeRange_start]: 43216
      });
    },
    get C741() {
      return C741 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43249,
        [UnicodeRange_start]: 43232
      });
    },
    get C742() {
      return C742 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43255,
        [UnicodeRange_start]: 43250
      });
    },
    get C743() {
      return C743 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43259,
        [UnicodeRange_start]: 43259
      });
    },
    get C744() {
      return C744 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43262,
        [UnicodeRange_start]: 43261
      });
    },
    get C745() {
      return C745 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43263,
        [UnicodeRange_start]: 43263
      });
    },
    get C746() {
      return C746 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 43273,
        [UnicodeRange_start]: 43264
      });
    },
    get C747() {
      return C747 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43301,
        [UnicodeRange_start]: 43274
      });
    },
    get C748() {
      return C748 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43309,
        [UnicodeRange_start]: 43302
      });
    },
    get C749() {
      return C749 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43334,
        [UnicodeRange_start]: 43312
      });
    },
    get C750() {
      return C750 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43347,
        [UnicodeRange_start]: 43335
      });
    },
    get C751() {
      return C751 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43388,
        [UnicodeRange_start]: 43360
      });
    },
    get C752() {
      return C752 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43395,
        [UnicodeRange_start]: 43392
      });
    },
    get C753() {
      return C753 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43442,
        [UnicodeRange_start]: 43396
      });
    },
    get C754() {
      return C754 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43456,
        [UnicodeRange_start]: 43443
      });
    },
    get C755() {
      return C755 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43471,
        [UnicodeRange_start]: 43471
      });
    },
    get C756() {
      return C756 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 43481,
        [UnicodeRange_start]: 43472
      });
    },
    get C757() {
      return C757 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43493,
        [UnicodeRange_start]: 43493
      });
    },
    get C758() {
      return C758 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 43513,
        [UnicodeRange_start]: 43504
      });
    },
    get C759() {
      return C759 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43560,
        [UnicodeRange_start]: 43520
      });
    },
    get C760() {
      return C760 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43574,
        [UnicodeRange_start]: 43561
      });
    },
    get C761() {
      return C761 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43586,
        [UnicodeRange_start]: 43584
      });
    },
    get C762() {
      return C762 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43587,
        [UnicodeRange_start]: 43587
      });
    },
    get C763() {
      return C763 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43595,
        [UnicodeRange_start]: 43588
      });
    },
    get C764() {
      return C764 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43597,
        [UnicodeRange_start]: 43596
      });
    },
    get C765() {
      return C765 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 43609,
        [UnicodeRange_start]: 43600
      });
    },
    get C766() {
      return C766 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43645,
        [UnicodeRange_start]: 43643
      });
    },
    get C767() {
      return C767 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43696,
        [UnicodeRange_start]: 43696
      });
    },
    get C768() {
      return C768 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43700,
        [UnicodeRange_start]: 43698
      });
    },
    get C769() {
      return C769 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43704,
        [UnicodeRange_start]: 43703
      });
    },
    get C770() {
      return C770 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43711,
        [UnicodeRange_start]: 43710
      });
    },
    get C771() {
      return C771 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43713,
        [UnicodeRange_start]: 43713
      });
    },
    get C772() {
      return C772 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43754,
        [UnicodeRange_start]: 43744
      });
    },
    get C773() {
      return C773 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43759,
        [UnicodeRange_start]: 43755
      });
    },
    get C774() {
      return C774 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43764,
        [UnicodeRange_start]: 43762
      });
    },
    get C775() {
      return C775 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 43766,
        [UnicodeRange_start]: 43765
      });
    },
    get C776() {
      return C776 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43782,
        [UnicodeRange_start]: 43777
      });
    },
    get C777() {
      return C777 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43790,
        [UnicodeRange_start]: 43785
      });
    },
    get C778() {
      return C778 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43798,
        [UnicodeRange_start]: 43793
      });
    },
    get C779() {
      return C779 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43814,
        [UnicodeRange_start]: 43808
      });
    },
    get C780() {
      return C780 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43822,
        [UnicodeRange_start]: 43816
      });
    },
    get C781() {
      return C781 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 43879,
        [UnicodeRange_start]: 43824
      });
    },
    get C782() {
      return C782 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 44002,
        [UnicodeRange_start]: 43888
      });
    },
    get C783() {
      return C783 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 44010,
        [UnicodeRange_start]: 44003
      });
    },
    get C784() {
      return C784 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 44013,
        [UnicodeRange_start]: 44012
      });
    },
    get C785() {
      return C785 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 44025,
        [UnicodeRange_start]: 44016
      });
    },
    get C786() {
      return C786 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 55203,
        [UnicodeRange_start]: 44032
      });
    },
    get C787() {
      return C787 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 55238,
        [UnicodeRange_start]: 55216
      });
    },
    get C788() {
      return C788 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 55291,
        [UnicodeRange_start]: 55243
      });
    },
    get C789() {
      return C789 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 64262,
        [UnicodeRange_start]: 64256
      });
    },
    get C790() {
      return C790 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 64279,
        [UnicodeRange_start]: 64275
      });
    },
    get C791() {
      return C791 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 64285,
        [UnicodeRange_start]: 64285
      });
    },
    get C792() {
      return C792 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 64286,
        [UnicodeRange_start]: 64286
      });
    },
    get C793() {
      return C793 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 64296,
        [UnicodeRange_start]: 64287
      });
    },
    get C794() {
      return C794 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 64310,
        [UnicodeRange_start]: 64298
      });
    },
    get C795() {
      return C795 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 64316,
        [UnicodeRange_start]: 64312
      });
    },
    get C796() {
      return C796 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 64318,
        [UnicodeRange_start]: 64318
      });
    },
    get C797() {
      return C797 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 64321,
        [UnicodeRange_start]: 64320
      });
    },
    get C798() {
      return C798 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 64324,
        [UnicodeRange_start]: 64323
      });
    },
    get C799() {
      return C799 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C127 || CT.C127,
        [UnicodeRange_end]: 64335,
        [UnicodeRange_start]: 64326
      });
    },
    get C800() {
      return C800 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 64433,
        [UnicodeRange_start]: 64336
      });
    },
    get C801() {
      return C801 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 64829,
        [UnicodeRange_start]: 64467
      });
    },
    get C802() {
      return C802 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 64911,
        [UnicodeRange_start]: 64848
      });
    },
    get C803() {
      return C803 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 64967,
        [UnicodeRange_start]: 64914
      });
    },
    get C804() {
      return C804 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65019,
        [UnicodeRange_start]: 65008
      });
    },
    get C805() {
      return C805 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 65039,
        [UnicodeRange_start]: 65024
      });
    },
    get C806() {
      return C806 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 65040,
        [UnicodeRange_start]: 65040
      });
    },
    get C807() {
      return C807 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C136 || CT.C136,
        [UnicodeRange_end]: 65043,
        [UnicodeRange_start]: 65043
      });
    },
    get C808() {
      return C808 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 65044,
        [UnicodeRange_start]: 65044
      });
    },
    get C809() {
      return C809 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 65071,
        [UnicodeRange_start]: 65056
      });
    },
    get C810() {
      return C810 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C140 || CT.C140,
        [UnicodeRange_end]: 65076,
        [UnicodeRange_start]: 65075
      });
    },
    get C811() {
      return C811 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C140 || CT.C140,
        [UnicodeRange_end]: 65103,
        [UnicodeRange_start]: 65101
      });
    },
    get C812() {
      return C812 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 65104,
        [UnicodeRange_start]: 65104
      });
    },
    get C813() {
      return C813 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C138 || CT.C138,
        [UnicodeRange_end]: 65106,
        [UnicodeRange_start]: 65106
      });
    },
    get C814() {
      return C814 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 65108,
        [UnicodeRange_start]: 65108
      });
    },
    get C815() {
      return C815 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C136 || CT.C136,
        [UnicodeRange_end]: 65109,
        [UnicodeRange_start]: 65109
      });
    },
    get C816() {
      return C816 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65140,
        [UnicodeRange_start]: 65136
      });
    },
    get C817() {
      return C817 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65276,
        [UnicodeRange_start]: 65142
      });
    },
    get C818() {
      return C818 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 65279,
        [UnicodeRange_start]: 65279
      });
    },
    get C819() {
      return C819 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C138 || CT.C138,
        [UnicodeRange_end]: 65287,
        [UnicodeRange_start]: 65287
      });
    },
    get C820() {
      return C820 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 65292,
        [UnicodeRange_start]: 65292
      });
    },
    get C821() {
      return C821 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C138 || CT.C138,
        [UnicodeRange_end]: 65294,
        [UnicodeRange_start]: 65294
      });
    },
    get C822() {
      return C822 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 65305,
        [UnicodeRange_start]: 65296
      });
    },
    get C823() {
      return C823 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C136 || CT.C136,
        [UnicodeRange_end]: 65306,
        [UnicodeRange_start]: 65306
      });
    },
    get C824() {
      return C824 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C137 || CT.C137,
        [UnicodeRange_end]: 65307,
        [UnicodeRange_start]: 65307
      });
    },
    get C825() {
      return C825 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65338,
        [UnicodeRange_start]: 65313
      });
    },
    get C826() {
      return C826 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C140 || CT.C140,
        [UnicodeRange_end]: 65343,
        [UnicodeRange_start]: 65343
      });
    },
    get C827() {
      return C827 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65370,
        [UnicodeRange_start]: 65345
      });
    },
    get C828() {
      return C828 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 65437,
        [UnicodeRange_start]: 65382
      });
    },
    get C829() {
      return C829 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 65439,
        [UnicodeRange_start]: 65438
      });
    },
    get C830() {
      return C830 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65470,
        [UnicodeRange_start]: 65440
      });
    },
    get C831() {
      return C831 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65479,
        [UnicodeRange_start]: 65474
      });
    },
    get C832() {
      return C832 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65487,
        [UnicodeRange_start]: 65482
      });
    },
    get C833() {
      return C833 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65495,
        [UnicodeRange_start]: 65490
      });
    },
    get C834() {
      return C834 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65500,
        [UnicodeRange_start]: 65498
      });
    },
    get C835() {
      return C835 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 65531,
        [UnicodeRange_start]: 65529
      });
    },
    get C836() {
      return C836 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65547,
        [UnicodeRange_start]: 65536
      });
    },
    get C837() {
      return C837 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65574,
        [UnicodeRange_start]: 65549
      });
    },
    get C838() {
      return C838 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65594,
        [UnicodeRange_start]: 65576
      });
    },
    get C839() {
      return C839 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65597,
        [UnicodeRange_start]: 65596
      });
    },
    get C840() {
      return C840 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65613,
        [UnicodeRange_start]: 65599
      });
    },
    get C841() {
      return C841 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65629,
        [UnicodeRange_start]: 65616
      });
    },
    get C842() {
      return C842 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65786,
        [UnicodeRange_start]: 65664
      });
    },
    get C843() {
      return C843 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 65908,
        [UnicodeRange_start]: 65856
      });
    },
    get C844() {
      return C844 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 66045,
        [UnicodeRange_start]: 66045
      });
    },
    get C845() {
      return C845 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66204,
        [UnicodeRange_start]: 66176
      });
    },
    get C846() {
      return C846 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66256,
        [UnicodeRange_start]: 66208
      });
    },
    get C847() {
      return C847 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 66272,
        [UnicodeRange_start]: 66272
      });
    },
    get C848() {
      return C848 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66335,
        [UnicodeRange_start]: 66304
      });
    },
    get C849() {
      return C849 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66378,
        [UnicodeRange_start]: 66349
      });
    },
    get C850() {
      return C850 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66421,
        [UnicodeRange_start]: 66384
      });
    },
    get C851() {
      return C851 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 66426,
        [UnicodeRange_start]: 66422
      });
    },
    get C852() {
      return C852 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66461,
        [UnicodeRange_start]: 66432
      });
    },
    get C853() {
      return C853 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66499,
        [UnicodeRange_start]: 66464
      });
    },
    get C854() {
      return C854 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66511,
        [UnicodeRange_start]: 66504
      });
    },
    get C855() {
      return C855 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66517,
        [UnicodeRange_start]: 66513
      });
    },
    get C856() {
      return C856 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66717,
        [UnicodeRange_start]: 66560
      });
    },
    get C857() {
      return C857 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 66729,
        [UnicodeRange_start]: 66720
      });
    },
    get C858() {
      return C858 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66771,
        [UnicodeRange_start]: 66736
      });
    },
    get C859() {
      return C859 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66811,
        [UnicodeRange_start]: 66776
      });
    },
    get C860() {
      return C860 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66855,
        [UnicodeRange_start]: 66816
      });
    },
    get C861() {
      return C861 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 66915,
        [UnicodeRange_start]: 66864
      });
    },
    get C862() {
      return C862 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67382,
        [UnicodeRange_start]: 67072
      });
    },
    get C863() {
      return C863 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67413,
        [UnicodeRange_start]: 67392
      });
    },
    get C864() {
      return C864 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67431,
        [UnicodeRange_start]: 67424
      });
    },
    get C865() {
      return C865 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67589,
        [UnicodeRange_start]: 67584
      });
    },
    get C866() {
      return C866 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67592,
        [UnicodeRange_start]: 67592
      });
    },
    get C867() {
      return C867 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67637,
        [UnicodeRange_start]: 67594
      });
    },
    get C868() {
      return C868 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67640,
        [UnicodeRange_start]: 67639
      });
    },
    get C869() {
      return C869 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67644,
        [UnicodeRange_start]: 67644
      });
    },
    get C870() {
      return C870 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67669,
        [UnicodeRange_start]: 67647
      });
    },
    get C871() {
      return C871 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67702,
        [UnicodeRange_start]: 67680
      });
    },
    get C872() {
      return C872 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67742,
        [UnicodeRange_start]: 67712
      });
    },
    get C873() {
      return C873 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67826,
        [UnicodeRange_start]: 67808
      });
    },
    get C874() {
      return C874 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67829,
        [UnicodeRange_start]: 67828
      });
    },
    get C875() {
      return C875 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67861,
        [UnicodeRange_start]: 67840
      });
    },
    get C876() {
      return C876 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 67897,
        [UnicodeRange_start]: 67872
      });
    },
    get C877() {
      return C877 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68023,
        [UnicodeRange_start]: 67968
      });
    },
    get C878() {
      return C878 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68031,
        [UnicodeRange_start]: 68030
      });
    },
    get C879() {
      return C879 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68096,
        [UnicodeRange_start]: 68096
      });
    },
    get C880() {
      return C880 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 68099,
        [UnicodeRange_start]: 68097
      });
    },
    get C881() {
      return C881 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 68102,
        [UnicodeRange_start]: 68101
      });
    },
    get C882() {
      return C882 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 68111,
        [UnicodeRange_start]: 68108
      });
    },
    get C883() {
      return C883 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68115,
        [UnicodeRange_start]: 68112
      });
    },
    get C884() {
      return C884 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68119,
        [UnicodeRange_start]: 68117
      });
    },
    get C885() {
      return C885 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68149,
        [UnicodeRange_start]: 68121
      });
    },
    get C886() {
      return C886 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 68154,
        [UnicodeRange_start]: 68152
      });
    },
    get C887() {
      return C887 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 68159,
        [UnicodeRange_start]: 68159
      });
    },
    get C888() {
      return C888 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68220,
        [UnicodeRange_start]: 68192
      });
    },
    get C889() {
      return C889 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68252,
        [UnicodeRange_start]: 68224
      });
    },
    get C890() {
      return C890 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68295,
        [UnicodeRange_start]: 68288
      });
    },
    get C891() {
      return C891 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68324,
        [UnicodeRange_start]: 68297
      });
    },
    get C892() {
      return C892 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 68326,
        [UnicodeRange_start]: 68325
      });
    },
    get C893() {
      return C893 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68405,
        [UnicodeRange_start]: 68352
      });
    },
    get C894() {
      return C894 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68437,
        [UnicodeRange_start]: 68416
      });
    },
    get C895() {
      return C895 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68466,
        [UnicodeRange_start]: 68448
      });
    },
    get C896() {
      return C896 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68497,
        [UnicodeRange_start]: 68480
      });
    },
    get C897() {
      return C897 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68680,
        [UnicodeRange_start]: 68608
      });
    },
    get C898() {
      return C898 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68786,
        [UnicodeRange_start]: 68736
      });
    },
    get C899() {
      return C899 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68850,
        [UnicodeRange_start]: 68800
      });
    },
    get C900() {
      return C900 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 68899,
        [UnicodeRange_start]: 68864
      });
    },
    get C901() {
      return C901 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 68903,
        [UnicodeRange_start]: 68900
      });
    },
    get C902() {
      return C902 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 68921,
        [UnicodeRange_start]: 68912
      });
    },
    get C903() {
      return C903 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 69404,
        [UnicodeRange_start]: 69376
      });
    },
    get C904() {
      return C904 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 69415,
        [UnicodeRange_start]: 69415
      });
    },
    get C905() {
      return C905 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 69445,
        [UnicodeRange_start]: 69424
      });
    },
    get C906() {
      return C906 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 69456,
        [UnicodeRange_start]: 69446
      });
    },
    get C907() {
      return C907 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 69622,
        [UnicodeRange_start]: 69600
      });
    },
    get C908() {
      return C908 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 69634,
        [UnicodeRange_start]: 69632
      });
    },
    get C909() {
      return C909 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 69687,
        [UnicodeRange_start]: 69635
      });
    },
    get C910() {
      return C910 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 69702,
        [UnicodeRange_start]: 69688
      });
    },
    get C911() {
      return C911 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 69743,
        [UnicodeRange_start]: 69734
      });
    },
    get C912() {
      return C912 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 69762,
        [UnicodeRange_start]: 69759
      });
    },
    get C913() {
      return C913 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 69807,
        [UnicodeRange_start]: 69763
      });
    },
    get C914() {
      return C914 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 69818,
        [UnicodeRange_start]: 69808
      });
    },
    get C915() {
      return C915 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 69821,
        [UnicodeRange_start]: 69821
      });
    },
    get C916() {
      return C916 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 69837,
        [UnicodeRange_start]: 69837
      });
    },
    get C917() {
      return C917 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 69864,
        [UnicodeRange_start]: 69840
      });
    },
    get C918() {
      return C918 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 69881,
        [UnicodeRange_start]: 69872
      });
    },
    get C919() {
      return C919 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 69890,
        [UnicodeRange_start]: 69888
      });
    },
    get C920() {
      return C920 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 69926,
        [UnicodeRange_start]: 69891
      });
    },
    get C921() {
      return C921 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 69940,
        [UnicodeRange_start]: 69927
      });
    },
    get C922() {
      return C922 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 69951,
        [UnicodeRange_start]: 69942
      });
    },
    get C923() {
      return C923 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 69956,
        [UnicodeRange_start]: 69956
      });
    },
    get C924() {
      return C924 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 69958,
        [UnicodeRange_start]: 69957
      });
    },
    get C925() {
      return C925 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70002,
        [UnicodeRange_start]: 69968
      });
    },
    get C926() {
      return C926 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70003,
        [UnicodeRange_start]: 70003
      });
    },
    get C927() {
      return C927 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70006,
        [UnicodeRange_start]: 70006
      });
    },
    get C928() {
      return C928 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70018,
        [UnicodeRange_start]: 70016
      });
    },
    get C929() {
      return C929 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70066,
        [UnicodeRange_start]: 70019
      });
    },
    get C930() {
      return C930 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70080,
        [UnicodeRange_start]: 70067
      });
    },
    get C931() {
      return C931 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70084,
        [UnicodeRange_start]: 70081
      });
    },
    get C932() {
      return C932 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70092,
        [UnicodeRange_start]: 70089
      });
    },
    get C933() {
      return C933 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 70105,
        [UnicodeRange_start]: 70096
      });
    },
    get C934() {
      return C934 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70106,
        [UnicodeRange_start]: 70106
      });
    },
    get C935() {
      return C935 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70108,
        [UnicodeRange_start]: 70108
      });
    },
    get C936() {
      return C936 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70161,
        [UnicodeRange_start]: 70144
      });
    },
    get C937() {
      return C937 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70187,
        [UnicodeRange_start]: 70163
      });
    },
    get C938() {
      return C938 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70199,
        [UnicodeRange_start]: 70188
      });
    },
    get C939() {
      return C939 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70206,
        [UnicodeRange_start]: 70206
      });
    },
    get C940() {
      return C940 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70278,
        [UnicodeRange_start]: 70272
      });
    },
    get C941() {
      return C941 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70280,
        [UnicodeRange_start]: 70280
      });
    },
    get C942() {
      return C942 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70285,
        [UnicodeRange_start]: 70282
      });
    },
    get C943() {
      return C943 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70301,
        [UnicodeRange_start]: 70287
      });
    },
    get C944() {
      return C944 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70312,
        [UnicodeRange_start]: 70303
      });
    },
    get C945() {
      return C945 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70366,
        [UnicodeRange_start]: 70320
      });
    },
    get C946() {
      return C946 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70378,
        [UnicodeRange_start]: 70367
      });
    },
    get C947() {
      return C947 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 70393,
        [UnicodeRange_start]: 70384
      });
    },
    get C948() {
      return C948 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70403,
        [UnicodeRange_start]: 70400
      });
    },
    get C949() {
      return C949 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70412,
        [UnicodeRange_start]: 70405
      });
    },
    get C950() {
      return C950 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70416,
        [UnicodeRange_start]: 70415
      });
    },
    get C951() {
      return C951 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70440,
        [UnicodeRange_start]: 70419
      });
    },
    get C952() {
      return C952 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70448,
        [UnicodeRange_start]: 70442
      });
    },
    get C953() {
      return C953 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70451,
        [UnicodeRange_start]: 70450
      });
    },
    get C954() {
      return C954 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70457,
        [UnicodeRange_start]: 70453
      });
    },
    get C955() {
      return C955 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70460,
        [UnicodeRange_start]: 70459
      });
    },
    get C956() {
      return C956 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70461,
        [UnicodeRange_start]: 70461
      });
    },
    get C957() {
      return C957 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70468,
        [UnicodeRange_start]: 70462
      });
    },
    get C958() {
      return C958 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70472,
        [UnicodeRange_start]: 70471
      });
    },
    get C959() {
      return C959 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70477,
        [UnicodeRange_start]: 70475
      });
    },
    get C960() {
      return C960 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70480,
        [UnicodeRange_start]: 70480
      });
    },
    get C961() {
      return C961 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70487,
        [UnicodeRange_start]: 70487
      });
    },
    get C962() {
      return C962 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70497,
        [UnicodeRange_start]: 70493
      });
    },
    get C963() {
      return C963 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70499,
        [UnicodeRange_start]: 70498
      });
    },
    get C964() {
      return C964 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70508,
        [UnicodeRange_start]: 70502
      });
    },
    get C965() {
      return C965 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70516,
        [UnicodeRange_start]: 70512
      });
    },
    get C966() {
      return C966 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70708,
        [UnicodeRange_start]: 70656
      });
    },
    get C967() {
      return C967 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70726,
        [UnicodeRange_start]: 70709
      });
    },
    get C968() {
      return C968 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70730,
        [UnicodeRange_start]: 70727
      });
    },
    get C969() {
      return C969 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 70745,
        [UnicodeRange_start]: 70736
      });
    },
    get C970() {
      return C970 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70750,
        [UnicodeRange_start]: 70750
      });
    },
    get C971() {
      return C971 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70751,
        [UnicodeRange_start]: 70751
      });
    },
    get C972() {
      return C972 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70831,
        [UnicodeRange_start]: 70784
      });
    },
    get C973() {
      return C973 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 70851,
        [UnicodeRange_start]: 70832
      });
    },
    get C974() {
      return C974 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70853,
        [UnicodeRange_start]: 70852
      });
    },
    get C975() {
      return C975 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 70855,
        [UnicodeRange_start]: 70855
      });
    },
    get C976() {
      return C976 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 70873,
        [UnicodeRange_start]: 70864
      });
    },
    get C977() {
      return C977 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 71086,
        [UnicodeRange_start]: 71040
      });
    },
    get C978() {
      return C978 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 71093,
        [UnicodeRange_start]: 71087
      });
    },
    get C979() {
      return C979 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 71104,
        [UnicodeRange_start]: 71096
      });
    },
    get C980() {
      return C980 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 71131,
        [UnicodeRange_start]: 71128
      });
    },
    get C981() {
      return C981 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 71133,
        [UnicodeRange_start]: 71132
      });
    },
    get C982() {
      return C982 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 71215,
        [UnicodeRange_start]: 71168
      });
    },
    get C983() {
      return C983 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 71232,
        [UnicodeRange_start]: 71216
      });
    },
    get C984() {
      return C984 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 71236,
        [UnicodeRange_start]: 71236
      });
    },
    get C985() {
      return C985 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 71257,
        [UnicodeRange_start]: 71248
      });
    },
    get C986() {
      return C986 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 71338,
        [UnicodeRange_start]: 71296
      });
    },
    get C987() {
      return C987 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 71351,
        [UnicodeRange_start]: 71339
      });
    },
    get C988() {
      return C988 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 71352,
        [UnicodeRange_start]: 71352
      });
    },
    get C989() {
      return C989 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 71369,
        [UnicodeRange_start]: 71360
      });
    },
    get C990() {
      return C990 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 71467,
        [UnicodeRange_start]: 71453
      });
    },
    get C991() {
      return C991 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 71481,
        [UnicodeRange_start]: 71472
      });
    },
    get C992() {
      return C992 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 71723,
        [UnicodeRange_start]: 71680
      });
    },
    get C993() {
      return C993 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 71738,
        [UnicodeRange_start]: 71724
      });
    },
    get C994() {
      return C994 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 71903,
        [UnicodeRange_start]: 71840
      });
    },
    get C995() {
      return C995 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 71913,
        [UnicodeRange_start]: 71904
      });
    },
    get C996() {
      return C996 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 71935,
        [UnicodeRange_start]: 71935
      });
    },
    get C997() {
      return C997 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72103,
        [UnicodeRange_start]: 72096
      });
    },
    get C998() {
      return C998 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72144,
        [UnicodeRange_start]: 72106
      });
    },
    get C999() {
      return C999 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72151,
        [UnicodeRange_start]: 72145
      });
    },
    get C1000() {
      return C1000 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72160,
        [UnicodeRange_start]: 72154
      });
    },
    get C1001() {
      return C1001 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72161,
        [UnicodeRange_start]: 72161
      });
    },
    get C1002() {
      return C1002 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72163,
        [UnicodeRange_start]: 72163
      });
    },
    get C1003() {
      return C1003 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72164,
        [UnicodeRange_start]: 72164
      });
    },
    get C1004() {
      return C1004 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72192,
        [UnicodeRange_start]: 72192
      });
    },
    get C1005() {
      return C1005 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72202,
        [UnicodeRange_start]: 72193
      });
    },
    get C1006() {
      return C1006 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72242,
        [UnicodeRange_start]: 72203
      });
    },
    get C1007() {
      return C1007 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72249,
        [UnicodeRange_start]: 72243
      });
    },
    get C1008() {
      return C1008 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72250,
        [UnicodeRange_start]: 72250
      });
    },
    get C1009() {
      return C1009 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72254,
        [UnicodeRange_start]: 72251
      });
    },
    get C1010() {
      return C1010 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72263,
        [UnicodeRange_start]: 72263
      });
    },
    get C1011() {
      return C1011 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72272,
        [UnicodeRange_start]: 72272
      });
    },
    get C1012() {
      return C1012 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72283,
        [UnicodeRange_start]: 72273
      });
    },
    get C1013() {
      return C1013 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72329,
        [UnicodeRange_start]: 72284
      });
    },
    get C1014() {
      return C1014 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72345,
        [UnicodeRange_start]: 72330
      });
    },
    get C1015() {
      return C1015 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72349,
        [UnicodeRange_start]: 72349
      });
    },
    get C1016() {
      return C1016 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72440,
        [UnicodeRange_start]: 72384
      });
    },
    get C1017() {
      return C1017 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72712,
        [UnicodeRange_start]: 72704
      });
    },
    get C1018() {
      return C1018 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72750,
        [UnicodeRange_start]: 72714
      });
    },
    get C1019() {
      return C1019 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72758,
        [UnicodeRange_start]: 72751
      });
    },
    get C1020() {
      return C1020 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72767,
        [UnicodeRange_start]: 72760
      });
    },
    get C1021() {
      return C1021 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72768,
        [UnicodeRange_start]: 72768
      });
    },
    get C1022() {
      return C1022 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 72793,
        [UnicodeRange_start]: 72784
      });
    },
    get C1023() {
      return C1023 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72847,
        [UnicodeRange_start]: 72818
      });
    },
    get C1024() {
      return C1024 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72871,
        [UnicodeRange_start]: 72850
      });
    },
    get C1025() {
      return C1025 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 72886,
        [UnicodeRange_start]: 72873
      });
    },
    get C1026() {
      return C1026 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72966,
        [UnicodeRange_start]: 72960
      });
    },
    get C1027() {
      return C1027 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 72969,
        [UnicodeRange_start]: 72968
      });
    },
    get C1028() {
      return C1028 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 73008,
        [UnicodeRange_start]: 72971
      });
    },
    get C1029() {
      return C1029 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 73014,
        [UnicodeRange_start]: 73009
      });
    },
    get C1030() {
      return C1030 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 73018,
        [UnicodeRange_start]: 73018
      });
    },
    get C1031() {
      return C1031 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 73021,
        [UnicodeRange_start]: 73020
      });
    },
    get C1032() {
      return C1032 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 73029,
        [UnicodeRange_start]: 73023
      });
    },
    get C1033() {
      return C1033 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 73030,
        [UnicodeRange_start]: 73030
      });
    },
    get C1034() {
      return C1034 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 73031,
        [UnicodeRange_start]: 73031
      });
    },
    get C1035() {
      return C1035 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 73049,
        [UnicodeRange_start]: 73040
      });
    },
    get C1036() {
      return C1036 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 73061,
        [UnicodeRange_start]: 73056
      });
    },
    get C1037() {
      return C1037 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 73064,
        [UnicodeRange_start]: 73063
      });
    },
    get C1038() {
      return C1038 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 73097,
        [UnicodeRange_start]: 73066
      });
    },
    get C1039() {
      return C1039 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 73102,
        [UnicodeRange_start]: 73098
      });
    },
    get C1040() {
      return C1040 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 73105,
        [UnicodeRange_start]: 73104
      });
    },
    get C1041() {
      return C1041 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 73111,
        [UnicodeRange_start]: 73107
      });
    },
    get C1042() {
      return C1042 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 73112,
        [UnicodeRange_start]: 73112
      });
    },
    get C1043() {
      return C1043 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 73129,
        [UnicodeRange_start]: 73120
      });
    },
    get C1044() {
      return C1044 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 73458,
        [UnicodeRange_start]: 73440
      });
    },
    get C1045() {
      return C1045 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 73462,
        [UnicodeRange_start]: 73459
      });
    },
    get C1046() {
      return C1046 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 74649,
        [UnicodeRange_start]: 73728
      });
    },
    get C1047() {
      return C1047 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 74862,
        [UnicodeRange_start]: 74752
      });
    },
    get C1048() {
      return C1048 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 75075,
        [UnicodeRange_start]: 74880
      });
    },
    get C1049() {
      return C1049 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 78894,
        [UnicodeRange_start]: 77824
      });
    },
    get C1050() {
      return C1050 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 78904,
        [UnicodeRange_start]: 78896
      });
    },
    get C1051() {
      return C1051 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 83526,
        [UnicodeRange_start]: 82944
      });
    },
    get C1052() {
      return C1052 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 92728,
        [UnicodeRange_start]: 92160
      });
    },
    get C1053() {
      return C1053 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 92766,
        [UnicodeRange_start]: 92736
      });
    },
    get C1054() {
      return C1054 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 92777,
        [UnicodeRange_start]: 92768
      });
    },
    get C1055() {
      return C1055 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 92909,
        [UnicodeRange_start]: 92880
      });
    },
    get C1056() {
      return C1056 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 92916,
        [UnicodeRange_start]: 92912
      });
    },
    get C1057() {
      return C1057 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 92975,
        [UnicodeRange_start]: 92928
      });
    },
    get C1058() {
      return C1058 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 92982,
        [UnicodeRange_start]: 92976
      });
    },
    get C1059() {
      return C1059 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 92995,
        [UnicodeRange_start]: 92992
      });
    },
    get C1060() {
      return C1060 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 93017,
        [UnicodeRange_start]: 93008
      });
    },
    get C1061() {
      return C1061 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 93047,
        [UnicodeRange_start]: 93027
      });
    },
    get C1062() {
      return C1062 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 93071,
        [UnicodeRange_start]: 93053
      });
    },
    get C1063() {
      return C1063 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 93823,
        [UnicodeRange_start]: 93760
      });
    },
    get C1064() {
      return C1064 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 94026,
        [UnicodeRange_start]: 93952
      });
    },
    get C1065() {
      return C1065 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 94031,
        [UnicodeRange_start]: 94031
      });
    },
    get C1066() {
      return C1066 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 94032,
        [UnicodeRange_start]: 94032
      });
    },
    get C1067() {
      return C1067 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 94087,
        [UnicodeRange_start]: 94033
      });
    },
    get C1068() {
      return C1068 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 94098,
        [UnicodeRange_start]: 94095
      });
    },
    get C1069() {
      return C1069 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 94111,
        [UnicodeRange_start]: 94099
      });
    },
    get C1070() {
      return C1070 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 94177,
        [UnicodeRange_start]: 94176
      });
    },
    get C1071() {
      return C1071 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 94179,
        [UnicodeRange_start]: 94179
      });
    },
    get C1072() {
      return C1072 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 110592,
        [UnicodeRange_start]: 110592
      });
    },
    get C1073() {
      return C1073 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C134 || CT.C134,
        [UnicodeRange_end]: 110951,
        [UnicodeRange_start]: 110948
      });
    },
    get C1074() {
      return C1074 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 113770,
        [UnicodeRange_start]: 113664
      });
    },
    get C1075() {
      return C1075 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 113788,
        [UnicodeRange_start]: 113776
      });
    },
    get C1076() {
      return C1076 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 113800,
        [UnicodeRange_start]: 113792
      });
    },
    get C1077() {
      return C1077 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 113817,
        [UnicodeRange_start]: 113808
      });
    },
    get C1078() {
      return C1078 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 113822,
        [UnicodeRange_start]: 113821
      });
    },
    get C1079() {
      return C1079 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 113827,
        [UnicodeRange_start]: 113824
      });
    },
    get C1080() {
      return C1080 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 119145,
        [UnicodeRange_start]: 119141
      });
    },
    get C1081() {
      return C1081 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 119154,
        [UnicodeRange_start]: 119149
      });
    },
    get C1082() {
      return C1082 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 119162,
        [UnicodeRange_start]: 119155
      });
    },
    get C1083() {
      return C1083 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 119170,
        [UnicodeRange_start]: 119163
      });
    },
    get C1084() {
      return C1084 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 119179,
        [UnicodeRange_start]: 119173
      });
    },
    get C1085() {
      return C1085 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 119213,
        [UnicodeRange_start]: 119210
      });
    },
    get C1086() {
      return C1086 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 119364,
        [UnicodeRange_start]: 119362
      });
    },
    get C1087() {
      return C1087 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 119892,
        [UnicodeRange_start]: 119808
      });
    },
    get C1088() {
      return C1088 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 119964,
        [UnicodeRange_start]: 119894
      });
    },
    get C1089() {
      return C1089 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 119967,
        [UnicodeRange_start]: 119966
      });
    },
    get C1090() {
      return C1090 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 119970,
        [UnicodeRange_start]: 119970
      });
    },
    get C1091() {
      return C1091 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 119974,
        [UnicodeRange_start]: 119973
      });
    },
    get C1092() {
      return C1092 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 119980,
        [UnicodeRange_start]: 119977
      });
    },
    get C1093() {
      return C1093 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 119993,
        [UnicodeRange_start]: 119982
      });
    },
    get C1094() {
      return C1094 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 119995,
        [UnicodeRange_start]: 119995
      });
    },
    get C1095() {
      return C1095 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120003,
        [UnicodeRange_start]: 119997
      });
    },
    get C1096() {
      return C1096 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120069,
        [UnicodeRange_start]: 120005
      });
    },
    get C1097() {
      return C1097 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120074,
        [UnicodeRange_start]: 120071
      });
    },
    get C1098() {
      return C1098 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120084,
        [UnicodeRange_start]: 120077
      });
    },
    get C1099() {
      return C1099 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120092,
        [UnicodeRange_start]: 120086
      });
    },
    get C1100() {
      return C1100 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120121,
        [UnicodeRange_start]: 120094
      });
    },
    get C1101() {
      return C1101 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120126,
        [UnicodeRange_start]: 120123
      });
    },
    get C1102() {
      return C1102 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120132,
        [UnicodeRange_start]: 120128
      });
    },
    get C1103() {
      return C1103 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120134,
        [UnicodeRange_start]: 120134
      });
    },
    get C1104() {
      return C1104 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120144,
        [UnicodeRange_start]: 120138
      });
    },
    get C1105() {
      return C1105 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120485,
        [UnicodeRange_start]: 120146
      });
    },
    get C1106() {
      return C1106 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120512,
        [UnicodeRange_start]: 120488
      });
    },
    get C1107() {
      return C1107 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120538,
        [UnicodeRange_start]: 120514
      });
    },
    get C1108() {
      return C1108 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120570,
        [UnicodeRange_start]: 120540
      });
    },
    get C1109() {
      return C1109 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120596,
        [UnicodeRange_start]: 120572
      });
    },
    get C1110() {
      return C1110 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120628,
        [UnicodeRange_start]: 120598
      });
    },
    get C1111() {
      return C1111 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120654,
        [UnicodeRange_start]: 120630
      });
    },
    get C1112() {
      return C1112 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120686,
        [UnicodeRange_start]: 120656
      });
    },
    get C1113() {
      return C1113 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120712,
        [UnicodeRange_start]: 120688
      });
    },
    get C1114() {
      return C1114 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120744,
        [UnicodeRange_start]: 120714
      });
    },
    get C1115() {
      return C1115 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120770,
        [UnicodeRange_start]: 120746
      });
    },
    get C1116() {
      return C1116 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 120779,
        [UnicodeRange_start]: 120772
      });
    },
    get C1117() {
      return C1117 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 120831,
        [UnicodeRange_start]: 120782
      });
    },
    get C1118() {
      return C1118 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 121398,
        [UnicodeRange_start]: 121344
      });
    },
    get C1119() {
      return C1119 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 121452,
        [UnicodeRange_start]: 121403
      });
    },
    get C1120() {
      return C1120 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 121461,
        [UnicodeRange_start]: 121461
      });
    },
    get C1121() {
      return C1121 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 121476,
        [UnicodeRange_start]: 121476
      });
    },
    get C1122() {
      return C1122 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 121503,
        [UnicodeRange_start]: 121499
      });
    },
    get C1123() {
      return C1123 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 121519,
        [UnicodeRange_start]: 121505
      });
    },
    get C1124() {
      return C1124 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 122886,
        [UnicodeRange_start]: 122880
      });
    },
    get C1125() {
      return C1125 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 122904,
        [UnicodeRange_start]: 122888
      });
    },
    get C1126() {
      return C1126 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 122913,
        [UnicodeRange_start]: 122907
      });
    },
    get C1127() {
      return C1127 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 122916,
        [UnicodeRange_start]: 122915
      });
    },
    get C1128() {
      return C1128 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 122922,
        [UnicodeRange_start]: 122918
      });
    },
    get C1129() {
      return C1129 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 123180,
        [UnicodeRange_start]: 123136
      });
    },
    get C1130() {
      return C1130 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 123190,
        [UnicodeRange_start]: 123184
      });
    },
    get C1131() {
      return C1131 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 123197,
        [UnicodeRange_start]: 123191
      });
    },
    get C1132() {
      return C1132 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 123209,
        [UnicodeRange_start]: 123200
      });
    },
    get C1133() {
      return C1133 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 123214,
        [UnicodeRange_start]: 123214
      });
    },
    get C1134() {
      return C1134 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 123627,
        [UnicodeRange_start]: 123584
      });
    },
    get C1135() {
      return C1135 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 123631,
        [UnicodeRange_start]: 123628
      });
    },
    get C1136() {
      return C1136 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 123641,
        [UnicodeRange_start]: 123632
      });
    },
    get C1137() {
      return C1137 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 125124,
        [UnicodeRange_start]: 124928
      });
    },
    get C1138() {
      return C1138 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 125142,
        [UnicodeRange_start]: 125136
      });
    },
    get C1139() {
      return C1139 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 125251,
        [UnicodeRange_start]: 125184
      });
    },
    get C1140() {
      return C1140 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 125258,
        [UnicodeRange_start]: 125252
      });
    },
    get C1141() {
      return C1141 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 125259,
        [UnicodeRange_start]: 125259
      });
    },
    get C1142() {
      return C1142 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C139 || CT.C139,
        [UnicodeRange_end]: 125273,
        [UnicodeRange_start]: 125264
      });
    },
    get C1143() {
      return C1143 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126467,
        [UnicodeRange_start]: 126464
      });
    },
    get C1144() {
      return C1144 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126495,
        [UnicodeRange_start]: 126469
      });
    },
    get C1145() {
      return C1145 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126498,
        [UnicodeRange_start]: 126497
      });
    },
    get C1146() {
      return C1146 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126500,
        [UnicodeRange_start]: 126500
      });
    },
    get C1147() {
      return C1147 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126503,
        [UnicodeRange_start]: 126503
      });
    },
    get C1148() {
      return C1148 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126514,
        [UnicodeRange_start]: 126505
      });
    },
    get C1149() {
      return C1149 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126519,
        [UnicodeRange_start]: 126516
      });
    },
    get C1150() {
      return C1150 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126521,
        [UnicodeRange_start]: 126521
      });
    },
    get C1151() {
      return C1151 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126523,
        [UnicodeRange_start]: 126523
      });
    },
    get C1152() {
      return C1152 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126530,
        [UnicodeRange_start]: 126530
      });
    },
    get C1153() {
      return C1153 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126535,
        [UnicodeRange_start]: 126535
      });
    },
    get C1154() {
      return C1154 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126537,
        [UnicodeRange_start]: 126537
      });
    },
    get C1155() {
      return C1155 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126539,
        [UnicodeRange_start]: 126539
      });
    },
    get C1156() {
      return C1156 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126543,
        [UnicodeRange_start]: 126541
      });
    },
    get C1157() {
      return C1157 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126546,
        [UnicodeRange_start]: 126545
      });
    },
    get C1158() {
      return C1158 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126548,
        [UnicodeRange_start]: 126548
      });
    },
    get C1159() {
      return C1159 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126551,
        [UnicodeRange_start]: 126551
      });
    },
    get C1160() {
      return C1160 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126553,
        [UnicodeRange_start]: 126553
      });
    },
    get C1161() {
      return C1161 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126555,
        [UnicodeRange_start]: 126555
      });
    },
    get C1162() {
      return C1162 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126557,
        [UnicodeRange_start]: 126557
      });
    },
    get C1163() {
      return C1163 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126559,
        [UnicodeRange_start]: 126559
      });
    },
    get C1164() {
      return C1164 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126562,
        [UnicodeRange_start]: 126561
      });
    },
    get C1165() {
      return C1165 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126564,
        [UnicodeRange_start]: 126564
      });
    },
    get C1166() {
      return C1166 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126570,
        [UnicodeRange_start]: 126567
      });
    },
    get C1167() {
      return C1167 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126578,
        [UnicodeRange_start]: 126572
      });
    },
    get C1168() {
      return C1168 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126583,
        [UnicodeRange_start]: 126580
      });
    },
    get C1169() {
      return C1169 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126588,
        [UnicodeRange_start]: 126585
      });
    },
    get C1170() {
      return C1170 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126590,
        [UnicodeRange_start]: 126590
      });
    },
    get C1171() {
      return C1171 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126601,
        [UnicodeRange_start]: 126592
      });
    },
    get C1172() {
      return C1172 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126619,
        [UnicodeRange_start]: 126603
      });
    },
    get C1173() {
      return C1173 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126627,
        [UnicodeRange_start]: 126625
      });
    },
    get C1174() {
      return C1174 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126633,
        [UnicodeRange_start]: 126629
      });
    },
    get C1175() {
      return C1175 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 126651,
        [UnicodeRange_start]: 126635
      });
    },
    get C1176() {
      return C1176 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 127305,
        [UnicodeRange_start]: 127280
      });
    },
    get C1177() {
      return C1177 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 127337,
        [UnicodeRange_start]: 127312
      });
    },
    get C1178() {
      return C1178 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C135 || CT.C135,
        [UnicodeRange_end]: 127369,
        [UnicodeRange_start]: 127344
      });
    },
    get C1179() {
      return C1179 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C132 || CT.C132,
        [UnicodeRange_end]: 127487,
        [UnicodeRange_start]: 127462
      });
    },
    get C1180() {
      return C1180 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 127999,
        [UnicodeRange_start]: 127995
      });
    },
    get C1181() {
      return C1181 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C133 || CT.C133,
        [UnicodeRange_end]: 917505,
        [UnicodeRange_start]: 917505
      });
    },
    get C1182() {
      return C1182 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 917631,
        [UnicodeRange_start]: 917536
      });
    },
    get C1183() {
      return C1183 = dart.const({
        __proto__: UnicodeRangeOfCharProperty().prototype,
        [UnicodeRange_property]: C131 || CT.C131,
        [UnicodeRange_end]: 917999,
        [UnicodeRange_start]: 917760
      });
    },
    get C213() {
      return C213 = dart.constList([C214 || CT.C214, C215 || CT.C215, C216 || CT.C216, C217 || CT.C217, C218 || CT.C218, C219 || CT.C219, C220 || CT.C220, C221 || CT.C221, C222 || CT.C222, C223 || CT.C223, C224 || CT.C224, C225 || CT.C225, C226 || CT.C226, C227 || CT.C227, C228 || CT.C228, C229 || CT.C229, C230 || CT.C230, C231 || CT.C231, C232 || CT.C232, C233 || CT.C233, C234 || CT.C234, C235 || CT.C235, C236 || CT.C236, C237 || CT.C237, C238 || CT.C238, C239 || CT.C239, C240 || CT.C240, C241 || CT.C241, C242 || CT.C242, C243 || CT.C243, C244 || CT.C244, C245 || CT.C245, C246 || CT.C246, C247 || CT.C247, C248 || CT.C248, C249 || CT.C249, C250 || CT.C250, C251 || CT.C251, C252 || CT.C252, C253 || CT.C253, C254 || CT.C254, C255 || CT.C255, C256 || CT.C256, C257 || CT.C257, C258 || CT.C258, C259 || CT.C259, C260 || CT.C260, C261 || CT.C261, C262 || CT.C262, C263 || CT.C263, C264 || CT.C264, C265 || CT.C265, C266 || CT.C266, C267 || CT.C267, C268 || CT.C268, C269 || CT.C269, C270 || CT.C270, C271 || CT.C271, C272 || CT.C272, C273 || CT.C273, C274 || CT.C274, C275 || CT.C275, C276 || CT.C276, C277 || CT.C277, C278 || CT.C278, C279 || CT.C279, C280 || CT.C280, C281 || CT.C281, C282 || CT.C282, C283 || CT.C283, C284 || CT.C284, C285 || CT.C285, C286 || CT.C286, C287 || CT.C287, C288 || CT.C288, C289 || CT.C289, C290 || CT.C290, C291 || CT.C291, C292 || CT.C292, C293 || CT.C293, C294 || CT.C294, C295 || CT.C295, C296 || CT.C296, C297 || CT.C297, C298 || CT.C298, C299 || CT.C299, C300 || CT.C300, C301 || CT.C301, C302 || CT.C302, C303 || CT.C303, C304 || CT.C304, C305 || CT.C305, C306 || CT.C306, C307 || CT.C307, C308 || CT.C308, C309 || CT.C309, C310 || CT.C310, C311 || CT.C311, C312 || CT.C312, C313 || CT.C313, C314 || CT.C314, C315 || CT.C315, C316 || CT.C316, C317 || CT.C317, C318 || CT.C318, C319 || CT.C319, C320 || CT.C320, C321 || CT.C321, C322 || CT.C322, C323 || CT.C323, C324 || CT.C324, C325 || CT.C325, C326 || CT.C326, C327 || CT.C327, C328 || CT.C328, C329 || CT.C329, C330 || CT.C330, C331 || CT.C331, C332 || CT.C332, C333 || CT.C333, C334 || CT.C334, C335 || CT.C335, C336 || CT.C336, C337 || CT.C337, C338 || CT.C338, C339 || CT.C339, C340 || CT.C340, C341 || CT.C341, C342 || CT.C342, C343 || CT.C343, C344 || CT.C344, C345 || CT.C345, C346 || CT.C346, C347 || CT.C347, C348 || CT.C348, C349 || CT.C349, C350 || CT.C350, C351 || CT.C351, C352 || CT.C352, C353 || CT.C353, C354 || CT.C354, C355 || CT.C355, C356 || CT.C356, C357 || CT.C357, C358 || CT.C358, C359 || CT.C359, C360 || CT.C360, C361 || CT.C361, C362 || CT.C362, C363 || CT.C363, C364 || CT.C364, C365 || CT.C365, C366 || CT.C366, C367 || CT.C367, C368 || CT.C368, C369 || CT.C369, C370 || CT.C370, C371 || CT.C371, C372 || CT.C372, C373 || CT.C373, C374 || CT.C374, C375 || CT.C375, C376 || CT.C376, C377 || CT.C377, C378 || CT.C378, C379 || CT.C379, C380 || CT.C380, C381 || CT.C381, C382 || CT.C382, C383 || CT.C383, C384 || CT.C384, C385 || CT.C385, C386 || CT.C386, C387 || CT.C387, C388 || CT.C388, C389 || CT.C389, C390 || CT.C390, C391 || CT.C391, C392 || CT.C392, C393 || CT.C393, C394 || CT.C394, C395 || CT.C395, C396 || CT.C396, C397 || CT.C397, C398 || CT.C398, C399 || CT.C399, C400 || CT.C400, C401 || CT.C401, C402 || CT.C402, C403 || CT.C403, C404 || CT.C404, C405 || CT.C405, C406 || CT.C406, C407 || CT.C407, C408 || CT.C408, C409 || CT.C409, C410 || CT.C410, C411 || CT.C411, C412 || CT.C412, C413 || CT.C413, C414 || CT.C414, C415 || CT.C415, C416 || CT.C416, C417 || CT.C417, C418 || CT.C418, C419 || CT.C419, C420 || CT.C420, C421 || CT.C421, C422 || CT.C422, C423 || CT.C423, C424 || CT.C424, C425 || CT.C425, C426 || CT.C426, C427 || CT.C427, C428 || CT.C428, C429 || CT.C429, C430 || CT.C430, C431 || CT.C431, C432 || CT.C432, C433 || CT.C433, C434 || CT.C434, C435 || CT.C435, C436 || CT.C436, C437 || CT.C437, C438 || CT.C438, C439 || CT.C439, C440 || CT.C440, C441 || CT.C441, C442 || CT.C442, C443 || CT.C443, C444 || CT.C444, C445 || CT.C445, C446 || CT.C446, C447 || CT.C447, C448 || CT.C448, C449 || CT.C449, C450 || CT.C450, C451 || CT.C451, C452 || CT.C452, C453 || CT.C453, C454 || CT.C454, C455 || CT.C455, C456 || CT.C456, C457 || CT.C457, C458 || CT.C458, C459 || CT.C459, C460 || CT.C460, C461 || CT.C461, C462 || CT.C462, C463 || CT.C463, C464 || CT.C464, C465 || CT.C465, C466 || CT.C466, C467 || CT.C467, C468 || CT.C468, C469 || CT.C469, C470 || CT.C470, C471 || CT.C471, C472 || CT.C472, C473 || CT.C473, C474 || CT.C474, C475 || CT.C475, C476 || CT.C476, C477 || CT.C477, C478 || CT.C478, C479 || CT.C479, C480 || CT.C480, C481 || CT.C481, C482 || CT.C482, C483 || CT.C483, C484 || CT.C484, C485 || CT.C485, C486 || CT.C486, C487 || CT.C487, C488 || CT.C488, C489 || CT.C489, C490 || CT.C490, C491 || CT.C491, C492 || CT.C492, C493 || CT.C493, C494 || CT.C494, C495 || CT.C495, C496 || CT.C496, C497 || CT.C497, C498 || CT.C498, C499 || CT.C499, C500 || CT.C500, C501 || CT.C501, C502 || CT.C502, C503 || CT.C503, C504 || CT.C504, C505 || CT.C505, C506 || CT.C506, C507 || CT.C507, C508 || CT.C508, C509 || CT.C509, C510 || CT.C510, C511 || CT.C511, C512 || CT.C512, C513 || CT.C513, C514 || CT.C514, C515 || CT.C515, C516 || CT.C516, C517 || CT.C517, C518 || CT.C518, C519 || CT.C519, C520 || CT.C520, C521 || CT.C521, C522 || CT.C522, C523 || CT.C523, C524 || CT.C524, C525 || CT.C525, C526 || CT.C526, C527 || CT.C527, C528 || CT.C528, C529 || CT.C529, C530 || CT.C530, C531 || CT.C531, C532 || CT.C532, C533 || CT.C533, C534 || CT.C534, C535 || CT.C535, C536 || CT.C536, C537 || CT.C537, C538 || CT.C538, C539 || CT.C539, C540 || CT.C540, C541 || CT.C541, C542 || CT.C542, C543 || CT.C543, C544 || CT.C544, C545 || CT.C545, C546 || CT.C546, C547 || CT.C547, C548 || CT.C548, C549 || CT.C549, C550 || CT.C550, C551 || CT.C551, C552 || CT.C552, C553 || CT.C553, C554 || CT.C554, C555 || CT.C555, C556 || CT.C556, C557 || CT.C557, C558 || CT.C558, C559 || CT.C559, C560 || CT.C560, C561 || CT.C561, C562 || CT.C562, C563 || CT.C563, C564 || CT.C564, C565 || CT.C565, C566 || CT.C566, C567 || CT.C567, C568 || CT.C568, C569 || CT.C569, C570 || CT.C570, C571 || CT.C571, C572 || CT.C572, C573 || CT.C573, C574 || CT.C574, C575 || CT.C575, C576 || CT.C576, C577 || CT.C577, C578 || CT.C578, C579 || CT.C579, C580 || CT.C580, C581 || CT.C581, C582 || CT.C582, C583 || CT.C583, C584 || CT.C584, C585 || CT.C585, C586 || CT.C586, C587 || CT.C587, C588 || CT.C588, C589 || CT.C589, C590 || CT.C590, C591 || CT.C591, C592 || CT.C592, C593 || CT.C593, C594 || CT.C594, C595 || CT.C595, C596 || CT.C596, C597 || CT.C597, C598 || CT.C598, C599 || CT.C599, C600 || CT.C600, C601 || CT.C601, C602 || CT.C602, C603 || CT.C603, C604 || CT.C604, C605 || CT.C605, C606 || CT.C606, C607 || CT.C607, C608 || CT.C608, C609 || CT.C609, C610 || CT.C610, C611 || CT.C611, C612 || CT.C612, C613 || CT.C613, C614 || CT.C614, C615 || CT.C615, C616 || CT.C616, C617 || CT.C617, C618 || CT.C618, C619 || CT.C619, C620 || CT.C620, C621 || CT.C621, C622 || CT.C622, C623 || CT.C623, C624 || CT.C624, C625 || CT.C625, C626 || CT.C626, C627 || CT.C627, C628 || CT.C628, C629 || CT.C629, C630 || CT.C630, C631 || CT.C631, C632 || CT.C632, C633 || CT.C633, C634 || CT.C634, C635 || CT.C635, C636 || CT.C636, C637 || CT.C637, C638 || CT.C638, C639 || CT.C639, C640 || CT.C640, C641 || CT.C641, C642 || CT.C642, C643 || CT.C643, C644 || CT.C644, C645 || CT.C645, C646 || CT.C646, C647 || CT.C647, C648 || CT.C648, C649 || CT.C649, C650 || CT.C650, C651 || CT.C651, C652 || CT.C652, C653 || CT.C653, C654 || CT.C654, C655 || CT.C655, C656 || CT.C656, C657 || CT.C657, C658 || CT.C658, C659 || CT.C659, C660 || CT.C660, C661 || CT.C661, C662 || CT.C662, C663 || CT.C663, C664 || CT.C664, C665 || CT.C665, C666 || CT.C666, C667 || CT.C667, C668 || CT.C668, C669 || CT.C669, C670 || CT.C670, C671 || CT.C671, C672 || CT.C672, C673 || CT.C673, C674 || CT.C674, C675 || CT.C675, C676 || CT.C676, C677 || CT.C677, C678 || CT.C678, C679 || CT.C679, C680 || CT.C680, C681 || CT.C681, C682 || CT.C682, C683 || CT.C683, C684 || CT.C684, C685 || CT.C685, C686 || CT.C686, C687 || CT.C687, C688 || CT.C688, C689 || CT.C689, C690 || CT.C690, C691 || CT.C691, C692 || CT.C692, C693 || CT.C693, C694 || CT.C694, C695 || CT.C695, C696 || CT.C696, C697 || CT.C697, C698 || CT.C698, C699 || CT.C699, C700 || CT.C700, C701 || CT.C701, C702 || CT.C702, C703 || CT.C703, C704 || CT.C704, C705 || CT.C705, C706 || CT.C706, C707 || CT.C707, C708 || CT.C708, C709 || CT.C709, C710 || CT.C710, C711 || CT.C711, C712 || CT.C712, C713 || CT.C713, C714 || CT.C714, C715 || CT.C715, C716 || CT.C716, C717 || CT.C717, C718 || CT.C718, C719 || CT.C719, C720 || CT.C720, C721 || CT.C721, C722 || CT.C722, C723 || CT.C723, C724 || CT.C724, C725 || CT.C725, C726 || CT.C726, C727 || CT.C727, C728 || CT.C728, C729 || CT.C729, C730 || CT.C730, C731 || CT.C731, C732 || CT.C732, C733 || CT.C733, C734 || CT.C734, C735 || CT.C735, C736 || CT.C736, C737 || CT.C737, C738 || CT.C738, C739 || CT.C739, C740 || CT.C740, C741 || CT.C741, C742 || CT.C742, C743 || CT.C743, C744 || CT.C744, C745 || CT.C745, C746 || CT.C746, C747 || CT.C747, C748 || CT.C748, C749 || CT.C749, C750 || CT.C750, C751 || CT.C751, C752 || CT.C752, C753 || CT.C753, C754 || CT.C754, C755 || CT.C755, C756 || CT.C756, C757 || CT.C757, C758 || CT.C758, C759 || CT.C759, C760 || CT.C760, C761 || CT.C761, C762 || CT.C762, C763 || CT.C763, C764 || CT.C764, C765 || CT.C765, C766 || CT.C766, C767 || CT.C767, C768 || CT.C768, C769 || CT.C769, C770 || CT.C770, C771 || CT.C771, C772 || CT.C772, C773 || CT.C773, C774 || CT.C774, C775 || CT.C775, C776 || CT.C776, C777 || CT.C777, C778 || CT.C778, C779 || CT.C779, C780 || CT.C780, C781 || CT.C781, C782 || CT.C782, C783 || CT.C783, C784 || CT.C784, C785 || CT.C785, C786 || CT.C786, C787 || CT.C787, C788 || CT.C788, C789 || CT.C789, C790 || CT.C790, C791 || CT.C791, C792 || CT.C792, C793 || CT.C793, C794 || CT.C794, C795 || CT.C795, C796 || CT.C796, C797 || CT.C797, C798 || CT.C798, C799 || CT.C799, C800 || CT.C800, C801 || CT.C801, C802 || CT.C802, C803 || CT.C803, C804 || CT.C804, C805 || CT.C805, C806 || CT.C806, C807 || CT.C807, C808 || CT.C808, C809 || CT.C809, C810 || CT.C810, C811 || CT.C811, C812 || CT.C812, C813 || CT.C813, C814 || CT.C814, C815 || CT.C815, C816 || CT.C816, C817 || CT.C817, C818 || CT.C818, C819 || CT.C819, C820 || CT.C820, C821 || CT.C821, C822 || CT.C822, C823 || CT.C823, C824 || CT.C824, C825 || CT.C825, C826 || CT.C826, C827 || CT.C827, C828 || CT.C828, C829 || CT.C829, C830 || CT.C830, C831 || CT.C831, C832 || CT.C832, C833 || CT.C833, C834 || CT.C834, C835 || CT.C835, C836 || CT.C836, C837 || CT.C837, C838 || CT.C838, C839 || CT.C839, C840 || CT.C840, C841 || CT.C841, C842 || CT.C842, C843 || CT.C843, C844 || CT.C844, C845 || CT.C845, C846 || CT.C846, C847 || CT.C847, C848 || CT.C848, C849 || CT.C849, C850 || CT.C850, C851 || CT.C851, C852 || CT.C852, C853 || CT.C853, C854 || CT.C854, C855 || CT.C855, C856 || CT.C856, C857 || CT.C857, C858 || CT.C858, C859 || CT.C859, C860 || CT.C860, C861 || CT.C861, C862 || CT.C862, C863 || CT.C863, C864 || CT.C864, C865 || CT.C865, C866 || CT.C866, C867 || CT.C867, C868 || CT.C868, C869 || CT.C869, C870 || CT.C870, C871 || CT.C871, C872 || CT.C872, C873 || CT.C873, C874 || CT.C874, C875 || CT.C875, C876 || CT.C876, C877 || CT.C877, C878 || CT.C878, C879 || CT.C879, C880 || CT.C880, C881 || CT.C881, C882 || CT.C882, C883 || CT.C883, C884 || CT.C884, C885 || CT.C885, C886 || CT.C886, C887 || CT.C887, C888 || CT.C888, C889 || CT.C889, C890 || CT.C890, C891 || CT.C891, C892 || CT.C892, C893 || CT.C893, C894 || CT.C894, C895 || CT.C895, C896 || CT.C896, C897 || CT.C897, C898 || CT.C898, C899 || CT.C899, C900 || CT.C900, C901 || CT.C901, C902 || CT.C902, C903 || CT.C903, C904 || CT.C904, C905 || CT.C905, C906 || CT.C906, C907 || CT.C907, C908 || CT.C908, C909 || CT.C909, C910 || CT.C910, C911 || CT.C911, C912 || CT.C912, C913 || CT.C913, C914 || CT.C914, C915 || CT.C915, C916 || CT.C916, C917 || CT.C917, C918 || CT.C918, C919 || CT.C919, C920 || CT.C920, C921 || CT.C921, C922 || CT.C922, C923 || CT.C923, C924 || CT.C924, C925 || CT.C925, C926 || CT.C926, C927 || CT.C927, C928 || CT.C928, C929 || CT.C929, C930 || CT.C930, C931 || CT.C931, C932 || CT.C932, C933 || CT.C933, C934 || CT.C934, C935 || CT.C935, C936 || CT.C936, C937 || CT.C937, C938 || CT.C938, C939 || CT.C939, C940 || CT.C940, C941 || CT.C941, C942 || CT.C942, C943 || CT.C943, C944 || CT.C944, C945 || CT.C945, C946 || CT.C946, C947 || CT.C947, C948 || CT.C948, C949 || CT.C949, C950 || CT.C950, C951 || CT.C951, C952 || CT.C952, C953 || CT.C953, C954 || CT.C954, C955 || CT.C955, C956 || CT.C956, C957 || CT.C957, C958 || CT.C958, C959 || CT.C959, C960 || CT.C960, C961 || CT.C961, C962 || CT.C962, C963 || CT.C963, C964 || CT.C964, C965 || CT.C965, C966 || CT.C966, C967 || CT.C967, C968 || CT.C968, C969 || CT.C969, C970 || CT.C970, C971 || CT.C971, C972 || CT.C972, C973 || CT.C973, C974 || CT.C974, C975 || CT.C975, C976 || CT.C976, C977 || CT.C977, C978 || CT.C978, C979 || CT.C979, C980 || CT.C980, C981 || CT.C981, C982 || CT.C982, C983 || CT.C983, C984 || CT.C984, C985 || CT.C985, C986 || CT.C986, C987 || CT.C987, C988 || CT.C988, C989 || CT.C989, C990 || CT.C990, C991 || CT.C991, C992 || CT.C992, C993 || CT.C993, C994 || CT.C994, C995 || CT.C995, C996 || CT.C996, C997 || CT.C997, C998 || CT.C998, C999 || CT.C999, C1000 || CT.C1000, C1001 || CT.C1001, C1002 || CT.C1002, C1003 || CT.C1003, C1004 || CT.C1004, C1005 || CT.C1005, C1006 || CT.C1006, C1007 || CT.C1007, C1008 || CT.C1008, C1009 || CT.C1009, C1010 || CT.C1010, C1011 || CT.C1011, C1012 || CT.C1012, C1013 || CT.C1013, C1014 || CT.C1014, C1015 || CT.C1015, C1016 || CT.C1016, C1017 || CT.C1017, C1018 || CT.C1018, C1019 || CT.C1019, C1020 || CT.C1020, C1021 || CT.C1021, C1022 || CT.C1022, C1023 || CT.C1023, C1024 || CT.C1024, C1025 || CT.C1025, C1026 || CT.C1026, C1027 || CT.C1027, C1028 || CT.C1028, C1029 || CT.C1029, C1030 || CT.C1030, C1031 || CT.C1031, C1032 || CT.C1032, C1033 || CT.C1033, C1034 || CT.C1034, C1035 || CT.C1035, C1036 || CT.C1036, C1037 || CT.C1037, C1038 || CT.C1038, C1039 || CT.C1039, C1040 || CT.C1040, C1041 || CT.C1041, C1042 || CT.C1042, C1043 || CT.C1043, C1044 || CT.C1044, C1045 || CT.C1045, C1046 || CT.C1046, C1047 || CT.C1047, C1048 || CT.C1048, C1049 || CT.C1049, C1050 || CT.C1050, C1051 || CT.C1051, C1052 || CT.C1052, C1053 || CT.C1053, C1054 || CT.C1054, C1055 || CT.C1055, C1056 || CT.C1056, C1057 || CT.C1057, C1058 || CT.C1058, C1059 || CT.C1059, C1060 || CT.C1060, C1061 || CT.C1061, C1062 || CT.C1062, C1063 || CT.C1063, C1064 || CT.C1064, C1065 || CT.C1065, C1066 || CT.C1066, C1067 || CT.C1067, C1068 || CT.C1068, C1069 || CT.C1069, C1070 || CT.C1070, C1071 || CT.C1071, C1072 || CT.C1072, C1073 || CT.C1073, C1074 || CT.C1074, C1075 || CT.C1075, C1076 || CT.C1076, C1077 || CT.C1077, C1078 || CT.C1078, C1079 || CT.C1079, C1080 || CT.C1080, C1081 || CT.C1081, C1082 || CT.C1082, C1083 || CT.C1083, C1084 || CT.C1084, C1085 || CT.C1085, C1086 || CT.C1086, C1087 || CT.C1087, C1088 || CT.C1088, C1089 || CT.C1089, C1090 || CT.C1090, C1091 || CT.C1091, C1092 || CT.C1092, C1093 || CT.C1093, C1094 || CT.C1094, C1095 || CT.C1095, C1096 || CT.C1096, C1097 || CT.C1097, C1098 || CT.C1098, C1099 || CT.C1099, C1100 || CT.C1100, C1101 || CT.C1101, C1102 || CT.C1102, C1103 || CT.C1103, C1104 || CT.C1104, C1105 || CT.C1105, C1106 || CT.C1106, C1107 || CT.C1107, C1108 || CT.C1108, C1109 || CT.C1109, C1110 || CT.C1110, C1111 || CT.C1111, C1112 || CT.C1112, C1113 || CT.C1113, C1114 || CT.C1114, C1115 || CT.C1115, C1116 || CT.C1116, C1117 || CT.C1117, C1118 || CT.C1118, C1119 || CT.C1119, C1120 || CT.C1120, C1121 || CT.C1121, C1122 || CT.C1122, C1123 || CT.C1123, C1124 || CT.C1124, C1125 || CT.C1125, C1126 || CT.C1126, C1127 || CT.C1127, C1128 || CT.C1128, C1129 || CT.C1129, C1130 || CT.C1130, C1131 || CT.C1131, C1132 || CT.C1132, C1133 || CT.C1133, C1134 || CT.C1134, C1135 || CT.C1135, C1136 || CT.C1136, C1137 || CT.C1137, C1138 || CT.C1138, C1139 || CT.C1139, C1140 || CT.C1140, C1141 || CT.C1141, C1142 || CT.C1142, C1143 || CT.C1143, C1144 || CT.C1144, C1145 || CT.C1145, C1146 || CT.C1146, C1147 || CT.C1147, C1148 || CT.C1148, C1149 || CT.C1149, C1150 || CT.C1150, C1151 || CT.C1151, C1152 || CT.C1152, C1153 || CT.C1153, C1154 || CT.C1154, C1155 || CT.C1155, C1156 || CT.C1156, C1157 || CT.C1157, C1158 || CT.C1158, C1159 || CT.C1159, C1160 || CT.C1160, C1161 || CT.C1161, C1162 || CT.C1162, C1163 || CT.C1163, C1164 || CT.C1164, C1165 || CT.C1165, C1166 || CT.C1166, C1167 || CT.C1167, C1168 || CT.C1168, C1169 || CT.C1169, C1170 || CT.C1170, C1171 || CT.C1171, C1172 || CT.C1172, C1173 || CT.C1173, C1174 || CT.C1174, C1175 || CT.C1175, C1176 || CT.C1176, C1177 || CT.C1177, C1178 || CT.C1178, C1179 || CT.C1179, C1180 || CT.C1180, C1181 || CT.C1181, C1182 || CT.C1182, C1183 || CT.C1183], UnicodeRangeOfCharProperty());
    },
    get C212() {
      return C212 = dart.const({
        __proto__: UnicodePropertyLookupOfCharProperty().prototype,
        [UnicodePropertyLookup_ranges]: C213 || CT.C213
      });
    },
    get C1184() {
      return C1184 = dart.const({
        __proto__: ui.PointMode.prototype,
        [_name$]: "PointMode.points",
        index: 0
      });
    },
    get C1185() {
      return C1185 = dart.const({
        __proto__: ui.PointMode.prototype,
        [_name$]: "PointMode.lines",
        index: 1
      });
    },
    get C1186() {
      return C1186 = dart.const({
        __proto__: ui.PointMode.prototype,
        [_name$]: "PointMode.polygon",
        index: 2
      });
    },
    get C1187() {
      return C1187 = dart.constList([C1184 || CT.C1184, C1185 || CT.C1185, C1186 || CT.C1186], ui.PointMode);
    },
    get C1188() {
      return C1188 = dart.constList([C51 || CT.C51, C50 || CT.C50], ui.ClipOp);
    },
    get C1189() {
      return C1189 = dart.const({
        __proto__: ui.VertexMode.prototype,
        [_name$]: "VertexMode.triangles",
        index: 0
      });
    },
    get C1190() {
      return C1190 = dart.const({
        __proto__: ui.VertexMode.prototype,
        [_name$]: "VertexMode.triangleStrip",
        index: 1
      });
    },
    get C1191() {
      return C1191 = dart.const({
        __proto__: ui.VertexMode.prototype,
        [_name$]: "VertexMode.triangleFan",
        index: 2
      });
    },
    get C1192() {
      return C1192 = dart.constList([C1189 || CT.C1189, C1190 || CT.C1190, C1191 || CT.C1191], ui.VertexMode);
    },
    get C1193() {
      return C1193 = dart.constList([C32 || CT.C32, C33 || CT.C33], ui.PathFillType);
    },
    get C1194() {
      return C1194 = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$]: "PathOperation.difference",
        index: 0
      });
    },
    get C1195() {
      return C1195 = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$]: "PathOperation.intersect",
        index: 1
      });
    },
    get C1196() {
      return C1196 = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$]: "PathOperation.union",
        index: 2
      });
    },
    get C1197() {
      return C1197 = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$]: "PathOperation.xor",
        index: 3
      });
    },
    get C1198() {
      return C1198 = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$]: "PathOperation.reverseDifference",
        index: 4
      });
    },
    get C1199() {
      return C1199 = dart.constList([C1194 || CT.C1194, C1195 || CT.C1195, C1196 || CT.C1196, C1197 || CT.C1197, C1198 || CT.C1198], ui.PathOperation);
    },
    get C1200() {
      return C1200 = dart.const({
        __proto__: engine.CloseCommand.prototype,
        [PathCommand_type]: 3
      });
    },
    get C1201() {
      return C1201 = dart.const({
        __proto__: ui.Color.prototype,
        [Color__value]: 4278190080.0
      });
    },
    get C1202() {
      return C1202 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 1 / 0,
        [OffsetBase__dx]: 1 / 0
      });
    },
    get C1203() {
      return C1203 = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C1204() {
      return C1204 = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 1 / 0,
        [OffsetBase__dx]: 1 / 0
      });
    },
    get C1205() {
      return C1205 = dart.const({
        __proto__: ui.Rect.prototype,
        [Rect_bottom]: 0,
        [Rect_right]: 0,
        [Rect_top]: 0,
        [Rect_left]: 0
      });
    },
    get C1206() {
      return C1206 = dart.const({
        __proto__: ui.Rect.prototype,
        [Rect_bottom]: 1000000000,
        [Rect_right]: 1000000000,
        [Rect_top]: -1000000000,
        [Rect_left]: -1000000000
      });
    },
    get C1207() {
      return C1207 = dart.const({
        __proto__: ui.RRect.prototype,
        [RRect_blRadiusY]: 0,
        [RRect_blRadiusX]: 0,
        [RRect_brRadiusY]: 0,
        [RRect_brRadiusX]: 0,
        [RRect_trRadiusY]: 0,
        [RRect_trRadiusX]: 0,
        [RRect_tlRadiusY]: 0,
        [RRect_tlRadiusX]: 0,
        [RRect_bottom]: 0,
        [RRect_right]: 0,
        [RRect_top]: 0,
        [RRect_left]: 0
      });
    },
    get C1208() {
      return C1208 = dart.const({
        __proto__: ui.Point.prototype,
        [Point_y]: 0,
        [Point_x]: 0
      });
    },
    get C1209() {
      return C1209 = dart.constList([C185 || CT.C185, C186 || CT.C186, C187 || CT.C187], ui.StrokeCap);
    },
    get C1210() {
      return C1210 = dart.constList([C190 || CT.C190, C188 || CT.C188, C189 || CT.C189], ui.StrokeJoin);
    },
    get C1211() {
      return C1211 = dart.constList([C1 || CT.C1, C0 || CT.C0], ui.PaintingStyle);
    },
    get C1212() {
      return C1212 = dart.constList([C191 || CT.C191, C167 || CT.C167, C192 || CT.C192, C158 || CT.C158, C162 || CT.C162, C159 || CT.C159, C163 || CT.C163, C160 || CT.C160, C164 || CT.C164, C161 || CT.C161, C165 || CT.C165, C168 || CT.C168, C166 || CT.C166, C170 || CT.C170, C171 || CT.C171, C172 || CT.C172, C173 || CT.C173, C174 || CT.C174, C175 || CT.C175, C176 || CT.C176, C177 || CT.C177, C178 || CT.C178, C179 || CT.C179, C180 || CT.C180, C169 || CT.C169, C181 || CT.C181, C182 || CT.C182, C183 || CT.C183, C184 || CT.C184], ui.BlendMode);
    },
    get C1213() {
      return C1213 = dart.constList([C20 || CT.C20, C17 || CT.C17, C18 || CT.C18, C19 || CT.C19], ui.Clip);
    },
    get C1214() {
      return C1214 = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$]: "TileMode.clamp",
        index: 0
      });
    },
    get C1215() {
      return C1215 = dart.constList([C193 || CT.C193, C194 || CT.C194, C195 || CT.C195, C196 || CT.C196], ui.BlurStyle);
    },
    get C1216() {
      return C1216 = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$]: "FilterQuality.none",
        index: 0
      });
    },
    get C1217() {
      return C1217 = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$]: "FilterQuality.low",
        index: 1
      });
    },
    get C1218() {
      return C1218 = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$]: "FilterQuality.medium",
        index: 2
      });
    },
    get C1219() {
      return C1219 = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$]: "FilterQuality.high",
        index: 3
      });
    },
    get C1220() {
      return C1220 = dart.constList([C1216 || CT.C1216, C1217 || CT.C1217, C1218 || CT.C1218, C1219 || CT.C1219], ui.FilterQuality);
    },
    get C1221() {
      return C1221 = dart.const({
        __proto__: ui.ImageByteFormat.prototype,
        [_name$]: "ImageByteFormat.rawUnmodified",
        index: 1
      });
    },
    get C1222() {
      return C1222 = dart.const({
        __proto__: ui.ImageByteFormat.prototype,
        [_name$]: "ImageByteFormat.png",
        index: 2
      });
    },
    get C1223() {
      return C1223 = dart.constList([C15 || CT.C15, C1221 || CT.C1221, C1222 || CT.C1222], ui.ImageByteFormat);
    },
    get C1224() {
      return C1224 = dart.const({
        __proto__: ui.PixelFormat.prototype,
        [_name$]: "PixelFormat.rgba8888",
        index: 0
      });
    },
    get C1225() {
      return C1225 = dart.const({
        __proto__: ui.PixelFormat.prototype,
        [_name$]: "PixelFormat.bgra8888",
        index: 1
      });
    },
    get C1226() {
      return C1226 = dart.constList([C1224 || CT.C1224, C1225 || CT.C1225], ui.PixelFormat);
    },
    get C1227() {
      return C1227 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$]: "PointerChange.cancel",
        index: 0
      });
    },
    get C1228() {
      return C1228 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$]: "PointerChange.add",
        index: 1
      });
    },
    get C1229() {
      return C1229 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$]: "PointerChange.remove",
        index: 2
      });
    },
    get C1230() {
      return C1230 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$]: "PointerChange.hover",
        index: 3
      });
    },
    get C1231() {
      return C1231 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$]: "PointerChange.down",
        index: 4
      });
    },
    get C1232() {
      return C1232 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$]: "PointerChange.move",
        index: 5
      });
    },
    get C1233() {
      return C1233 = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$]: "PointerChange.up",
        index: 6
      });
    },
    get C1234() {
      return C1234 = dart.constList([C1227 || CT.C1227, C1228 || CT.C1228, C1229 || CT.C1229, C1230 || CT.C1230, C1231 || CT.C1231, C1232 || CT.C1232, C1233 || CT.C1233], ui.PointerChange);
    },
    get C1235() {
      return C1235 = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.touch",
        index: 0
      });
    },
    get C1236() {
      return C1236 = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.mouse",
        index: 1
      });
    },
    get C1237() {
      return C1237 = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.stylus",
        index: 2
      });
    },
    get C1238() {
      return C1238 = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.invertedStylus",
        index: 3
      });
    },
    get C1239() {
      return C1239 = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$]: "PointerDeviceKind.unknown",
        index: 4
      });
    },
    get C1240() {
      return C1240 = dart.constList([C1235 || CT.C1235, C1236 || CT.C1236, C1237 || CT.C1237, C1238 || CT.C1238, C1239 || CT.C1239], ui.PointerDeviceKind);
    },
    get C1241() {
      return C1241 = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name$]: "PointerSignalKind.none",
        index: 0
      });
    },
    get C1242() {
      return C1242 = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name$]: "PointerSignalKind.scroll",
        index: 1
      });
    },
    get C1243() {
      return C1243 = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name$]: "PointerSignalKind.unknown",
        index: 2
      });
    },
    get C1244() {
      return C1244 = dart.constList([C1241 || CT.C1241, C1242 || CT.C1242, C1243 || CT.C1243], ui.PointerSignalKind);
    },
    get C1245() {
      return C1245 = dart.constList([], ui.PointerData);
    },
    get C1246() {
      return C1246 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 1
      });
    },
    get C1247() {
      return C1247 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 2
      });
    },
    get C1248() {
      return C1248 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 4
      });
    },
    get C1249() {
      return C1249 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 8
      });
    },
    get C1250() {
      return C1250 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 16
      });
    },
    get C1251() {
      return C1251 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 32
      });
    },
    get C1252() {
      return C1252 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 64
      });
    },
    get C1253() {
      return C1253 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 128
      });
    },
    get C1254() {
      return C1254 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 256
      });
    },
    get C1255() {
      return C1255 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 512
      });
    },
    get C1256() {
      return C1256 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 1024
      });
    },
    get C1257() {
      return C1257 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 2048
      });
    },
    get C1258() {
      return C1258 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 4096
      });
    },
    get C1259() {
      return C1259 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 8192
      });
    },
    get C1260() {
      return C1260 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 16384
      });
    },
    get C1261() {
      return C1261 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 32768
      });
    },
    get C1262() {
      return C1262 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 65536
      });
    },
    get C1263() {
      return C1263 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 131072
      });
    },
    get C1264() {
      return C1264 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 262144
      });
    },
    get C1265() {
      return C1265 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 524288
      });
    },
    get C1266() {
      return C1266 = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [SemanticsAction_index]: 1048576
      });
    },
    get C1267() {
      return C1267 = dart.constMap(core.int, ui.SemanticsAction, [1, C1246 || CT.C1246, 2, C1247 || CT.C1247, 4, C1248 || CT.C1248, 8, C1249 || CT.C1249, 16, C1250 || CT.C1250, 32, C1251 || CT.C1251, 64, C1252 || CT.C1252, 128, C1253 || CT.C1253, 256, C1254 || CT.C1254, 512, C1255 || CT.C1255, 1024, C1256 || CT.C1256, 2048, C1257 || CT.C1257, 4096, C1258 || CT.C1258, 8192, C1259 || CT.C1259, 16384, C1260 || CT.C1260, 32768, C1261 || CT.C1261, 65536, C1262 || CT.C1262, 131072, C1263 || CT.C1263, 262144, C1264 || CT.C1264, 524288, C1265 || CT.C1265, 1048576, C1266 || CT.C1266]);
    },
    get C1268() {
      return C1268 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 1
      });
    },
    get C1269() {
      return C1269 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 2
      });
    },
    get C1270() {
      return C1270 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 4
      });
    },
    get C1271() {
      return C1271 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 8
      });
    },
    get C1272() {
      return C1272 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 16
      });
    },
    get C1273() {
      return C1273 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 1048576
      });
    },
    get C1274() {
      return C1274 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 32
      });
    },
    get C1275() {
      return C1275 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 64
      });
    },
    get C1276() {
      return C1276 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 128
      });
    },
    get C1277() {
      return C1277 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 256
      });
    },
    get C1278() {
      return C1278 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 512
      });
    },
    get C1279() {
      return C1279 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 1024
      });
    },
    get C1280() {
      return C1280 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 2048
      });
    },
    get C1281() {
      return C1281 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 4096
      });
    },
    get C1282() {
      return C1282 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 8192
      });
    },
    get C1283() {
      return C1283 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 16384
      });
    },
    get C1284() {
      return C1284 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 32768
      });
    },
    get C1285() {
      return C1285 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 65536
      });
    },
    get C1286() {
      return C1286 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 131072
      });
    },
    get C1287() {
      return C1287 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 262144
      });
    },
    get C1288() {
      return C1288 = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [SemanticsFlag_index]: 524288
      });
    },
    get C1289() {
      return C1289 = dart.constMap(core.int, ui.SemanticsFlag, [1, C1268 || CT.C1268, 2, C1269 || CT.C1269, 4, C1270 || CT.C1270, 8, C1271 || CT.C1271, 16, C1272 || CT.C1272, 32, C1274 || CT.C1274, 64, C1275 || CT.C1275, 128, C1276 || CT.C1276, 256, C1277 || CT.C1277, 512, C1278 || CT.C1278, 1024, C1279 || CT.C1279, 2048, C1280 || CT.C1280, 4096, C1281 || CT.C1281, 8192, C1282 || CT.C1282, 16384, C1283 || CT.C1283, 32768, C1284 || CT.C1284, 65536, C1285 || CT.C1285, 131072, C1286 || CT.C1286, 262144, C1287 || CT.C1287, 524288, C1288 || CT.C1288, 1048576, C1273 || CT.C1273]);
    },
    get C1290() {
      return C1290 = dart.const({
        __proto__: ui.FontStyle.prototype,
        [_name$]: "FontStyle.normal",
        index: 0
      });
    },
    get C1291() {
      return C1291 = dart.const({
        __proto__: ui.FontStyle.prototype,
        [_name$]: "FontStyle.italic",
        index: 1
      });
    },
    get C1292() {
      return C1292 = dart.constList([C1290 || CT.C1290, C1291 || CT.C1291], ui.FontStyle);
    },
    get C1293() {
      return C1293 = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$]: "PlaceholderAlignment.baseline",
        index: 0
      });
    },
    get C1294() {
      return C1294 = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$]: "PlaceholderAlignment.aboveBaseline",
        index: 1
      });
    },
    get C1295() {
      return C1295 = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$]: "PlaceholderAlignment.belowBaseline",
        index: 2
      });
    },
    get C1296() {
      return C1296 = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$]: "PlaceholderAlignment.top",
        index: 3
      });
    },
    get C1297() {
      return C1297 = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$]: "PlaceholderAlignment.bottom",
        index: 4
      });
    },
    get C1298() {
      return C1298 = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$]: "PlaceholderAlignment.middle",
        index: 5
      });
    },
    get C1299() {
      return C1299 = dart.constList([C1293 || CT.C1293, C1294 || CT.C1294, C1295 || CT.C1295, C1296 || CT.C1296, C1297 || CT.C1297, C1298 || CT.C1298], ui.PlaceholderAlignment);
    },
    get C1300() {
      return C1300 = dart.constMap(core.int, core.String, [0, "FontWeight.w100", 1, "FontWeight.w200", 2, "FontWeight.w300", 3, "FontWeight.w400", 4, "FontWeight.w500", 5, "FontWeight.w600", 6, "FontWeight.w700", 7, "FontWeight.w800", 8, "FontWeight.w900"]);
    },
    get C1301() {
      return C1301 = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 0
      });
    },
    get C1302() {
      return C1302 = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 1
      });
    },
    get C1303() {
      return C1303 = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 2
      });
    },
    get C1304() {
      return C1304 = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 3
      });
    },
    get C1305() {
      return C1305 = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 4
      });
    },
    get C1306() {
      return C1306 = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 5
      });
    },
    get C1307() {
      return C1307 = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 6
      });
    },
    get C1308() {
      return C1308 = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 7
      });
    },
    get C1309() {
      return C1309 = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 8
      });
    },
    get C1310() {
      return C1310 = dart.constList([C1301 || CT.C1301, C1302 || CT.C1302, C1303 || CT.C1303, C1304 || CT.C1304, C1305 || CT.C1305, C1306 || CT.C1306, C1307 || CT.C1307, C1308 || CT.C1308, C1309 || CT.C1309], ui.FontWeight);
    },
    get C1311() {
      return C1311 = dart.constList([C204 || CT.C204, C115 || CT.C115, C114 || CT.C114, C205 || CT.C205, C116 || CT.C116, C117 || CT.C117], ui.TextAlign);
    },
    get C1312() {
      return C1312 = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name$]: "TextBaseline.alphabetic",
        index: 0
      });
    },
    get C1313() {
      return C1313 = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name$]: "TextBaseline.ideographic",
        index: 1
      });
    },
    get C1314() {
      return C1314 = dart.constList([C1312 || CT.C1312, C1313 || CT.C1313], ui.TextBaseline);
    },
    get C1315() {
      return C1315 = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [TextDecoration__mask]: 0
      });
    },
    get C1316() {
      return C1316 = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [TextDecoration__mask]: 1
      });
    },
    get C1317() {
      return C1317 = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [TextDecoration__mask]: 2
      });
    },
    get C1318() {
      return C1318 = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [TextDecoration__mask]: 4
      });
    },
    get C1319() {
      return C1319 = dart.constList([C202 || CT.C202, C201 || CT.C201, C200 || CT.C200, C199 || CT.C199, C203 || CT.C203], ui.TextDecorationStyle);
    },
    get C1320() {
      return C1320 = dart.constList([C207 || CT.C207, C206 || CT.C206], ui.TextDirection);
    },
    get C1321() {
      return C1321 = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name$]: "TextAffinity.upstream",
        index: 0
      });
    },
    get C1322() {
      return C1322 = dart.constList([C1321 || CT.C1321, C111 || CT.C111], ui.TextAffinity);
    },
    get C1323() {
      return C1323 = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$]: "BoxHeightStyle.max",
        index: 1
      });
    },
    get C1324() {
      return C1324 = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$]: "BoxHeightStyle.includeLineSpacingMiddle",
        index: 2
      });
    },
    get C1325() {
      return C1325 = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$]: "BoxHeightStyle.includeLineSpacingTop",
        index: 3
      });
    },
    get C1326() {
      return C1326 = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$]: "BoxHeightStyle.includeLineSpacingBottom",
        index: 4
      });
    },
    get C1327() {
      return C1327 = dart.constList([C119 || CT.C119, C1323 || CT.C1323, C1324 || CT.C1324, C1325 || CT.C1325, C1326 || CT.C1326], ui.BoxHeightStyle);
    },
    get C1328() {
      return C1328 = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name$]: "BoxWidthStyle.max",
        index: 1
      });
    },
    get C1329() {
      return C1329 = dart.constList([C120 || CT.C120, C1328 || CT.C1328], ui.BoxWidthStyle);
    },
    get C1330() {
      return C1330 = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$]: "TileMode.repeated",
        index: 1
      });
    },
    get C1331() {
      return C1331 = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$]: "TileMode.mirror",
        index: 2
      });
    },
    get C1332() {
      return C1332 = dart.constList([C1214 || CT.C1214, C1330 || CT.C1330, C1331 || CT.C1331], ui.TileMode);
    },
    get C1333() {
      return C1333 = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$]: "AppLifecycleState.resumed",
        index: 0
      });
    },
    get C1334() {
      return C1334 = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$]: "AppLifecycleState.inactive",
        index: 1
      });
    },
    get C1335() {
      return C1335 = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$]: "AppLifecycleState.paused",
        index: 2
      });
    },
    get C1336() {
      return C1336 = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$]: "AppLifecycleState.suspending",
        index: 3
      });
    },
    get C1337() {
      return C1337 = dart.constList([C1333 || CT.C1333, C1334 || CT.C1334, C1335 || CT.C1335, C1336 || CT.C1336], ui.AppLifecycleState);
    },
    get C1338() {
      return C1338 = dart.const({
        __proto__: ui.WindowPadding.prototype,
        [WindowPadding_bottom]: 0,
        [WindowPadding_right]: 0,
        [WindowPadding_top]: 0,
        [WindowPadding_left]: 0
      });
    },
    get C1339() {
      return C1339 = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name$]: "Brightness.dark",
        index: 0
      });
    },
    get C1340() {
      return C1340 = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name$]: "Brightness.light",
        index: 1
      });
    },
    get C1341() {
      return C1341 = dart.constList([C1339 || CT.C1339, C1340 || CT.C1340], ui.Brightness);
    },
    get C1342() {
      return C1342 = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$]: "FramePhase.buildStart",
        index: 0
      });
    },
    get C1343() {
      return C1343 = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$]: "FramePhase.buildFinish",
        index: 1
      });
    },
    get C1344() {
      return C1344 = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$]: "FramePhase.rasterStart",
        index: 2
      });
    },
    get C1345() {
      return C1345 = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$]: "FramePhase.rasterFinish",
        index: 3
      });
    },
    get C1346() {
      return C1346 = dart.constList([C1342 || CT.C1342, C1343 || CT.C1343, C1344 || CT.C1344, C1345 || CT.C1345], ui.FramePhase);
    },
    get C1347() {
      return C1347 = dart.const({
        __proto__: ui._HashEnd.prototype
      });
    },
    get C1348() {
      return C1348 = dart.const({
        __proto__: engine.HashLocationStrategy.prototype,
        [HashLocationStrategy__platformLocation]: C14 || CT.C14
      });
    },
    get C1349() {
      return C1349 = dart.const({
        __proto__: engine.AssetManager.prototype,
        [AssetManager_assetsDir]: "assets"
      });
    },
    get C1350() {
      return C1350 = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 600,
        [OffsetBase__dx]: 800
      });
    }
  });
  engine._NullTreeSanitizer = class _NullTreeSanitizer extends core.Object {
    sanitizeTree(node) {
    }
  };
  (engine._NullTreeSanitizer.new = function() {
    ;
  }).prototype = engine._NullTreeSanitizer.prototype;
  dart.addTypeTests(engine._NullTreeSanitizer);
  engine._NullTreeSanitizer[dart.implements] = () => [html.NodeTreeSanitizer];
  dart.setMethodSignature(engine._NullTreeSanitizer, () => ({
    __proto__: dart.getMethods(engine._NullTreeSanitizer.__proto__),
    sanitizeTree: dart.fnType(dart.void, [html.Node])
  }));
  dart.setLibraryUri(engine._NullTreeSanitizer, "package:flutter_web_ui/src/engine.dart");
  const _timer = dart.privateName(engine, "_timer");
  const _datetime = dart.privateName(engine, "_datetime");
  const _timestampFunction = dart.privateName(engine, "_timestampFunction");
  const _cancelTimer = dart.privateName(engine, "_cancelTimer");
  const _timerDidFire = dart.privateName(engine, "_timerDidFire");
  const AlarmClock_callback = dart.privateName(engine, "AlarmClock.callback");
  engine.AlarmClock = class AlarmClock extends core.Object {
    get callback() {
      return this[callback];
    }
    set callback(value) {
      this[callback] = value;
    }
    get datetime() {
      return this[_datetime];
    }
    set datetime(value) {
      if (dart.equals(value, this[_datetime])) {
        return;
      }
      if (value == null) {
        this[_cancelTimer]();
        this[_datetime] = null;
        return;
      }
      let now = this[_timestampFunction]();
      let isInTheFuture = !dart.test(value.isBefore(now));
      if (!isInTheFuture) {
        this[_cancelTimer]();
        this[_datetime] = value;
        return;
      }
      if (this[_timer] == null) {
        this[_timer] = async.Timer.new(value.difference(now), dart.bind(this, _timerDidFire));
      } else {
        if (!(this[_datetime] != null)) dart.assertFailed("We can only have a timer if there is a non-null datetime", "org-dartlang-app:///packages/flutter_web_ui/src/engine/alarm_clock.dart", 72, 14, "_datetime != null");
        if (dart.test(this[_datetime].isAfter(value))) {
          this[_cancelTimer]();
          this[_timer] = async.Timer.new(value.difference(now), dart.bind(this, _timerDidFire));
        }
      }
      this[_datetime] = value;
    }
    [_cancelTimer]() {
      if (this[_timer] != null) {
        this[_timer].cancel();
        this[_timer] = null;
      }
    }
    [_timerDidFire]() {
      if (!(this[_datetime] != null)) dart.assertFailed("If _datetime is null, the timer would have been cancelled", "org-dartlang-app:///packages/flutter_web_ui/src/engine/alarm_clock.dart", 97, 12, "_datetime != null");
      let now = this[_timestampFunction]();
      if (!dart.test(now.isBefore(this[_datetime]))) {
        this[_timer] = null;
        this.callback();
      } else {
        this[_timer] = async.Timer.new(this[_datetime].difference(now), dart.bind(this, _timerDidFire));
      }
    }
  };
  (engine.AlarmClock.new = function(timestampFunction) {
    this[_timer] = null;
    this[_datetime] = null;
    this[callback] = null;
    this[_timestampFunction] = timestampFunction;
    ;
  }).prototype = engine.AlarmClock.prototype;
  dart.addTypeTests(engine.AlarmClock);
  const callback = AlarmClock_callback;
  dart.setMethodSignature(engine.AlarmClock, () => ({
    __proto__: dart.getMethods(engine.AlarmClock.__proto__),
    [_cancelTimer]: dart.fnType(dart.void, []),
    [_timerDidFire]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.AlarmClock, () => ({
    __proto__: dart.getGetters(engine.AlarmClock.__proto__),
    datetime: core.DateTime
  }));
  dart.setSetterSignature(engine.AlarmClock, () => ({
    __proto__: dart.getSetters(engine.AlarmClock.__proto__),
    datetime: core.DateTime
  }));
  dart.setLibraryUri(engine.AlarmClock, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.AlarmClock, () => ({
    __proto__: dart.getFields(engine.AlarmClock.__proto__),
    [_timestampFunction]: dart.finalFieldType(dart.fnType(core.DateTime, [])),
    [_timer]: dart.fieldType(async.Timer),
    [_datetime]: dart.fieldType(core.DateTime),
    callback: dart.fieldType(dart.fnType(dart.void, []))
  }));
  const _baseUrl = dart.privateName(engine, "_baseUrl");
  const AssetManager_assetsDir = dart.privateName(engine, "AssetManager.assetsDir");
  engine.AssetManager = class AssetManager extends core.Object {
    get assetsDir() {
      return this[assetsDir$];
    }
    set assetsDir(value) {
      super.assetsDir = value;
    }
    get [_baseUrl]() {
      let t0;
      t0 = html.window[$document][$querySelectorAll](html.Element, "meta")[$whereType](html.MetaElement)[$firstWhere](dart.fn(e => dart.equals(dart.dload(e, 'name'), "assetBase"), dynamicTobool()), {orElse: dart.fn(() => null, VoidToNull())});
      return t0 == null ? null : t0.content;
    }
    getAssetUrl(asset) {
      let t0;
      if (dart.test(core.Uri.parse(asset).hasScheme)) {
        return asset;
      }
      return dart.notNull((t0 = this[_baseUrl], t0 == null ? "" : t0)) + (dart.str(this.assetsDir) + "/" + dart.str(asset));
    }
    load(asset) {
      return async.async(typed_data.ByteData, (function* load() {
        let url = this.getAssetUrl(asset);
        try {
          let request = (yield html.HttpRequest.request(url, {responseType: "arraybuffer"}));
          let response = typed_data.ByteBuffer._check(request[$response]);
          return response[$asByteData]();
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (html.ProgressEvent.is(e)) {
            let target = e[$target];
            if (html.HttpRequest.is(target)) {
              if (target.status === 404 && asset === "AssetManifest.json") {
                html.window[$console].warn("Asset manifest does not exist at `" + dart.str(url) + "` – ignoring.");
                return _native_typed_data.NativeUint8List.fromList(convert.utf8.encode("{}"))[$buffer][$asByteData]();
              }
              dart.throw(new engine.AssetManagerException.new(url, target.status));
            }
            dart.rethrow(e$);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (engine.AssetManager.new = function(opts) {
    let assetsDir = opts && 'assetsDir' in opts ? opts.assetsDir : "assets";
    this[assetsDir$] = assetsDir;
    ;
  }).prototype = engine.AssetManager.prototype;
  dart.addTypeTests(engine.AssetManager);
  const assetsDir$ = AssetManager_assetsDir;
  dart.setMethodSignature(engine.AssetManager, () => ({
    __proto__: dart.getMethods(engine.AssetManager.__proto__),
    getAssetUrl: dart.fnType(core.String, [core.String]),
    load: dart.fnType(async.Future$(typed_data.ByteData), [core.String])
  }));
  dart.setGetterSignature(engine.AssetManager, () => ({
    __proto__: dart.getGetters(engine.AssetManager.__proto__),
    [_baseUrl]: core.String
  }));
  dart.setLibraryUri(engine.AssetManager, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.AssetManager, () => ({
    __proto__: dart.getFields(engine.AssetManager.__proto__),
    assetsDir: dart.finalFieldType(core.String)
  }));
  dart.defineLazy(engine.AssetManager, {
    /*engine.AssetManager._defaultAssetsDir*/get _defaultAssetsDir() {
      return "assets";
    }
  });
  const AssetManagerException_url = dart.privateName(engine, "AssetManagerException.url");
  const AssetManagerException_httpStatus = dart.privateName(engine, "AssetManagerException.httpStatus");
  engine.AssetManagerException = class AssetManagerException extends core.Object {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get httpStatus() {
      return this[httpStatus$];
    }
    set httpStatus(value) {
      super.httpStatus = value;
    }
    toString() {
      return "Failed to load asset at \"" + dart.str(this.url) + "\" (" + dart.str(this.httpStatus) + ")";
    }
  };
  (engine.AssetManagerException.new = function(url, httpStatus) {
    this[url$] = url;
    this[httpStatus$] = httpStatus;
    ;
  }).prototype = engine.AssetManagerException.prototype;
  dart.addTypeTests(engine.AssetManagerException);
  const url$ = AssetManagerException_url;
  const httpStatus$ = AssetManagerException_httpStatus;
  engine.AssetManagerException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(engine.AssetManagerException, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.AssetManagerException, () => ({
    __proto__: dart.getFields(engine.AssetManagerException.__proto__),
    url: dart.finalFieldType(core.String),
    httpStatus: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(engine.AssetManagerException, ['toString']);
  const _toByteData = dart.privateName(engine, "_toByteData");
  const WebOnlyMockAssetManager_defaultAssetsDir = dart.privateName(engine, "WebOnlyMockAssetManager.defaultAssetsDir");
  const WebOnlyMockAssetManager_defaultAssetManifest = dart.privateName(engine, "WebOnlyMockAssetManager.defaultAssetManifest");
  const WebOnlyMockAssetManager_defaultFontManifest = dart.privateName(engine, "WebOnlyMockAssetManager.defaultFontManifest");
  engine.WebOnlyMockAssetManager = class WebOnlyMockAssetManager extends core.Object {
    get defaultAssetsDir() {
      return this[defaultAssetsDir];
    }
    set defaultAssetsDir(value) {
      this[defaultAssetsDir] = value;
    }
    get defaultAssetManifest() {
      return this[defaultAssetManifest];
    }
    set defaultAssetManifest(value) {
      this[defaultAssetManifest] = value;
    }
    get defaultFontManifest() {
      return this[defaultFontManifest];
    }
    set defaultFontManifest(value) {
      this[defaultFontManifest] = value;
    }
    get assetsDir() {
      return this.defaultAssetsDir;
    }
    get [_baseUrl]() {
      return "";
    }
    getAssetUrl(asset) {
      return dart.str(asset);
    }
    load(asset) {
      if (asset == this.getAssetUrl("AssetManifest.json")) {
        return FutureOfByteData().value(this[_toByteData](convert.utf8.encode(this.defaultAssetManifest)));
      }
      if (asset == this.getAssetUrl("FontManifest.json")) {
        return FutureOfByteData().value(this[_toByteData](convert.utf8.encode(this.defaultFontManifest)));
      }
      dart.throw(new engine.AssetManagerException.new(asset, 404));
    }
    [_toByteData](bytes) {
      let byteData = _native_typed_data.NativeByteData.new(bytes[$length]);
      for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
        byteData[$setUint8](i, bytes[$_get](i));
      }
      return byteData;
    }
  };
  (engine.WebOnlyMockAssetManager.new = function() {
    this[defaultAssetsDir] = "";
    this[defaultAssetManifest] = "{}";
    this[defaultFontManifest] = "[]";
    ;
  }).prototype = engine.WebOnlyMockAssetManager.prototype;
  dart.addTypeTests(engine.WebOnlyMockAssetManager);
  const defaultAssetsDir = WebOnlyMockAssetManager_defaultAssetsDir;
  const defaultAssetManifest = WebOnlyMockAssetManager_defaultAssetManifest;
  const defaultFontManifest = WebOnlyMockAssetManager_defaultFontManifest;
  engine.WebOnlyMockAssetManager[dart.implements] = () => [engine.AssetManager];
  dart.setMethodSignature(engine.WebOnlyMockAssetManager, () => ({
    __proto__: dart.getMethods(engine.WebOnlyMockAssetManager.__proto__),
    getAssetUrl: dart.fnType(core.String, [core.String]),
    load: dart.fnType(async.Future$(typed_data.ByteData), [core.String]),
    [_toByteData]: dart.fnType(typed_data.ByteData, [core.List$(core.int)])
  }));
  dart.setGetterSignature(engine.WebOnlyMockAssetManager, () => ({
    __proto__: dart.getGetters(engine.WebOnlyMockAssetManager.__proto__),
    assetsDir: core.String,
    [_baseUrl]: core.String
  }));
  dart.setLibraryUri(engine.WebOnlyMockAssetManager, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.WebOnlyMockAssetManager, () => ({
    __proto__: dart.getFields(engine.WebOnlyMockAssetManager.__proto__),
    defaultAssetsDir: dart.fieldType(core.String),
    defaultAssetManifest: dart.fieldType(core.String),
    defaultFontManifest: dart.fieldType(core.String)
  }));
  const _canvas = dart.privateName(engine, "_canvas");
  const _ctx = dart.privateName(engine, "_ctx");
  const _cachedLastStyle = dart.privateName(engine, "_cachedLastStyle");
  const _children = dart.privateName(engine, "_children");
  const _widthInBitmapPixels = dart.privateName(engine, "_widthInBitmapPixels");
  const _heightInBitmapPixels = dart.privateName(engine, "_heightInBitmapPixels");
  const _saveCount = dart.privateName(engine, "_saveCount");
  const _devicePixelRatio = dart.privateName(engine, "_devicePixelRatio");
  const _prevFilter = dart.privateName(engine, "_prevFilter");
  const _prevFillStyle = dart.privateName(engine, "_prevFillStyle");
  const _prevStrokeStyle = dart.privateName(engine, "_prevStrokeStyle");
  const _bounds$ = dart.privateName(engine, "_bounds");
  const _initializeViewport = dart.privateName(engine, "_initializeViewport");
  const _setFillAndStrokeStyle = dart.privateName(engine, "_setFillAndStrokeStyle");
  const _setFilter = dart.privateName(engine, "_setFilter");
  const _applyPaint = dart.privateName(engine, "_applyPaint");
  const _name$ = dart.privateName(ui, "_name");
  let C0;
  let C1;
  const _resetPaint = dart.privateName(engine, "_resetPaint");
  const _strokeOrFill = dart.privateName(engine, "_strokeOrFill");
  const _runPath = dart.privateName(engine, "_runPath");
  const _drawRRectPath = dart.privateName(engine, "_drawRRectPath");
  const _drawRRectPathReverse = dart.privateName(engine, "_drawRRectPathReverse");
  const _drawTextLine = dart.privateName(engine, "_drawTextLine");
  const _isLaidOut = dart.privateName(engine, "_isLaidOut");
  const _geometricStyle = dart.privateName(engine, "_geometricStyle");
  const _drawOnCanvas = dart.privateName(engine, "_drawOnCanvas");
  const _lines = dart.privateName(engine, "_lines");
  const _plainText = dart.privateName(engine, "_plainText");
  const _background = dart.privateName(engine, "_background");
  const _paint = dart.privateName(engine, "_paint");
  const _alignOffset = dart.privateName(engine, "_alignOffset");
  const _lineHeight = dart.privateName(engine, "_lineHeight");
  const _clipStack = dart.privateName(engine, "_clipStack");
  engine.EngineCanvas = class EngineCanvas extends core.Object {
    dispose() {
      this.clear();
    }
  };
  (engine.EngineCanvas.new = function() {
    ;
  }).prototype = engine.EngineCanvas.prototype;
  dart.addTypeTests(engine.EngineCanvas);
  dart.setMethodSignature(engine.EngineCanvas, () => ({
    __proto__: dart.getMethods(engine.EngineCanvas.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.EngineCanvas, "package:flutter_web_ui/src/engine.dart");
  const _saveStack = dart.privateName(engine, "_saveStack");
  const _currentTransform = dart.privateName(engine, "_currentTransform");
  engine.SaveStackTracking = class SaveStackTracking extends engine.EngineCanvas {};
  engine.SaveStackTracking[dart.mixinOn] = EngineCanvas => class SaveStackTracking extends EngineCanvas {
    get isClipped() {
      return this[_clipStack] != null;
    }
    clear() {
      this[_saveStack][$clear]();
      this[_clipStack] = null;
      this[_currentTransform] = engine.Matrix4.identity();
    }
    get currentTransform() {
      return this[_currentTransform];
    }
    save() {
      this[_saveStack][$add](new engine._SaveStackEntry.new({transform: this[_currentTransform].clone(), clipStack: this[_clipStack] == null ? null : ListOf_SaveClipEntry().from(this[_clipStack])}));
    }
    restore() {
      if (dart.test(this[_saveStack][$isEmpty])) {
        return;
      }
      let entry = this[_saveStack][$removeLast]();
      this[_currentTransform] = entry.transform;
      this[_clipStack] = entry.clipStack;
    }
    translate(dx, dy) {
      this[_currentTransform].translate(dx, dy);
    }
    scale(sx, sy) {
      this[_currentTransform].scale(sx, sy);
    }
    rotate(radians) {
      this[_currentTransform].rotate(engine.SaveStackTracking._unitZ, radians);
    }
    skew(sx, sy) {
      let skewMatrix = engine.Matrix4.identity();
      let storage = skewMatrix.storage;
      storage[$_set](1, sy);
      storage[$_set](4, sx);
      this[_currentTransform].multiply(skewMatrix);
    }
    transform(matrix4) {
      this[_currentTransform].multiply(new engine.Matrix4.fromFloat64List(matrix4));
    }
    clipRect(rect) {
      this[_clipStack] == null ? this[_clipStack] = JSArrayOf_SaveClipEntry().of([]) : null;
      this[_clipStack][$add](new engine._SaveClipEntry.rect(rect, this[_currentTransform].clone()));
    }
    clipRRect(rrect) {
      this[_clipStack] == null ? this[_clipStack] = JSArrayOf_SaveClipEntry().of([]) : null;
      this[_clipStack][$add](new engine._SaveClipEntry.rrect(rrect, this[_currentTransform].clone()));
    }
    clipPath(path) {
      this[_clipStack] == null ? this[_clipStack] = JSArrayOf_SaveClipEntry().of([]) : null;
      this[_clipStack][$add](new engine._SaveClipEntry.path(path, this[_currentTransform].clone()));
    }
  };
  (engine.SaveStackTracking[dart.mixinNew] = function() {
    this[_saveStack] = JSArrayOf_SaveStackEntry().of([]);
    this[_clipStack] = null;
    this[_currentTransform] = engine.Matrix4.identity();
  }).prototype = engine.SaveStackTracking.prototype;
  dart.addTypeTests(engine.SaveStackTracking);
  engine.SaveStackTracking[dart.implements] = () => [engine.EngineCanvas];
  dart.setMethodSignature(engine.SaveStackTracking, () => ({
    __proto__: dart.getMethods(engine.SaveStackTracking.__proto__),
    clear: dart.fnType(dart.void, []),
    save: dart.fnType(dart.void, []),
    restore: dart.fnType(dart.void, []),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double, core.double]),
    rotate: dart.fnType(dart.void, [core.double]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    clipRRect: dart.fnType(dart.void, [ui.RRect]),
    clipPath: dart.fnType(dart.void, [ui.Path])
  }));
  dart.setGetterSignature(engine.SaveStackTracking, () => ({
    __proto__: dart.getGetters(engine.SaveStackTracking.__proto__),
    isClipped: core.bool,
    currentTransform: engine.Matrix4
  }));
  dart.setLibraryUri(engine.SaveStackTracking, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SaveStackTracking, () => ({
    __proto__: dart.getFields(engine.SaveStackTracking.__proto__),
    [_saveStack]: dart.finalFieldType(core.List$(engine._SaveStackEntry)),
    [_clipStack]: dart.fieldType(core.List$(engine._SaveClipEntry)),
    [_currentTransform]: dart.fieldType(engine.Matrix4)
  }));
  dart.defineLazy(engine.SaveStackTracking, {
    /*engine.SaveStackTracking._unitZ*/get _unitZ() {
      return engine.Vector3.new(0.0, 0.0, 1.0);
    }
  });
  const BitmapCanvas_rootElement = dart.privateName(engine, "BitmapCanvas.rootElement");
  const EngineCanvas_SaveStackTracking$36 = class EngineCanvas_SaveStackTracking extends engine.EngineCanvas {};
  (EngineCanvas_SaveStackTracking$36.new = function() {
    engine.SaveStackTracking[dart.mixinNew].call(this);
  }).prototype = EngineCanvas_SaveStackTracking$36.prototype;
  dart.applyMixin(EngineCanvas_SaveStackTracking$36, engine.SaveStackTracking);
  engine.BitmapCanvas = class BitmapCanvas extends EngineCanvas_SaveStackTracking$36 {
    get rootElement() {
      return this[rootElement];
    }
    set rootElement(value) {
      super.rootElement = value;
    }
    get bounds() {
      return this[_bounds$];
    }
    set bounds(newValue) {
      if (!(newValue != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/bitmap_canvas.dart", 15, 12, "newValue != null");
      this[_bounds$] = newValue;
    }
    get size() {
      return this[_bounds$].size;
    }
    get widthInBitmapPixels() {
      return this[_widthInBitmapPixels];
    }
    get heightInBitmapPixels() {
      return this[_heightInBitmapPixels];
    }
    get bitmapPixelCount() {
      return dart.notNull(this.widthInBitmapPixels) * dart.notNull(this.heightInBitmapPixels);
    }
    dispose() {
      super.dispose();
      if (dart.equals(engine.browserEngine, engine.BrowserEngine.webkit)) {
        this[_canvas].width = this[_canvas].height = 0;
      }
    }
    clear() {
      super.clear();
      let len = this[_children][$length];
      for (let i = 0; i < dart.notNull(len); i = i + 1) {
        this[_children][$_get](i)[$remove]();
      }
      this[_children][$clear]();
      this[_cachedLastStyle] = null;
      if (this[_ctx] != null) {
        this[_ctx].restore();
        this[_ctx].clearRect(0, 0, this[_widthInBitmapPixels], this[_heightInBitmapPixels]);
        try {
          this[_ctx].font = "";
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (!dart.test(engine._isNsErrorFailureException(e))) {
            dart.rethrow(e$);
          }
        }
        this[_initializeViewport]();
      }
      if (this[_canvas] != null) {
        this[_canvas].style[$transformOrigin] = "";
        this[_canvas].style[$transform] = "";
      }
    }
    isReusable() {
      return this[_devicePixelRatio] == html.window.devicePixelRatio;
    }
    [_initializeViewport]() {
      this[_ctx].save();
      this[_ctx].setTransform(1, 0, 0, 1, 0, 0);
      this[_ctx].scale(html.window.devicePixelRatio, html.window.devicePixelRatio);
      let canvasPositionX = this[_bounds$].left[$floor]() - 1;
      let canvasPositionY = this[_bounds$].top[$floor]() - 1;
      let canvasPositionCorrectionX = dart.notNull(this[_bounds$].left) - 1 - canvasPositionX[$toDouble]();
      let canvasPositionCorrectionY = dart.notNull(this[_bounds$].top) - 1 - canvasPositionY[$toDouble]();
      this.rootElement.style[$transform] = "translate(" + dart.str(canvasPositionX) + "px, " + dart.str(canvasPositionY) + "px)";
      this.translate(-dart.notNull(this[_bounds$].left) + canvasPositionCorrectionX + 1, -dart.notNull(this[_bounds$].top) + canvasPositionCorrectionY + 1);
    }
    get canvas() {
      return this[_canvas];
    }
    get ctx() {
      return this[_ctx];
    }
    [_applyPaint](paint) {
      let t2, t2$;
      this.ctx.globalCompositeOperation = (t2 = engine._stringForBlendMode(paint.blendMode), t2 == null ? "source-over" : t2);
      this.ctx.lineWidth = (t2$ = paint.strokeWidth, t2$ == null ? 1.0 : t2$);
      let cap = paint.strokeCap;
      if (cap != null) {
        this.ctx.lineCap = engine._stringForStrokeCap(cap);
      } else {
        this.ctx.lineCap = "butt";
      }
      let join = paint.strokeJoin;
      if (join != null) {
        this.ctx.lineJoin = engine._stringForStrokeJoin(join);
      } else {
        this.ctx.lineJoin = "miter";
      }
      if (paint.shader != null) {
        let engineShader = engine.EngineGradient._check(paint.shader);
        let paintStyle = engineShader.createPaintStyle(this.ctx);
        this[_setFillAndStrokeStyle](paintStyle, paintStyle);
      } else if (paint.color != null) {
        let colorString = paint.color.toCssString();
        this[_setFillAndStrokeStyle](colorString, colorString);
      }
      if (paint.maskFilter != null) {
        this[_setFilter]("blur(" + dart.str(paint.maskFilter.webOnlySigma) + "px)");
      }
    }
    [_strokeOrFill](paint, opts) {
      let resetPaint = opts && 'resetPaint' in opts ? opts.resetPaint : true;
      switch (paint.style) {
        case C0 || CT.C0:
        {
          this.ctx.stroke();
          break;
        }
        case C1 || CT.C1:
        default:
        {
          this.ctx.fill();
          break;
        }
      }
      if (dart.test(resetPaint)) {
        this[_resetPaint]();
      }
    }
    [_resetPaint]() {
      this[_setFilter]("none");
      this[_setFillAndStrokeStyle](null, null);
    }
    [_setFilter](value) {
      if (this[_prevFilter] != value) {
        this[_prevFilter] = this.ctx.filter = value;
      }
    }
    [_setFillAndStrokeStyle](fillStyle, strokeStyle) {
      let _ctx = this.ctx;
      if (!core.identical(this[_prevFillStyle], fillStyle)) {
        this[_prevFillStyle] = _ctx.fillStyle = fillStyle;
      }
      if (!core.identical(this[_prevStrokeStyle], strokeStyle)) {
        this[_prevStrokeStyle] = _ctx.strokeStyle = strokeStyle;
      }
    }
    save() {
      let t2;
      super.save();
      this.ctx.save();
      t2 = this[_saveCount];
      this[_saveCount] = dart.notNull(t2) + 1;
      return t2;
    }
    saveLayer(bounds, paint) {
      this.save();
    }
    restore() {
      super.restore();
      this.ctx.restore();
      this[_saveCount] = dart.notNull(this[_saveCount]) - 1;
      this[_cachedLastStyle] = null;
    }
    restoreToCount(count) {
      if (!(dart.notNull(this[_saveCount]) >= dart.notNull(count))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/bitmap_canvas.dart", 314, 12, "_saveCount >= count");
      let restores = dart.notNull(this[_saveCount]) - dart.notNull(count);
      for (let i = 0; i < restores; i = i + 1) {
        this.ctx.restore();
      }
      this[_saveCount] = count;
    }
    translate(dx, dy) {
      super.translate(dx, dy);
      this.ctx.translate(dx, dy);
    }
    scale(sx, sy) {
      super.scale(sx, sy);
      this.ctx.scale(sx, sy);
    }
    rotate(radians) {
      super.rotate(radians);
      this.ctx.rotate(radians);
    }
    skew(sx, sy) {
      super.skew(sx, sy);
      this.ctx.transform(1, sy, sx, 1, 0, 0);
    }
    transform(matrix4) {
      super.transform(matrix4);
      this[_ctx].transform(matrix4[$_get](0), matrix4[$_get](1), matrix4[$_get](4), matrix4[$_get](5), matrix4[$_get](12), matrix4[$_get](13));
    }
    clipRect(rect) {
      super.clipRect(rect);
      this.ctx.beginPath();
      this.ctx.rect(rect.left, rect.top, rect.width, rect.height);
      this.ctx.clip();
    }
    clipRRect(rrect) {
      let t2;
      super.clipRRect(rrect);
      let path = (t2 = ui.Path.new(), t2.addRRect(rrect), t2);
      this[_runPath](path);
      this.ctx.clip();
    }
    clipPath(path) {
      super.clipPath(path);
      this[_runPath](path);
      this.ctx.clip();
    }
    drawColor(color, blendMode) {
      this.ctx.globalCompositeOperation = engine._stringForBlendMode(blendMode);
      this.ctx.fillRect(-10000, -10000, 20000, 20000);
    }
    drawLine(p1, p2, paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.moveTo(p1.dx, p1.dy);
      this.ctx.lineTo(p2.dx, p2.dy);
      this.ctx.stroke();
      this[_resetPaint]();
    }
    drawPaint(paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.fillRect(-10000, -10000, 20000, 20000);
      this[_resetPaint]();
    }
    drawRect(rect, paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.rect(rect.left, rect.top, rect.width, rect.height);
      this[_strokeOrFill](paint);
    }
    drawRRect(rrect, paint) {
      this[_applyPaint](paint);
      this[_drawRRectPath](rrect);
      this[_strokeOrFill](paint);
    }
    [_drawRRectPath](inputRRect, opts) {
      let startNewPath = opts && 'startNewPath' in opts ? opts.startNewPath : true;
      let rrect = inputRRect.scaleRadii();
      let left = rrect.left;
      let right = rrect.right;
      let top = rrect.top;
      let bottom = rrect.bottom;
      if (dart.notNull(left) > dart.notNull(right)) {
        left = right;
        right = rrect.left;
      }
      if (dart.notNull(top) > dart.notNull(bottom)) {
        top = bottom;
        bottom = rrect.top;
      }
      let trRadiusX = rrect.trRadiusX[$abs]();
      let tlRadiusX = rrect.tlRadiusX[$abs]();
      let trRadiusY = rrect.trRadiusY[$abs]();
      let tlRadiusY = rrect.tlRadiusY[$abs]();
      let blRadiusX = rrect.blRadiusX[$abs]();
      let brRadiusX = rrect.brRadiusX[$abs]();
      let blRadiusY = rrect.blRadiusY[$abs]();
      let brRadiusY = rrect.brRadiusY[$abs]();
      if (dart.test(startNewPath)) {
        this.ctx.beginPath();
      }
      this.ctx.moveTo(dart.notNull(left) + trRadiusX, top);
      this.ctx.lineTo(dart.notNull(right) - trRadiusX, top);
      this.ctx.ellipse(dart.notNull(right) - trRadiusX, dart.notNull(top) + trRadiusY, trRadiusX, trRadiusY, 0, 1.5 * 3.141592653589793, 2.0 * 3.141592653589793, false);
      this.ctx.lineTo(right, dart.notNull(bottom) - brRadiusY);
      this.ctx.ellipse(dart.notNull(right) - brRadiusX, dart.notNull(bottom) - brRadiusY, brRadiusX, brRadiusY, 0, 0, 0.5 * 3.141592653589793, false);
      this.ctx.lineTo(dart.notNull(left) + blRadiusX, bottom);
      this.ctx.ellipse(dart.notNull(left) + blRadiusX, dart.notNull(bottom) - blRadiusY, blRadiusX, blRadiusY, 0, 0.5 * 3.141592653589793, 3.141592653589793, false);
      this.ctx.lineTo(left, dart.notNull(top) + tlRadiusY);
      this.ctx.ellipse(dart.notNull(left) + tlRadiusX, dart.notNull(top) + tlRadiusY, tlRadiusX, tlRadiusY, 0, 3.141592653589793, 1.5 * 3.141592653589793, false);
    }
    [_drawRRectPathReverse](inputRRect, opts) {
      let startNewPath = opts && 'startNewPath' in opts ? opts.startNewPath : true;
      let rrect = inputRRect.scaleRadii();
      let left = rrect.left;
      let right = rrect.right;
      let top = rrect.top;
      let bottom = rrect.bottom;
      let trRadiusX = rrect.trRadiusX[$abs]();
      let tlRadiusX = rrect.tlRadiusX[$abs]();
      let trRadiusY = rrect.trRadiusY[$abs]();
      let tlRadiusY = rrect.tlRadiusY[$abs]();
      let blRadiusX = rrect.blRadiusX[$abs]();
      let brRadiusX = rrect.brRadiusX[$abs]();
      let blRadiusY = rrect.blRadiusY[$abs]();
      let brRadiusY = rrect.brRadiusY[$abs]();
      if (dart.notNull(left) > dart.notNull(right)) {
        left = right;
        right = rrect.left;
      }
      if (dart.notNull(top) > dart.notNull(bottom)) {
        top = bottom;
        bottom = rrect.top;
      }
      this.ctx.moveTo(dart.notNull(right) - trRadiusX, top);
      if (dart.test(startNewPath)) {
        this.ctx.beginPath();
      }
      this.ctx.lineTo(dart.notNull(left) + tlRadiusX, top);
      this.ctx.ellipse(dart.notNull(left) + tlRadiusX, dart.notNull(top) + tlRadiusY, tlRadiusX, tlRadiusY, 0, 1.5 * 3.141592653589793, 1 * 3.141592653589793, true);
      this.ctx.lineTo(left, dart.notNull(bottom) - blRadiusY);
      this.ctx.ellipse(dart.notNull(left) + blRadiusX, dart.notNull(bottom) - blRadiusY, blRadiusX, blRadiusY, 0, 1 * 3.141592653589793, 0.5 * 3.141592653589793, true);
      this.ctx.lineTo(dart.notNull(right) - brRadiusX, bottom);
      this.ctx.ellipse(dart.notNull(right) - brRadiusX, dart.notNull(bottom) - brRadiusY, brRadiusX, brRadiusY, 0, 0.5 * 3.141592653589793, 0 * 3.141592653589793, true);
      this.ctx.lineTo(right, dart.notNull(top) + trRadiusY);
      this.ctx.ellipse(dart.notNull(right) - trRadiusX, dart.notNull(top) + trRadiusY, trRadiusX, trRadiusY, 0, 0 * 3.141592653589793, 1.5 * 3.141592653589793, true);
    }
    drawDRRect(outer, inner, paint) {
      this[_applyPaint](paint);
      this[_drawRRectPath](outer);
      this[_drawRRectPathReverse](inner, {startNewPath: false});
      this[_strokeOrFill](paint);
    }
    drawOval(rect, paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.ellipse(rect.center.dx, rect.center.dy, dart.notNull(rect.width) / 2, dart.notNull(rect.height) / 2, 0, 0, 2.0 * 3.141592653589793, false);
      this[_strokeOrFill](paint);
    }
    drawCircle(c, radius, paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.ellipse(c.dx, c.dy, radius, radius, 0, 0, 2.0 * 3.141592653589793, false);
      this[_strokeOrFill](paint);
    }
    drawPath(path, paint) {
      this[_applyPaint](paint);
      this[_runPath](path);
      this[_strokeOrFill](paint);
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      let t2, t2$;
      let shadows = engine.ElevationShadow.computeCanvasShadows(elevation, color);
      if (dart.test(shadows[$isNotEmpty])) {
        for (let shadow of shadows) {
          if (dart.test(transparentOccluder) && !dart.equals(engine.browserEngine, engine.BrowserEngine.webkit)) {
            let paint = (t2 = new ui.Paint.new(), t2.color = shadow.color, t2.style = ui.PaintingStyle.fill, t2.strokeWidth = 0.0, t2.maskFilter = new ui.MaskFilter.blur(ui.BlurStyle.normal, shadow.blur), t2);
            this[_ctx].save();
            this[_ctx].translate(shadow.offsetX, shadow.offsetY);
            let paintData = paint.webOnlyPaintData;
            this[_applyPaint](paintData);
            this[_runPath](path);
            this[_strokeOrFill](paintData, {resetPaint: false});
            this[_ctx].restore();
          } else {
            let paint = (t2$ = new ui.Paint.new(), t2$.color = shadow.color, t2$.style = ui.PaintingStyle.fill, t2$.strokeWidth = 0.0, t2$);
            this[_ctx].save();
            let paintData = paint.webOnlyPaintData;
            this[_applyPaint](paintData);
            this[_ctx].shadowBlur = shadow.blur;
            this[_ctx].shadowColor = shadow.color.withAlpha(255).toCssString();
            this[_ctx].shadowOffsetX = shadow.offsetX;
            this[_ctx].shadowOffsetY = shadow.offsetY;
            this[_runPath](path);
            this[_strokeOrFill](paintData, {resetPaint: false});
            this[_ctx].restore();
          }
        }
        this[_resetPaint]();
      }
    }
    drawImage(image, p, paint) {
      let t2;
      this[_applyPaint](paint);
      let htmlImage = engine.HtmlImage._check(image);
      let imgElement = html.Element._check(htmlImage.imgElement[$clone](true));
      t2 = imgElement.style;
      t2[$position] = "absolute";
      t2[$transform] = "translate(" + dart.str(p.dx) + "px, " + dart.str(p.dy) + "px)";
      t2;
      this.rootElement[$append](imgElement);
    }
    drawImageRect(image, src, dst, paint) {
      let htmlImage = engine.HtmlImage._check(image);
      this.ctx[$drawImageScaledFromSource](htmlImage.imgElement, src.left, src.top, src.width, src.height, dst.left, dst.top, dst.width, dst.height);
    }
    [_drawTextLine](style, line, x, y) {
      let letterSpacing = style.letterSpacing;
      if (letterSpacing == null || letterSpacing === 0.0) {
        this.ctx[$fillText](line, x, y);
      } else {
        let len = line.length;
        for (let i = 0; i < len; i = i + 1) {
          let char = line[$_get](i);
          this.ctx[$fillText](char, x, y);
          x = dart.notNull(x) + (dart.notNull(letterSpacing) + dart.notNull(this.ctx.measureText(char).width));
        }
      }
    }
    drawParagraph(paragraph, offset) {
      let t2, t2$, t2$0;
      if (!dart.test(paragraph[_isLaidOut])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/bitmap_canvas.dart", 794, 12, "paragraph._isLaidOut");
      let style = paragraph[_geometricStyle];
      if (dart.test(paragraph[_drawOnCanvas])) {
        let lines = (t2 = paragraph[_lines], t2 == null ? JSArrayOfString().of([paragraph[_plainText]]) : t2);
        let backgroundPaint = (t2$ = paragraph[_background], t2$ == null ? null : t2$.webOnlyPaintData);
        if (backgroundPaint != null) {
          let rect = new ui.Rect.fromLTWH(offset.dx, offset.dy, paragraph.width, paragraph.height);
          this.drawRect(rect, backgroundPaint);
        }
        if (!dart.equals(style, this[_cachedLastStyle])) {
          this.ctx.font = style.cssFontString;
          this[_cachedLastStyle] = style;
        }
        this[_applyPaint](paragraph[_paint].webOnlyPaintData);
        let x = dart.notNull(offset.dx) + dart.notNull(paragraph[_alignOffset]);
        let y = dart.notNull(offset.dy) + dart.notNull(paragraph.alphabeticBaseline);
        let len = lines[$length];
        for (let i = 0; i < dart.notNull(len); i = i + 1) {
          this[_drawTextLine](style, lines[$_get](i), x, y);
          y = y + dart.notNull(paragraph[_lineHeight]);
        }
        this[_resetPaint]();
        return;
      }
      let paragraphElement = engine._drawParagraphElement(paragraph, offset);
      if (dart.test(this.isClipped)) {
        let clipElements = engine._clipContent(this[_clipStack], html.HtmlElement._check(paragraphElement), offset, this.currentTransform);
        for (let clipElement of clipElements) {
          this.rootElement[$append](clipElement);
          this[_children][$add](clipElement);
        }
      } else {
        let cssTransform = engine.matrix4ToCssTransform(engine.transformWithOffset(this.currentTransform, offset));
        t2$0 = paragraphElement.style;
        t2$0[$transformOrigin] = "0 0 0";
        t2$0[$transform] = cssTransform;
        t2$0;
        this.rootElement[$append](paragraphElement);
      }
      this[_children][$add](paragraphElement);
    }
    drawPicture(picture) {
      picture.recordingCanvas.apply(this);
    }
    [_runPath](path) {
      this.ctx.beginPath();
      for (let subpath of path.subpaths) {
        for (let command of subpath.commands) {
          switch (command.type) {
            case 5:
            {
              let curve = engine.BezierCurveTo._check(command);
              this.ctx.bezierCurveTo(curve.x1, curve.y1, curve.x2, curve.y2, curve.x3, curve.y3);
              break;
            }
            case 3:
            {
              this.ctx.closePath();
              break;
            }
            case 2:
            {
              let ellipse = engine.Ellipse._check(command);
              this.ctx.ellipse(ellipse.x, ellipse.y, ellipse.radiusX, ellipse.radiusY, ellipse.rotation, ellipse.startAngle, ellipse.endAngle, ellipse.anticlockwise);
              break;
            }
            case 1:
            {
              let lineTo = engine.LineTo._check(command);
              this.ctx.lineTo(lineTo.x, lineTo.y);
              break;
            }
            case 0:
            {
              let moveTo = engine.MoveTo._check(command);
              this.ctx.moveTo(moveTo.x, moveTo.y);
              break;
            }
            case 7:
            {
              let rrectCommand = engine.RRectCommand._check(command);
              this[_drawRRectPath](rrectCommand.rrect, {startNewPath: false});
              break;
            }
            case 6:
            {
              let rectCommand = engine.RectCommand._check(command);
              this.ctx.rect(rectCommand.x, rectCommand.y, rectCommand.width, rectCommand.height);
              break;
            }
            case 4:
            {
              let quadraticCurveTo = engine.QuadraticCurveTo._check(command);
              this.ctx.quadraticCurveTo(quadraticCurveTo.x1, quadraticCurveTo.y1, quadraticCurveTo.x2, quadraticCurveTo.y2);
              break;
            }
            default:
            {
              dart.throw(new core.UnimplementedError.new("Unknown path command " + dart.str(command)));
            }
          }
        }
      }
    }
  };
  (engine.BitmapCanvas.new = function(_bounds) {
    let t1;
    this[rootElement] = html.Element.tag("flt-canvas");
    this[_canvas] = null;
    this[_ctx] = null;
    this[_cachedLastStyle] = null;
    this[_children] = JSArrayOfElement().of([]);
    this[_widthInBitmapPixels] = null;
    this[_heightInBitmapPixels] = null;
    this[_saveCount] = 0;
    this[_devicePixelRatio] = html.window.devicePixelRatio;
    this[_prevFilter] = "none";
    this[_prevFillStyle] = null;
    this[_prevStrokeStyle] = null;
    this[_bounds$] = _bounds;
    if (!(_bounds != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/bitmap_canvas.dart", 81, 39, "_bounds != null");
    engine.BitmapCanvas.__proto__.new.call(this);
    this.rootElement.style[$position] = "absolute";
    let boundsWidth = dart.notNull(this.size.width) + 1 + 2 * 1;
    let boundsHeight = dart.notNull(this.size.height) + 1 + 2 * 1;
    this[_widthInBitmapPixels] = (boundsWidth * dart.notNull(html.window.devicePixelRatio))[$ceil]();
    this[_heightInBitmapPixels] = (boundsHeight * dart.notNull(html.window.devicePixelRatio))[$ceil]();
    let cssWidth = dart.notNull(this[_widthInBitmapPixels]) / dart.notNull(html.window.devicePixelRatio);
    let cssHeight = dart.notNull(this[_heightInBitmapPixels]) / dart.notNull(html.window.devicePixelRatio);
    this[_canvas] = html.CanvasElement.new({width: this[_widthInBitmapPixels], height: this[_heightInBitmapPixels]});
    t1 = this[_canvas].style;
    t1[$position] = "absolute";
    t1[$width] = dart.str(cssWidth) + "px";
    t1[$height] = dart.str(cssHeight) + "px";
    t1;
    this[_ctx] = this[_canvas][$context2D];
    this.rootElement[$append](this[_canvas]);
    this[_initializeViewport]();
  }).prototype = engine.BitmapCanvas.prototype;
  dart.addTypeTests(engine.BitmapCanvas);
  const rootElement = BitmapCanvas_rootElement;
  dart.setMethodSignature(engine.BitmapCanvas, () => ({
    __proto__: dart.getMethods(engine.BitmapCanvas.__proto__),
    isReusable: dart.fnType(core.bool, []),
    [_initializeViewport]: dart.fnType(dart.void, []),
    [_applyPaint]: dart.fnType(dart.void, [ui.PaintData]),
    [_strokeOrFill]: dart.fnType(dart.void, [ui.PaintData], {resetPaint: core.bool}),
    [_resetPaint]: dart.fnType(dart.void, []),
    [_setFilter]: dart.fnType(dart.void, [core.String]),
    [_setFillAndStrokeStyle]: dart.fnType(dart.void, [core.Object, core.Object]),
    save: dart.fnType(core.int, []),
    saveLayer: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    restoreToCount: dart.fnType(dart.void, [core.int]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.PaintData]),
    drawPaint: dart.fnType(dart.void, [ui.PaintData]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.PaintData]),
    [_drawRRectPath]: dart.fnType(dart.void, [ui.RRect], {startNewPath: core.bool}),
    [_drawRRectPathReverse]: dart.fnType(dart.void, [ui.RRect], {startNewPath: core.bool}),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.PaintData]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.PaintData]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.PaintData]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.PaintData]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.PaintData]),
    [_drawTextLine]: dart.fnType(dart.void, [engine.ParagraphGeometricStyle, core.String, core.double, core.double]),
    drawParagraph: dart.fnType(dart.void, [engine.EngineParagraph, ui.Offset]),
    drawPicture: dart.fnType(dart.void, [ui.Picture]),
    [_runPath]: dart.fnType(dart.void, [ui.Path])
  }));
  dart.setGetterSignature(engine.BitmapCanvas, () => ({
    __proto__: dart.getGetters(engine.BitmapCanvas.__proto__),
    bounds: ui.Rect,
    size: ui.Size,
    widthInBitmapPixels: core.int,
    heightInBitmapPixels: core.int,
    bitmapPixelCount: core.int,
    canvas: html.CanvasElement,
    ctx: html.CanvasRenderingContext2D
  }));
  dart.setSetterSignature(engine.BitmapCanvas, () => ({
    __proto__: dart.getSetters(engine.BitmapCanvas.__proto__),
    bounds: ui.Rect
  }));
  dart.setLibraryUri(engine.BitmapCanvas, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.BitmapCanvas, () => ({
    __proto__: dart.getFields(engine.BitmapCanvas.__proto__),
    [_bounds$]: dart.fieldType(ui.Rect),
    rootElement: dart.finalFieldType(html.Element),
    [_canvas]: dart.fieldType(html.CanvasElement),
    [_ctx]: dart.fieldType(html.CanvasRenderingContext2D),
    [_cachedLastStyle]: dart.fieldType(engine.ParagraphGeometricStyle),
    [_children]: dart.finalFieldType(core.List$(html.Element)),
    [_widthInBitmapPixels]: dart.fieldType(core.int),
    [_heightInBitmapPixels]: dart.fieldType(core.int),
    [_saveCount]: dart.fieldType(core.int),
    [_devicePixelRatio]: dart.finalFieldType(core.double),
    [_prevFilter]: dart.fieldType(core.String),
    [_prevFillStyle]: dart.fieldType(core.Object),
    [_prevStrokeStyle]: dart.fieldType(core.Object)
  }));
  dart.defineLazy(engine.BitmapCanvas, {
    /*engine.BitmapCanvas.paddingPixels*/get paddingPixels() {
      return 1;
    }
  });
  const _name$0 = dart.privateName(engine, "_name");
  let C2;
  let C3;
  let C4;
  let C5;
  let C6;
  engine.BrowserEngine = class BrowserEngine extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.BrowserEngine.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.BrowserEngine.prototype;
  dart.addTypeTests(engine.BrowserEngine);
  dart.setLibraryUri(engine.BrowserEngine, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.BrowserEngine, () => ({
    __proto__: dart.getFields(engine.BrowserEngine.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.BrowserEngine, ['toString']);
  engine.BrowserEngine.blink = C2 || CT.C2;
  engine.BrowserEngine.webkit = C3 || CT.C3;
  engine.BrowserEngine.firefox = C4 || CT.C4;
  engine.BrowserEngine.unknown = C5 || CT.C5;
  engine.BrowserEngine.values = C6 || CT.C6;
  let C7;
  let C8;
  let C9;
  let C10;
  let C11;
  let C12;
  let C13;
  engine.OperatingSystem = class OperatingSystem extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.OperatingSystem.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.OperatingSystem.prototype;
  dart.addTypeTests(engine.OperatingSystem);
  dart.setLibraryUri(engine.OperatingSystem, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.OperatingSystem, () => ({
    __proto__: dart.getFields(engine.OperatingSystem.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.OperatingSystem, ['toString']);
  engine.OperatingSystem.iOs = C7 || CT.C7;
  engine.OperatingSystem.android = C8 || CT.C8;
  engine.OperatingSystem.linux = C9 || CT.C9;
  engine.OperatingSystem.windows = C10 || CT.C10;
  engine.OperatingSystem.macOs = C11 || CT.C11;
  engine.OperatingSystem.unknown = C12 || CT.C12;
  engine.OperatingSystem.values = C13 || CT.C13;
  engine.LocationStrategy = class LocationStrategy extends core.Object {};
  (engine.LocationStrategy.new = function() {
    ;
  }).prototype = engine.LocationStrategy.prototype;
  dart.addTypeTests(engine.LocationStrategy);
  dart.setLibraryUri(engine.LocationStrategy, "package:flutter_web_ui/src/engine.dart");
  let C14;
  const _platformLocation = dart.privateName(engine, "_platformLocation");
  const _waitForPopState = dart.privateName(engine, "_waitForPopState");
  const HashLocationStrategy__platformLocation = dart.privateName(engine, "HashLocationStrategy._platformLocation");
  engine.HashLocationStrategy = class HashLocationStrategy extends engine.LocationStrategy {
    get [_platformLocation]() {
      return this[_platformLocation$];
    }
    set [_platformLocation](value) {
      super[_platformLocation] = value;
    }
    onPopState(fn) {
      this[_platformLocation].onPopState(fn);
      return dart.fn(() => this[_platformLocation].offPopState(fn), VoidTovoid());
    }
    get path() {
      let t2;
      let path = (t2 = this[_platformLocation].hash, t2 == null ? "" : t2);
      path = path[$isEmpty] ? path : path[$substring](1);
      return engine.ensureLeading(path, "/");
    }
    prepareExternalUrl(internalUrl) {
      return internalUrl[$isEmpty] ? dart.str(this[_platformLocation].pathname) + dart.str(this[_platformLocation].search) : "#" + dart.str(internalUrl);
    }
    pushState(state, title, url) {
      this[_platformLocation].pushState(state, title, this.prepareExternalUrl(url));
    }
    replaceState(state, title, url) {
      this[_platformLocation].replaceState(state, title, this.prepareExternalUrl(url));
    }
    back() {
      this[_platformLocation].back();
      return this[_waitForPopState]();
    }
    [_waitForPopState]() {
      let completer = CompleterOfvoid().new();
      let unsubscribe = null;
      unsubscribe = this.onPopState(dart.fn(_ => {
        unsubscribe();
        completer.complete();
      }, EventToNull()));
      return completer.future;
    }
  };
  (engine.HashLocationStrategy.new = function(_platformLocation) {
    if (_platformLocation === void 0) _platformLocation = C14 || CT.C14;
    this[_platformLocation$] = _platformLocation;
    engine.HashLocationStrategy.__proto__.new.call(this);
    ;
  }).prototype = engine.HashLocationStrategy.prototype;
  dart.addTypeTests(engine.HashLocationStrategy);
  const _platformLocation$ = HashLocationStrategy__platformLocation;
  dart.setMethodSignature(engine.HashLocationStrategy, () => ({
    __proto__: dart.getMethods(engine.HashLocationStrategy.__proto__),
    onPopState: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.dynamic, [html.Event])]),
    prepareExternalUrl: dart.fnType(core.String, [core.String]),
    pushState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    replaceState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    back: dart.fnType(async.Future$(dart.void), []),
    [_waitForPopState]: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(engine.HashLocationStrategy, () => ({
    __proto__: dart.getGetters(engine.HashLocationStrategy.__proto__),
    path: core.String
  }));
  dart.setLibraryUri(engine.HashLocationStrategy, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.HashLocationStrategy, () => ({
    __proto__: dart.getFields(engine.HashLocationStrategy.__proto__),
    [_platformLocation]: dart.finalFieldType(engine.PlatformLocation)
  }));
  engine.PlatformLocation = class PlatformLocation extends core.Object {};
  (engine.PlatformLocation.new = function() {
    ;
  }).prototype = engine.PlatformLocation.prototype;
  dart.addTypeTests(engine.PlatformLocation);
  dart.setLibraryUri(engine.PlatformLocation, "package:flutter_web_ui/src/engine.dart");
  const _location = dart.privateName(engine, "_location");
  const _history = dart.privateName(engine, "_history");
  engine.BrowserPlatformLocation = class BrowserPlatformLocation extends engine.PlatformLocation {
    get [_location]() {
      return html.window[$location];
    }
    get [_history]() {
      return html.window.history;
    }
    onPopState(fn) {
      html.window[$addEventListener]("popstate", fn);
    }
    offPopState(fn) {
      html.window[$removeEventListener]("popstate", fn);
    }
    onHashChange(fn) {
      html.window[$addEventListener]("hashchange", fn);
    }
    offHashChange(fn) {
      html.window[$removeEventListener]("hashchange", fn);
    }
    get pathname() {
      return this[_location].pathname;
    }
    get search() {
      return this[_location].search;
    }
    get hash() {
      return this[_location].hash;
    }
    pushState(state, title, url) {
      this[_history][$pushState](state, title, url);
    }
    replaceState(state, title, url) {
      this[_history][$replaceState](state, title, url);
    }
    back() {
      this[_history].back();
    }
  };
  (engine.BrowserPlatformLocation.new = function() {
    engine.BrowserPlatformLocation.__proto__.new.call(this);
    ;
  }).prototype = engine.BrowserPlatformLocation.prototype;
  dart.addTypeTests(engine.BrowserPlatformLocation);
  dart.setMethodSignature(engine.BrowserPlatformLocation, () => ({
    __proto__: dart.getMethods(engine.BrowserPlatformLocation.__proto__),
    onPopState: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),
    offPopState: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),
    onHashChange: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),
    offHashChange: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),
    pushState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    replaceState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    back: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.BrowserPlatformLocation, () => ({
    __proto__: dart.getGetters(engine.BrowserPlatformLocation.__proto__),
    [_location]: html.Location,
    [_history]: html.History,
    pathname: core.String,
    search: core.String,
    hash: core.String
  }));
  dart.setLibraryUri(engine.BrowserPlatformLocation, "package:flutter_web_ui/src/engine.dart");
  const _skPath = dart.privateName(engine, "_skPath");
  const SkCanvas_skCanvas = dart.privateName(engine, "SkCanvas.skCanvas");
  const SkCanvas_htmlCanvas = dart.privateName(engine, "SkCanvas.htmlCanvas");
  const SkCanvas_skSurface = dart.privateName(engine, "SkCanvas.skSurface");
  const SkCanvas_size = dart.privateName(engine, "SkCanvas.size");
  engine.SkCanvas = class SkCanvas extends core.Object {
    get skCanvas() {
      return this[skCanvas$];
    }
    set skCanvas(value) {
      super.skCanvas = value;
    }
    get htmlCanvas() {
      return this[htmlCanvas$];
    }
    set htmlCanvas(value) {
      super.htmlCanvas = value;
    }
    get skSurface() {
      return this[skSurface$];
    }
    set skSurface(value) {
      super.skSurface = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    save() {
      return core.int._check(this.skCanvas.callMethod("save"));
    }
    saveLayer(bounds, paint) {
      return core.int._check(this.skCanvas.callMethod("saveLayer", JSArrayOfJsObject().of([engine.makeSkRect(bounds), engine.makeSkPaint(paint)])));
    }
    restore() {
      this.skCanvas.callMethod("restore");
    }
    restoreToCount(count) {
      this.skCanvas.callMethod("restoreToCount", JSArrayOfint().of([count]));
    }
    clear() {
      this.skCanvas.callMethod("clear", JSArrayOfint().of([4294967295]));
    }
    translate(dx, dy) {
      this.skCanvas.callMethod("translate", JSArrayOfdouble().of([dx, dy]));
    }
    transform(matrix) {
      this.skCanvas.callMethod("concat", JSArrayOfJsArrayOfdouble().of([engine.makeSkMatrix(matrix)]));
    }
    clipPath(path, opts) {
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      let skPath = engine.SkPath._check(path);
      let intersectClipOp = js.JsObject._check(dart.dsend(engine.canvasKit._get("ClipOp"), '_get', ["Intersect"]));
      this.skCanvas.callMethod("clipPath", [skPath[_skPath], intersectClipOp, doAntiAlias]);
    }
    clipRect(rect, opts) {
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      let intersectClipOp = js.JsObject._check(dart.dsend(engine.canvasKit._get("ClipOp"), '_get', ["Intersect"]));
      this.skCanvas.callMethod("clipRect", [engine.makeSkRect(rect), intersectClipOp, doAntiAlias]);
    }
    clipRRect(rrect) {
      let skPath = new engine.SkPath.new();
      skPath.addRRect(rrect);
      this.clipPath(skPath);
    }
    drawPicture(picture) {
      let skPicture = engine.SkPicture._check(picture);
      this.skCanvas.callMethod("drawPicture", JSArrayOfJsObject().of([skPicture.skPicture]));
    }
    drawPath(path, paint) {
      let skPath = engine.SkPath._check(path);
      this.skCanvas.callMethod("drawPath", JSArrayOfJsObject().of([skPath[_skPath], engine.makeSkPaint(paint)]));
    }
    drawPaint(paint) {
      this.skCanvas.callMethod("drawPaint", JSArrayOfJsObject().of([engine.makeSkPaint(paint)]));
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      engine.drawSkShadow(this.skCanvas, engine.SkPath._check(path), color, elevation, transparentOccluder);
    }
    get currentTransform() {
      return dart.throw("currentTransform");
    }
  };
  (engine.SkCanvas.new = function(skCanvas, htmlCanvas, skSurface, size) {
    this[skCanvas$] = skCanvas;
    this[htmlCanvas$] = htmlCanvas;
    this[skSurface$] = skSurface;
    this[size$] = size;
    ;
  }).prototype = engine.SkCanvas.prototype;
  dart.addTypeTests(engine.SkCanvas);
  const skCanvas$ = SkCanvas_skCanvas;
  const htmlCanvas$ = SkCanvas_htmlCanvas;
  const skSurface$ = SkCanvas_skSurface;
  const size$ = SkCanvas_size;
  dart.setMethodSignature(engine.SkCanvas, () => ({
    __proto__: dart.getMethods(engine.SkCanvas.__proto__),
    save: dart.fnType(core.int, []),
    saveLayer: dart.fnType(core.int, [ui.Rect, ui.Paint]),
    restore: dart.fnType(dart.void, []),
    restoreToCount: dart.fnType(dart.void, [core.int]),
    clear: dart.fnType(dart.void, []),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    clipPath: dart.fnType(dart.void, [ui.Path], {doAntiAlias: core.bool}),
    clipRect: dart.fnType(dart.void, [ui.Rect], {doAntiAlias: core.bool}),
    clipRRect: dart.fnType(dart.void, [ui.RRect]),
    drawPicture: dart.fnType(dart.void, [ui.Picture]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    drawPaint: dart.fnType(dart.void, [ui.Paint]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool])
  }));
  dart.setGetterSignature(engine.SkCanvas, () => ({
    __proto__: dart.getGetters(engine.SkCanvas.__proto__),
    currentTransform: engine.Matrix4
  }));
  dart.setLibraryUri(engine.SkCanvas, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SkCanvas, () => ({
    __proto__: dart.getFields(engine.SkCanvas.__proto__),
    skCanvas: dart.finalFieldType(js.JsObject),
    htmlCanvas: dart.finalFieldType(html.CanvasElement),
    skSurface: dart.finalFieldType(js.JsObject),
    size: dart.finalFieldType(ui.Size)
  }));
  const _initialRoute = dart.privateName(engine, "_initialRoute");
  const _viewportMetrics = dart.privateName(engine, "_viewportMetrics");
  const _animator$ = dart.privateName(engine, "_animator");
  const _runtimeController$ = dart.privateName(engine, "_runtimeController");
  const _assetManager$ = dart.privateName(engine, "_assetManager");
  const _delegate$ = dart.privateName(engine, "_delegate");
  engine.RuntimeDelegate = class RuntimeDelegate extends core.Object {};
  (engine.RuntimeDelegate.new = function() {
    ;
  }).prototype = engine.RuntimeDelegate.prototype;
  dart.addTypeTests(engine.RuntimeDelegate);
  dart.setLibraryUri(engine.RuntimeDelegate, "package:flutter_web_ui/src/engine.dart");
  engine.Engine = class Engine extends engine.RuntimeDelegate {
    get defaultRouteName() {
      let t2;
      t2 = this[_initialRoute];
      return t2 == null ? "/" : t2;
    }
    get haveSurface() {
      return true;
    }
    set viewportMetrics(metrics) {
      let dimensionsChanged = this[_viewportMetrics].physicalHeight != metrics.physicalHeight || this[_viewportMetrics].physicalWidth != metrics.physicalWidth;
      this[_viewportMetrics] = metrics;
      dart.dput(this[_runtimeController$], 'viewportMetrics', this[_viewportMetrics]);
      if (this[_animator$] != null) {
        if (dimensionsChanged) {
          this[_animator$].setDimensionChangePending();
        }
        if (dart.test(this.haveSurface)) {
          this.scheduleFrame();
        }
      }
    }
    scheduleFrame(opts) {
      let regenerateLayerTree = opts && 'regenerateLayerTree' in opts ? opts.regenerateLayerTree : true;
      this[_animator$].requestFrame(regenerateLayerTree);
    }
    render(layerTree) {
      if (layerTree == null) {
        return;
      }
      let frameSize = new ui.Size.new(this[_viewportMetrics].physicalWidth, this[_viewportMetrics].physicalHeight);
      if (dart.test(frameSize.isEmpty)) {
        return;
      }
      layerTree.frameSize = frameSize;
      this[_animator$].render(layerTree);
    }
    handlePlatformMessage(message) {
      if (message.channel === "flutter/assets") {
        this.handleAssetPlatformMessage(message);
      } else {
        dart.dsend(this[_delegate$], 'onEngineHandlePlatformMessage', [message]);
      }
    }
    handleAssetPlatformMessage(message) {
      let response = message.response;
      if (response == null) {
        return;
      }
      let asset = convert.utf8.decode(message.data[$buffer][$asUint8List]());
      if (this[_assetManager$] != null) {
        this[_assetManager$].load(asset).then(core.Null, dart.fn(data => {
          if (data != null) {
            response.complete(data[$buffer][$asUint8List]());
          } else {
            response.completeEmpty();
          }
        }, ByteDataToNull()));
      } else {
        response.completeEmpty();
      }
    }
    getFontCollection() {
      return null;
    }
  };
  (engine.Engine.new = function(_animator, _runtimeController, _assetManager, _delegate) {
    this[_initialRoute] = null;
    this[_viewportMetrics] = null;
    this[_animator$] = _animator;
    this[_runtimeController$] = _runtimeController;
    this[_assetManager$] = _assetManager;
    this[_delegate$] = _delegate;
    ;
  }).prototype = engine.Engine.prototype;
  dart.addTypeTests(engine.Engine);
  dart.setMethodSignature(engine.Engine, () => ({
    __proto__: dart.getMethods(engine.Engine.__proto__),
    scheduleFrame: dart.fnType(dart.void, [], {regenerateLayerTree: core.bool}),
    render: dart.fnType(dart.void, [engine.LayerTree]),
    handlePlatformMessage: dart.fnType(dart.void, [engine.PlatformMessage]),
    handleAssetPlatformMessage: dart.fnType(dart.void, [engine.PlatformMessage]),
    getFontCollection: dart.fnType(engine.FontCollection, [])
  }));
  dart.setGetterSignature(engine.Engine, () => ({
    __proto__: dart.getGetters(engine.Engine.__proto__),
    defaultRouteName: core.String,
    haveSurface: core.bool
  }));
  dart.setSetterSignature(engine.Engine, () => ({
    __proto__: dart.getSetters(engine.Engine.__proto__),
    viewportMetrics: engine.ViewportMetrics
  }));
  dart.setLibraryUri(engine.Engine, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Engine, () => ({
    __proto__: dart.getFields(engine.Engine.__proto__),
    [_animator$]: dart.finalFieldType(engine.Animator),
    [_runtimeController$]: dart.finalFieldType(dart.dynamic),
    [_assetManager$]: dart.finalFieldType(engine.AssetManager),
    [_delegate$]: dart.finalFieldType(dart.dynamic),
    [_initialRoute]: dart.fieldType(core.String),
    [_viewportMetrics]: dart.fieldType(engine.ViewportMetrics)
  }));
  engine.Animator = class Animator extends core.Object {
    setDimensionChangePending() {
    }
    render(layerTree) {
    }
    requestFrame(regenerateLayerTree) {
    }
  };
  (engine.Animator.new = function() {
    ;
  }).prototype = engine.Animator.prototype;
  dart.addTypeTests(engine.Animator);
  dart.setMethodSignature(engine.Animator, () => ({
    __proto__: dart.getMethods(engine.Animator.__proto__),
    setDimensionChangePending: dart.fnType(dart.void, []),
    render: dart.fnType(dart.void, [engine.LayerTree]),
    requestFrame: dart.fnType(dart.void, [core.bool])
  }));
  dart.setLibraryUri(engine.Animator, "package:flutter_web_ui/src/engine.dart");
  const _registeredTypefaces = dart.privateName(engine, "_registeredTypefaces");
  const _fontLoadingFutures = dart.privateName(engine, "_fontLoadingFutures");
  const _registerFont = dart.privateName(engine, "_registerFont");
  const SkiaFontCollection_skFontMgr = dart.privateName(engine, "SkiaFontCollection.skFontMgr");
  engine.SkiaFontCollection = class SkiaFontCollection extends core.Object {
    get skFontMgr() {
      return this[skFontMgr];
    }
    set skFontMgr(value) {
      super.skFontMgr = value;
    }
    ensureFontsLoaded() {
      return async.async(dart.void, (function* ensureFontsLoaded() {
        yield async.Future.wait(dart.void, this[_fontLoadingFutures]);
      }).bind(this));
    }
    registerFonts(assetManager) {
      return async.async(dart.void, (function* registerFonts() {
        let byteData = null;
        try {
          byteData = (yield assetManager.load("FontManifest.json"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (engine.AssetManagerException.is(e)) {
            if (e.httpStatus === 404) {
              html.window[$console].warn("Font manifest does not exist at `" + dart.str(e.url) + "` – ignoring.");
              return;
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
        if (byteData == null) {
          dart.throw(new core.AssertionError.new("There was a problem trying to load FontManifest.json"));
        }
        let fontManifest = core.List._check(convert.json.decode(convert.utf8.decode(byteData[$buffer][$asUint8List]())));
        if (fontManifest == null) {
          dart.throw(new core.AssertionError.new("There was a problem trying to load FontManifest.json"));
        }
        this[_fontLoadingFutures][$add](this[_registerFont]("Roboto", engine._robotoFontUrl, new (IdentityMapOfString$String()).new()));
        for (let t3 of fontManifest) {
          let fontFamily = MapOfString$dynamic()._check(t3);
          let family = core.String._check(fontFamily[$_get]("family"));
          let fontAssets = core.List._check(fontFamily[$_get]("fonts"));
          for (let fontAssetItem of fontAssets) {
            let fontAsset = MapOfString$dynamic()._check(fontAssetItem);
            let asset = core.String._check(fontAsset[$_get]("asset"));
            let descriptors = new (IdentityMapOfString$String()).new();
            for (let descriptor of fontAsset[$keys]) {
              if (descriptor !== "asset") {
                descriptors[$_set](descriptor, dart.str(fontAsset[$_get](descriptor)));
              }
            }
            this[_fontLoadingFutures][$add](this[_registerFont](family, assetManager.getAssetUrl(asset), descriptors));
          }
        }
      }).bind(this));
    }
    [_registerFont](family, url, descriptors) {
      return async.async(dart.void, (function* _registerFont() {
        let fetchResult = (yield html.window[$fetch](url));
        let resultBuffer = typed_data.ByteBuffer._check(yield dart.dsend(fetchResult, 'arrayBuffer', []));
        let skTypeFace = js.JsObject._check(this.skFontMgr.callMethod("MakeTypefaceFromData", JSArrayOfUint8List().of([resultBuffer[$asUint8List]()])));
        this[_registeredTypefaces][$putIfAbsent](family, dart.fn(() => new (LinkedMapOfMapOfString$String$JsObject()).new(), VoidToMapOfMapOfString$String$JsObject()));
        this[_registeredTypefaces][$_get](family)[$_set](descriptors, skTypeFace);
      }).bind(this));
    }
    getFont(family, size) {
      if (this[_registeredTypefaces][$_get](family) == null) {
        if (family === "sans-serif") {
          return js.JsObject.new(js.JsFunction._check(engine.canvasKit._get("SkFont")), [null, size]);
        }
        dart.throw(core.Exception.new("Unregistered font: " + dart.str(family)));
      }
      let skTypeface = this[_registeredTypefaces][$_get](family)[$values][$first];
      return js.JsObject.new(js.JsFunction._check(engine.canvasKit._get("SkFont")), [skTypeface, size]);
    }
  };
  (engine.SkiaFontCollection.new = function() {
    this[_registeredTypefaces] = new (IdentityMapOfString$MapOfMapOfString$String$JsObject()).new();
    this[_fontLoadingFutures] = JSArrayOfFutureOfvoid().of([]);
    this[skFontMgr] = js.JsObject.new(js.JsFunction._check(dart.dsend(engine.canvasKit._get("SkFontMgr"), '_get', ["RefDefault"])));
    ;
  }).prototype = engine.SkiaFontCollection.prototype;
  dart.addTypeTests(engine.SkiaFontCollection);
  const skFontMgr = SkiaFontCollection_skFontMgr;
  dart.setMethodSignature(engine.SkiaFontCollection, () => ({
    __proto__: dart.getMethods(engine.SkiaFontCollection.__proto__),
    ensureFontsLoaded: dart.fnType(async.Future$(dart.void), []),
    registerFonts: dart.fnType(async.Future$(dart.void), [engine.AssetManager]),
    [_registerFont]: dart.fnType(async.Future$(dart.void), [core.String, core.String, core.Map$(core.String, core.String)]),
    getFont: dart.fnType(js.JsObject, [core.String, core.double])
  }));
  dart.setLibraryUri(engine.SkiaFontCollection, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SkiaFontCollection, () => ({
    __proto__: dart.getFields(engine.SkiaFontCollection.__proto__),
    [_registeredTypefaces]: dart.finalFieldType(core.Map$(core.String, core.Map$(core.Map$(core.String, core.String), js.JsObject))),
    [_fontLoadingFutures]: dart.finalFieldType(core.List$(async.Future$(dart.void))),
    skFontMgr: dart.finalFieldType(js.JsObject)
  }));
  let C15;
  const SkImage_skImage = dart.privateName(engine, "SkImage.skImage");
  engine.SkImage = class SkImage extends core.Object {
    get skImage() {
      return this[skImage$];
    }
    set skImage(value) {
      this[skImage$] = value;
    }
    dispose() {
      this.skImage = null;
    }
    get width() {
      return core.int._check(this.skImage.callMethod("width"));
    }
    get height() {
      return core.int._check(this.skImage.callMethod("height"));
    }
    toByteData(opts) {
      let format = opts && 'format' in opts ? opts.format : C15 || CT.C15;
      dart.throw("unimplemented");
    }
  };
  (engine.SkImage.new = function(skImage) {
    this[skImage$] = skImage;
    ;
  }).prototype = engine.SkImage.prototype;
  dart.addTypeTests(engine.SkImage);
  const skImage$ = SkImage_skImage;
  engine.SkImage[dart.implements] = () => [ui.Image];
  dart.setMethodSignature(engine.SkImage, () => ({
    __proto__: dart.getMethods(engine.SkImage.__proto__),
    dispose: dart.fnType(dart.void, []),
    toByteData: dart.fnType(async.Future$(typed_data.ByteData), [], {format: ui.ImageByteFormat})
  }));
  dart.setGetterSignature(engine.SkImage, () => ({
    __proto__: dart.getGetters(engine.SkImage.__proto__),
    width: core.int,
    height: core.int
  }));
  dart.setLibraryUri(engine.SkImage, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SkImage, () => ({
    __proto__: dart.getFields(engine.SkImage.__proto__),
    skImage: dart.fieldType(js.JsObject)
  }));
  const _getNextFrame = dart.privateName(engine, "_getNextFrame");
  let C16;
  const _getNextFrame$ = dart.privateName(ui, "_getNextFrame");
  const SkImageCodec_skImage = dart.privateName(engine, "SkImageCodec.skImage");
  engine.SkImageCodec = class SkImageCodec extends core.Object {
    get skImage() {
      return this[skImage$0];
    }
    set skImage(value) {
      super.skImage = value;
    }
    dispose() {
    }
    get frameCount() {
      return 1;
    }
    getNextFrame() {
      return FutureOfFrameInfo().value(new engine.SingleFrameInfo.new(this.skImage));
    }
    get repetitionCount() {
      return 0;
    }
    [_getNextFrame$](callback) {
      return core.String._check(this[$noSuchMethod](new core._Invocation.method(C16 || CT.C16, null, [callback])));
    }
  };
  (engine.SkImageCodec.new = function(skImage) {
    this[skImage$0] = skImage;
    ;
  }).prototype = engine.SkImageCodec.prototype;
  dart.addTypeTests(engine.SkImageCodec);
  const skImage$0 = SkImageCodec_skImage;
  engine.SkImageCodec[dart.implements] = () => [ui.Codec];
  dart.setMethodSignature(engine.SkImageCodec, () => ({
    __proto__: dart.getMethods(engine.SkImageCodec.__proto__),
    dispose: dart.fnType(dart.void, []),
    getNextFrame: dart.fnType(async.Future$(ui.FrameInfo), []),
    [_getNextFrame$]: dart.fnType(core.String, [dart.fnType(dart.void, [ui.FrameInfo])])
  }));
  dart.setGetterSignature(engine.SkImageCodec, () => ({
    __proto__: dart.getGetters(engine.SkImageCodec.__proto__),
    frameCount: core.int,
    repetitionCount: core.int
  }));
  dart.setLibraryUri(engine.SkImageCodec, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SkImageCodec, () => ({
    __proto__: dart.getFields(engine.SkImageCodec.__proto__),
    skImage: dart.finalFieldType(engine.SkImage)
  }));
  const Layer_parent = dart.privateName(engine, "Layer.parent");
  const Layer_paintBounds = dart.privateName(engine, "Layer.paintBounds");
  engine.Layer = class Layer extends core.Object {
    get parent() {
      return this[parent];
    }
    set parent(value) {
      this[parent] = value;
    }
    get paintBounds() {
      return this[paintBounds];
    }
    set paintBounds(value) {
      this[paintBounds] = value;
    }
    get needsPainting() {
      return !dart.test(this.paintBounds.isEmpty);
    }
  };
  (engine.Layer.new = function() {
    this[parent] = null;
    this[paintBounds] = ui.Rect.zero;
    ;
  }).prototype = engine.Layer.prototype;
  dart.addTypeTests(engine.Layer);
  const parent = Layer_parent;
  const paintBounds = Layer_paintBounds;
  engine.Layer[dart.implements] = () => [ui.EngineLayer];
  dart.setGetterSignature(engine.Layer, () => ({
    __proto__: dart.getGetters(engine.Layer.__proto__),
    needsPainting: core.bool
  }));
  dart.setLibraryUri(engine.Layer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Layer, () => ({
    __proto__: dart.getFields(engine.Layer.__proto__),
    parent: dart.fieldType(engine.ContainerLayer),
    paintBounds: dart.fieldType(ui.Rect)
  }));
  const PrerollContext_rasterCache = dart.privateName(engine, "PrerollContext.rasterCache");
  engine.PrerollContext = class PrerollContext extends core.Object {
    get rasterCache() {
      return this[rasterCache$];
    }
    set rasterCache(value) {
      super.rasterCache = value;
    }
  };
  (engine.PrerollContext.new = function(rasterCache) {
    this[rasterCache$] = rasterCache;
    ;
  }).prototype = engine.PrerollContext.prototype;
  dart.addTypeTests(engine.PrerollContext);
  const rasterCache$ = PrerollContext_rasterCache;
  dart.setLibraryUri(engine.PrerollContext, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PrerollContext, () => ({
    __proto__: dart.getFields(engine.PrerollContext.__proto__),
    rasterCache: dart.finalFieldType(engine.RasterCache)
  }));
  const PaintContext_canvas = dart.privateName(engine, "PaintContext.canvas");
  const PaintContext_rasterCache = dart.privateName(engine, "PaintContext.rasterCache");
  engine.PaintContext = class PaintContext extends core.Object {
    get canvas() {
      return this[canvas$];
    }
    set canvas(value) {
      super.canvas = value;
    }
    get rasterCache() {
      return this[rasterCache$0];
    }
    set rasterCache(value) {
      super.rasterCache = value;
    }
  };
  (engine.PaintContext.new = function(canvas, rasterCache) {
    this[canvas$] = canvas;
    this[rasterCache$0] = rasterCache;
    ;
  }).prototype = engine.PaintContext.prototype;
  dart.addTypeTests(engine.PaintContext);
  const canvas$ = PaintContext_canvas;
  const rasterCache$0 = PaintContext_rasterCache;
  dart.setLibraryUri(engine.PaintContext, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintContext, () => ({
    __proto__: dart.getFields(engine.PaintContext.__proto__),
    canvas: dart.finalFieldType(engine.SkCanvas),
    rasterCache: dart.finalFieldType(engine.RasterCache)
  }));
  const _layers = dart.privateName(engine, "_layers");
  engine.ContainerLayer = class ContainerLayer extends engine.Layer {
    add(child) {
      child.parent = this;
      this[_layers][$add](child);
    }
    preroll(prerollContext, matrix) {
      this.paintBounds = this.prerollChildren(prerollContext, matrix);
    }
    prerollChildren(context, childMatrix) {
      let childPaintBounds = ui.Rect.zero;
      for (let layer of this[_layers]) {
        layer.preroll(context, childMatrix);
        if (dart.test(childPaintBounds.isEmpty)) {
          childPaintBounds = layer.paintBounds;
        } else if (!dart.test(layer.paintBounds.isEmpty)) {
          childPaintBounds = childPaintBounds.expandToInclude(layer.paintBounds);
        }
      }
      return childPaintBounds;
    }
    paintChildren(context) {
      if (!dart.test(this.needsPainting)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart", 86, 12, "needsPainting");
      for (let layer of this[_layers]) {
        if (dart.test(layer.needsPainting)) {
          layer.paint(context);
        }
      }
    }
  };
  (engine.ContainerLayer.new = function() {
    this[_layers] = JSArrayOfLayer().of([]);
    engine.ContainerLayer.__proto__.new.call(this);
    ;
  }).prototype = engine.ContainerLayer.prototype;
  dart.addTypeTests(engine.ContainerLayer);
  dart.setMethodSignature(engine.ContainerLayer, () => ({
    __proto__: dart.getMethods(engine.ContainerLayer.__proto__),
    add: dart.fnType(dart.void, [engine.Layer]),
    preroll: dart.fnType(dart.void, [engine.PrerollContext, engine.Matrix4]),
    prerollChildren: dart.fnType(ui.Rect, [engine.PrerollContext, engine.Matrix4]),
    paintChildren: dart.fnType(dart.void, [engine.PaintContext])
  }));
  dart.setLibraryUri(engine.ContainerLayer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ContainerLayer, () => ({
    __proto__: dart.getFields(engine.ContainerLayer.__proto__),
    [_layers]: dart.finalFieldType(core.List$(engine.Layer))
  }));
  const _clipPath$ = dart.privateName(engine, "_clipPath");
  engine.ClipPathLayer = class ClipPathLayer extends engine.ContainerLayer {
    preroll(prerollContext, matrix) {
      let childPaintBounds = this.prerollChildren(prerollContext, matrix);
      let clipBounds = this[_clipPath$].getBounds();
      if (dart.test(childPaintBounds.overlaps(clipBounds))) {
        this.paintBounds = childPaintBounds.intersect(clipBounds);
      }
    }
    paint(paintContext) {
      if (!dart.test(this.needsPainting)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart", 114, 12, "needsPainting");
      paintContext.canvas.save();
      paintContext.canvas.clipPath(this[_clipPath$]);
      this.paintChildren(paintContext);
      paintContext.canvas.restore();
    }
  };
  (engine.ClipPathLayer.new = function(_clipPath) {
    this[_clipPath$] = _clipPath;
    engine.ClipPathLayer.__proto__.new.call(this);
    ;
  }).prototype = engine.ClipPathLayer.prototype;
  dart.addTypeTests(engine.ClipPathLayer);
  dart.setMethodSignature(engine.ClipPathLayer, () => ({
    __proto__: dart.getMethods(engine.ClipPathLayer.__proto__),
    paint: dart.fnType(dart.void, [engine.PaintContext])
  }));
  dart.setLibraryUri(engine.ClipPathLayer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ClipPathLayer, () => ({
    __proto__: dart.getFields(engine.ClipPathLayer.__proto__),
    [_clipPath$]: dart.finalFieldType(ui.Path)
  }));
  const _clipRect$ = dart.privateName(engine, "_clipRect");
  engine.ClipRectLayer = class ClipRectLayer extends engine.ContainerLayer {
    preroll(prerollContext, matrix) {
      let childPaintBounds = this.prerollChildren(prerollContext, matrix);
      if (dart.test(childPaintBounds.overlaps(this[_clipRect$]))) {
        this.paintBounds = childPaintBounds.intersect(this[_clipRect$]);
      }
    }
    paint(paintContext) {
      if (!dart.test(this.needsPainting)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart", 140, 12, "needsPainting");
      paintContext.canvas.save();
      paintContext.canvas.clipRect(this[_clipRect$]);
      this.paintChildren(paintContext);
      paintContext.canvas.restore();
    }
  };
  (engine.ClipRectLayer.new = function(_clipRect) {
    this[_clipRect$] = _clipRect;
    engine.ClipRectLayer.__proto__.new.call(this);
    ;
  }).prototype = engine.ClipRectLayer.prototype;
  dart.addTypeTests(engine.ClipRectLayer);
  dart.setMethodSignature(engine.ClipRectLayer, () => ({
    __proto__: dart.getMethods(engine.ClipRectLayer.__proto__),
    paint: dart.fnType(dart.void, [engine.PaintContext])
  }));
  dart.setLibraryUri(engine.ClipRectLayer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ClipRectLayer, () => ({
    __proto__: dart.getFields(engine.ClipRectLayer.__proto__),
    [_clipRect$]: dart.finalFieldType(ui.Rect)
  }));
  const _clipRRect$ = dart.privateName(engine, "_clipRRect");
  engine.ClipRRectLayer = class ClipRRectLayer extends engine.ContainerLayer {
    preroll(prerollContext, matrix) {
      let childPaintBounds = this.prerollChildren(prerollContext, matrix);
      if (dart.test(childPaintBounds.overlaps(this[_clipRRect$].outerRect))) {
        this.paintBounds = childPaintBounds.intersect(this[_clipRRect$].outerRect);
      }
    }
    paint(paintContext) {
      if (!dart.test(this.needsPainting)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart", 166, 12, "needsPainting");
      paintContext.canvas.save();
      paintContext.canvas.clipRRect(this[_clipRRect$]);
      this.paintChildren(paintContext);
      paintContext.canvas.restore();
    }
  };
  (engine.ClipRRectLayer.new = function(_clipRRect) {
    this[_clipRRect$] = _clipRRect;
    engine.ClipRRectLayer.__proto__.new.call(this);
    ;
  }).prototype = engine.ClipRRectLayer.prototype;
  dart.addTypeTests(engine.ClipRRectLayer);
  dart.setMethodSignature(engine.ClipRRectLayer, () => ({
    __proto__: dart.getMethods(engine.ClipRRectLayer.__proto__),
    paint: dart.fnType(dart.void, [engine.PaintContext])
  }));
  dart.setLibraryUri(engine.ClipRRectLayer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ClipRRectLayer, () => ({
    __proto__: dart.getFields(engine.ClipRRectLayer.__proto__),
    [_clipRRect$]: dart.finalFieldType(ui.RRect)
  }));
  const _alpha$ = dart.privateName(engine, "_alpha");
  const _offset$ = dart.privateName(engine, "_offset");
  engine.OpacityLayer = class OpacityLayer extends engine.ContainerLayer {
    preroll(prerollContext, matrix) {
      let childMatrix = engine.Matrix4.copy(matrix);
      childMatrix.translate(this[_offset$].dx, this[_offset$].dy);
      let childPaintBounds = this.prerollChildren(prerollContext, childMatrix);
      this.paintBounds = childPaintBounds.translate(this[_offset$].dx, this[_offset$].dy);
    }
    paint(paintContext) {
      if (!dart.test(this.needsPainting)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart", 193, 12, "needsPainting");
      let paint = new ui.Paint.new();
      paint.color = new ui.Color.fromARGB(this[_alpha$], 0, 0, 0);
      paintContext.canvas.save();
      paintContext.canvas.translate(this[_offset$].dx, this[_offset$].dy);
      let saveLayerBounds = this.paintBounds.shift(this[_offset$]._negate());
      paintContext.canvas.saveLayer(saveLayerBounds, paint);
      this.paintChildren(paintContext);
      paintContext.canvas.restore();
      paintContext.canvas.restore();
    }
  };
  (engine.OpacityLayer.new = function(_alpha, _offset) {
    this[_alpha$] = _alpha;
    this[_offset$] = _offset;
    engine.OpacityLayer.__proto__.new.call(this);
    ;
  }).prototype = engine.OpacityLayer.prototype;
  dart.addTypeTests(engine.OpacityLayer);
  engine.OpacityLayer[dart.implements] = () => [ui.OpacityEngineLayer];
  dart.setMethodSignature(engine.OpacityLayer, () => ({
    __proto__: dart.getMethods(engine.OpacityLayer.__proto__),
    paint: dart.fnType(dart.void, [engine.PaintContext])
  }));
  dart.setLibraryUri(engine.OpacityLayer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.OpacityLayer, () => ({
    __proto__: dart.getFields(engine.OpacityLayer.__proto__),
    [_alpha$]: dart.finalFieldType(core.int),
    [_offset$]: dart.finalFieldType(ui.Offset)
  }));
  const _transform$ = dart.privateName(engine, "_transform");
  engine.TransformLayer = class TransformLayer extends engine.ContainerLayer {
    preroll(prerollContext, matrix) {
      let childMatrix = engine.Matrix4._check(matrix['*'](this[_transform$]));
      let childPaintBounds = this.prerollChildren(prerollContext, childMatrix);
      this.paintBounds = engine.TransformLayer._transformRect(this[_transform$], childPaintBounds);
    }
    static _transformPoint(transform, point) {
      let position3 = engine.Vector3.new(point.dx, point.dy, 0.0);
      let transformed3 = transform.perspectiveTransform(position3);
      return new ui.Offset.new(transformed3.x, transformed3.y);
    }
    static _transformRect(transform, rect) {
      let point1 = engine.TransformLayer._transformPoint(transform, rect.topLeft);
      let point2 = engine.TransformLayer._transformPoint(transform, rect.topRight);
      let point3 = engine.TransformLayer._transformPoint(transform, rect.bottomLeft);
      let point4 = engine.TransformLayer._transformPoint(transform, rect.bottomRight);
      return new ui.Rect.fromLTRB(engine.TransformLayer._min4(point1.dx, point2.dx, point3.dx, point4.dx), engine.TransformLayer._min4(point1.dy, point2.dy, point3.dy, point4.dy), engine.TransformLayer._max4(point1.dx, point2.dx, point3.dx, point4.dx), engine.TransformLayer._max4(point1.dy, point2.dy, point3.dy, point4.dy));
    }
    static _min4(a, b, c, d) {
      return math.min(core.double, a, math.min(core.double, b, math.min(core.double, c, d)));
    }
    static _max4(a, b, c, d) {
      return math.max(core.double, a, math.max(core.double, b, math.max(core.double, c, d)));
    }
    paint(paintContext) {
      if (!dart.test(this.needsPainting)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart", 265, 12, "needsPainting");
      paintContext.canvas.save();
      paintContext.canvas.transform(this[_transform$].storage);
      this.paintChildren(paintContext);
      paintContext.canvas.restore();
    }
  };
  (engine.TransformLayer.new = function(_transform) {
    this[_transform$] = _transform;
    engine.TransformLayer.__proto__.new.call(this);
    ;
  }).prototype = engine.TransformLayer.prototype;
  dart.addTypeTests(engine.TransformLayer);
  engine.TransformLayer[dart.implements] = () => [ui.OffsetEngineLayer, ui.TransformEngineLayer];
  dart.setMethodSignature(engine.TransformLayer, () => ({
    __proto__: dart.getMethods(engine.TransformLayer.__proto__),
    paint: dart.fnType(dart.void, [engine.PaintContext])
  }));
  dart.setLibraryUri(engine.TransformLayer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.TransformLayer, () => ({
    __proto__: dart.getFields(engine.TransformLayer.__proto__),
    [_transform$]: dart.finalFieldType(engine.Matrix4)
  }));
  const PictureLayer_picture = dart.privateName(engine, "PictureLayer.picture");
  const PictureLayer_offset = dart.privateName(engine, "PictureLayer.offset");
  const PictureLayer_isComplex = dart.privateName(engine, "PictureLayer.isComplex");
  const PictureLayer_willChange = dart.privateName(engine, "PictureLayer.willChange");
  engine.PictureLayer = class PictureLayer extends engine.Layer {
    get picture() {
      return this[picture$];
    }
    set picture(value) {
      super.picture = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get isComplex() {
      return this[isComplex$];
    }
    set isComplex(value) {
      super.isComplex = value;
    }
    get willChange() {
      return this[willChange$];
    }
    set willChange(value) {
      super.willChange = value;
    }
    preroll(prerollContext, matrix) {
      let t4;
      let cache = prerollContext.rasterCache;
      if (cache != null) {
        let translateMatrix = (t4 = engine.Matrix4.identity(), t4.setTranslationRaw(this.offset.dx, this.offset.dy, 0.0), t4);
        let cacheMatrix = engine.Matrix4._check(translateMatrix['*'](matrix));
        cache.prepare(this.picture, cacheMatrix, this.isComplex, this.willChange);
      }
      this.paintBounds = this.picture.cullRect.shift(this.offset);
    }
    paint(paintContext) {
      if (!(this.picture != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart", 305, 12, "picture != null");
      if (!dart.test(this.needsPainting)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart", 306, 12, "needsPainting");
      paintContext.canvas.save();
      paintContext.canvas.translate(this.offset.dx, this.offset.dy);
      if (paintContext.rasterCache != null) {
        let cacheMatrix = paintContext.canvas.currentTransform;
        let result = paintContext.rasterCache.get(this.picture, cacheMatrix);
        if (dart.test(result.isValid)) {
          result.draw(paintContext.canvas);
          return;
        }
      }
      paintContext.canvas.drawPicture(this.picture);
      paintContext.canvas.restore();
    }
  };
  (engine.PictureLayer.new = function(picture, offset, isComplex, willChange) {
    this[picture$] = picture;
    this[offset$] = offset;
    this[isComplex$] = isComplex;
    this[willChange$] = willChange;
    engine.PictureLayer.__proto__.new.call(this);
    ;
  }).prototype = engine.PictureLayer.prototype;
  dart.addTypeTests(engine.PictureLayer);
  const picture$ = PictureLayer_picture;
  const offset$ = PictureLayer_offset;
  const isComplex$ = PictureLayer_isComplex;
  const willChange$ = PictureLayer_willChange;
  dart.setMethodSignature(engine.PictureLayer, () => ({
    __proto__: dart.getMethods(engine.PictureLayer.__proto__),
    preroll: dart.fnType(dart.void, [engine.PrerollContext, engine.Matrix4]),
    paint: dart.fnType(dart.void, [engine.PaintContext])
  }));
  dart.setLibraryUri(engine.PictureLayer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PictureLayer, () => ({
    __proto__: dart.getFields(engine.PictureLayer.__proto__),
    picture: dart.finalFieldType(ui.Picture),
    offset: dart.finalFieldType(ui.Offset),
    isComplex: dart.finalFieldType(core.bool),
    willChange: dart.finalFieldType(core.bool)
  }));
  const _elevation$ = dart.privateName(engine, "_elevation");
  const _color$ = dart.privateName(engine, "_color");
  const _shadowColor$ = dart.privateName(engine, "_shadowColor");
  const _path$ = dart.privateName(engine, "_path");
  const _clipBehavior$ = dart.privateName(engine, "_clipBehavior");
  let C17;
  let C18;
  let C19;
  let C20;
  engine.PhysicalShapeLayer = class PhysicalShapeLayer extends engine.ContainerLayer {
    preroll(prerollContext, matrix) {
      this.prerollChildren(prerollContext, matrix);
      this.paintBounds = engine.ElevationShadow.computeShadowRect(this[_path$].getBounds(), this[_elevation$]);
    }
    paint(paintContext) {
      let t4;
      if (!dart.test(this.needsPainting)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart", 354, 12, "needsPainting");
      if (this[_elevation$] !== 0) {
        engine.PhysicalShapeLayer.drawShadow(paintContext.canvas, this[_path$], this[_shadowColor$], this[_elevation$], this[_color$].alpha !== 255);
      }
      let paint = (t4 = new ui.Paint.new(), t4.color = this[_color$], t4);
      if (!dart.equals(this[_clipBehavior$], ui.Clip.antiAliasWithSaveLayer)) {
        paintContext.canvas.drawPath(this[_path$], paint);
      }
      let saveCount = paintContext.canvas.save();
      switch (this[_clipBehavior$]) {
        case C17 || CT.C17:
        {
          paintContext.canvas.clipPath(this[_path$], {doAntiAlias: false});
          break;
        }
        case C18 || CT.C18:
        {
          paintContext.canvas.clipPath(this[_path$], {doAntiAlias: true});
          break;
        }
        case C19 || CT.C19:
        {
          paintContext.canvas.clipPath(this[_path$], {doAntiAlias: true});
          paintContext.canvas.saveLayer(this.paintBounds, null);
          break;
        }
        case C20 || CT.C20:
        {
          break;
        }
      }
      if (dart.equals(this[_clipBehavior$], ui.Clip.antiAliasWithSaveLayer)) {
        paintContext.canvas.drawPaint(paint);
      }
      this.paintChildren(paintContext);
      paintContext.canvas.restoreToCount(saveCount);
    }
    static drawShadow(canvas, path, color, elevation, transparentOccluder) {
      canvas.drawShadow(path, color, elevation, transparentOccluder);
    }
  };
  (engine.PhysicalShapeLayer.new = function(_elevation, _color, _shadowColor, _path, _clipBehavior) {
    this[_elevation$] = _elevation;
    this[_color$] = _color;
    this[_shadowColor$] = _shadowColor;
    this[_path$] = _path;
    this[_clipBehavior$] = _clipBehavior;
    engine.PhysicalShapeLayer.__proto__.new.call(this);
    ;
  }).prototype = engine.PhysicalShapeLayer.prototype;
  dart.addTypeTests(engine.PhysicalShapeLayer);
  engine.PhysicalShapeLayer[dart.implements] = () => [ui.PhysicalShapeEngineLayer];
  dart.setMethodSignature(engine.PhysicalShapeLayer, () => ({
    __proto__: dart.getMethods(engine.PhysicalShapeLayer.__proto__),
    paint: dart.fnType(dart.void, [engine.PaintContext])
  }));
  dart.setLibraryUri(engine.PhysicalShapeLayer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PhysicalShapeLayer, () => ({
    __proto__: dart.getFields(engine.PhysicalShapeLayer.__proto__),
    [_elevation$]: dart.finalFieldType(core.double),
    [_color$]: dart.finalFieldType(ui.Color),
    [_shadowColor$]: dart.finalFieldType(ui.Color),
    [_path$]: dart.finalFieldType(ui.Path),
    [_clipBehavior$]: dart.finalFieldType(ui.Clip)
  }));
  const LayerScene_layerTree = dart.privateName(engine, "LayerScene.layerTree");
  engine.LayerScene = class LayerScene extends core.Object {
    get layerTree() {
      return this[layerTree];
    }
    set layerTree(value) {
      super.layerTree = value;
    }
    dispose() {
    }
    toImage(width, height) {
      return null;
    }
    get webOnlyRootElement() {
      return null;
    }
  };
  (engine.LayerScene.new = function(rootLayer) {
    this[layerTree] = new engine.LayerTree.new();
    this.layerTree.rootLayer = rootLayer;
  }).prototype = engine.LayerScene.prototype;
  dart.addTypeTests(engine.LayerScene);
  const layerTree = LayerScene_layerTree;
  engine.LayerScene[dart.implements] = () => [ui.Scene];
  dart.setMethodSignature(engine.LayerScene, () => ({
    __proto__: dart.getMethods(engine.LayerScene.__proto__),
    dispose: dart.fnType(dart.void, []),
    toImage: dart.fnType(async.Future$(ui.Image), [core.int, core.int])
  }));
  dart.setGetterSignature(engine.LayerScene, () => ({
    __proto__: dart.getGetters(engine.LayerScene.__proto__),
    webOnlyRootElement: html.Element
  }));
  dart.setLibraryUri(engine.LayerScene, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.LayerScene, () => ({
    __proto__: dart.getFields(engine.LayerScene.__proto__),
    layerTree: dart.finalFieldType(engine.LayerTree)
  }));
  const OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  const OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  let C21;
  const _addTexture = dart.privateName(engine, "_addTexture");
  let C22;
  const _addTexture$ = dart.privateName(ui, "_addTexture");
  const _surfaceStack = dart.privateName(engine, "_surfaceStack");
  let C23;
  const _surfaceStack$ = dart.privateName(ui, "_surfaceStack");
  const _addSurface = dart.privateName(engine, "_addSurface");
  let C24;
  const _addSurface$ = dart.privateName(ui, "_addSurface");
  const _adoptSurface = dart.privateName(engine, "_adoptSurface");
  let C25;
  const _adoptSurface$ = dart.privateName(ui, "_adoptSurface");
  const _currentSurface = dart.privateName(engine, "_currentSurface");
  let C26;
  const _currentSurface$ = dart.privateName(ui, "_currentSurface");
  const _addChildScene = dart.privateName(engine, "_addChildScene");
  let C27;
  const _addChildScene$ = dart.privateName(ui, "_addChildScene");
  const _pushSurface = dart.privateName(engine, "_pushSurface");
  let C28;
  const _pushSurface$ = dart.privateName(ui, "_pushSurface");
  const _addPlatformView = dart.privateName(engine, "_addPlatformView");
  let C29;
  const _addPlatformView$ = dart.privateName(ui, "_addPlatformView");
  const _addPerformanceOverlay = dart.privateName(engine, "_addPerformanceOverlay");
  let C30;
  const _addPerformanceOverlay$ = dart.privateName(ui, "_addPerformanceOverlay");
  const _persistedScene = dart.privateName(engine, "_persistedScene");
  let C31;
  const _persistedScene$ = dart.privateName(ui, "_persistedScene");
  const LayerSceneBuilder_rootLayer = dart.privateName(engine, "LayerSceneBuilder.rootLayer");
  const LayerSceneBuilder_currentLayer = dart.privateName(engine, "LayerSceneBuilder.currentLayer");
  engine.LayerSceneBuilder = class LayerSceneBuilder extends core.Object {
    get rootLayer() {
      return this[rootLayer];
    }
    set rootLayer(value) {
      this[rootLayer] = value;
    }
    get currentLayer() {
      return this[currentLayer];
    }
    set currentLayer(value) {
      this[currentLayer] = value;
    }
    addChildScene(opts) {
      let offset = opts && 'offset' in opts ? opts.offset : C21 || CT.C21;
      let width = opts && 'width' in opts ? opts.width : 0;
      let height = opts && 'height' in opts ? opts.height : 0;
      let sceneHost = opts && 'sceneHost' in opts ? opts.sceneHost : null;
      let hitTestable = opts && 'hitTestable' in opts ? opts.hitTestable : true;
      dart.throw(new core.UnimplementedError.new());
    }
    addPerformanceOverlay(enabledOptions, bounds) {
      dart.throw(new core.UnimplementedError.new());
    }
    addPicture(offset, picture, opts) {
      let isComplexHint = opts && 'isComplexHint' in opts ? opts.isComplexHint : false;
      let willChangeHint = opts && 'willChangeHint' in opts ? opts.willChangeHint : false;
      this.currentLayer.add(new engine.PictureLayer.new(picture, offset, isComplexHint, willChangeHint));
    }
    addRetained(retainedLayer) {
      if (this.currentLayer == null) {
        return;
      }
      this.currentLayer.add(engine.Layer._check(retainedLayer));
    }
    addTexture(textureId, opts) {
      let offset = opts && 'offset' in opts ? opts.offset : C21 || CT.C21;
      let width = opts && 'width' in opts ? opts.width : 0;
      let height = opts && 'height' in opts ? opts.height : 0;
      let freeze = opts && 'freeze' in opts ? opts.freeze : false;
    }
    addPlatformView(viewId, opts) {
      let offset = opts && 'offset' in opts ? opts.offset : C21 || CT.C21;
      let width = opts && 'width' in opts ? opts.width : 0;
      let height = opts && 'height' in opts ? opts.height : 0;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
    }
    build() {
      return new engine.LayerScene.new(this.rootLayer);
    }
    pop() {
      if (this.currentLayer == null) {
        return;
      }
      this.currentLayer = this.currentLayer.parent;
    }
    pushBackdropFilter(filter, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pushClipPath(path, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C18 || CT.C18;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      this.pushLayer(new engine.ClipPathLayer.new(path));
      return null;
    }
    pushClipRRect(rrect, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      this.pushLayer(new engine.ClipRRectLayer.new(rrect));
      return null;
    }
    pushClipRect(rect, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C18 || CT.C18;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      this.pushLayer(new engine.ClipRectLayer.new(rect));
      return null;
    }
    pushColorFilter(filter, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      if (!(filter != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer_scene_builder.dart", 122, 12, "filter != null");
      dart.throw(new core.UnimplementedError.new());
    }
    pushOffset(dx, dy, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      let matrix = engine.Matrix4.translationValues(dx, dy, 0.0);
      let layer = new engine.TransformLayer.new(matrix);
      this.pushLayer(layer);
      return layer;
    }
    pushOpacity(alpha, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      let offset = opts && 'offset' in opts ? opts.offset : C21 || CT.C21;
      let layer = new engine.OpacityLayer.new(alpha, offset);
      this.pushLayer(layer);
      return layer;
    }
    pushPhysicalShape(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C20 || CT.C20;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      let layer = new engine.PhysicalShapeLayer.new(elevation, color, shadowColor, path, clipBehavior);
      this.pushLayer(layer);
      return layer;
    }
    pushShaderMask(shader, maskRect, blendMode, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pushTransform(matrix4, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      let matrix = engine.Matrix4.fromList(matrix4);
      this.pushLayer(new engine.TransformLayer.new(matrix));
      return null;
    }
    setCheckerboardOffscreenLayers(checkerboard) {
    }
    setCheckerboardRasterCacheImages(checkerboard) {
    }
    setRasterizerTracingThreshold(frameInterval) {
    }
    pushLayer(layer) {
      if (this.rootLayer == null) {
        this.rootLayer = this.currentLayer = layer;
        return;
      }
      if (this.currentLayer == null) {
        return;
      }
      this.currentLayer.add(layer);
      this.currentLayer = layer;
    }
    setProperties(width, height, insetTop, insetRight, insetBottom, insetLeft, focusable) {
      dart.throw(new core.UnimplementedError.new());
    }
    [_addTexture$](dx, dy, width, height, textureId) {
      return this[$noSuchMethod](new core._Invocation.method(C22 || CT.C22, null, [dx, dy, width, height, textureId]));
    }
    get [_surfaceStack$]() {
      return ListOfPersistedContainerSurface()._check(this[$noSuchMethod](new core._Invocation.getter(C23 || CT.C23)));
    }
    [_addSurface$](surface) {
      return this[$noSuchMethod](new core._Invocation.method(C24 || CT.C24, null, [surface]));
    }
    [_adoptSurface$](surface) {
      return this[$noSuchMethod](new core._Invocation.method(C25 || CT.C25, null, [surface]));
    }
    get [_currentSurface$]() {
      return engine.PersistedContainerSurface._check(this[$noSuchMethod](new core._Invocation.getter(C26 || CT.C26)));
    }
    [_addChildScene$](dx, dy, width, height, sceneHost, hitTestable) {
      return this[$noSuchMethod](new core._Invocation.method(C27 || CT.C27, null, [dx, dy, width, height, sceneHost, hitTestable]));
    }
    [_pushSurface$](surface) {
      return ui.EngineLayer._check(this[$noSuchMethod](new core._Invocation.method(C28 || CT.C28, null, [surface])));
    }
    [_addPlatformView$](dx, dy, width, height, viewId) {
      return this[$noSuchMethod](new core._Invocation.method(C29 || CT.C29, null, [dx, dy, width, height, viewId]));
    }
    [_addPerformanceOverlay$](enabledOptions, left, right, top, bottom) {
      return this[$noSuchMethod](new core._Invocation.method(C30 || CT.C30, null, [enabledOptions, left, right, top, bottom]));
    }
    get [_persistedScene$]() {
      return engine.PersistedScene._check(this[$noSuchMethod](new core._Invocation.getter(C31 || CT.C31)));
    }
  };
  (engine.LayerSceneBuilder.new = function() {
    this[rootLayer] = null;
    this[currentLayer] = null;
    ;
  }).prototype = engine.LayerSceneBuilder.prototype;
  dart.addTypeTests(engine.LayerSceneBuilder);
  const rootLayer = LayerSceneBuilder_rootLayer;
  const currentLayer = LayerSceneBuilder_currentLayer;
  engine.LayerSceneBuilder[dart.implements] = () => [ui.SceneBuilder];
  dart.setMethodSignature(engine.LayerSceneBuilder, () => ({
    __proto__: dart.getMethods(engine.LayerSceneBuilder.__proto__),
    addChildScene: dart.fnType(dart.void, [], {height: core.double, hitTestable: core.bool, offset: ui.Offset, sceneHost: ui.SceneHost, width: core.double}),
    addPerformanceOverlay: dart.fnType(dart.void, [core.int, ui.Rect]),
    addPicture: dart.fnType(dart.void, [ui.Offset, ui.Picture], {isComplexHint: core.bool, willChangeHint: core.bool}),
    addRetained: dart.fnType(dart.void, [ui.EngineLayer]),
    addTexture: dart.fnType(dart.void, [core.int], {freeze: core.bool, height: core.double, offset: ui.Offset, width: core.double}),
    addPlatformView: dart.fnType(dart.void, [core.int], {height: core.double, offset: ui.Offset, webOnlyPaintedBy: core.Object, width: core.double}),
    build: dart.fnType(ui.Scene, []),
    pop: dart.fnType(dart.void, []),
    pushBackdropFilter: dart.fnType(ui.BackdropFilterEngineLayer, [ui.ImageFilter], {oldLayer: ui.EngineLayer}),
    pushClipPath: dart.fnType(ui.ClipPathEngineLayer, [ui.Path], {clipBehavior: ui.Clip, oldLayer: ui.EngineLayer}),
    pushClipRRect: dart.fnType(ui.ClipRRectEngineLayer, [ui.RRect], {clipBehavior: ui.Clip, oldLayer: ui.EngineLayer}),
    pushClipRect: dart.fnType(ui.ClipRectEngineLayer, [ui.Rect], {clipBehavior: ui.Clip, oldLayer: ui.EngineLayer}),
    pushColorFilter: dart.fnType(ui.ColorFilterEngineLayer, [ui.ColorFilter], {oldLayer: ui.ColorFilterEngineLayer}),
    pushOffset: dart.fnType(ui.OffsetEngineLayer, [core.double, core.double], {oldLayer: ui.EngineLayer}),
    pushOpacity: dart.fnType(ui.OpacityEngineLayer, [core.int], {offset: ui.Offset, oldLayer: ui.EngineLayer}),
    pushPhysicalShape: dart.fnType(ui.PhysicalShapeEngineLayer, [], {clipBehavior: ui.Clip, color: ui.Color, elevation: core.double, oldLayer: ui.EngineLayer, path: ui.Path, shadowColor: ui.Color}),
    pushShaderMask: dart.fnType(ui.ShaderMaskEngineLayer, [ui.Shader, ui.Rect, ui.BlendMode], {oldLayer: ui.EngineLayer}),
    pushTransform: dart.fnType(ui.TransformEngineLayer, [typed_data.Float64List], {oldLayer: ui.EngineLayer}),
    setCheckerboardOffscreenLayers: dart.fnType(dart.void, [core.bool]),
    setCheckerboardRasterCacheImages: dart.fnType(dart.void, [core.bool]),
    setRasterizerTracingThreshold: dart.fnType(dart.void, [core.int]),
    pushLayer: dart.fnType(dart.void, [engine.ContainerLayer]),
    setProperties: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double, core.bool]),
    [_addTexture$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.int]),
    [_addSurface$]: dart.fnType(dart.void, [engine.PersistedSurface]),
    [_adoptSurface$]: dart.fnType(dart.void, [engine.PersistedSurface]),
    [_addChildScene$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, ui.SceneHost, core.bool]),
    [_pushSurface$]: dart.fnType(ui.EngineLayer, [engine.PersistedContainerSurface]),
    [_addPlatformView$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.int]),
    [_addPerformanceOverlay$]: dart.fnType(dart.void, [core.int, core.double, core.double, core.double, core.double])
  }));
  dart.setGetterSignature(engine.LayerSceneBuilder, () => ({
    __proto__: dart.getGetters(engine.LayerSceneBuilder.__proto__),
    [_surfaceStack$]: core.List$(engine.PersistedContainerSurface),
    [_currentSurface$]: engine.PersistedContainerSurface,
    [_persistedScene$]: engine.PersistedScene
  }));
  dart.setLibraryUri(engine.LayerSceneBuilder, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.LayerSceneBuilder, () => ({
    __proto__: dart.getFields(engine.LayerSceneBuilder.__proto__),
    rootLayer: dart.fieldType(engine.Layer),
    currentLayer: dart.fieldType(engine.ContainerLayer)
  }));
  const LayerTree_rootLayer = dart.privateName(engine, "LayerTree.rootLayer");
  const LayerTree_frameSize = dart.privateName(engine, "LayerTree.frameSize");
  engine.LayerTree = class LayerTree extends core.Object {
    get rootLayer() {
      return this[rootLayer$];
    }
    set rootLayer(value) {
      this[rootLayer$] = value;
    }
    get frameSize() {
      return this[frameSize];
    }
    set frameSize(value) {
      this[frameSize] = value;
    }
    preroll(frame, opts) {
      let ignoreRasterCache = opts && 'ignoreRasterCache' in opts ? opts.ignoreRasterCache : false;
      let context = new engine.PrerollContext.new(dart.test(ignoreRasterCache) ? null : frame.rasterCache);
      this.rootLayer.preroll(context, engine.Matrix4.identity());
    }
    paint(frame, opts) {
      let ignoreRasterCache = opts && 'ignoreRasterCache' in opts ? opts.ignoreRasterCache : false;
      let context = new engine.PaintContext.new(frame.canvas, dart.test(ignoreRasterCache) ? null : frame.rasterCache);
      if (dart.test(this.rootLayer.needsPainting)) {
        this.rootLayer.paint(context);
      }
    }
  };
  (engine.LayerTree.new = function() {
    this[rootLayer$] = null;
    this[frameSize] = null;
    ;
  }).prototype = engine.LayerTree.prototype;
  dart.addTypeTests(engine.LayerTree);
  const rootLayer$ = LayerTree_rootLayer;
  const frameSize = LayerTree_frameSize;
  dart.setMethodSignature(engine.LayerTree, () => ({
    __proto__: dart.getMethods(engine.LayerTree.__proto__),
    preroll: dart.fnType(dart.void, [engine.Frame], {ignoreRasterCache: core.bool}),
    paint: dart.fnType(dart.void, [engine.Frame], {ignoreRasterCache: core.bool})
  }));
  dart.setLibraryUri(engine.LayerTree, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.LayerTree, () => ({
    __proto__: dart.getFields(engine.LayerTree.__proto__),
    rootLayer: dart.fieldType(engine.Layer),
    frameSize: dart.fieldType(ui.Size)
  }));
  const Frame_canvas = dart.privateName(engine, "Frame.canvas");
  const Frame_rasterCache = dart.privateName(engine, "Frame.rasterCache");
  engine.Frame = class Frame extends core.Object {
    get canvas() {
      return this[canvas$0];
    }
    set canvas(value) {
      super.canvas = value;
    }
    get rasterCache() {
      return this[rasterCache$1];
    }
    set rasterCache(value) {
      super.rasterCache = value;
    }
    raster(layerTree, opts) {
      let ignoreRasterCache = opts && 'ignoreRasterCache' in opts ? opts.ignoreRasterCache : false;
      layerTree.preroll(this, {ignoreRasterCache: ignoreRasterCache});
      layerTree.paint(this, {ignoreRasterCache: ignoreRasterCache});
      return true;
    }
  };
  (engine.Frame.new = function(canvas, rasterCache) {
    this[canvas$0] = canvas;
    this[rasterCache$1] = rasterCache;
    ;
  }).prototype = engine.Frame.prototype;
  dart.addTypeTests(engine.Frame);
  const canvas$0 = Frame_canvas;
  const rasterCache$1 = Frame_rasterCache;
  dart.setMethodSignature(engine.Frame, () => ({
    __proto__: dart.getMethods(engine.Frame.__proto__),
    raster: dart.fnType(core.bool, [engine.LayerTree], {ignoreRasterCache: core.bool})
  }));
  dart.setLibraryUri(engine.Frame, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Frame, () => ({
    __proto__: dart.getFields(engine.Frame.__proto__),
    canvas: dart.finalFieldType(engine.SkCanvas),
    rasterCache: dart.finalFieldType(engine.RasterCache)
  }));
  const CompositorContext_rasterCache = dart.privateName(engine, "CompositorContext.rasterCache");
  engine.CompositorContext = class CompositorContext extends core.Object {
    get rasterCache() {
      return this[rasterCache];
    }
    set rasterCache(value) {
      this[rasterCache] = value;
    }
    acquireFrame(canvas) {
      return new engine.Frame.new(canvas, this.rasterCache);
    }
  };
  (engine.CompositorContext.new = function() {
    this[rasterCache] = null;
    ;
  }).prototype = engine.CompositorContext.prototype;
  dart.addTypeTests(engine.CompositorContext);
  const rasterCache = CompositorContext_rasterCache;
  dart.setMethodSignature(engine.CompositorContext, () => ({
    __proto__: dart.getMethods(engine.CompositorContext.__proto__),
    acquireFrame: dart.fnType(engine.Frame, [engine.SkCanvas])
  }));
  dart.setLibraryUri(engine.CompositorContext, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.CompositorContext, () => ({
    __proto__: dart.getFields(engine.CompositorContext.__proto__),
    rasterCache: dart.fieldType(engine.RasterCache)
  }));
  const _fillType = dart.privateName(engine, "_fillType");
  let C32;
  let C33;
  const Radius_y = dart.privateName(ui, "Radius.y");
  const Radius_x = dart.privateName(ui, "Radius.x");
  let C34;
  const _getCurrentPoint = dart.privateName(engine, "_getCurrentPoint");
  const _currentY = dart.privateName(engine, "_currentY");
  let C35;
  const _currentY$ = dart.privateName(ui, "_currentY");
  const _ensurePathStarted = dart.privateName(engine, "_ensurePathStarted");
  let C36;
  const _ensurePathStarted$ = dart.privateName(ui, "_ensurePathStarted");
  const _setCurrentPoint = dart.privateName(engine, "_setCurrentPoint");
  let C37;
  const _setCurrentPoint$ = dart.privateName(ui, "_setCurrentPoint");
  const _extendWithPathAndMatrix = dart.privateName(engine, "_extendWithPathAndMatrix");
  let C38;
  const _extendWithPathAndMatrix$ = dart.privateName(ui, "_extendWithPathAndMatrix");
  const _commands = dart.privateName(engine, "_commands");
  let C39;
  const _commands$ = dart.privateName(ui, "_commands");
  const _openNewSubpath = dart.privateName(engine, "_openNewSubpath");
  let C40;
  const _openNewSubpath$ = dart.privateName(ui, "_openNewSubpath");
  const _currentSubpath = dart.privateName(engine, "_currentSubpath");
  let C41;
  const _currentSubpath$ = dart.privateName(ui, "_currentSubpath");
  const _addPath = dart.privateName(engine, "_addPath");
  let C42;
  const _addPath$ = dart.privateName(ui, "_addPath");
  const _currentX = dart.privateName(engine, "_currentX");
  let C43;
  const _currentX$ = dart.privateName(ui, "_currentX");
  const _addPathWithMatrix = dart.privateName(engine, "_addPathWithMatrix");
  let C44;
  const _addPathWithMatrix$ = dart.privateName(ui, "_addPathWithMatrix");
  const _extendWithPath = dart.privateName(engine, "_extendWithPath");
  let C45;
  const _extendWithPath$ = dart.privateName(ui, "_extendWithPath");
  engine.SkPath = class SkPath extends core.Object {
    get fillType() {
      return this[_fillType];
    }
    set fillType(newFillType) {
      this[_fillType] = newFillType;
      let skFillType = null;
      switch (newFillType) {
        case C32 || CT.C32:
        {
          skFillType = js.JsObject._check(dart.dsend(engine.canvasKit._get("FillType"), '_get', ["Winding"]));
          break;
        }
        case C33 || CT.C33:
        {
          skFillType = js.JsObject._check(dart.dsend(engine.canvasKit._get("FillType"), '_get', ["EvenOdd"]));
          break;
        }
      }
      this[_skPath].callMethod("setFillType", JSArrayOfJsObject().of([skFillType]));
    }
    addArc(oval, startAngle, sweepAngle) {
      dart.throw("addArc");
    }
    addOval(oval) {
      this[_skPath].callMethod("addArc", [engine.makeSkRect(oval), 0.0, 360.0]);
    }
    addPath(path, offset, opts) {
      let matrix4 = opts && 'matrix4' in opts ? opts.matrix4 : null;
      dart.throw("addPath");
    }
    addPolygon(points, close) {
      if (!(points != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/path.dart", 62, 12, "points != null");
      if (dart.test(points[$isEmpty])) {
        return;
      }
      this.moveTo(points[$first].dx, points[$first].dy);
      for (let i = 1; i < dart.notNull(points[$length]); i = i + 1) {
        let point = points[$_get](i);
        this.lineTo(point.dx, point.dy);
      }
      if (dart.test(close)) {
        this.close();
      }
    }
    addRRect(rrect) {
      let skRect = engine.makeSkRect(rrect.outerRect);
      let radii = JSArrayOfdouble().of([rrect.tlRadiusX, rrect.tlRadiusY, rrect.trRadiusX, rrect.trRadiusY, rrect.brRadiusX, rrect.brRadiusY, rrect.blRadiusX, rrect.blRadiusY]);
      this[_skPath].callMethod("addRoundRect", [skRect, new (JsArrayOfdouble()).from(radii), false]);
    }
    addRect(rect) {
      this[_skPath].callMethod("addRect", JSArrayOfJsObject().of([engine.makeSkRect(rect)]));
    }
    arcTo(rect, startAngle, sweepAngle, forceMoveTo) {
      this[_skPath].callMethod("arcTo", [engine.makeSkRect(rect), dart.notNull(startAngle) * 57.29577951308232, dart.notNull(sweepAngle) * 57.29577951308232, forceMoveTo]);
    }
    arcToPoint(arcEnd, opts) {
      let radius = opts && 'radius' in opts ? opts.radius : C34 || CT.C34;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 0;
      let largeArc = opts && 'largeArc' in opts ? opts.largeArc : false;
      let clockwise = opts && 'clockwise' in opts ? opts.clockwise : true;
      if (!(rotation === 0.0)) dart.assertFailed("Skia backend does not support `arcToPoint` rotation.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/path.dart", 117, 12, "rotation == 0.0");
      if (!!dart.test(largeArc)) dart.assertFailed("Skia backend does not support `arcToPoint` largeArc.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/path.dart", 119, 12, "!largeArc");
      if (!(radius.x == radius.y)) dart.assertFailed("Skia backend does not support `arcToPoint` with elliptical radius.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/path.dart", 120, 12, "radius.x == radius.y");
      let lastPoint = this[_getCurrentPoint]();
      this[_skPath].callMethod("arcTo", JSArrayOfdouble().of([lastPoint.dx, lastPoint.dy, arcEnd.dx, arcEnd.dy, radius.x]));
    }
    [_getCurrentPoint]() {
      let pointCount = core.int._check(this[_skPath].callMethod("countPoints"));
      let lastPoint = js.JsObject._check(this[_skPath].callMethod("getPoint", JSArrayOfint().of([dart.notNull(pointCount) - 1])));
      return new ui.Offset.new(core.double._check(lastPoint._get(0)), core.double._check(lastPoint._get(1)));
    }
    close() {
      this[_skPath].callMethod("close");
    }
    computeMetrics(opts) {
      let forceClosed = opts && 'forceClosed' in opts ? opts.forceClosed : false;
      dart.throw("computeMetrics");
    }
    conicTo(x1, y1, x2, y2, w) {
      dart.throw("conicTo");
    }
    contains(point) {
      return core.bool._check(this[_skPath].callMethod("contains", JSArrayOfdouble().of([point.dx, point.dy])));
    }
    cubicTo(x1, y1, x2, y2, x3, y3) {
      this[_skPath].callMethod("cubicTo", JSArrayOfdouble().of([x1, y1, x2, y2, x3, y3]));
    }
    extendWithPath(path, offset, opts) {
      let t5, t4, t5$, t4$;
      let matrix4 = opts && 'matrix4' in opts ? opts.matrix4 : null;
      let skMatrix = null;
      if (matrix4 == null) {
        skMatrix = engine.makeSkMatrix(engine.Matrix4.translationValues(offset.dx, offset.dy, 0.0).storage);
      } else {
        skMatrix = engine.makeSkMatrix(matrix4);
        t4 = skMatrix;
        t5 = 2;
        t4[$_set](t5, dart.notNull(t4[$_get](t5)) + dart.notNull(offset.dx));
        t4$ = skMatrix;
        t5$ = 5;
        t4$[$_set](t5$, dart.notNull(t4$[$_get](t5$)) + dart.notNull(offset.dy));
      }
      let otherPath = engine.SkPath._check(path);
      this[_skPath].callMethod("addPath", [otherPath[_skPath], skMatrix[$_get](0), skMatrix[$_get](1), skMatrix[$_get](2), skMatrix[$_get](3), skMatrix[$_get](4), skMatrix[$_get](5), skMatrix[$_get](6), skMatrix[$_get](7), skMatrix[$_get](8), true]);
    }
    getBounds() {
      let bounds = js.JsObject._check(this[_skPath].callMethod("getBounds"));
      return new ui.Rect.fromLTRB(core.double._check(bounds._get("fLeft")), core.double._check(bounds._get("fTop")), core.double._check(bounds._get("fRight")), core.double._check(bounds._get("fBottom")));
    }
    lineTo(x, y) {
      this[_skPath].callMethod("lineTo", JSArrayOfdouble().of([x, y]));
    }
    moveTo(x, y) {
      this[_skPath].callMethod("moveTo", JSArrayOfdouble().of([x, y]));
    }
    quadraticBezierTo(x1, y1, x2, y2) {
      this[_skPath].callMethod("quadTo", JSArrayOfdouble().of([x1, y1, x2, y2]));
    }
    relativeArcToPoint(arcEndDelta, opts) {
      let radius = opts && 'radius' in opts ? opts.radius : C34 || CT.C34;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 0;
      let largeArc = opts && 'largeArc' in opts ? opts.largeArc : false;
      let clockwise = opts && 'clockwise' in opts ? opts.clockwise : true;
      dart.throw("relativeArcToPoint");
    }
    relativeConicTo(x1, y1, x2, y2, w) {
      dart.throw("relativeConicTo");
    }
    relativeCubicTo(x1, y1, x2, y2, x3, y3) {
      dart.throw("relativeCubicTo");
    }
    relativeLineTo(dx, dy) {
      dart.throw("relativeLineTo");
    }
    relativeMoveTo(dx, dy) {
      dart.throw("relativeMoveTo");
    }
    relativeQuadraticBezierTo(x1, y1, x2, y2) {
      dart.throw("relativeQuadraticBezierTo");
    }
    reset() {
      this[_skPath].callMethod("reset");
    }
    shift(offset) {
      let newPath = js.JsObject._check(this[_skPath].callMethod("copy"));
      newPath.callMethod("transform", JSArrayOfdouble().of([1.0, 0.0, offset.dx, 0.0, 1.0, offset.dy, 0.0, 0.0, 0.0]));
      return new engine.SkPath._fromSkPath(newPath);
    }
    get subpaths() {
      return dart.throw("subpaths");
    }
    transform(matrix4) {
      dart.throw("transform");
    }
    get webOnlyPathAsCircle() {
      return null;
    }
    get webOnlyPathAsRect() {
      return null;
    }
    get webOnlyPathAsRoundedRect() {
      return null;
    }
    webOnlySerializeToCssPaint() {
      return null;
    }
    get [_currentY$]() {
      return core.double._check(this[$noSuchMethod](new core._Invocation.getter(C35 || CT.C35)));
    }
    [_ensurePathStarted$]() {
      return this[$noSuchMethod](new core._Invocation.method(C36 || CT.C36, null, []));
    }
    [_setCurrentPoint$](x, y) {
      return this[$noSuchMethod](new core._Invocation.method(C37 || CT.C37, null, [x, y]));
    }
    [_extendWithPathAndMatrix$](path, dx, dy, matrix) {
      return this[$noSuchMethod](new core._Invocation.method(C38 || CT.C38, null, [path, dx, dy, matrix]));
    }
    get [_commands$]() {
      return ListOfPathCommand()._check(this[$noSuchMethod](new core._Invocation.getter(C39 || CT.C39)));
    }
    [_openNewSubpath$](x, y) {
      return this[$noSuchMethod](new core._Invocation.method(C40 || CT.C40, null, [x, y]));
    }
    get [_currentSubpath$]() {
      return engine.Subpath._check(this[$noSuchMethod](new core._Invocation.getter(C41 || CT.C41)));
    }
    [_addPath$](path, dx, dy) {
      return this[$noSuchMethod](new core._Invocation.method(C42 || CT.C42, null, [path, dx, dy]));
    }
    get [_currentX$]() {
      return core.double._check(this[$noSuchMethod](new core._Invocation.getter(C43 || CT.C43)));
    }
    [_addPathWithMatrix$](path, dx, dy, matrix) {
      return this[$noSuchMethod](new core._Invocation.method(C44 || CT.C44, null, [path, dx, dy, matrix]));
    }
    [_extendWithPath$](path, dx, dy) {
      return this[$noSuchMethod](new core._Invocation.method(C45 || CT.C45, null, [path, dx, dy]));
    }
  };
  (engine.SkPath.new = function() {
    this[_fillType] = null;
    this[_skPath] = null;
    this[_skPath] = js.JsObject.new(js.JsFunction._check(engine.canvasKit._get("SkPath")));
    this.fillType = ui.PathFillType.nonZero;
  }).prototype = engine.SkPath.prototype;
  (engine.SkPath._fromSkPath = function(skPath) {
    this[_fillType] = null;
    this[_skPath] = skPath;
    ;
  }).prototype = engine.SkPath.prototype;
  dart.addTypeTests(engine.SkPath);
  engine.SkPath[dart.implements] = () => [ui.Path];
  dart.setMethodSignature(engine.SkPath, () => ({
    __proto__: dart.getMethods(engine.SkPath.__proto__),
    addArc: dart.fnType(dart.void, [ui.Rect, core.double, core.double]),
    addOval: dart.fnType(dart.void, [ui.Rect]),
    addPath: dart.fnType(dart.void, [ui.Path, ui.Offset], {matrix4: typed_data.Float64List}),
    addPolygon: dart.fnType(dart.void, [core.List$(ui.Offset), core.bool]),
    addRRect: dart.fnType(dart.void, [ui.RRect]),
    addRect: dart.fnType(dart.void, [ui.Rect]),
    arcTo: dart.fnType(dart.void, [ui.Rect, core.double, core.double, core.bool]),
    arcToPoint: dart.fnType(dart.void, [ui.Offset], {clockwise: core.bool, largeArc: core.bool, radius: ui.Radius, rotation: core.double}),
    [_getCurrentPoint]: dart.fnType(ui.Offset, []),
    close: dart.fnType(dart.void, []),
    computeMetrics: dart.fnType(ui.PathMetrics, [], {forceClosed: core.bool}),
    conicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double]),
    contains: dart.fnType(core.bool, [ui.Offset]),
    cubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    extendWithPath: dart.fnType(dart.void, [ui.Path, ui.Offset], {matrix4: typed_data.Float64List}),
    getBounds: dart.fnType(ui.Rect, []),
    lineTo: dart.fnType(dart.void, [core.double, core.double]),
    moveTo: dart.fnType(dart.void, [core.double, core.double]),
    quadraticBezierTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    relativeArcToPoint: dart.fnType(dart.void, [ui.Offset], {clockwise: core.bool, largeArc: core.bool, radius: ui.Radius, rotation: core.double}),
    relativeConicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double]),
    relativeCubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    relativeLineTo: dart.fnType(dart.void, [core.double, core.double]),
    relativeMoveTo: dart.fnType(dart.void, [core.double, core.double]),
    relativeQuadraticBezierTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    reset: dart.fnType(dart.void, []),
    shift: dart.fnType(ui.Path, [ui.Offset]),
    transform: dart.fnType(ui.Path, [typed_data.Float64List]),
    webOnlySerializeToCssPaint: dart.fnType(core.List, []),
    [_ensurePathStarted$]: dart.fnType(dart.void, []),
    [_setCurrentPoint$]: dart.fnType(dart.void, [core.double, core.double]),
    [_extendWithPathAndMatrix$]: dart.fnType(dart.void, [ui.Path, core.double, core.double, typed_data.Float64List]),
    [_openNewSubpath$]: dart.fnType(dart.void, [core.double, core.double]),
    [_addPath$]: dart.fnType(dart.void, [ui.Path, core.double, core.double]),
    [_addPathWithMatrix$]: dart.fnType(dart.void, [ui.Path, core.double, core.double, typed_data.Float64List]),
    [_extendWithPath$]: dart.fnType(dart.void, [ui.Path, core.double, core.double])
  }));
  dart.setGetterSignature(engine.SkPath, () => ({
    __proto__: dart.getGetters(engine.SkPath.__proto__),
    fillType: ui.PathFillType,
    subpaths: core.List$(engine.Subpath),
    webOnlyPathAsCircle: engine.Ellipse,
    webOnlyPathAsRect: ui.Rect,
    webOnlyPathAsRoundedRect: ui.RRect,
    [_currentY$]: core.double,
    [_commands$]: core.List$(engine.PathCommand),
    [_currentSubpath$]: engine.Subpath,
    [_currentX$]: core.double
  }));
  dart.setSetterSignature(engine.SkPath, () => ({
    __proto__: dart.getSetters(engine.SkPath.__proto__),
    fillType: ui.PathFillType
  }));
  dart.setLibraryUri(engine.SkPath, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SkPath, () => ({
    __proto__: dart.getFields(engine.SkPath.__proto__),
    [_skPath]: dart.fieldType(js.JsObject),
    [_fillType]: dart.fieldType(ui.PathFillType)
  }));
  const SkPicture_skPicture = dart.privateName(engine, "SkPicture.skPicture");
  const SkPicture_cullRect = dart.privateName(engine, "SkPicture.cullRect");
  engine.SkPicture = class SkPicture extends core.Object {
    get skPicture() {
      return this[skPicture$];
    }
    set skPicture(value) {
      super.skPicture = value;
    }
    get cullRect() {
      return this[cullRect$];
    }
    set cullRect(value) {
      super.cullRect = value;
    }
    get approximateBytesUsed() {
      return 0;
    }
    dispose() {
    }
    get recordingCanvas() {
      return null;
    }
    toImage(width, height) {
      return null;
    }
  };
  (engine.SkPicture.new = function(skPicture, cullRect) {
    this[skPicture$] = skPicture;
    this[cullRect$] = cullRect;
    ;
  }).prototype = engine.SkPicture.prototype;
  dart.addTypeTests(engine.SkPicture);
  const skPicture$ = SkPicture_skPicture;
  const cullRect$ = SkPicture_cullRect;
  engine.SkPicture[dart.implements] = () => [ui.Picture];
  dart.setMethodSignature(engine.SkPicture, () => ({
    __proto__: dart.getMethods(engine.SkPicture.__proto__),
    dispose: dart.fnType(dart.void, []),
    toImage: dart.fnType(async.Future$(ui.Image), [core.int, core.int])
  }));
  dart.setGetterSignature(engine.SkPicture, () => ({
    __proto__: dart.getGetters(engine.SkPicture.__proto__),
    approximateBytesUsed: core.int,
    recordingCanvas: engine.RecordingCanvas
  }));
  dart.setLibraryUri(engine.SkPicture, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SkPicture, () => ({
    __proto__: dart.getFields(engine.SkPicture.__proto__),
    skPicture: dart.finalFieldType(js.JsObject),
    cullRect: dart.finalFieldType(ui.Rect)
  }));
  const _recorder = dart.privateName(engine, "_recorder");
  let C46;
  const _canvas$ = dart.privateName(ui, "_canvas");
  const _isRecording = dart.privateName(engine, "_isRecording");
  let C47;
  const _isRecording$ = dart.privateName(ui, "_isRecording");
  const _canvas_ = dart.privateName(engine, "_canvas=");
  let C48;
  const _isRecording_ = dart.privateName(engine, "_isRecording=");
  let C49;
  const SkPictureRecorder_cullRect = dart.privateName(engine, "SkPictureRecorder.cullRect");
  engine.SkPictureRecorder = class SkPictureRecorder extends core.Object {
    get cullRect() {
      return this[cullRect];
    }
    set cullRect(value) {
      this[cullRect] = value;
    }
    beginRecording(bounds) {
      this.cullRect = bounds;
      this[_recorder] = js.JsObject.new(js.JsFunction._check(engine.canvasKit._get("SkPictureRecorder")));
      let skRect = js.JsObject.new(js.JsFunction._check(engine.canvasKit._get("LTRBRect")), JSArrayOfdouble().of([bounds.left, bounds.top, bounds.right, bounds.bottom]));
      let skCanvas = js.JsObject._check(this[_recorder].callMethod("beginRecording", JSArrayOfJsObject().of([skRect])));
      return new engine.SkRecordingCanvas.new(skCanvas);
    }
    endRecording() {
      let skPicture = js.JsObject._check(this[_recorder].callMethod("finishRecordingAsPicture"));
      this[_recorder].callMethod("delete");
      return new engine.SkPicture.new(skPicture, this.cullRect);
    }
    get isRecording() {
      return false;
    }
    get [_canvas$]() {
      return engine.RecordingCanvas._check(this[$noSuchMethod](new core._Invocation.getter(C46 || CT.C46)));
    }
    get [_isRecording$]() {
      return core.bool._check(this[$noSuchMethod](new core._Invocation.getter(C47 || CT.C47)));
    }
    set [_canvas$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C48 || CT.C48, value));
    }
    set [_isRecording$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C49 || CT.C49, value));
    }
  };
  (engine.SkPictureRecorder.new = function() {
    this[cullRect] = null;
    this[_recorder] = null;
    ;
  }).prototype = engine.SkPictureRecorder.prototype;
  dart.addTypeTests(engine.SkPictureRecorder);
  const cullRect = SkPictureRecorder_cullRect;
  engine.SkPictureRecorder[dart.implements] = () => [ui.PictureRecorder];
  dart.setMethodSignature(engine.SkPictureRecorder, () => ({
    __proto__: dart.getMethods(engine.SkPictureRecorder.__proto__),
    beginRecording: dart.fnType(engine.RecordingCanvas, [ui.Rect]),
    endRecording: dart.fnType(ui.Picture, [])
  }));
  dart.setGetterSignature(engine.SkPictureRecorder, () => ({
    __proto__: dart.getGetters(engine.SkPictureRecorder.__proto__),
    isRecording: core.bool,
    [_canvas$]: engine.RecordingCanvas,
    [_isRecording$]: core.bool
  }));
  dart.setSetterSignature(engine.SkPictureRecorder, () => ({
    __proto__: dart.getSetters(engine.SkPictureRecorder.__proto__),
    [_canvas$]: engine.RecordingCanvas,
    [_isRecording$]: core.bool
  }));
  dart.setLibraryUri(engine.SkPictureRecorder, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SkPictureRecorder, () => ({
    __proto__: dart.getFields(engine.SkPictureRecorder.__proto__),
    cullRect: dart.fieldType(ui.Rect),
    [_recorder]: dart.fieldType(js.JsObject)
  }));
  const PlatformMessage_channel = dart.privateName(engine, "PlatformMessage.channel");
  const PlatformMessage_data = dart.privateName(engine, "PlatformMessage.data");
  const PlatformMessage_response = dart.privateName(engine, "PlatformMessage.response");
  engine.PlatformMessage = class PlatformMessage extends core.Object {
    get channel() {
      return this[channel$];
    }
    set channel(value) {
      super.channel = value;
    }
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get response() {
      return this[response$];
    }
    set response(value) {
      super.response = value;
    }
  };
  (engine.PlatformMessage.new = function(channel, data, response) {
    this[channel$] = channel;
    this[data$] = data;
    this[response$] = response;
    ;
  }).prototype = engine.PlatformMessage.prototype;
  dart.addTypeTests(engine.PlatformMessage);
  const channel$ = PlatformMessage_channel;
  const data$ = PlatformMessage_data;
  const response$ = PlatformMessage_response;
  dart.setLibraryUri(engine.PlatformMessage, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PlatformMessage, () => ({
    __proto__: dart.getFields(engine.PlatformMessage.__proto__),
    channel: dart.finalFieldType(core.String),
    data: dart.finalFieldType(typed_data.ByteData),
    response: dart.finalFieldType(engine.PlatformMessageResponse)
  }));
  engine.PlatformMessageResponse = class PlatformMessageResponse extends core.Object {
    complete(data) {
    }
    completeEmpty() {
    }
  };
  (engine.PlatformMessageResponse.new = function() {
    ;
  }).prototype = engine.PlatformMessageResponse.prototype;
  dart.addTypeTests(engine.PlatformMessageResponse);
  dart.setMethodSignature(engine.PlatformMessageResponse, () => ({
    __proto__: dart.getMethods(engine.PlatformMessageResponse.__proto__),
    complete: dart.fnType(dart.void, [typed_data.Uint8List]),
    completeEmpty: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.PlatformMessageResponse, "package:flutter_web_ui/src/engine.dart");
  engine.RasterCache = class RasterCache extends core.Object {
    prepare(picture, matrix, isComplex, willChange) {
    }
    get(picture, matrix) {
      return new engine.RasterCacheResult.new();
    }
  };
  (engine.RasterCache.new = function() {
    ;
  }).prototype = engine.RasterCache.prototype;
  dart.addTypeTests(engine.RasterCache);
  dart.setMethodSignature(engine.RasterCache, () => ({
    __proto__: dart.getMethods(engine.RasterCache.__proto__),
    prepare: dart.fnType(dart.void, [ui.Picture, engine.Matrix4, core.bool, core.bool]),
    get: dart.fnType(engine.RasterCacheResult, [ui.Picture, engine.Matrix4])
  }));
  dart.setLibraryUri(engine.RasterCache, "package:flutter_web_ui/src/engine.dart");
  engine.RasterCacheResult = class RasterCacheResult extends core.Object {
    get isValid() {
      return false;
    }
    draw(canvas) {
    }
  };
  (engine.RasterCacheResult.new = function() {
    ;
  }).prototype = engine.RasterCacheResult.prototype;
  dart.addTypeTests(engine.RasterCacheResult);
  dart.setMethodSignature(engine.RasterCacheResult, () => ({
    __proto__: dart.getMethods(engine.RasterCacheResult.__proto__),
    draw: dart.fnType(dart.void, [engine.SkCanvas])
  }));
  dart.setGetterSignature(engine.RasterCacheResult, () => ({
    __proto__: dart.getGetters(engine.RasterCacheResult.__proto__),
    isValid: core.bool
  }));
  dart.setLibraryUri(engine.RasterCacheResult, "package:flutter_web_ui/src/engine.dart");
  const Rasterizer_surface = dart.privateName(engine, "Rasterizer.surface");
  const Rasterizer_context = dart.privateName(engine, "Rasterizer.context");
  engine.Rasterizer = class Rasterizer extends core.Object {
    get surface() {
      return this[surface$];
    }
    set surface(value) {
      super.surface = value;
    }
    get context() {
      return this[context];
    }
    set context(value) {
      super.context = value;
    }
    draw(layerTree) {
      let frame = this.surface.acquireFrame(ui.window.physicalSize);
      let canvas = frame.canvas;
      let compositorFrame = this.context.acquireFrame(canvas);
      canvas.clear();
      compositorFrame.raster(layerTree, {ignoreRasterCache: true});
      frame.submit();
    }
  };
  (engine.Rasterizer.new = function(surface) {
    this[context] = new engine.CompositorContext.new();
    this[surface$] = surface;
    ;
  }).prototype = engine.Rasterizer.prototype;
  dart.addTypeTests(engine.Rasterizer);
  const surface$ = Rasterizer_surface;
  const context = Rasterizer_context;
  dart.setMethodSignature(engine.Rasterizer, () => ({
    __proto__: dart.getMethods(engine.Rasterizer.__proto__),
    draw: dart.fnType(dart.void, [engine.LayerTree])
  }));
  dart.setLibraryUri(engine.Rasterizer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Rasterizer, () => ({
    __proto__: dart.getFields(engine.Rasterizer.__proto__),
    surface: dart.finalFieldType(engine.Surface),
    context: dart.finalFieldType(engine.CompositorContext)
  }));
  const _didDraw = dart.privateName(engine, "_didDraw");
  const _hasArbitraryPaint = dart.privateName(engine, "_hasArbitraryPaint");
  const _paintBounds = dart.privateName(engine, "_paintBounds");
  let C50;
  let C51;
  const SkRecordingCanvas_skCanvas = dart.privateName(engine, "SkRecordingCanvas.skCanvas");
  const SkRecordingCanvas_saveCount = dart.privateName(engine, "SkRecordingCanvas.saveCount");
  engine.SkRecordingCanvas = class SkRecordingCanvas extends core.Object {
    get skCanvas() {
      return this[skCanvas$0];
    }
    set skCanvas(value) {
      super.skCanvas = value;
    }
    get saveCount() {
      return this[saveCount];
    }
    set saveCount(value) {
      this[saveCount] = value;
    }
    get [_commands]() {
      return null;
    }
    get [_paintBounds]() {
      return null;
    }
    apply(engineCanvas) {
      dart.throw("apply");
    }
    clipPath(path, opts) {
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      let skPath = engine.SkPath._check(path);
      let intersectClipOp = js.JsObject._check(dart.dsend(engine.canvasKit._get("ClipOp"), '_get', ["Intersect"]));
      this.skCanvas.callMethod("clipPath", [skPath[_skPath], intersectClipOp, doAntiAlias]);
    }
    clipRRect(rrect, opts) {
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      let rrectPath = new engine.SkPath.new();
      rrectPath.addRRect(rrect);
      this.clipPath(rrectPath, {doAntiAlias: doAntiAlias});
    }
    clipRect(rect, opts) {
      let clipOp = opts && 'clipOp' in opts ? opts.clipOp : C50 || CT.C50;
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      let skClipOp = null;
      switch (clipOp) {
        case C51 || CT.C51:
        {
          skClipOp = js.JsObject._check(dart.dsend(engine.canvasKit._get("ClipOp"), '_get', ["Difference"]));
          break;
        }
        case C50 || CT.C50:
        {
          skClipOp = js.JsObject._check(dart.dsend(engine.canvasKit._get("ClipOp"), '_get', ["Intersect"]));
          break;
        }
      }
      this.skCanvas.callMethod("clipRect", [engine.makeSkRect(rect), skClipOp, doAntiAlias]);
    }
    computePaintBounds() {
      dart.throw("computePaintBounds");
    }
    debugDumpCommands() {
      dart.throw("debugDumpCommands");
    }
    debugEnforceArbitraryPaint() {
      dart.throw("debugEnforceArbitraryPaint");
    }
    debugPrintCommands() {
      dart.throw("debugPrintCommands");
    }
    get didDraw() {
      return true;
    }
    drawCircle(c, radius, paint) {
      let skPaint = engine.makeSkPaint(paint);
      let skRect = engine.makeSkRect(new ui.Rect.fromLTWH(dart.notNull(c.dx) - dart.notNull(radius), dart.notNull(c.dy) - dart.notNull(radius), 2.0 * dart.notNull(radius), 2.0 * dart.notNull(radius)));
      this.skCanvas.callMethod("drawOval", JSArrayOfJsObject().of([skRect, skPaint]));
    }
    drawColor(color, blendMode) {
      dart.throw("drawColor");
    }
    drawDRRect(outer, inner, paint) {
      dart.throw("drawDRRect");
    }
    drawImage(image, offset, paint) {
      dart.throw("drawImage");
    }
    drawImageRect(image, src, dst, paint) {
      let skImage = engine.SkImage._check(image);
      this.skCanvas.callMethod("drawImageRect", [skImage.skImage, engine.makeSkRect(src), engine.makeSkRect(dst), engine.makeSkPaint(paint), false]);
    }
    drawLine(p1, p2, paint) {
      this.skCanvas.callMethod("drawLine", [p1.dx, p1.dy, p2.dx, p2.dy, engine.makeSkPaint(paint)]);
    }
    drawOval(rect, paint) {
      dart.throw("drawOval");
    }
    drawPaint(paint) {
      dart.throw("drawPaint");
    }
    drawParagraph(paragraph, offset) {
      let engineParagraph = engine.EngineParagraph._check(paragraph);
      let style = engineParagraph.geometricStyle;
      let skFont = engine.skiaFontCollection.getFont(style.effectiveFontFamily, style.fontSize);
      let skShapedTextOpts = js.JsObject.jsify(new (IdentityMapOfString$dynamic()).from(["font", skFont, "leftToRight", true, "text", engineParagraph.plainText, "width", dart.notNull(engineParagraph.width) + 1]));
      let skShapedText = js.JsObject.new(js.JsFunction._check(engine.canvasKit._get("ShapedText")), JSArrayOfJsObject().of([skShapedTextOpts]));
      this.skCanvas.callMethod("drawText", [skShapedText, dart.notNull(offset.dx) + dart.notNull(engineParagraph[_alignOffset]), offset.dy, engine.makeSkPaint(engineParagraph[_paint])]);
    }
    drawPath(path, paint) {
      let skPaint = engine.makeSkPaint(paint);
      let enginePath = engine.SkPath._check(path);
      let skPath = enginePath[_skPath];
      this.skCanvas.callMethod("drawPath", JSArrayOfJsObject().of([skPath, skPaint]));
    }
    drawRRect(rrect, paint) {
      if (!(dart.equals(rrect.tlRadius, rrect.trRadius) && dart.equals(rrect.tlRadius, rrect.brRadius) && dart.equals(rrect.tlRadius, rrect.blRadius))) dart.assertFailed("CanvasKit only supports drawing RRects where the radii are all the same.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/recording_canvas.dart", 197, 7, "rrect.tlRadius == rrect.trRadius &&\r\n          rrect.tlRadius == rrect.brRadius &&\r\n          rrect.tlRadius == rrect.blRadius");
      this.skCanvas.callMethod("drawRoundRect", [engine.makeSkRect(rrect.outerRect), rrect.tlRadiusX, rrect.tlRadiusY, engine.makeSkPaint(paint)]);
    }
    drawRect(rect, paint) {
      let skRect = engine.makeSkRect(rect);
      let skPaint = engine.makeSkPaint(paint);
      this.skCanvas.callMethod("drawRect", JSArrayOfJsObject().of([skRect, skPaint]));
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      engine.drawSkShadow(this.skCanvas, engine.SkPath._check(path), color, elevation, transparentOccluder);
    }
    get hasArbitraryPaint() {
      return true;
    }
    restore() {
      this.skCanvas.callMethod("restore");
      this.saveCount = dart.notNull(this.saveCount) - 1;
    }
    rotate(radians) {
      this.skCanvas.callMethod("rotate", JSArrayOfdouble().of([dart.notNull(radians) * 180.0 / 3.141592653589793, 0.0, 0.0]));
    }
    save() {
      this.skCanvas.callMethod("save");
      this.saveCount = dart.notNull(this.saveCount) + 1;
    }
    saveLayer(bounds, paint) {
      this.skCanvas.callMethod("saveLayer", JSArrayOfJsObject().of([engine.makeSkRect(bounds), engine.makeSkPaint(paint)]));
      this.saveCount = dart.notNull(this.saveCount) + 1;
    }
    saveLayerWithoutBounds(paint) {
      dart.throw("saveLayerWithoutBounds");
    }
    scale(sx, sy) {
      this.skCanvas.callMethod("scale", JSArrayOfdouble().of([sx, sy]));
    }
    skew(sx, sy) {
      dart.throw("skew");
    }
    transform(matrix4) {
      this.skCanvas.callMethod("concat", JSArrayOfJsArrayOfdouble().of([engine.makeSkMatrix(matrix4)]));
    }
    translate(dx, dy) {
      this.skCanvas.callMethod("translate", JSArrayOfdouble().of([dx, dy]));
    }
  };
  (engine.SkRecordingCanvas.new = function(skCanvas) {
    this[_didDraw] = true;
    this[_hasArbitraryPaint] = true;
    this[saveCount] = 0;
    this[skCanvas$0] = skCanvas;
    ;
  }).prototype = engine.SkRecordingCanvas.prototype;
  dart.addTypeTests(engine.SkRecordingCanvas);
  const skCanvas$0 = SkRecordingCanvas_skCanvas;
  const saveCount = SkRecordingCanvas_saveCount;
  engine.SkRecordingCanvas[dart.implements] = () => [engine.RecordingCanvas];
  dart.setMethodSignature(engine.SkRecordingCanvas, () => ({
    __proto__: dart.getMethods(engine.SkRecordingCanvas.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    clipPath: dart.fnType(dart.void, [ui.Path], {doAntiAlias: core.bool}),
    clipRRect: dart.fnType(dart.void, [ui.RRect], {doAntiAlias: core.bool}),
    clipRect: dart.fnType(dart.void, [ui.Rect], {clipOp: ui.ClipOp, doAntiAlias: core.bool}),
    computePaintBounds: dart.fnType(ui.Rect, []),
    debugDumpCommands: dart.fnType(dart.void, []),
    debugEnforceArbitraryPaint: dart.fnType(dart.void, []),
    debugPrintCommands: dart.fnType(core.String, []),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.Paint]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.Paint]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.Paint]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawPaint: dart.fnType(dart.void, [ui.Paint]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.Paint]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    restore: dart.fnType(dart.void, []),
    rotate: dart.fnType(dart.void, [core.double]),
    save: dart.fnType(dart.void, []),
    saveLayer: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    saveLayerWithoutBounds: dart.fnType(dart.void, [ui.Paint]),
    scale: dart.fnType(dart.void, [core.double, core.double]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    translate: dart.fnType(dart.void, [core.double, core.double])
  }));
  dart.setGetterSignature(engine.SkRecordingCanvas, () => ({
    __proto__: dart.getGetters(engine.SkRecordingCanvas.__proto__),
    [_commands]: core.List$(engine.PaintCommand),
    [_paintBounds]: engine._PaintBounds,
    didDraw: core.bool,
    hasArbitraryPaint: core.bool
  }));
  dart.setLibraryUri(engine.SkRecordingCanvas, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SkRecordingCanvas, () => ({
    __proto__: dart.getFields(engine.SkRecordingCanvas.__proto__),
    skCanvas: dart.finalFieldType(js.JsObject),
    [_didDraw]: dart.fieldType(core.bool),
    [_hasArbitraryPaint]: dart.fieldType(core.bool),
    saveCount: dart.fieldType(core.int)
  }));
  const SurfaceFrame_submitFn = dart.privateName(engine, "SurfaceFrame.submitFn");
  const SurfaceFrame_canvas = dart.privateName(engine, "SurfaceFrame.canvas");
  engine.SurfaceFrame = class SurfaceFrame extends core.Object {
    get submitFn() {
      return this[submitFn$];
    }
    set submitFn(value) {
      super.submitFn = value;
    }
    get canvas() {
      return this[canvas$1];
    }
    set canvas(value) {
      super.canvas = value;
    }
    submit() {
      this.submitFn(this.canvas);
    }
  };
  (engine.SurfaceFrame.new = function(submitFn, canvas) {
    this[submitFn$] = submitFn;
    this[canvas$1] = canvas;
    ;
  }).prototype = engine.SurfaceFrame.prototype;
  dart.addTypeTests(engine.SurfaceFrame);
  const submitFn$ = SurfaceFrame_submitFn;
  const canvas$1 = SurfaceFrame_canvas;
  dart.setMethodSignature(engine.SurfaceFrame, () => ({
    __proto__: dart.getMethods(engine.SurfaceFrame.__proto__),
    submit: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.SurfaceFrame, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SurfaceFrame, () => ({
    __proto__: dart.getFields(engine.SurfaceFrame.__proto__),
    submitFn: dart.finalFieldType(dart.fnType(dart.void, [engine.SkCanvas])),
    canvas: dart.finalFieldType(engine.SkCanvas)
  }));
  const Surface_canvasCache = dart.privateName(engine, "Surface.canvasCache");
  const Surface_submitFunction = dart.privateName(engine, "Surface.submitFunction");
  engine.Surface = class Surface extends core.Object {
    get canvasCache() {
      return this[canvasCache];
    }
    set canvasCache(value) {
      super.canvasCache = value;
    }
    get submitFunction() {
      return this[submitFunction$];
    }
    set submitFunction(value) {
      super.submitFunction = value;
    }
    acquireFrame(size) {
      let canvas = this.canvasCache.acquireCanvas(size);
      return new engine.SurfaceFrame.new(this.submitFunction, canvas);
    }
    get rootTransformation() {
      return null;
    }
  };
  (engine.Surface.new = function(submitFunction) {
    this[canvasCache] = new engine._CanvasCache.new();
    this[submitFunction$] = submitFunction;
    ;
  }).prototype = engine.Surface.prototype;
  dart.addTypeTests(engine.Surface);
  const canvasCache = Surface_canvasCache;
  const submitFunction$ = Surface_submitFunction;
  dart.setMethodSignature(engine.Surface, () => ({
    __proto__: dart.getMethods(engine.Surface.__proto__),
    acquireFrame: dart.fnType(engine.SurfaceFrame, [ui.Size])
  }));
  dart.setGetterSignature(engine.Surface, () => ({
    __proto__: dart.getGetters(engine.Surface.__proto__),
    rootTransformation: engine.Matrix4
  }));
  dart.setLibraryUri(engine.Surface, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Surface, () => ({
    __proto__: dart.getFields(engine.Surface.__proto__),
    canvasCache: dart.finalFieldType(engine._CanvasCache),
    submitFunction: dart.finalFieldType(dart.fnType(dart.void, [engine.SkCanvas]))
  }));
  engine._CanvasCache = class _CanvasCache extends core.Object {
    acquireCanvas(size) {
      let t4, t4$;
      if (!(size != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/surface.dart", 46, 12, "size != null");
      if (dart.equals(size, (t4 = this[_canvas], t4 == null ? null : t4.size))) {
        return this[_canvas];
      }
      let htmlCanvas = (t4$ = html.CanvasElement.new({width: size.width[$ceil](), height: size.height[$ceil]()}), t4$.id = "flt-sk-canvas", t4$);
      engine.domRenderer.renderScene(htmlCanvas);
      let surface = js.JsObject._check(engine.canvasKit.callMethod("MakeCanvasSurface", JSArrayOfString().of(["flt-sk-canvas"])));
      let skCanvas = js.JsObject._check(surface.callMethod("getCanvas"));
      this[_canvas] = new engine.SkCanvas.new(skCanvas, htmlCanvas, surface, size);
      return this[_canvas];
    }
  };
  (engine._CanvasCache.new = function() {
    this[_canvas] = null;
    ;
  }).prototype = engine._CanvasCache.prototype;
  dart.addTypeTests(engine._CanvasCache);
  dart.setMethodSignature(engine._CanvasCache, () => ({
    __proto__: dart.getMethods(engine._CanvasCache.__proto__),
    acquireCanvas: dart.fnType(engine.SkCanvas, [ui.Size])
  }));
  dart.setLibraryUri(engine._CanvasCache, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._CanvasCache, () => ({
    __proto__: dart.getFields(engine._CanvasCache.__proto__),
    [_canvas]: dart.fieldType(engine.SkCanvas)
  }));
  const ViewportMetrics_devicePixelRatio = dart.privateName(engine, "ViewportMetrics.devicePixelRatio");
  const ViewportMetrics_physicalWidth = dart.privateName(engine, "ViewportMetrics.physicalWidth");
  const ViewportMetrics_physicalHeight = dart.privateName(engine, "ViewportMetrics.physicalHeight");
  engine.ViewportMetrics = class ViewportMetrics extends core.Object {
    get devicePixelRatio() {
      return this[devicePixelRatio$];
    }
    set devicePixelRatio(value) {
      super.devicePixelRatio = value;
    }
    get physicalWidth() {
      return this[physicalWidth$];
    }
    set physicalWidth(value) {
      super.physicalWidth = value;
    }
    get physicalHeight() {
      return this[physicalHeight$];
    }
    set physicalHeight(value) {
      super.physicalHeight = value;
    }
  };
  (engine.ViewportMetrics.new = function(devicePixelRatio, physicalWidth, physicalHeight) {
    this[devicePixelRatio$] = devicePixelRatio;
    this[physicalWidth$] = physicalWidth;
    this[physicalHeight$] = physicalHeight;
    ;
  }).prototype = engine.ViewportMetrics.prototype;
  dart.addTypeTests(engine.ViewportMetrics);
  const devicePixelRatio$ = ViewportMetrics_devicePixelRatio;
  const physicalWidth$ = ViewportMetrics_physicalWidth;
  const physicalHeight$ = ViewportMetrics_physicalHeight;
  dart.setLibraryUri(engine.ViewportMetrics, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ViewportMetrics, () => ({
    __proto__: dart.getFields(engine.ViewportMetrics.__proto__),
    devicePixelRatio: dart.finalFieldType(core.double),
    physicalWidth: dart.finalFieldType(core.double),
    physicalHeight: dart.finalFieldType(core.double)
  }));
  const _computeSubdivisionCount = dart.privateName(engine, "_computeSubdivisionCount");
  const _chop = dart.privateName(engine, "_chop");
  const Conic_p0x = dart.privateName(engine, "Conic.p0x");
  const Conic_p0y = dart.privateName(engine, "Conic.p0y");
  const Conic_p1x = dart.privateName(engine, "Conic.p1x");
  const Conic_p1y = dart.privateName(engine, "Conic.p1y");
  const Conic_p2x = dart.privateName(engine, "Conic.p2x");
  const Conic_p2y = dart.privateName(engine, "Conic.p2y");
  const Conic_fW = dart.privateName(engine, "Conic.fW");
  engine.Conic = class Conic extends core.Object {
    get p0x() {
      return this[p0x$];
    }
    set p0x(value) {
      this[p0x$] = value;
    }
    get p0y() {
      return this[p0y$];
    }
    set p0y(value) {
      this[p0y$] = value;
    }
    get p1x() {
      return this[p1x$];
    }
    set p1x(value) {
      this[p1x$] = value;
    }
    get p1y() {
      return this[p1y$];
    }
    set p1y(value) {
      this[p1y$] = value;
    }
    get p2x() {
      return this[p2x$];
    }
    set p2x(value) {
      this[p2x$] = value;
    }
    get p2y() {
      return this[p2y$];
    }
    set p2y(value) {
      this[p2y$] = value;
    }
    get fW() {
      return this[fW$];
    }
    set fW(value) {
      super.fW = value;
    }
    toQuads() {
      let pointList = JSArrayOfOffset().of([]);
      let subdivideCount = this[_computeSubdivisionCount](0.25);
      if (!(dart.notNull(subdivideCount) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/conic.dart", 35, 12, "subdivideCount > 0");
      let quadCount = (1)[$leftShift](subdivideCount);
      let skipSubdivide = false;
      pointList[$add](new ui.Offset.new(this.p0x, this.p0y));
      if (subdivideCount === 5) {
        let dst = ListOfConic().new(2);
        this[_chop](dst);
        let conic0 = dst[$_get](0);
        let conic1 = dst[$_get](1);
        if (conic0.p1x == conic0.p2x && conic0.p1y == conic0.p2y && conic1.p0x == conic1.p1x && conic1.p0y == conic1.p1y) {
          let controlPointOffset = new ui.Offset.new(conic0.p1x, conic0.p1y);
          pointList[$add](controlPointOffset);
          pointList[$add](controlPointOffset);
          pointList[$add](controlPointOffset);
          pointList[$add](new ui.Offset.new(conic1.p2x, conic1.p2y));
          quadCount = 2;
          skipSubdivide = true;
        }
      }
      if (!skipSubdivide) {
        engine.Conic._subdivide(this, subdivideCount, pointList);
      }
      let pointCount = 2 * quadCount + 1;
      let hasNonFinitePoints = false;
      for (let p = 0; p < pointCount; p = p + 1) {
        if (pointList[$_get](p).dx[$isNaN] || pointList[$_get](p).dy[$isNaN]) {
          hasNonFinitePoints = true;
          break;
        }
      }
      if (hasNonFinitePoints) {
        for (let p = 1; p < pointCount - 1; p = p + 1) {
          pointList[$_set](p, new ui.Offset.new(this.p1x, this.p1y));
        }
      }
      return pointList;
    }
    static _between(a, b, c) {
      return (dart.notNull(a) - dart.notNull(b)) * (dart.notNull(c) - dart.notNull(b)) <= 0;
    }
    static _subdivide(src, level, pointList) {
      if (!(dart.notNull(level) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/conic.dart", 87, 12, "level >= 0");
      if (0 === level) {
        pointList[$add](new ui.Offset.new(src.p1x, src.p1y));
        pointList[$add](new ui.Offset.new(src.p2x, src.p2y));
        return;
      }
      let dst = ListOfConic().new(2);
      src[_chop](dst);
      let conic0 = dst[$_get](0);
      let conic1 = dst[$_get](1);
      let startY = src.p0y;
      let endY = src.p2y;
      let cpY = src.p1y;
      if (dart.test(engine.Conic._between(startY, cpY, endY))) {
        let midY = conic0.p2y;
        if (!dart.test(engine.Conic._between(startY, midY, endY))) {
          let closerY = (dart.notNull(midY) - dart.notNull(startY))[$abs]() < (dart.notNull(midY) - dart.notNull(endY))[$abs]() ? startY : endY;
          conic0.p2y = conic1.p0y = closerY;
        }
        if (!dart.test(engine.Conic._between(startY, conic0.p1y, conic0.p2y))) {
          conic0.p1y = startY;
        }
        if (!dart.test(engine.Conic._between(conic1.p0y, conic1.p1y, endY))) {
          conic1.p1y = endY;
        }
        if (!dart.test(engine.Conic._between(startY, conic0.p1y, conic0.p2y))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/conic.dart", 123, 14, "_between(startY, conic0.p1y, conic0.p2y)");
        if (!dart.test(engine.Conic._between(conic0.p1y, conic0.p2y, conic1.p1y))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/conic.dart", 124, 14, "_between(conic0.p1y, conic0.p2y, conic1.p1y)");
        if (!dart.test(engine.Conic._between(conic0.p2y, conic1.p1y, endY))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/conic.dart", 125, 14, "_between(conic0.p2y, conic1.p1y, endY)");
      }
      level = dart.notNull(level) - 1;
      engine.Conic._subdivide(conic0, level, pointList);
      engine.Conic._subdivide(conic1, level, pointList);
    }
    static _subdivideWeightValue(w) {
      return math.sqrt(0.5 + dart.notNull(w) * 0.5);
    }
    [_chop](dst) {
      let scale = 1.0 / (1.0 + dart.notNull(this.fW));
      let newW = engine.Conic._subdivideWeightValue(this.fW);
      let wp1 = new ui.Offset.new(dart.notNull(this.fW) * dart.notNull(this.p1x), dart.notNull(this.fW) * dart.notNull(this.p1y));
      let m = new ui.Offset.new((dart.notNull(this.p0x) + 2 * dart.notNull(wp1.dx) + dart.notNull(this.p2x)) * scale * 0.5, (dart.notNull(this.p0y) + 2 * dart.notNull(wp1.dy) + dart.notNull(this.p2y)) * scale * 0.5);
      if (m.dx[$isNaN] || m.dy[$isNaN]) {
        let w2 = dart.notNull(this.fW) * 2;
        let scaleHalf = 1.0 / (1 + dart.notNull(this.fW)) * 0.5;
        m = new ui.Offset.new((dart.notNull(this.p0x) + w2 * dart.notNull(this.p1x) + dart.notNull(this.p2x)) * scaleHalf, (dart.notNull(this.p0y) + w2 * dart.notNull(this.p1y) + dart.notNull(this.p2y)) * scaleHalf);
      }
      dst[$_set](0, new engine.Conic.new(this.p0x, this.p0y, (dart.notNull(this.p0x) + dart.notNull(wp1.dx)) * scale, (dart.notNull(this.p0y) + dart.notNull(wp1.dy)) * scale, m.dx, m.dy, newW));
      dst[$_set](1, new engine.Conic.new(m.dx, m.dy, (dart.notNull(this.p2x) + dart.notNull(wp1.dx)) * scale, (dart.notNull(this.p2y) + dart.notNull(wp1.dy)) * scale, this.p2x, this.p2y, newW));
    }
    [_computeSubdivisionCount](tolerance) {
      if (!tolerance[$isFinite]) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/conic.dart", 160, 12, "tolerance.isFinite");
      if (!(this.p0x[$isFinite] && this.p1x[$isFinite] && this.p2x[$isFinite] && this.p0y[$isFinite] && this.p1y[$isFinite] && this.p2y[$isFinite])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/conic.dart", 162, 12, "p0x.isFinite &&\r\n        p1x.isFinite &&\r\n        p2x.isFinite &&\r\n        p0y.isFinite &&\r\n        p1y.isFinite &&\r\n        p2y.isFinite");
      if (dart.notNull(tolerance) < 0) {
        return 0;
      }
      let a = dart.notNull(this.fW) - 1;
      let k = a / (4.0 * (2.0 + a));
      let x = k * (dart.notNull(this.p0x) - 2 * dart.notNull(this.p1x) + dart.notNull(this.p2x));
      let y = k * (dart.notNull(this.p0y) - 2 * dart.notNull(this.p1y) + dart.notNull(this.p2y));
      let error = math.sqrt(x * x + y * y);
      let pow2 = 0;
      for (; pow2 < 5; pow2 = pow2 + 1) {
        if (error <= dart.notNull(tolerance)) {
          break;
        }
        error = error * 0.25;
      }
      return pow2;
    }
  };
  (engine.Conic.new = function(p0x, p0y, p1x, p1y, p2x, p2y, fW) {
    this[p0x$] = p0x;
    this[p0y$] = p0y;
    this[p1x$] = p1x;
    this[p1y$] = p1y;
    this[p2x$] = p2x;
    this[p2y$] = p2y;
    this[fW$] = fW;
    ;
  }).prototype = engine.Conic.prototype;
  dart.addTypeTests(engine.Conic);
  const p0x$ = Conic_p0x;
  const p0y$ = Conic_p0y;
  const p1x$ = Conic_p1x;
  const p1y$ = Conic_p1y;
  const p2x$ = Conic_p2x;
  const p2y$ = Conic_p2y;
  const fW$ = Conic_fW;
  dart.setMethodSignature(engine.Conic, () => ({
    __proto__: dart.getMethods(engine.Conic.__proto__),
    toQuads: dart.fnType(core.List$(ui.Offset), []),
    [_chop]: dart.fnType(dart.void, [core.List$(engine.Conic)]),
    [_computeSubdivisionCount]: dart.fnType(core.int, [core.double])
  }));
  dart.setLibraryUri(engine.Conic, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Conic, () => ({
    __proto__: dart.getFields(engine.Conic.__proto__),
    p0x: dart.fieldType(core.double),
    p0y: dart.fieldType(core.double),
    p1x: dart.fieldType(core.double),
    p1y: dart.fieldType(core.double),
    p2x: dart.fieldType(core.double),
    p2y: dart.fieldType(core.double),
    fW: dart.finalFieldType(core.double)
  }));
  dart.defineLazy(engine.Conic, {
    /*engine.Conic._maxSubdivisionCount*/get _maxSubdivisionCount() {
      return 5;
    }
  });
  const _elementStack = dart.privateName(engine, "_elementStack");
  engine.SaveElementStackTracking = class SaveElementStackTracking extends engine.EngineCanvas {};
  engine.SaveElementStackTracking[dart.mixinOn] = EngineCanvas => class SaveElementStackTracking extends EngineCanvas {
    get currentElement() {
      return dart.test(this[_elementStack][$isEmpty]) ? this.rootElement : this[_elementStack][$last];
    }
    pushElement(element) {
      this[_elementStack][$add](element);
    }
    clear() {
      this[_saveStack][$clear]();
      this[_elementStack][$clear]();
      this[_currentTransform] = engine.Matrix4.identity();
    }
    get currentTransform() {
      return this[_currentTransform];
    }
    save() {
      this[_saveStack][$add](new engine._SaveElementStackEntry.new({savedElement: this.currentElement, transform: this[_currentTransform].clone()}));
    }
    restore() {
      if (dart.test(this[_saveStack][$isEmpty])) {
        return;
      }
      let entry = this[_saveStack][$removeLast]();
      this[_currentTransform] = entry.transform;
      while (!dart.equals(this.currentElement, entry.savedElement)) {
        this[_elementStack][$removeLast]();
      }
    }
    translate(dx, dy) {
      this[_currentTransform].translate(dx, dy);
    }
    scale(sx, sy) {
      this[_currentTransform].scale(sx, sy);
    }
    rotate(radians) {
      this[_currentTransform].rotate(engine.SaveElementStackTracking._unitZ, radians);
    }
    skew(sx, sy) {
      let skewMatrix = engine.Matrix4.identity();
      let storage = skewMatrix.storage;
      storage[$_set](1, sy);
      storage[$_set](4, sx);
      this[_currentTransform].multiply(skewMatrix);
    }
    transform(matrix4) {
      this[_currentTransform].multiply(new engine.Matrix4.fromFloat64List(matrix4));
    }
  };
  (engine.SaveElementStackTracking[dart.mixinNew] = function() {
    this[_saveStack] = JSArrayOf_SaveElementStackEntry().of([]);
    this[_elementStack] = JSArrayOfElement().of([]);
    this[_currentTransform] = engine.Matrix4.identity();
  }).prototype = engine.SaveElementStackTracking.prototype;
  dart.addTypeTests(engine.SaveElementStackTracking);
  engine.SaveElementStackTracking[dart.implements] = () => [engine.EngineCanvas];
  dart.setMethodSignature(engine.SaveElementStackTracking, () => ({
    __proto__: dart.getMethods(engine.SaveElementStackTracking.__proto__),
    pushElement: dart.fnType(dart.void, [html.Element]),
    clear: dart.fnType(dart.void, []),
    save: dart.fnType(dart.void, []),
    restore: dart.fnType(dart.void, []),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double, core.double]),
    rotate: dart.fnType(dart.void, [core.double]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List])
  }));
  dart.setGetterSignature(engine.SaveElementStackTracking, () => ({
    __proto__: dart.getGetters(engine.SaveElementStackTracking.__proto__),
    currentElement: html.Element,
    currentTransform: engine.Matrix4
  }));
  dart.setLibraryUri(engine.SaveElementStackTracking, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SaveElementStackTracking, () => ({
    __proto__: dart.getFields(engine.SaveElementStackTracking.__proto__),
    [_saveStack]: dart.finalFieldType(core.List$(engine._SaveElementStackEntry)),
    [_elementStack]: dart.finalFieldType(core.List$(html.Element)),
    [_currentTransform]: dart.fieldType(engine.Matrix4)
  }));
  dart.defineLazy(engine.SaveElementStackTracking, {
    /*engine.SaveElementStackTracking._unitZ*/get _unitZ() {
      return engine.Vector3.new(0.0, 0.0, 1.0);
    }
  });
  const DomCanvas_rootElement = dart.privateName(engine, "DomCanvas.rootElement");
  const EngineCanvas_SaveElementStackTracking$36 = class EngineCanvas_SaveElementStackTracking extends engine.EngineCanvas {};
  (EngineCanvas_SaveElementStackTracking$36.new = function() {
    engine.SaveElementStackTracking[dart.mixinNew].call(this);
  }).prototype = EngineCanvas_SaveElementStackTracking$36.prototype;
  dart.applyMixin(EngineCanvas_SaveElementStackTracking$36, engine.SaveElementStackTracking);
  engine.DomCanvas = class DomCanvas extends EngineCanvas_SaveElementStackTracking$36 {
    get rootElement() {
      return this[rootElement$];
    }
    set rootElement(value) {
      super.rootElement = value;
    }
    clear() {
      super.clear();
      engine.domRenderer.clearDom(this.rootElement);
    }
    clipRect(rect) {
      dart.throw(new core.UnimplementedError.new());
    }
    clipRRect(rrect) {
      dart.throw(new core.UnimplementedError.new());
    }
    clipPath(path) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawColor(color, blendMode) {
      let t4;
      let box = html.Element.tag("draw-color");
      t4 = box.style;
      t4[$position] = "absolute";
      t4[$top] = "0";
      t4[$right] = "0";
      t4[$bottom] = "0";
      t4[$left] = "0";
      t4[$backgroundColor] = color.toCssString();
      t4;
      this.currentElement[$append](box);
    }
    drawLine(p1, p2, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawPaint(paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawRect(rect, paint) {
      let t4, t4$, t4$0, t4$1, t4$2;
      if (!(paint.shader == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/dom_canvas.dart", 70, 12, "paint.shader == null");
      let rectangle = html.Element.tag("draw-rect");
      if (!dart.test(dart.fn(() => {
        rectangle[$setAttribute]("flt-rect", dart.str(rect));
        rectangle[$setAttribute]("flt-paint", dart.str(paint));
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/dom_canvas.dart", 72, 12, "() {\r\n      rectangle.setAttribute('flt-rect', '$rect');\r\n      rectangle.setAttribute('flt-paint', '$paint');\r\n      return true;\r\n    }()");
      let effectiveTransform = null;
      let isStroke = dart.equals(paint.style, ui.PaintingStyle.stroke);
      let left = math.min(core.double, rect.left, rect.right);
      let right = math.max(core.double, rect.left, rect.right);
      let top = math.min(core.double, rect.top, rect.bottom);
      let bottom = math.max(core.double, rect.top, rect.bottom);
      if (dart.test(this.currentTransform.isIdentity())) {
        if (isStroke) {
          effectiveTransform = "translate(" + dart.str(left - dart.notNull(paint.strokeWidth) / 2.0) + "px, " + dart.str(top - dart.notNull(paint.strokeWidth) / 2.0) + "px)";
        } else {
          effectiveTransform = "translate(" + dart.str(left) + "px, " + dart.str(top) + "px)";
        }
      } else {
        let translated = this.currentTransform.clone();
        if (isStroke) {
          translated.translate(left - dart.notNull(paint.strokeWidth) / 2.0, top - dart.notNull(paint.strokeWidth) / 2.0);
        } else {
          translated.translate(left, top);
        }
        effectiveTransform = engine.matrix4ToCssTransform(translated);
      }
      let style = rectangle.style;
      t4 = style;
      t4[$position] = "absolute";
      t4[$transformOrigin] = "0 0 0";
      t4[$transform] = effectiveTransform;
      t4;
      let cssColor = (t4$0 = (t4$ = paint.color, t4$ == null ? null : t4$.toCssString()), t4$0 == null ? "#000000" : t4$0);
      if (paint.maskFilter != null) {
        style[$filter] = "blur(" + dart.str(paint.maskFilter.webOnlySigma) + "px)";
      }
      if (isStroke) {
        t4$1 = style;
        t4$1[$width] = dart.str(right - left - dart.notNull(paint.strokeWidth)) + "px";
        t4$1[$height] = dart.str(bottom - top - dart.notNull(paint.strokeWidth)) + "px";
        t4$1[$border] = dart.str(paint.strokeWidth) + "px solid " + dart.str(cssColor);
        t4$1;
      } else {
        t4$2 = style;
        t4$2[$width] = dart.str(right - left) + "px";
        t4$2[$height] = dart.str(bottom - top) + "px";
        t4$2[$backgroundColor] = cssColor;
        t4$2;
      }
      this.currentElement[$append](rectangle);
    }
    drawRRect(rrect, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawDRRect(outer, inner, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawOval(rect, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawCircle(c, radius, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawPath(path, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawImage(image, p, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawImageRect(image, src, dst, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawParagraph(paragraph, offset) {
      let paragraphElement = engine._drawParagraphElement(engine.EngineParagraph._check(paragraph), offset, {transform: this.currentTransform});
      this.currentElement[$append](paragraphElement);
    }
  };
  (engine.DomCanvas.new = function() {
    let t4;
    this[rootElement$] = html.Element.tag("flt-dom-canvas");
    engine.DomCanvas.__proto__.new.call(this);
    t4 = this.rootElement.style;
    t4[$position] = "absolute";
    t4[$top] = "0";
    t4[$right] = "0";
    t4[$bottom] = "0";
    t4[$left] = "0";
    t4;
  }).prototype = engine.DomCanvas.prototype;
  dart.addTypeTests(engine.DomCanvas);
  const rootElement$ = DomCanvas_rootElement;
  dart.setMethodSignature(engine.DomCanvas, () => ({
    __proto__: dart.getMethods(engine.DomCanvas.__proto__),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    clipRRect: dart.fnType(dart.void, [ui.RRect]),
    clipPath: dart.fnType(dart.void, [ui.Path]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.PaintData]),
    drawPaint: dart.fnType(dart.void, [ui.PaintData]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.PaintData]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.PaintData]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.PaintData]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.PaintData]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.PaintData]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.PaintData]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset])
  }));
  dart.setLibraryUri(engine.DomCanvas, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.DomCanvas, () => ({
    __proto__: dart.getFields(engine.DomCanvas.__proto__),
    rootElement: dart.finalFieldType(html.Element)
  }));
  const _resizeSubscription = dart.privateName(engine, "_resizeSubscription");
  const _styleElement = dart.privateName(engine, "_styleElement");
  const _viewportMeta = dart.privateName(engine, "_viewportMeta");
  const _canvasKitScript = dart.privateName(engine, "_canvasKitScript");
  const _sceneHostElement = dart.privateName(engine, "_sceneHostElement");
  const _sceneElement = dart.privateName(engine, "_sceneElement");
  const _staleHotRestartState = dart.privateName(engine, "_staleHotRestartState");
  const _glassPaneElement = dart.privateName(engine, "_glassPaneElement");
  const _debugFrameStatistics = dart.privateName(engine, "_debugFrameStatistics");
  const _setupHotRestart = dart.privateName(engine, "_setupHotRestart");
  const _clearOnHotRestart = dart.privateName(engine, "_clearOnHotRestart");
  const Duration__duration = dart.privateName(core, "Duration._duration");
  let C52;
  const _metricsDidChange = dart.privateName(engine, "_metricsDidChange");
  const _rootApplicationElement = dart.privateName(engine, "_rootApplicationElement");
  const DomRenderer_rootElement = dart.privateName(engine, "DomRenderer.rootElement");
  engine.DomRenderer = class DomRenderer extends core.Object {
    get rootElement() {
      return this[rootElement$0];
    }
    set rootElement(value) {
      super.rootElement = value;
    }
    get canvasKitScript() {
      return this[_canvasKitScript];
    }
    get sceneHostElement() {
      return this[_sceneHostElement];
    }
    get sceneElement() {
      return this[_sceneElement];
    }
    [_setupHotRestart]() {
      this[_staleHotRestartState] = ListOfElement()._check(js_util.getProperty(html.window, "__flutter_state"));
      if (this[_staleHotRestartState] == null) {
        this[_staleHotRestartState] = JSArrayOfElement().of([]);
        js_util.setProperty(html.window, "__flutter_state", this[_staleHotRestartState]);
      }
      engine.registerHotRestartListener(dart.fn(() => {
        let t4;
        t4 = this[_resizeSubscription];
        t4 == null ? null : t4.cancel();
        this[_staleHotRestartState][$addAll](JSArrayOfElement().of([this[_glassPaneElement], this[_styleElement], this[_viewportMeta], this[_canvasKitScript]]));
      }, VoidToNull()));
    }
    [_clearOnHotRestart]() {
      let t4;
      if (dart.test(this[_staleHotRestartState][$isNotEmpty])) {
        for (let element of this[_staleHotRestartState]) {
          t4 = element;
          t4 == null ? null : t4[$remove]();
        }
        this[_staleHotRestartState][$clear]();
      }
    }
    renderScene(sceneElement) {
      let t4;
      if (!dart.equals(sceneElement, this[_sceneElement])) {
        t4 = this[_sceneElement];
        t4 == null ? null : t4[$remove]();
        this[_sceneElement] = sceneElement;
        this.append(this[_sceneHostElement], sceneElement);
      }
      if (!dart.test(dart.fn(() => {
        this[_clearOnHotRestart]();
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/dom_renderer.dart", 105, 12, "() {\r\n      _clearOnHotRestart();\r\n      return true;\r\n    }()");
    }
    get glassPaneElement() {
      return this[_glassPaneElement];
    }
    addElementClass(element, className) {
      element[$classes].add(className);
    }
    attachBeforeElement(parent, before, newElement) {
      if (!(parent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/dom_renderer.dart", 128, 12, "parent != null");
      if (parent != null) {
        if (!dart.test(dart.fn(() => {
          if (before == null) {
            return true;
          }
          if (!dart.equals(before[$parent], parent)) {
            dart.throw(core.Exception.new("attachBeforeElement was called with `before` element that's " + "not a child of the `parent` element:\n" + "  before: " + dart.str(before) + "\n" + "  parent: " + dart.str(parent)));
          }
          return true;
        }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/dom_renderer.dart", 130, 14, "() {\r\n        if (before == null) {\r\n          return true;\r\n        }\r\n        if (before.parent != parent) {\r\n          throw Exception(\r\n            'attachBeforeElement was called with `before` element that\\'s '\r\n            'not a child of the `parent` element:\\n'\r\n            '  before: $before\\n'\r\n            '  parent: $parent',\r\n          );\r\n        }\r\n        return true;\r\n      }()");
        parent.insertBefore(newElement, before);
      }
    }
    createElement(tagName, opts) {
      let t4;
      let parent = opts && 'parent' in opts ? opts.parent : null;
      let element = html.document[$createElement](tagName);
      t4 = parent;
      t4 == null ? null : t4[$append](element);
      return element;
    }
    append(parent, child) {
      parent[$append](child);
    }
    appendText(parent, text) {
      parent[$appendText](text);
    }
    detachElement(element) {
      element[$remove]();
    }
    removeElementClass(element, className) {
      element[$classes].remove(className);
    }
    setElementAttribute(element, name, value) {
      element[$setAttribute](name, value);
    }
    setElementProperty(element, name, value) {
      js_util.setProperty(element, name, value);
    }
    setElementStyle(element, name, value) {
      if (value == null) {
        element.style.removeProperty(name);
      } else {
        element.style[$setProperty](name, value);
      }
    }
    setText(element, text) {
      element[$text] = text;
    }
    removeAllChildren(element) {
      element[$children][$clear]();
    }
    getParent(element) {
      return element[$parent];
    }
    setTitle(title) {
      html.document[$title] = title;
    }
    setThemeColor(color) {
      let t4;
      let theme = html.MetaElement._check(html.document.querySelector("#flutterweb-theme"));
      if (theme == null) {
        theme = (t4 = html.MetaElement.new(), t4.id = "flutterweb-theme", t4.name = "theme-color", t4);
        html.document[$head][$append](theme);
      }
      theme.content = color.toCssString();
    }
    reset() {
      let t4, t4$, t4$0, t4$1, t4$2, t4$3;
      t4 = this[_styleElement];
      t4 == null ? null : t4[$remove]();
      this[_styleElement] = html.StyleElement.new();
      html.document[$head][$append](this[_styleElement]);
      let sheet = html.CssStyleSheet._check(this[_styleElement].sheet);
      sheet.insertRule("flt-ruler-host p, flt-scene p {\n  margin: 0;\n}", sheet.cssRules[$length]);
      sheet.insertRule("flt-semantics input[type=range] {\n  appearance: none;\n  -webkit-appearance: none;\n  width: 100%;\n  position: absolute;\n  border: none;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}", sheet.cssRules[$length]);
      if (dart.equals(engine.browserEngine, engine.BrowserEngine.webkit)) {
        sheet.insertRule("flt-semantics input[type=range]::-webkit-slider-thumb {" + "  -webkit-appearance: none;" + "}", sheet.cssRules[$length]);
      }
      if (dart.equals(engine.browserEngine, engine.BrowserEngine.firefox)) {
        sheet.insertRule("input::-moz-selection {" + "  background-color: transparent;" + "}", sheet.cssRules[$length]);
      } else {
        sheet.insertRule("input::selection {" + "  background-color: transparent;" + "}", sheet.cssRules[$length]);
      }
      sheet.insertRule("flt-semantics input,\nflt-semantics textarea,\nflt-semantics [contentEditable=\"true\"] {\n  caret-color: transparent;\n}\n", sheet.cssRules[$length]);
      if (dart.equals(engine.browserEngine, engine.BrowserEngine.webkit)) {
        sheet.insertRule("flt-glass-pane * {\n  -webkit-tap-highlight-color: transparent;\n}\n", sheet.cssRules[$length]);
      }
      let bodyElement = html.document.body;
      this.setElementStyle(bodyElement, "position", "fixed");
      this.setElementStyle(bodyElement, "top", "0");
      this.setElementStyle(bodyElement, "right", "0");
      this.setElementStyle(bodyElement, "bottom", "0");
      this.setElementStyle(bodyElement, "left", "0");
      this.setElementStyle(bodyElement, "overflow", "hidden");
      this.setElementStyle(bodyElement, "padding", "0");
      this.setElementStyle(bodyElement, "margin", "0");
      this.setElementStyle(bodyElement, "user-select", "none");
      this.setElementStyle(bodyElement, "-webkit-user-select", "none");
      this.setElementStyle(bodyElement, "-ms-user-select", "none");
      this.setElementStyle(bodyElement, "-moz-user-select", "none");
      this.setElementStyle(bodyElement, "touch-action", "none");
      this.setElementStyle(bodyElement, "font", "normal normal 14px sans-serif");
      this.setElementStyle(bodyElement, "color", "red");
      bodyElement.spellcheck = false;
      for (let viewportMeta of html.document[$head][$querySelectorAll](html.Element, "meta[name=\"viewport\"]")) {
        if (dart.test(engine.assertionsEnabled)) {
          if (!dart.test(viewportMeta[$hasAttribute]("flt-viewport"))) {
            core.print("WARNING: found an existing <meta name=\"viewport\"> tag. Flutter " + "Web uses its own viewport configuration for better compatibility " + "with Flutter. This tag will be replaced.");
          }
        }
        viewportMeta[$remove]();
      }
      t4$ = this[_viewportMeta];
      t4$ == null ? null : t4$[$remove]();
      this[_viewportMeta] = (t4$0 = html.MetaElement.new(), t4$0[$setAttribute]("flt-viewport", ""), t4$0.name = "viewport", t4$0.content = "width=device-width, initial-scale=1.0, " + "maximum-scale=1.0, user-scalable=no", t4$0);
      html.document[$head][$append](this[_viewportMeta]);
      t4$1 = this[_glassPaneElement];
      t4$1 == null ? null : t4$1[$remove]();
      this[_glassPaneElement] = this.createElement("flt-glass-pane");
      t4$2 = this[_glassPaneElement].style;
      t4$2[$position] = "absolute";
      t4$2[$top] = "0";
      t4$2[$right] = "0";
      t4$2[$bottom] = "0";
      t4$2[$left] = "0";
      t4$2;
      bodyElement[$append](this[_glassPaneElement]);
      this[_sceneHostElement] = this.createElement("flt-scene-host");
      this[_sceneHostElement].style[$pointerEvents] = "none";
      this[_glassPaneElement][$append](this[_sceneHostElement]);
      engine.EngineSemanticsOwner.instance.autoEnableOnTap(this);
      new engine.PointerBinding.new(this);
      this.setElementAttribute(this[_sceneHostElement], "aria-hidden", "true");
      engine.window.debugOverrideDevicePixelRatio(1.0);
      if (dart.equals(engine.browserEngine, engine.BrowserEngine.webkit)) {
        let initialInnerWidth = html.window.innerWidth;
        let checkCount = 0;
        async.Timer.periodic(C52 || CT.C52, dart.fn(t => {
          checkCount = checkCount + 1;
          if (initialInnerWidth != html.window.innerWidth) {
            t.cancel();
            this[_metricsDidChange](null);
          } else if (checkCount > 5) {
            t.cancel();
          }
        }, TimerToNull()));
      }
      if (false) {
        t4$3 = this[_canvasKitScript];
        t4$3 == null ? null : t4$3[$remove]();
        this[_canvasKitScript] = html.ScriptElement.new();
        this[_canvasKitScript].src = dart.notNull(engine.canvasKitBaseUrl) + "canvaskit.js";
        html.document[$head][$append](this[_canvasKitScript]);
      }
      this[_resizeSubscription] = html.window[$onResize].listen(dart.bind(this, _metricsDidChange));
    }
    [_metricsDidChange](event) {
      if (ui.window.onMetricsChanged != null) {
        ui.window.onMetricsChanged();
      }
    }
    focus(element) {
      element.focus();
    }
    clearDom(node) {
      while (node.lastChild != null) {
        node.lastChild[$remove]();
      }
    }
    get [_rootApplicationElement]() {
      let lastElement = this.rootElement[$children][$last];
      return lastElement[$children][$singleWhere](dart.fn(element => element.tagName === "FLT-SCENE", ElementTobool()), {orElse: dart.fn(() => null, VoidToNull())});
    }
    vibrate(durationMs) {
      let navigator = html.window.navigator;
      if (dart.dtest(js_util.hasProperty(navigator, "vibrate"))) {
        js_util.callMethod(navigator, "vibrate", JSArrayOfnum().of([durationMs]));
      }
    }
    get currentHtml() {
      let t4, t4$;
      t4$ = (t4 = this[_rootApplicationElement], t4 == null ? null : t4[$outerHtml]);
      return t4$ == null ? "" : t4$;
    }
    debugFlushFrameStatistics() {
      if (!dart.test(engine.assertionsEnabled)) {
        dart.throw(core.Exception.new("This code should not be reachable in production."));
      }
      let current = this[_debugFrameStatistics];
      this[_debugFrameStatistics] = new engine.DebugDomRendererFrameStatistics.new();
      return current;
    }
    debugRulerCacheHit() {
      let t5, t4;
      t4 = this[_debugFrameStatistics];
      t5 = t4.paragraphRulerCacheHits;
      t4.paragraphRulerCacheHits = dart.notNull(t5) + 1;
      return t5;
    }
    debugRulerCacheMiss() {
      let t5, t4;
      t4 = this[_debugFrameStatistics];
      t5 = t4.paragraphRulerCacheMisses;
      t4.paragraphRulerCacheMisses = dart.notNull(t5) + 1;
      return t5;
    }
    debugRichTextLayout() {
      let t5, t4;
      t4 = this[_debugFrameStatistics];
      t5 = t4.richTextLayouts;
      t4.richTextLayouts = dart.notNull(t5) + 1;
      return t5;
    }
    debugPlainTextLayout() {
      let t5, t4;
      t4 = this[_debugFrameStatistics];
      t5 = t4.plainTextLayouts;
      t4.plainTextLayouts = dart.notNull(t5) + 1;
      return t5;
    }
  };
  (engine.DomRenderer.new = function() {
    this[_resizeSubscription] = null;
    this[_styleElement] = null;
    this[_viewportMeta] = null;
    this[_canvasKitScript] = null;
    this[_sceneHostElement] = null;
    this[_sceneElement] = null;
    this[_staleHotRestartState] = null;
    this[_glassPaneElement] = null;
    this[rootElement$0] = html.document.body;
    this[_debugFrameStatistics] = null;
    if (dart.test(engine.assertionsEnabled)) {
      this[_debugFrameStatistics] = new engine.DebugDomRendererFrameStatistics.new();
    }
    this.reset();
    engine.TextMeasurementService.initialize({rulerCacheCapacity: 10});
    if (!dart.test(dart.fn(() => {
      this[_setupHotRestart]();
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/dom_renderer.dart", 17, 12, "() {\r\n      _setupHotRestart();\r\n      return true;\r\n    }()");
  }).prototype = engine.DomRenderer.prototype;
  dart.addTypeTests(engine.DomRenderer);
  const rootElement$0 = DomRenderer_rootElement;
  dart.setMethodSignature(engine.DomRenderer, () => ({
    __proto__: dart.getMethods(engine.DomRenderer.__proto__),
    [_setupHotRestart]: dart.fnType(dart.void, []),
    [_clearOnHotRestart]: dart.fnType(dart.void, []),
    renderScene: dart.fnType(dart.void, [html.Element]),
    addElementClass: dart.fnType(dart.void, [html.Element, core.String]),
    attachBeforeElement: dart.fnType(dart.void, [html.Element, html.Element, html.Element]),
    createElement: dart.fnType(html.Element, [core.String], {parent: html.Element}),
    append: dart.fnType(dart.void, [html.Element, html.Element]),
    appendText: dart.fnType(dart.void, [html.Element, core.String]),
    detachElement: dart.fnType(dart.void, [html.Element]),
    removeElementClass: dart.fnType(dart.void, [html.Element, core.String]),
    setElementAttribute: dart.fnType(dart.void, [html.Element, core.String, core.String]),
    setElementProperty: dart.fnType(dart.void, [html.Element, core.String, core.Object]),
    setElementStyle: dart.fnType(dart.void, [html.Element, core.String, core.String]),
    setText: dart.fnType(dart.void, [html.Element, core.String]),
    removeAllChildren: dart.fnType(dart.void, [html.Element]),
    getParent: dart.fnType(html.Element, [html.Element]),
    setTitle: dart.fnType(dart.void, [core.String]),
    setThemeColor: dart.fnType(dart.void, [ui.Color]),
    reset: dart.fnType(dart.void, []),
    [_metricsDidChange]: dart.fnType(dart.void, [html.Event]),
    focus: dart.fnType(dart.void, [html.Element]),
    clearDom: dart.fnType(dart.void, [html.Node]),
    vibrate: dart.fnType(dart.void, [core.int]),
    debugFlushFrameStatistics: dart.fnType(engine.DebugDomRendererFrameStatistics, []),
    debugRulerCacheHit: dart.fnType(dart.void, []),
    debugRulerCacheMiss: dart.fnType(dart.void, []),
    debugRichTextLayout: dart.fnType(dart.void, []),
    debugPlainTextLayout: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.DomRenderer, () => ({
    __proto__: dart.getGetters(engine.DomRenderer.__proto__),
    canvasKitScript: html.ScriptElement,
    sceneHostElement: html.Element,
    sceneElement: html.Element,
    glassPaneElement: html.Element,
    [_rootApplicationElement]: html.Element,
    currentHtml: core.String
  }));
  dart.setLibraryUri(engine.DomRenderer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.DomRenderer, () => ({
    __proto__: dart.getFields(engine.DomRenderer.__proto__),
    [_resizeSubscription]: dart.fieldType(async.StreamSubscription$(html.Event)),
    [_styleElement]: dart.fieldType(html.StyleElement),
    [_viewportMeta]: dart.fieldType(html.MetaElement),
    [_canvasKitScript]: dart.fieldType(html.ScriptElement),
    [_sceneHostElement]: dart.fieldType(html.Element),
    [_sceneElement]: dart.fieldType(html.Element),
    [_staleHotRestartState]: dart.fieldType(core.List$(html.Element)),
    [_glassPaneElement]: dart.fieldType(html.Element),
    rootElement: dart.finalFieldType(html.Element),
    [_debugFrameStatistics]: dart.fieldType(engine.DebugDomRendererFrameStatistics)
  }));
  dart.defineLazy(engine.DomRenderer, {
    /*engine.DomRenderer.vibrateLongPress*/get vibrateLongPress() {
      return 50;
    },
    /*engine.DomRenderer.vibrateLightImpact*/get vibrateLightImpact() {
      return 10;
    },
    /*engine.DomRenderer.vibrateMediumImpact*/get vibrateMediumImpact() {
      return 20;
    },
    /*engine.DomRenderer.vibrateHeavyImpact*/get vibrateHeavyImpact() {
      return 30;
    },
    /*engine.DomRenderer.vibrateSelectionClick*/get vibrateSelectionClick() {
      return 10;
    },
    /*engine.DomRenderer._staleHotRestartStore*/get _staleHotRestartStore() {
      return "__flutter_state";
    },
    /*engine.DomRenderer.defaultFontStyle*/get defaultFontStyle() {
      return "normal";
    },
    /*engine.DomRenderer.defaultFontWeight*/get defaultFontWeight() {
      return "normal";
    },
    /*engine.DomRenderer.defaultFontSize*/get defaultFontSize() {
      return "14px";
    },
    /*engine.DomRenderer.defaultFontFamily*/get defaultFontFamily() {
      return "sans-serif";
    },
    /*engine.DomRenderer.defaultCssFont*/get defaultCssFont() {
      return "normal normal 14px sans-serif";
    }
  });
  const DebugDomRendererFrameStatistics_paragraphRulerCacheHits = dart.privateName(engine, "DebugDomRendererFrameStatistics.paragraphRulerCacheHits");
  const DebugDomRendererFrameStatistics_paragraphRulerCacheMisses = dart.privateName(engine, "DebugDomRendererFrameStatistics.paragraphRulerCacheMisses");
  const DebugDomRendererFrameStatistics_richTextLayouts = dart.privateName(engine, "DebugDomRendererFrameStatistics.richTextLayouts");
  const DebugDomRendererFrameStatistics_plainTextLayouts = dart.privateName(engine, "DebugDomRendererFrameStatistics.plainTextLayouts");
  engine.DebugDomRendererFrameStatistics = class DebugDomRendererFrameStatistics extends core.Object {
    get paragraphRulerCacheHits() {
      return this[paragraphRulerCacheHits];
    }
    set paragraphRulerCacheHits(value) {
      this[paragraphRulerCacheHits] = value;
    }
    get paragraphRulerCacheMisses() {
      return this[paragraphRulerCacheMisses];
    }
    set paragraphRulerCacheMisses(value) {
      this[paragraphRulerCacheMisses] = value;
    }
    get richTextLayouts() {
      return this[richTextLayouts];
    }
    set richTextLayouts(value) {
      this[richTextLayouts] = value;
    }
    get plainTextLayouts() {
      return this[plainTextLayouts];
    }
    set plainTextLayouts(value) {
      this[plainTextLayouts] = value;
    }
    get totalParagraphRulerAccesses() {
      return dart.notNull(this.paragraphRulerCacheHits) + dart.notNull(this.paragraphRulerCacheMisses);
    }
    toString() {
      return ("Frame statistics:\n  Paragraph ruler cache hits: " + dart.str(this.paragraphRulerCacheHits) + "\n  Paragraph ruler cache misses: " + dart.str(this.paragraphRulerCacheMisses) + "\n  Paragraph ruler accesses: " + dart.str(this.totalParagraphRulerAccesses) + "\n  Rich text layouts: " + dart.str(this.richTextLayouts) + "\n  Plain text layouts: " + dart.str(this.plainTextLayouts) + "\n")[$trim]();
    }
  };
  (engine.DebugDomRendererFrameStatistics.new = function() {
    this[paragraphRulerCacheHits] = 0;
    this[paragraphRulerCacheMisses] = 0;
    this[richTextLayouts] = 0;
    this[plainTextLayouts] = 0;
    ;
  }).prototype = engine.DebugDomRendererFrameStatistics.prototype;
  dart.addTypeTests(engine.DebugDomRendererFrameStatistics);
  const paragraphRulerCacheHits = DebugDomRendererFrameStatistics_paragraphRulerCacheHits;
  const paragraphRulerCacheMisses = DebugDomRendererFrameStatistics_paragraphRulerCacheMisses;
  const richTextLayouts = DebugDomRendererFrameStatistics_richTextLayouts;
  const plainTextLayouts = DebugDomRendererFrameStatistics_plainTextLayouts;
  dart.setGetterSignature(engine.DebugDomRendererFrameStatistics, () => ({
    __proto__: dart.getGetters(engine.DebugDomRendererFrameStatistics.__proto__),
    totalParagraphRulerAccesses: core.int
  }));
  dart.setLibraryUri(engine.DebugDomRendererFrameStatistics, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.DebugDomRendererFrameStatistics, () => ({
    __proto__: dart.getFields(engine.DebugDomRendererFrameStatistics.__proto__),
    paragraphRulerCacheHits: dart.fieldType(core.int),
    paragraphRulerCacheMisses: dart.fieldType(core.int),
    richTextLayouts: dart.fieldType(core.int),
    plainTextLayouts: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(engine.DebugDomRendererFrameStatistics, ['toString']);
  engine._SaveStackEntry = class _SaveStackEntry extends core.Object {};
  (engine._SaveStackEntry.new = function(opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let clipStack = opts && 'clipStack' in opts ? opts.clipStack : null;
    this.transform = transform;
    this.clipStack = clipStack;
    ;
  }).prototype = engine._SaveStackEntry.prototype;
  dart.addTypeTests(engine._SaveStackEntry);
  dart.setLibraryUri(engine._SaveStackEntry, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._SaveStackEntry, () => ({
    __proto__: dart.getFields(engine._SaveStackEntry.__proto__),
    transform: dart.finalFieldType(engine.Matrix4),
    clipStack: dart.finalFieldType(core.List$(engine._SaveClipEntry))
  }));
  engine._SaveClipEntry = class _SaveClipEntry extends core.Object {};
  (engine._SaveClipEntry.rect = function(rect, currentTransform) {
    this.rect = rect;
    this.currentTransform = currentTransform;
    this.rrect = null;
    this.path = null;
    ;
  }).prototype = engine._SaveClipEntry.prototype;
  (engine._SaveClipEntry.rrect = function(rrect, currentTransform) {
    this.rrect = rrect;
    this.currentTransform = currentTransform;
    this.rect = null;
    this.path = null;
    ;
  }).prototype = engine._SaveClipEntry.prototype;
  (engine._SaveClipEntry.path = function(path, currentTransform) {
    this.path = path;
    this.currentTransform = currentTransform;
    this.rect = null;
    this.rrect = null;
    ;
  }).prototype = engine._SaveClipEntry.prototype;
  dart.addTypeTests(engine._SaveClipEntry);
  dart.setLibraryUri(engine._SaveClipEntry, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._SaveClipEntry, () => ({
    __proto__: dart.getFields(engine._SaveClipEntry.__proto__),
    rect: dart.finalFieldType(ui.Rect),
    rrect: dart.finalFieldType(ui.RRect),
    path: dart.finalFieldType(ui.Path),
    currentTransform: dart.finalFieldType(engine.Matrix4)
  }));
  const _locationStrategy = dart.privateName(engine, "_locationStrategy");
  const _unsubscribe = dart.privateName(engine, "_unsubscribe");
  const _userProvidedRouteName = dart.privateName(engine, "_userProvidedRouteName");
  const _tearoffStrategy = dart.privateName(engine, "_tearoffStrategy");
  const _setupStrategy = dart.privateName(engine, "_setupStrategy");
  const _setupFlutterEntry = dart.privateName(engine, "_setupFlutterEntry");
  let C53;
  const _popStateListener = dart.privateName(engine, "_popStateListener");
  const _setupOriginEntry = dart.privateName(engine, "_setupOriginEntry");
  engine.BrowserHistory = class BrowserHistory extends core.Object {
    set locationStrategy(strategy) {
      if (!dart.equals(strategy, this[_locationStrategy])) {
        this[_tearoffStrategy](this[_locationStrategy]);
        this[_locationStrategy] = strategy;
        this[_setupStrategy](this[_locationStrategy]);
      }
    }
    get currentPath() {
      let t4, t4$;
      t4$ = (t4 = this[_locationStrategy], t4 == null ? null : t4.path);
      return t4$ == null ? "/" : t4$;
    }
    setRouteName(routeName) {
      if (this[_locationStrategy] != null) {
        this[_setupFlutterEntry](this[_locationStrategy], {replace: true, path: routeName});
      }
    }
    back() {
      if (this[_locationStrategy] != null) {
        return this[_locationStrategy].back();
      }
      return FutureOfvoid().value();
    }
    exit() {
      if (this[_locationStrategy] != null) {
        this[_tearoffStrategy](this[_locationStrategy]);
        let backFuture = this[_locationStrategy].back();
        this[_locationStrategy] = null;
        return backFuture;
      }
      return FutureOfvoid().value();
    }
    [_popStateListener](event) {
      html.PopStateEvent._check(event);
      if (dart.test(engine._isOriginEntry(event[$state]))) {
        this[_setupFlutterEntry](this[_locationStrategy]);
        ui.window.onPlatformMessage("flutter/navigation", (C53 || CT.C53).encodeMethodCall(engine._popRouteMethodCall), dart.fn(_ => {
        }, ByteDataToNull()));
      } else if (dart.test(engine._isFlutterEntry(event[$state]))) {
        if (!(this[_userProvidedRouteName] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/history.dart", 107, 14, "_userProvidedRouteName != null");
        let newRouteName = this[_userProvidedRouteName];
        this[_userProvidedRouteName] = null;
        ui.window.onPlatformMessage("flutter/navigation", (C53 || CT.C53).encodeMethodCall(new engine.MethodCall.new("pushRoute", newRouteName)), dart.fn(_ => {
        }, ByteDataToNull()));
      } else {
        this[_userProvidedRouteName] = this.currentPath;
        this[_locationStrategy].back();
      }
    }
    [_setupOriginEntry](strategy) {
      if (!(strategy != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/history.dart", 139, 12, "strategy != null");
      strategy.replaceState(engine._originState, "origin", "");
    }
    [_setupFlutterEntry](strategy, opts) {
      let replace = opts && 'replace' in opts ? opts.replace : false;
      let path = opts && 'path' in opts ? opts.path : null;
      if (!(strategy != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/history.dart", 150, 12, "strategy != null");
      path == null ? path = this.currentPath : null;
      if (dart.test(replace)) {
        strategy.replaceState(engine._flutterState, "flutter", path);
      } else {
        strategy.pushState(engine._flutterState, "flutter", path);
      }
    }
    [_setupStrategy](strategy) {
      if (strategy == null) {
        return;
      }
      let path = this.currentPath;
      if (dart.test(engine._isFlutterEntry(html.window.history[$state]))) {
      } else {
        this[_setupOriginEntry](strategy);
        this[_setupFlutterEntry](strategy, {replace: false, path: path});
      }
      this[_unsubscribe] = strategy.onPopState(EventTodynamic()._check(dart.bind(this, _popStateListener)));
    }
    [_tearoffStrategy](strategy) {
      if (strategy == null) {
        return;
      }
      if (!(this[_unsubscribe] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/history.dart", 182, 12, "_unsubscribe != null");
      this[_unsubscribe]();
      this[_unsubscribe] = null;
      strategy.back();
    }
  };
  (engine.BrowserHistory.new = function() {
    this[_locationStrategy] = null;
    this[_unsubscribe] = null;
    this[_userProvidedRouteName] = null;
    ;
  }).prototype = engine.BrowserHistory.prototype;
  dart.addTypeTests(engine.BrowserHistory);
  dart.setMethodSignature(engine.BrowserHistory, () => ({
    __proto__: dart.getMethods(engine.BrowserHistory.__proto__),
    setRouteName: dart.fnType(dart.void, [core.String]),
    back: dart.fnType(async.Future$(dart.void), []),
    exit: dart.fnType(async.Future$(dart.void), []),
    [_popStateListener]: dart.fnType(dart.void, [core.Object]),
    [_setupOriginEntry]: dart.fnType(dart.void, [engine.LocationStrategy]),
    [_setupFlutterEntry]: dart.fnType(dart.void, [engine.LocationStrategy], {path: core.String, replace: core.bool}),
    [_setupStrategy]: dart.fnType(dart.void, [engine.LocationStrategy]),
    [_tearoffStrategy]: dart.fnType(dart.void, [engine.LocationStrategy])
  }));
  dart.setGetterSignature(engine.BrowserHistory, () => ({
    __proto__: dart.getGetters(engine.BrowserHistory.__proto__),
    currentPath: core.String
  }));
  dart.setSetterSignature(engine.BrowserHistory, () => ({
    __proto__: dart.getSetters(engine.BrowserHistory.__proto__),
    locationStrategy: engine.LocationStrategy
  }));
  dart.setLibraryUri(engine.BrowserHistory, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.BrowserHistory, () => ({
    __proto__: dart.getFields(engine.BrowserHistory.__proto__),
    [_locationStrategy]: dart.fieldType(engine.LocationStrategy),
    [_unsubscribe]: dart.fieldType(dart.fnType(dart.void, [])),
    [_userProvidedRouteName]: dart.fieldType(core.String)
  }));
  const _serializedCommands = dart.privateName(engine, "_serializedCommands");
  const HoudiniCanvas_rootElement = dart.privateName(engine, "HoudiniCanvas.rootElement");
  const HoudiniCanvas_bounds = dart.privateName(engine, "HoudiniCanvas.bounds");
  const EngineCanvas_SaveElementStackTracking$36$ = class EngineCanvas_SaveElementStackTracking extends engine.EngineCanvas {};
  (EngineCanvas_SaveElementStackTracking$36$.new = function() {
    engine.SaveElementStackTracking[dart.mixinNew].call(this);
  }).prototype = EngineCanvas_SaveElementStackTracking$36$.prototype;
  dart.applyMixin(EngineCanvas_SaveElementStackTracking$36$, engine.SaveElementStackTracking);
  engine.HoudiniCanvas = class HoudiniCanvas extends EngineCanvas_SaveElementStackTracking$36$ {
    get rootElement() {
      return this[rootElement$1];
    }
    set rootElement(value) {
      super.rootElement = value;
    }
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    clear() {
      super.clear();
      this[_serializedCommands] = JSArrayOfList().of([]);
      engine.domRenderer.clearDom(this.rootElement);
    }
    apply(command) {
      if (!engine.PaintDrawParagraph.is(command) && !engine.PaintDrawImageRect.is(command) && !engine.PaintTransform.is(command)) {
        command.serializeToCssPaint(this[_serializedCommands]);
      }
      command.apply(this);
    }
    commit() {
      if (dart.test(this[_serializedCommands][$isNotEmpty])) {
        this.rootElement.style[$setProperty]("--flt", convert.json.encode(this[_serializedCommands]));
      } else {
        this.rootElement.style.removeProperty("--flt");
      }
    }
    clipRect(rect) {
      let t4;
      let clip = html.Element.tag("flt-clip-rect");
      let cssTransform = engine.matrix4ToCssTransform(engine.transformWithOffset(this.currentTransform, new ui.Offset.new(rect.left, rect.top)));
      t4 = clip.style;
      t4[$overflow] = "hidden";
      t4[$position] = "absolute";
      t4[$transform] = cssTransform;
      t4[$width] = dart.str(rect.width) + "px";
      t4[$height] = dart.str(rect.height) + "px";
      t4;
      super.translate(-dart.notNull(rect.left), -dart.notNull(rect.top));
      this.currentElement[$append](clip);
      this.pushElement(clip);
    }
    clipRRect(rrect) {
      let t4;
      let outer = rrect.outerRect;
      if (dart.test(rrect.isRect)) {
        this.clipRect(outer);
        return;
      }
      let clip = html.Element.tag("flt-clip-rrect");
      let style = clip.style;
      t4 = style;
      t4[$overflow] = "hidden";
      t4[$position] = "absolute";
      t4[$transform] = "translate(" + dart.str(outer.left) + "px, " + dart.str(outer.right) + "px)";
      t4[$width] = dart.str(outer.width) + "px";
      t4[$height] = dart.str(outer.height) + "px";
      t4;
      if (rrect.tlRadiusY == rrect.tlRadiusX) {
        style[$borderTopLeftRadius] = dart.str(rrect.tlRadiusX) + "px";
      } else {
        style[$borderTopLeftRadius] = dart.str(rrect.tlRadiusX) + "px " + dart.str(rrect.tlRadiusY) + "px";
      }
      if (rrect.trRadiusY == rrect.trRadiusX) {
        style[$borderTopRightRadius] = dart.str(rrect.trRadiusX) + "px";
      } else {
        style[$borderTopRightRadius] = dart.str(rrect.trRadiusX) + "px " + dart.str(rrect.trRadiusY) + "px";
      }
      if (rrect.brRadiusY == rrect.brRadiusX) {
        style[$borderBottomRightRadius] = dart.str(rrect.brRadiusX) + "px";
      } else {
        style[$borderBottomRightRadius] = dart.str(rrect.brRadiusX) + "px " + dart.str(rrect.brRadiusY) + "px";
      }
      if (rrect.blRadiusY == rrect.blRadiusX) {
        style[$borderBottomLeftRadius] = dart.str(rrect.blRadiusX) + "px";
      } else {
        style[$borderBottomLeftRadius] = dart.str(rrect.blRadiusX) + "px " + dart.str(rrect.blRadiusY) + "px";
      }
      super.translate(-dart.notNull(rrect.left), -dart.notNull(rrect.top));
      this.currentElement[$append](clip);
      this.pushElement(clip);
    }
    clipPath(path) {
    }
    drawColor(color, blendMode) {
    }
    drawLine(p1, p2, paint) {
    }
    drawPaint(paint) {
    }
    drawRect(rect, paint) {
    }
    drawRRect(rrect, paint) {
    }
    drawDRRect(outer, inner, paint) {
    }
    drawOval(rect, paint) {
    }
    drawCircle(c, radius, paint) {
    }
    drawPath(path, paint) {
    }
    drawShadow(path, color, elevation, transparentOccluder) {
    }
    drawImage(image, p, paint) {
    }
    drawImageRect(image, src, dst, paint) {
      let t4;
      let htmlImage = engine.HtmlImage._check(image);
      let imageBox = html.Element.tag("flt-img");
      let cssTransform = engine.matrix4ToCssTransform(engine.transformWithOffset(this.currentTransform, new ui.Offset.new(dst.left, dst.top)));
      t4 = imageBox.style;
      t4[$position] = "absolute";
      t4[$transformOrigin] = "0 0 0";
      t4[$width] = dart.str(dst.width[$toInt]()) + "px";
      t4[$height] = dart.str(dst.height[$toInt]()) + "px";
      t4[$transform] = cssTransform;
      t4[$backgroundImage] = "url(" + dart.str(htmlImage.imgElement.src) + ")";
      t4[$backgroundRepeat] = "norepeat";
      t4[$backgroundSize] = dart.str(dst.width) + "px " + dart.str(dst.height) + "px";
      t4;
      this.currentElement[$append](imageBox);
    }
    drawParagraph(paragraph, offset) {
      let paragraphElement = engine._drawParagraphElement(engine.EngineParagraph._check(paragraph), offset, {transform: this.currentTransform});
      this.currentElement[$append](paragraphElement);
    }
  };
  (engine.HoudiniCanvas.new = function(bounds) {
    let t4;
    this[rootElement$1] = html.Element.tag("flt-houdini");
    this[_serializedCommands] = JSArrayOfList().of([]);
    this[bounds$] = bounds;
    engine.HoudiniCanvas.__proto__.new.call(this);
    t4 = this.rootElement.style;
    t4[$position] = "absolute";
    t4[$top] = "0";
    t4[$left] = "0";
    t4[$width] = dart.str(this.bounds.size.width) + "px";
    t4[$height] = dart.str(this.bounds.size.height) + "px";
    t4[$backgroundImage] = "paint(flt)";
    t4;
  }).prototype = engine.HoudiniCanvas.prototype;
  dart.addTypeTests(engine.HoudiniCanvas);
  const rootElement$1 = HoudiniCanvas_rootElement;
  const bounds$ = HoudiniCanvas_bounds;
  dart.setMethodSignature(engine.HoudiniCanvas, () => ({
    __proto__: dart.getMethods(engine.HoudiniCanvas.__proto__),
    apply: dart.fnType(dart.void, [engine.PaintCommand]),
    commit: dart.fnType(dart.void, []),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    clipRRect: dart.fnType(dart.void, [ui.RRect]),
    clipPath: dart.fnType(dart.void, [ui.Path]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.PaintData]),
    drawPaint: dart.fnType(dart.void, [ui.PaintData]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.PaintData]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.PaintData]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.PaintData]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.PaintData]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.PaintData]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.PaintData]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset])
  }));
  dart.setLibraryUri(engine.HoudiniCanvas, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.HoudiniCanvas, () => ({
    __proto__: dart.getFields(engine.HoudiniCanvas.__proto__),
    rootElement: dart.finalFieldType(html.Element),
    bounds: dart.finalFieldType(ui.Rect),
    [_serializedCommands]: dart.fieldType(core.List$(core.List))
  }));
  engine._SaveElementStackEntry = class _SaveElementStackEntry extends core.Object {};
  (engine._SaveElementStackEntry.new = function(opts) {
    let savedElement = opts && 'savedElement' in opts ? opts.savedElement : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this.savedElement = savedElement;
    this.transform = transform;
    ;
  }).prototype = engine._SaveElementStackEntry.prototype;
  dart.addTypeTests(engine._SaveElementStackEntry);
  dart.setLibraryUri(engine._SaveElementStackEntry, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._SaveElementStackEntry, () => ({
    __proto__: dart.getFields(engine._SaveElementStackEntry.__proto__),
    savedElement: dart.finalFieldType(html.Element),
    transform: dart.finalFieldType(engine.Matrix4)
  }));
  const HtmlCodec_src = dart.privateName(engine, "HtmlCodec.src");
  engine.HtmlCodec = class HtmlCodec extends core.Object {
    get src() {
      return this[src$];
    }
    set src(value) {
      super.src = value;
    }
    get frameCount() {
      return 1;
    }
    get repetitionCount() {
      return 0;
    }
    getNextFrame() {
      return async.async(ui.FrameInfo, (function* getNextFrame() {
        let loadSubscription = null;
        let errorSubscription = null;
        let completer = CompleterOfFrameInfo().new();
        let imgElement = html.ImageElement.new();
        if (!dart.test(engine._supportsDecode)) {
          loadSubscription = imgElement[$onLoad].listen(dart.fn(event => {
            loadSubscription.cancel();
            errorSubscription.cancel();
            let image = new engine.HtmlImage.new(imgElement, imgElement.naturalWidth, imgElement.naturalHeight);
            completer.complete(new engine.SingleFrameInfo.new(image));
          }, EventToNull()));
        }
        errorSubscription = imgElement[$onError].listen(dart.fn(event => {
          let t4;
          t4 = loadSubscription;
          t4 == null ? null : t4.cancel();
          errorSubscription.cancel();
          completer.completeError(event);
        }, EventToNull()));
        imgElement.src = this.src;
        if (dart.test(engine._supportsDecode)) {
          imgElement[$decode]().then(core.Null, dart.fn(_ => {
            errorSubscription.cancel();
            let image = new engine.HtmlImage.new(imgElement, imgElement.naturalWidth, imgElement.naturalHeight);
            completer.complete(new engine.SingleFrameInfo.new(image));
          }, dynamicToNull()));
        }
        return completer.future;
      }).bind(this));
    }
    dispose() {
    }
    [_getNextFrame$](callback) {
      return core.String._check(this[$noSuchMethod](new core._Invocation.method(C16 || CT.C16, null, [callback])));
    }
  };
  (engine.HtmlCodec.new = function(src) {
    this[src$] = src;
    ;
  }).prototype = engine.HtmlCodec.prototype;
  dart.addTypeTests(engine.HtmlCodec);
  const src$ = HtmlCodec_src;
  engine.HtmlCodec[dart.implements] = () => [ui.Codec];
  dart.setMethodSignature(engine.HtmlCodec, () => ({
    __proto__: dart.getMethods(engine.HtmlCodec.__proto__),
    getNextFrame: dart.fnType(async.Future$(ui.FrameInfo), []),
    dispose: dart.fnType(dart.void, []),
    [_getNextFrame$]: dart.fnType(core.String, [dart.fnType(dart.void, [ui.FrameInfo])])
  }));
  dart.setGetterSignature(engine.HtmlCodec, () => ({
    __proto__: dart.getGetters(engine.HtmlCodec.__proto__),
    frameCount: core.int,
    repetitionCount: core.int
  }));
  dart.setLibraryUri(engine.HtmlCodec, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.HtmlCodec, () => ({
    __proto__: dart.getFields(engine.HtmlCodec.__proto__),
    src: dart.finalFieldType(core.String)
  }));
  const HtmlBlobCodec_blob = dart.privateName(engine, "HtmlBlobCodec.blob");
  engine.HtmlBlobCodec = class HtmlBlobCodec extends engine.HtmlCodec {
    get blob() {
      return this[blob$];
    }
    set blob(value) {
      super.blob = value;
    }
    dispose() {
      html.Url.revokeObjectUrl(this.src);
    }
  };
  (engine.HtmlBlobCodec.new = function(blob) {
    this[blob$] = blob;
    engine.HtmlBlobCodec.__proto__.new.call(this, html.Url.createObjectUrlFromBlob(blob));
    ;
  }).prototype = engine.HtmlBlobCodec.prototype;
  dart.addTypeTests(engine.HtmlBlobCodec);
  const blob$ = HtmlBlobCodec_blob;
  dart.setLibraryUri(engine.HtmlBlobCodec, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.HtmlBlobCodec, () => ({
    __proto__: dart.getFields(engine.HtmlBlobCodec.__proto__),
    blob: dart.finalFieldType(html.Blob)
  }));
  let C54;
  const _durationMillis = dart.privateName(engine, "_durationMillis");
  let C55;
  const _durationMillis$ = dart.privateName(ui, "_durationMillis");
  const SingleFrameInfo_image = dart.privateName(engine, "SingleFrameInfo.image");
  engine.SingleFrameInfo = class SingleFrameInfo extends core.Object {
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get duration() {
      return C54 || CT.C54;
    }
    get [_durationMillis$]() {
      return core.int._check(this[$noSuchMethod](new core._Invocation.getter(C55 || CT.C55)));
    }
  };
  (engine.SingleFrameInfo.new = function(image) {
    this[image$] = image;
    ;
  }).prototype = engine.SingleFrameInfo.prototype;
  dart.addTypeTests(engine.SingleFrameInfo);
  const image$ = SingleFrameInfo_image;
  engine.SingleFrameInfo[dart.implements] = () => [ui.FrameInfo];
  dart.setGetterSignature(engine.SingleFrameInfo, () => ({
    __proto__: dart.getGetters(engine.SingleFrameInfo.__proto__),
    duration: core.Duration,
    [_durationMillis$]: core.int
  }));
  dart.setLibraryUri(engine.SingleFrameInfo, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SingleFrameInfo, () => ({
    __proto__: dart.getFields(engine.SingleFrameInfo.__proto__),
    image: dart.finalFieldType(ui.Image)
  }));
  const HtmlImage_imgElement = dart.privateName(engine, "HtmlImage.imgElement");
  const HtmlImage_width = dart.privateName(engine, "HtmlImage.width");
  const HtmlImage_height = dart.privateName(engine, "HtmlImage.height");
  engine.HtmlImage = class HtmlImage extends core.Object {
    get imgElement() {
      return this[imgElement$];
    }
    set imgElement(value) {
      super.imgElement = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    dispose() {
    }
    toByteData(opts) {
      let format = opts && 'format' in opts ? opts.format : C15 || CT.C15;
      return engine.futurize(typed_data.ByteData, dart.fn(callback => this[_toByteData](format.index, dart.fn(encoded => {
        let t4, t4$;
        callback((t4$ = (t4 = encoded, t4 == null ? null : t4[$buffer]), t4$ == null ? null : t4$[$asByteData]()));
      }, Uint8ListToNull())), FnToString()));
    }
    [_toByteData](format, callback) {
      return null;
    }
  };
  (engine.HtmlImage.new = function(imgElement, width, height) {
    this[imgElement$] = imgElement;
    this[width$] = width;
    this[height$] = height;
    ;
  }).prototype = engine.HtmlImage.prototype;
  dart.addTypeTests(engine.HtmlImage);
  const imgElement$ = HtmlImage_imgElement;
  const width$ = HtmlImage_width;
  const height$ = HtmlImage_height;
  engine.HtmlImage[dart.implements] = () => [ui.Image];
  dart.setMethodSignature(engine.HtmlImage, () => ({
    __proto__: dart.getMethods(engine.HtmlImage.__proto__),
    dispose: dart.fnType(dart.void, []),
    toByteData: dart.fnType(async.Future$(typed_data.ByteData), [], {format: ui.ImageByteFormat}),
    [_toByteData]: dart.fnType(core.String, [core.int, dart.fnType(dart.void, [typed_data.Uint8List])])
  }));
  dart.setLibraryUri(engine.HtmlImage, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.HtmlImage, () => ({
    __proto__: dart.getFields(engine.HtmlImage.__proto__),
    imgElement: dart.finalFieldType(html.ImageElement),
    width: dart.finalFieldType(core.int),
    height: dart.finalFieldType(core.int)
  }));
  const _keydownListener = dart.privateName(engine, "_keydownListener");
  const _keyupListener = dart.privateName(engine, "_keyupListener");
  const _handleHtmlEvent = dart.privateName(engine, "_handleHtmlEvent");
  let C56;
  let C57;
  engine.Keyboard = class Keyboard extends core.Object {
    static initialize() {
      engine.Keyboard._instance == null ? engine.Keyboard._instance = new engine.Keyboard.__() : null;
    }
    static get instance() {
      return engine.Keyboard._instance;
    }
    dispose() {
      html.window[$removeEventListener]("keydown", this[_keydownListener]);
      html.window[$removeEventListener]("keyup", this[_keyupListener]);
      this[_keydownListener] = null;
      this[_keyupListener] = null;
      engine.Keyboard._instance = null;
    }
    [_handleHtmlEvent](event) {
      let eventData = new (IdentityMapOfString$dynamic()).from(["type", event.type, "keymap", "android", "keyCode", event.keyCode]);
      if (event.key[$codeUnits][$length] === 1) {
        eventData[$_set]("codePoint", event.key[$codeUnits][$first]);
      }
      ui.window.onPlatformMessage("flutter/keyevent", engine.Keyboard._messageCodec.encodeMessage(eventData), C56 || CT.C56);
    }
  };
  (engine.Keyboard.__ = function() {
    this[_keydownListener] = null;
    this[_keyupListener] = null;
    this[_keydownListener] = dart.fn(event => {
      this[_handleHtmlEvent](html.KeyboardEvent._check(event));
    }, EventToNull());
    html.window[$addEventListener]("keydown", this[_keydownListener]);
    this[_keyupListener] = dart.fn(event => {
      this[_handleHtmlEvent](html.KeyboardEvent._check(event));
    }, EventToNull());
    html.window[$addEventListener]("keyup", this[_keyupListener]);
    engine.registerHotRestartListener(dart.fn(() => {
      this.dispose();
    }, VoidToNull()));
  }).prototype = engine.Keyboard.prototype;
  dart.addTypeTests(engine.Keyboard);
  dart.setMethodSignature(engine.Keyboard, () => ({
    __proto__: dart.getMethods(engine.Keyboard.__proto__),
    dispose: dart.fnType(dart.void, []),
    [_handleHtmlEvent]: dart.fnType(dart.void, [html.KeyboardEvent])
  }));
  dart.setLibraryUri(engine.Keyboard, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Keyboard, () => ({
    __proto__: dart.getFields(engine.Keyboard.__proto__),
    [_keydownListener]: dart.fieldType(dart.fnType(dart.dynamic, [html.Event])),
    [_keyupListener]: dart.fieldType(dart.fnType(dart.dynamic, [html.Event]))
  }));
  dart.defineLazy(engine.Keyboard, {
    /*engine.Keyboard._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*engine.Keyboard._messageCodec*/get _messageCodec() {
      return C57 || CT.C57;
    }
  });
  engine._LogMessage = class _LogMessage extends core.Object {
    toString() {
      if (this.duplicateCount === 1) {
        return this.message;
      }
      return dart.str(this.duplicateCount) + "x " + dart.str(this.message);
    }
  };
  (engine._LogMessage.new = function(message) {
    this.duplicateCount = 1;
    this.message = message;
    ;
  }).prototype = engine._LogMessage.prototype;
  dart.addTypeTests(engine._LogMessage);
  dart.setLibraryUri(engine._LogMessage, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._LogMessage, () => ({
    __proto__: dart.getFields(engine._LogMessage.__proto__),
    duplicateCount: dart.fieldType(core.int),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine._LogMessage, ['toString']);
  const _registeredFactories = dart.privateName(engine, "_registeredFactories");
  const _createdViews = dart.privateName(engine, "_createdViews");
  engine.PlatformViewRegistry = class PlatformViewRegistry extends core.Object {
    registerViewFactory(viewTypeId, factory) {
      if (dart.test(this[_registeredFactories][$containsKey](viewTypeId))) {
        return false;
      }
      this[_registeredFactories][$_set](viewTypeId, factory);
      return true;
    }
    getCreatedView(id) {
      return this[_createdViews][$_get](id);
    }
  };
  (engine.PlatformViewRegistry.__ = function() {
    this[_registeredFactories] = new (IdentityMapOfString$intToElement()).new();
    this[_createdViews] = new (IdentityMapOfint$Element()).new();
    ;
  }).prototype = engine.PlatformViewRegistry.prototype;
  dart.addTypeTests(engine.PlatformViewRegistry);
  dart.setMethodSignature(engine.PlatformViewRegistry, () => ({
    __proto__: dart.getMethods(engine.PlatformViewRegistry.__proto__),
    registerViewFactory: dart.fnType(core.bool, [core.String, dart.fnType(html.Element, [core.int])]),
    getCreatedView: dart.fnType(html.Element, [core.int])
  }));
  dart.setLibraryUri(engine.PlatformViewRegistry, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PlatformViewRegistry, () => ({
    __proto__: dart.getFields(engine.PlatformViewRegistry.__proto__),
    [_registeredFactories]: dart.finalFieldType(core.Map$(core.String, dart.fnType(html.Element, [core.int]))),
    [_createdViews]: dart.finalFieldType(core.Map$(core.int, html.Element))
  }));
  const _activePointerIds = dart.privateName(engine, "_activePointerIds");
  const _detector = dart.privateName(engine, "_detector");
  const _adapter = dart.privateName(engine, "_adapter");
  let C58;
  const _createAdapter = dart.privateName(engine, "_createAdapter");
  const _onPointerData = dart.privateName(engine, "_onPointerData");
  const PointerBinding_domRenderer = dart.privateName(engine, "PointerBinding.domRenderer");
  engine.PointerBinding = class PointerBinding extends core.Object {
    get domRenderer() {
      return this[domRenderer$];
    }
    set domRenderer(value) {
      super.domRenderer = value;
    }
    static get instance() {
      return engine.PointerBinding._instance;
    }
    debugOverrideDetector(newDetector) {
      let t4;
      newDetector == null ? newDetector = C58 || CT.C58 : null;
      if (!dart.equals(newDetector, this[_detector])) {
        this[_detector] = newDetector;
        t4 = this[_adapter];
        t4 == null ? null : t4.clearListeners();
        this[_adapter] = this[_createAdapter]();
      }
    }
    [_createAdapter]() {
      if (dart.test(this[_detector].hasPointerEvents)) {
        return new engine.PointerAdapter.new(dart.bind(this, _onPointerData), this.domRenderer);
      }
      if (dart.test(this[_detector].hasTouchEvents)) {
        return new engine.TouchAdapter.new(dart.bind(this, _onPointerData), this.domRenderer);
      }
      if (dart.test(this[_detector].hasMouseEvents)) {
        return new engine.MouseAdapter.new(dart.bind(this, _onPointerData), this.domRenderer);
      }
      return null;
    }
    [_onPointerData](data) {
      let t4;
      let packet = new ui.PointerDataPacket.new({data: data});
      t4 = ui.window;
      t4 == null ? null : t4.onPointerDataPacket(packet);
    }
  };
  (engine.PointerBinding.new = function(domRenderer) {
    this[_activePointerIds] = LinkedHashSetOfint().new();
    this[_detector] = null;
    this[_adapter] = null;
    this[domRenderer$] = domRenderer;
    if (engine.PointerBinding._instance == null) {
      engine.PointerBinding._instance = this;
      this[_detector] = C58 || CT.C58;
      this[_adapter] = this[_createAdapter]();
    }
    if (!dart.test(dart.fn(() => {
      engine.registerHotRestartListener(dart.fn(() => {
        let t4;
        t4 = this[_adapter];
        t4 == null ? null : t4.clearListeners();
        this[_activePointerIds].clear();
      }, VoidToNull()));
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/pointer_binding.dart", 30, 12, "() {\r\n      registerHotRestartListener(() {\r\n        _adapter?.clearListeners();\r\n        _activePointerIds.clear();\r\n      });\r\n      return true;\r\n    }()");
  }).prototype = engine.PointerBinding.prototype;
  dart.addTypeTests(engine.PointerBinding);
  const domRenderer$ = PointerBinding_domRenderer;
  dart.setMethodSignature(engine.PointerBinding, () => ({
    __proto__: dart.getMethods(engine.PointerBinding.__proto__),
    debugOverrideDetector: dart.fnType(dart.void, [engine.PointerSupportDetector]),
    [_createAdapter]: dart.fnType(engine.BaseAdapter, []),
    [_onPointerData]: dart.fnType(dart.void, [core.List$(ui.PointerData)])
  }));
  dart.setLibraryUri(engine.PointerBinding, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PointerBinding, () => ({
    __proto__: dart.getFields(engine.PointerBinding.__proto__),
    [_activePointerIds]: dart.fieldType(core.Set$(core.int)),
    domRenderer: dart.finalFieldType(engine.DomRenderer),
    [_detector]: dart.fieldType(engine.PointerSupportDetector),
    [_adapter]: dart.fieldType(engine.BaseAdapter)
  }));
  dart.defineLazy(engine.PointerBinding, {
    /*engine.PointerBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  engine.PointerSupportDetector = class PointerSupportDetector extends core.Object {
    get hasPointerEvents() {
      return core.bool._check(js_util.hasProperty(html.window, "PointerEvent"));
    }
    get hasTouchEvents() {
      return core.bool._check(js_util.hasProperty(html.window, "TouchEvent"));
    }
    get hasMouseEvents() {
      return core.bool._check(js_util.hasProperty(html.window, "MouseEvent"));
    }
    toString() {
      return "pointers:" + dart.str(this.hasPointerEvents) + ", touch:" + dart.str(this.hasTouchEvents) + ", mouse:" + dart.str(this.hasMouseEvents);
    }
  };
  (engine.PointerSupportDetector.new = function() {
    ;
  }).prototype = engine.PointerSupportDetector.prototype;
  dart.addTypeTests(engine.PointerSupportDetector);
  dart.setGetterSignature(engine.PointerSupportDetector, () => ({
    __proto__: dart.getGetters(engine.PointerSupportDetector.__proto__),
    hasPointerEvents: core.bool,
    hasTouchEvents: core.bool,
    hasMouseEvents: core.bool
  }));
  dart.setLibraryUri(engine.PointerSupportDetector, "package:flutter_web_ui/src/engine.dart");
  dart.defineExtensionMethods(engine.PointerSupportDetector, ['toString']);
  const _isDownMap = dart.privateName(engine, "_isDownMap");
  const _callback$ = dart.privateName(engine, "_callback");
  const _setup = dart.privateName(engine, "_setup");
  const _isButtonDown = dart.privateName(engine, "_isButtonDown");
  const _updateButtonDownState = dart.privateName(engine, "_updateButtonDownState");
  const _addEventListener = dart.privateName(engine, "_addEventListener");
  const BaseAdapter_domRenderer = dart.privateName(engine, "BaseAdapter.domRenderer");
  engine.BaseAdapter = class BaseAdapter extends core.Object {
    get domRenderer() {
      return this[domRenderer$0];
    }
    set domRenderer(value) {
      super.domRenderer = value;
    }
    [_isButtonDown](button) {
      return dart.equals(this[_isDownMap][$_get](button), true);
    }
    [_updateButtonDownState](button, value) {
      this[_isDownMap][$_set](button, value);
    }
    clearListeners() {
      let glassPane = this.domRenderer.glassPaneElement;
      engine.BaseAdapter._listeners[$forEach](dart.fn((eventName, listener) => {
        glassPane[$removeEventListener](eventName, listener);
      }, StringAndFnToNull()));
      engine.BaseAdapter._listeners[$clear]();
    }
    [_addEventListener](eventName, handler) {
      let loggedHandler = dart.fn(event => {
        if (false) {
          core.print(event.type);
        }
        if (dart.test(engine.EngineSemanticsOwner.instance.receiveGlobalEvent(event))) {
          handler(event);
        }
      }, EventToNull());
      engine.BaseAdapter._listeners[$_set](eventName, loggedHandler);
      this.domRenderer.glassPaneElement[$addEventListener](eventName, loggedHandler, true);
    }
  };
  (engine.BaseAdapter.new = function(_callback, domRenderer) {
    this[_isDownMap] = new (IdentityMapOfint$bool()).new();
    this[_callback$] = _callback;
    this[domRenderer$0] = domRenderer;
    this[_setup]();
  }).prototype = engine.BaseAdapter.prototype;
  dart.addTypeTests(engine.BaseAdapter);
  const domRenderer$0 = BaseAdapter_domRenderer;
  dart.setMethodSignature(engine.BaseAdapter, () => ({
    __proto__: dart.getMethods(engine.BaseAdapter.__proto__),
    [_isButtonDown]: dart.fnType(core.bool, [core.int]),
    [_updateButtonDownState]: dart.fnType(dart.void, [core.int, core.bool]),
    clearListeners: dart.fnType(dart.void, []),
    [_addEventListener]: dart.fnType(dart.void, [core.String, dart.fnType(dart.dynamic, [html.Event])])
  }));
  dart.setLibraryUri(engine.BaseAdapter, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.BaseAdapter, () => ({
    __proto__: dart.getFields(engine.BaseAdapter.__proto__),
    domRenderer: dart.finalFieldType(engine.DomRenderer),
    [_callback$]: dart.fieldType(dart.fnType(dart.void, [core.List$(ui.PointerData)])),
    [_isDownMap]: dart.fieldType(core.Map$(core.int, core.bool))
  }));
  dart.defineLazy(engine.BaseAdapter, {
    /*engine.BaseAdapter._listeners*/get _listeners() {
      return new (IdentityMapOfString$EventTodynamic()).new();
    }
  });
  const _convertEventToPointerData = dart.privateName(engine, "_convertEventToPointerData");
  const _expandEvents = dart.privateName(engine, "_expandEvents");
  const _pointerTypeToDeviceKind = dart.privateName(engine, "_pointerTypeToDeviceKind");
  const _computeHighestTilt = dart.privateName(engine, "_computeHighestTilt");
  engine.PointerAdapter = class PointerAdapter extends engine.BaseAdapter {
    [_setup]() {
      this[_addEventListener]("pointerdown", dart.fn(event => {
        let pointerButton = engine._pointerButtonFromHtmlEvent(event);
        if (dart.test(this[_isButtonDown](pointerButton))) {
          this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.PointerEvent._check(event)));
        }
        this[_updateButtonDownState](pointerButton, true);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.down, html.PointerEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("pointermove", dart.fn(event => {
        let pointerEvent = html.PointerEvent._check(event);
        let pointerButton = engine._pointerButtonFromHtmlEvent(pointerEvent);
        let data = this[_convertEventToPointerData](dart.test(this[_isButtonDown](pointerButton)) ? ui.PointerChange.move : ui.PointerChange.hover, pointerEvent);
        engine._ensureMouseDeviceAdded(data, pointerEvent[$client].x, pointerEvent[$client].y, pointerEvent.buttons, pointerEvent.timeStamp, pointerEvent.pointerId);
        this[_callback$](data);
      }, EventToNull()));
      this[_addEventListener]("pointerup", dart.fn(event => {
        let pointerButton = engine._pointerButtonFromHtmlEvent(event);
        if (!dart.test(this[_isButtonDown](pointerButton))) {
          return;
        }
        this[_updateButtonDownState](pointerButton, false);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.PointerEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("pointercancel", dart.fn(event => {
        let pointerButton = engine._pointerButtonFromHtmlEvent(event);
        this[_updateButtonDownState](pointerButton, false);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.cancel, html.PointerEvent._check(event)));
      }, EventToNull()));
      engine._addWheelEventListener(dart.fn(event => {
        if (false) {
          core.print(event.type);
        }
        this[_callback$](engine._convertWheelEventToPointerData(event));
        event.preventDefault();
      }, WheelEventToNull()));
    }
    [_convertEventToPointerData](change, evt) {
      let allEvents = this[_expandEvents](evt);
      let data = JSArrayOfPointerData().of([]);
      for (let i = 0; i < dart.notNull(allEvents[$length]); i = i + 1) {
        let event = allEvents[$_get](i);
        data[$add](new ui.PointerData.new({change: change, timeStamp: engine._eventTimeStampToDuration(event.timeStamp), kind: this[_pointerTypeToDeviceKind](event.pointerType), device: event.pointerId, physicalX: event[$client].x, physicalY: event[$client].y, buttons: event.buttons, pressure: event.pressure, pressureMin: 0.0, pressureMax: 1.0, tilt: this[_computeHighestTilt](event)}));
      }
      return data;
    }
    [_expandEvents](event) {
      if (dart.dtest(js_util.hasProperty(event, "getCoalescedEvents"))) {
        let coalescedEvents = event.getCoalescedEvents();
        if (dart.test(coalescedEvents[$isNotEmpty])) {
          return coalescedEvents;
        }
      }
      return JSArrayOfPointerEvent().of([event]);
    }
    [_pointerTypeToDeviceKind](pointerType) {
      switch (pointerType) {
        case "mouse":
        {
          return ui.PointerDeviceKind.mouse;
        }
        case "pen":
        {
          return ui.PointerDeviceKind.stylus;
        }
        case "touch":
        {
          return ui.PointerDeviceKind.touch;
        }
        default:
        {
          return ui.PointerDeviceKind.unknown;
        }
      }
    }
    [_computeHighestTilt](e) {
      return (e.tiltX[$abs]() > e.tiltY[$abs]() ? e.tiltX : e.tiltY)[$toDouble]() / 180.0 * 3.141592653589793;
    }
  };
  (engine.PointerAdapter.new = function(callback, domRenderer) {
    engine.PointerAdapter.__proto__.new.call(this, callback, domRenderer);
    ;
  }).prototype = engine.PointerAdapter.prototype;
  dart.addTypeTests(engine.PointerAdapter);
  dart.setMethodSignature(engine.PointerAdapter, () => ({
    __proto__: dart.getMethods(engine.PointerAdapter.__proto__),
    [_setup]: dart.fnType(dart.void, []),
    [_convertEventToPointerData]: dart.fnType(core.List$(ui.PointerData), [ui.PointerChange, html.PointerEvent]),
    [_expandEvents]: dart.fnType(core.List$(html.PointerEvent), [html.PointerEvent]),
    [_pointerTypeToDeviceKind]: dart.fnType(ui.PointerDeviceKind, [core.String]),
    [_computeHighestTilt]: dart.fnType(core.double, [html.PointerEvent])
  }));
  dart.setLibraryUri(engine.PointerAdapter, "package:flutter_web_ui/src/engine.dart");
  engine.TouchAdapter = class TouchAdapter extends engine.BaseAdapter {
    [_setup]() {
      this[_addEventListener]("touchstart", dart.fn(event => {
        this[_updateButtonDownState](1, true);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.down, html.TouchEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("touchmove", dart.fn(event => {
        event.preventDefault();
        if (!dart.test(this[_isButtonDown](1))) {
          return;
        }
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.move, html.TouchEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("touchend", dart.fn(event => {
        event.preventDefault();
        this[_updateButtonDownState](1, false);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.TouchEvent._check(event)));
        if (dart.test(engine.textEditing.needsKeyboard) && dart.equals(engine.browserEngine, engine.BrowserEngine.webkit) && dart.equals(engine.operatingSystem, engine.OperatingSystem.iOs)) {
          engine.textEditing.editingElement.configureInputElementForIOS();
        }
      }, EventToNull()));
      this[_addEventListener]("touchcancel", dart.fn(event => {
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.cancel, html.TouchEvent._check(event)));
      }, EventToNull()));
    }
    [_convertEventToPointerData](change, event) {
      let touches = event.changedTouches;
      let data = ListOfPointerData().new(touches[$length]);
      let len = touches[$length];
      for (let i = 0; i < dart.notNull(len); i = i + 1) {
        let touch = touches[$_get](i);
        data[$_set](i, new ui.PointerData.new({change: change, timeStamp: engine._eventTimeStampToDuration(event.timeStamp), kind: ui.PointerDeviceKind.touch, signalKind: ui.PointerSignalKind.none, device: touch.identifier, physicalX: touch[$client].x, physicalY: touch[$client].y, pressure: 1.0, pressureMin: 0.0, pressureMax: 1.0}));
      }
      return data;
    }
  };
  (engine.TouchAdapter.new = function(callback, domRenderer) {
    engine.TouchAdapter.__proto__.new.call(this, callback, domRenderer);
    ;
  }).prototype = engine.TouchAdapter.prototype;
  dart.addTypeTests(engine.TouchAdapter);
  dart.setMethodSignature(engine.TouchAdapter, () => ({
    __proto__: dart.getMethods(engine.TouchAdapter.__proto__),
    [_setup]: dart.fnType(dart.void, []),
    [_convertEventToPointerData]: dart.fnType(core.List$(ui.PointerData), [ui.PointerChange, html.TouchEvent])
  }));
  dart.setLibraryUri(engine.TouchAdapter, "package:flutter_web_ui/src/engine.dart");
  engine.MouseAdapter = class MouseAdapter extends engine.BaseAdapter {
    [_setup]() {
      this[_addEventListener]("mousedown", dart.fn(event => {
        let pointerButton = engine._pointerButtonFromHtmlEvent(event);
        if (dart.test(this[_isButtonDown](pointerButton))) {
          this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.MouseEvent._check(event)));
        }
        this[_updateButtonDownState](pointerButton, true);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.down, html.MouseEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("mousemove", dart.fn(event => {
        let pointerButton = engine._pointerButtonFromHtmlEvent(event);
        let data = this[_convertEventToPointerData](dart.test(this[_isButtonDown](pointerButton)) ? ui.PointerChange.move : ui.PointerChange.hover, html.MouseEvent._check(event));
        this[_callback$](data);
      }, EventToNull()));
      this[_addEventListener]("mouseup", dart.fn(event => {
        this[_updateButtonDownState](engine._pointerButtonFromHtmlEvent(event), false);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.MouseEvent._check(event)));
      }, EventToNull()));
      engine._addWheelEventListener(dart.fn(event => {
        if (false) {
          core.print(event.type);
        }
        this[_callback$](engine._convertWheelEventToPointerData(event));
        event.preventDefault();
      }, WheelEventToNull()));
    }
    [_convertEventToPointerData](change, event) {
      let data = JSArrayOfPointerData().of([]);
      if (event.type === "mousemove") {
        engine._ensureMouseDeviceAdded(data, event[$client].x, event[$client].y, event.buttons, event.timeStamp, -1);
      }
      data[$add](new ui.PointerData.new({change: change, timeStamp: engine._eventTimeStampToDuration(event.timeStamp), kind: ui.PointerDeviceKind.mouse, signalKind: ui.PointerSignalKind.none, device: -1, physicalX: event[$client].x, physicalY: event[$client].y, buttons: event.buttons, pressure: 1.0, pressureMin: 0.0, pressureMax: 1.0}));
      return data;
    }
  };
  (engine.MouseAdapter.new = function(callback, domRenderer) {
    engine.MouseAdapter.__proto__.new.call(this, callback, domRenderer);
    ;
  }).prototype = engine.MouseAdapter.prototype;
  dart.addTypeTests(engine.MouseAdapter);
  dart.setMethodSignature(engine.MouseAdapter, () => ({
    __proto__: dart.getMethods(engine.MouseAdapter.__proto__),
    [_setup]: dart.fnType(dart.void, []),
    [_convertEventToPointerData]: dart.fnType(core.List$(ui.PointerData), [ui.PointerChange, html.MouseEvent])
  }));
  dart.setLibraryUri(engine.MouseAdapter, "package:flutter_web_ui/src/engine.dart");
  let C59;
  let C60;
  let C61;
  const RecordingCanvas_saveCount = dart.privateName(engine, "RecordingCanvas.saveCount");
  engine.RecordingCanvas = class RecordingCanvas extends core.Object {
    get saveCount() {
      return this[saveCount$];
    }
    set saveCount(value) {
      this[saveCount$] = value;
    }
    get hasArbitraryPaint() {
      return this[_hasArbitraryPaint];
    }
    debugEnforceArbitraryPaint() {
      this[_hasArbitraryPaint] = true;
    }
    get didDraw() {
      return this[_didDraw];
    }
    computePaintBounds() {
      return this[_paintBounds].computeBounds();
    }
    apply(engineCanvas) {
      if (false) {
        let debugBuf = new core.StringBuffer.new();
        debugBuf.writeln("--- Applying RecordingCanvas to " + dart.str(dart.runtimeType(engineCanvas)) + " " + "with bounds " + dart.str(this[_paintBounds]));
        for (let i = 0; i < dart.notNull(this[_commands][$length]); i = i + 1) {
          let command = this[_commands][$_get](i);
          debugBuf.writeln("ctx." + dart.str(command) + ";");
          command.apply(engineCanvas);
        }
        debugBuf.writeln("--- End of command stream");
        core.print(debugBuf);
      } else {
        try {
          for (let i = 0; i < dart.notNull(this[_commands][$length]); i = i + 1) {
            this[_commands][$_get](i).apply(engineCanvas);
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (!dart.test(engine._isNsErrorFailureException(e))) {
            dart.rethrow(e$);
          }
        }
      }
    }
    debugPrintCommands() {
      if (dart.test(engine.assertionsEnabled)) {
        let debugBuf = new core.StringBuffer.new();
        for (let i = 0; i < dart.notNull(this[_commands][$length]); i = i + 1) {
          let command = this[_commands][$_get](i);
          debugBuf.writeln("ctx." + dart.str(command) + ";");
        }
        return debugBuf.toString();
      }
      return null;
    }
    save() {
      this[_paintBounds].saveTransformsAndClip();
      this[_commands][$add](C59 || CT.C59);
      this.saveCount = dart.notNull(this.saveCount) + 1;
    }
    saveLayerWithoutBounds(paint) {
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](C59 || CT.C59);
      this[_paintBounds].saveTransformsAndClip();
      this.saveCount = dart.notNull(this.saveCount) + 1;
    }
    saveLayer(bounds, paint) {
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](C59 || CT.C59);
      this[_paintBounds].saveTransformsAndClip();
      this.saveCount = dart.notNull(this.saveCount) + 1;
    }
    restore() {
      this[_paintBounds].restoreTransformsAndClip();
      if (dart.test(this[_commands][$isNotEmpty]) && engine.PaintSave.is(this[_commands][$last])) {
        this[_commands][$removeLast]();
      } else {
        this[_commands][$add](C60 || CT.C60);
      }
      this.saveCount = dart.notNull(this.saveCount) - 1;
    }
    translate(dx, dy) {
      this[_paintBounds].translate(dx, dy);
      this[_commands][$add](new engine.PaintTranslate.new(dx, dy));
    }
    scale(sx, sy) {
      this[_paintBounds].scale(sx, sy);
      this[_commands][$add](new engine.PaintScale.new(sx, sy));
    }
    rotate(radians) {
      this[_paintBounds].rotateZ(radians);
      this[_commands][$add](new engine.PaintRotate.new(radians));
    }
    transform(matrix4) {
      this[_paintBounds].transform(matrix4);
      this[_commands][$add](new engine.PaintTransform.new(matrix4));
    }
    skew(sx, sy) {
      this[_hasArbitraryPaint] = true;
      this[_paintBounds].skew(sx, sy);
      this[_commands][$add](new engine.PaintSkew.new(sx, sy));
    }
    clipRect(rect) {
      this[_paintBounds].clipRect(rect);
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](new engine.PaintClipRect.new(rect));
    }
    clipRRect(rrect) {
      this[_paintBounds].clipRect(rrect.outerRect);
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](new engine.PaintClipRRect.new(rrect));
    }
    clipPath(path, opts) {
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      this[_paintBounds].clipRect(path.getBounds());
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](new engine.PaintClipPath.new(path));
    }
    drawColor(color, blendMode) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      this[_paintBounds].grow(this[_paintBounds].maxPaintBounds);
      this[_commands][$add](new engine.PaintDrawColor.new(color, blendMode));
    }
    drawLine(p1, p2, paint) {
      let strokeWidth = math.max(core.double, paint.strokeWidth, 1.0);
      this[_paintBounds].growLTRB(math.min(core.double, p1.dx, p2.dx) - strokeWidth, math.min(core.double, p1.dy, p2.dy) - strokeWidth, math.max(core.double, p1.dx, p2.dx) + strokeWidth, math.max(core.double, p1.dy, p2.dy) + strokeWidth);
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      this[_commands][$add](new engine.PaintDrawLine.new(p1, p2, paint.webOnlyPaintData));
    }
    drawPaint(paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      this[_paintBounds].grow(this[_paintBounds].maxPaintBounds);
      this[_commands][$add](new engine.PaintDrawPaint.new(paint.webOnlyPaintData));
    }
    drawRect(rect, paint) {
      if (paint.shader != null) {
        this[_hasArbitraryPaint] = true;
      }
      this[_didDraw] = true;
      if (paint.strokeWidth != null && paint.strokeWidth !== 0) {
        this[_paintBounds].grow(rect.inflate(dart.notNull(paint.strokeWidth) / 2.0));
      } else {
        this[_paintBounds].grow(rect);
      }
      this[_commands][$add](new engine.PaintDrawRect.new(rect, paint.webOnlyPaintData));
    }
    drawRRect(rrect, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let strokeWidth = paint.strokeWidth == null ? 0.0 : paint.strokeWidth;
      let left = math.min(core.double, rrect.left, rrect.right) - dart.notNull(strokeWidth);
      let right = math.max(core.double, rrect.left, rrect.right) + dart.notNull(strokeWidth);
      let top = math.min(core.double, rrect.top, rrect.bottom) - dart.notNull(strokeWidth);
      let bottom = math.max(core.double, rrect.top, rrect.bottom) + dart.notNull(strokeWidth);
      this[_paintBounds].growLTRB(left, top, right, bottom);
      this[_commands][$add](new engine.PaintDrawRRect.new(rrect, paint.webOnlyPaintData));
    }
    drawDRRect(outer, inner, paint) {
      if (!(dart.test(outer.contains(new ui.Offset.new(inner.left, inner.top))) && dart.test(outer.contains(new ui.Offset.new(inner.right, inner.bottom))))) {
        return;
      }
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let strokeWidth = paint.strokeWidth == null ? 0.0 : paint.strokeWidth;
      this[_paintBounds].growLTRB(dart.notNull(outer.left) - dart.notNull(strokeWidth), dart.notNull(outer.top) - dart.notNull(strokeWidth), dart.notNull(outer.right) + dart.notNull(strokeWidth), dart.notNull(outer.bottom) + dart.notNull(strokeWidth));
      this[_commands][$add](new engine.PaintDrawDRRect.new(outer, inner, paint.webOnlyPaintData));
    }
    drawOval(rect, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      if (paint.strokeWidth != null) {
        this[_paintBounds].grow(rect.inflate(paint.strokeWidth));
      } else {
        this[_paintBounds].grow(rect);
      }
      this[_commands][$add](new engine.PaintDrawOval.new(rect, paint.webOnlyPaintData));
    }
    drawCircle(c, radius, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let strokeWidth = paint.strokeWidth == null ? 0.0 : paint.strokeWidth;
      this[_paintBounds].growLTRB(dart.notNull(c.dx) - dart.notNull(radius) - dart.notNull(strokeWidth), dart.notNull(c.dy) - dart.notNull(radius) - dart.notNull(strokeWidth), dart.notNull(c.dx) + dart.notNull(radius) + dart.notNull(strokeWidth), dart.notNull(c.dy) + dart.notNull(radius) + dart.notNull(strokeWidth));
      this[_commands][$add](new engine.PaintDrawCircle.new(c, radius, paint.webOnlyPaintData));
    }
    drawPath(path, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let pathBounds = path.getBounds();
      if (paint.strokeWidth != null) {
        pathBounds = pathBounds.inflate(paint.strokeWidth);
      }
      this[_paintBounds].grow(pathBounds);
      let clone = new ui.Path.from(path);
      clone.fillType = path.fillType;
      this[_commands][$add](new engine.PaintDrawPath.new(clone, paint.webOnlyPaintData));
    }
    drawImage(image, offset, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let left = offset.dx;
      let top = offset.dy;
      this[_paintBounds].growLTRB(left, top, dart.notNull(left) + dart.notNull(image.width), dart.notNull(top) + dart.notNull(image.height));
      this[_commands][$add](new engine.PaintDrawImage.new(image, offset, paint.webOnlyPaintData));
    }
    drawImageRect(image, src, dst, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      this[_paintBounds].grow(dst);
      this[_commands][$add](new engine.PaintDrawImageRect.new(image, src, dst, paint.webOnlyPaintData));
    }
    drawParagraph(paragraph, offset) {
      let engineParagraph = engine.EngineParagraph._check(paragraph);
      if (!dart.test(engineParagraph[_isLaidOut])) {
        return;
      }
      this[_didDraw] = true;
      if (engineParagraph[_geometricStyle].ellipsis != null) {
        this[_hasArbitraryPaint] = true;
      }
      let left = offset.dx;
      let top = offset.dy;
      this[_paintBounds].growLTRB(left, top, dart.notNull(left) + dart.notNull(engineParagraph.width), dart.notNull(top) + dart.notNull(engineParagraph.height));
      this[_commands][$add](new engine.PaintDrawParagraph.new(engineParagraph, offset));
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let shadowRect = engine.ElevationShadow.computeShadowRect(path.getBounds(), elevation);
      this[_paintBounds].grow(shadowRect);
      this[_commands][$add](new engine.PaintDrawShadow.new(path, color, elevation, transparentOccluder));
    }
    debugDumpCommands() {
      core.print("/"[$times](40) + " CANVAS COMMANDS " + "/"[$times](40));
      this[_commands][$forEach](C61 || CT.C61);
      core.print("/"[$times](37) + " END OF CANVAS COMMANDS " + "/"[$times](36));
    }
  };
  (engine.RecordingCanvas.new = function(bounds) {
    this[_commands] = JSArrayOfPaintCommand().of([]);
    this[_hasArbitraryPaint] = false;
    this[_didDraw] = false;
    this[saveCount$] = 1;
    this[_paintBounds] = new engine._PaintBounds.new(bounds);
    ;
  }).prototype = engine.RecordingCanvas.prototype;
  dart.addTypeTests(engine.RecordingCanvas);
  const saveCount$ = RecordingCanvas_saveCount;
  dart.setMethodSignature(engine.RecordingCanvas, () => ({
    __proto__: dart.getMethods(engine.RecordingCanvas.__proto__),
    debugEnforceArbitraryPaint: dart.fnType(dart.void, []),
    computePaintBounds: dart.fnType(ui.Rect, []),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    debugPrintCommands: dart.fnType(core.String, []),
    save: dart.fnType(dart.void, []),
    saveLayerWithoutBounds: dart.fnType(dart.void, [ui.Paint]),
    saveLayer: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    restore: dart.fnType(dart.void, []),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double, core.double]),
    rotate: dart.fnType(dart.void, [core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    clipRRect: dart.fnType(dart.void, [ui.RRect]),
    clipPath: dart.fnType(dart.void, [ui.Path], {doAntiAlias: core.bool}),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint]),
    drawPaint: dart.fnType(dart.void, [ui.Paint]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.Paint]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.Paint]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.Paint]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.Paint]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    debugDumpCommands: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.RecordingCanvas, () => ({
    __proto__: dart.getGetters(engine.RecordingCanvas.__proto__),
    hasArbitraryPaint: core.bool,
    didDraw: core.bool
  }));
  dart.setLibraryUri(engine.RecordingCanvas, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.RecordingCanvas, () => ({
    __proto__: dart.getFields(engine.RecordingCanvas.__proto__),
    [_paintBounds]: dart.finalFieldType(engine._PaintBounds),
    [_commands]: dart.finalFieldType(core.List$(engine.PaintCommand)),
    [_hasArbitraryPaint]: dart.fieldType(core.bool),
    [_didDraw]: dart.fieldType(core.bool),
    saveCount: dart.fieldType(core.int)
  }));
  engine.PaintCommand = class PaintCommand extends core.Object {};
  (engine.PaintCommand.new = function() {
    ;
  }).prototype = engine.PaintCommand.prototype;
  dart.addTypeTests(engine.PaintCommand);
  dart.setLibraryUri(engine.PaintCommand, "package:flutter_web_ui/src/engine.dart");
  let C62;
  engine.PaintSave = class PaintSave extends engine.PaintCommand {
    apply(canvas) {
      canvas.save();
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "save()";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add](C62 || CT.C62);
    }
  };
  (engine.PaintSave.new = function() {
    engine.PaintSave.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintSave.prototype;
  dart.addTypeTests(engine.PaintSave);
  dart.setMethodSignature(engine.PaintSave, () => ({
    __proto__: dart.getMethods(engine.PaintSave.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintSave, "package:flutter_web_ui/src/engine.dart");
  dart.defineExtensionMethods(engine.PaintSave, ['toString']);
  let C63;
  engine.PaintRestore = class PaintRestore extends engine.PaintCommand {
    apply(canvas) {
      canvas.restore();
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "restore()";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add](C63 || CT.C63);
    }
  };
  (engine.PaintRestore.new = function() {
    engine.PaintRestore.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintRestore.prototype;
  dart.addTypeTests(engine.PaintRestore);
  dart.setMethodSignature(engine.PaintRestore, () => ({
    __proto__: dart.getMethods(engine.PaintRestore.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintRestore, "package:flutter_web_ui/src/engine.dart");
  dart.defineExtensionMethods(engine.PaintRestore, ['toString']);
  const PaintTranslate_dx = dart.privateName(engine, "PaintTranslate.dx");
  const PaintTranslate_dy = dart.privateName(engine, "PaintTranslate.dy");
  engine.PaintTranslate = class PaintTranslate extends engine.PaintCommand {
    get dx() {
      return this[dx$];
    }
    set dx(value) {
      super.dx = value;
    }
    get dy() {
      return this[dy$];
    }
    set dy(value) {
      super.dy = value;
    }
    apply(canvas) {
      canvas.translate(this.dx, this.dy);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "translate(" + dart.str(this.dx) + ", " + dart.str(this.dy) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add](JSArrayOfnum().of([3, this.dx, this.dy]));
    }
  };
  (engine.PaintTranslate.new = function(dx, dy) {
    this[dx$] = dx;
    this[dy$] = dy;
    engine.PaintTranslate.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintTranslate.prototype;
  dart.addTypeTests(engine.PaintTranslate);
  const dx$ = PaintTranslate_dx;
  const dy$ = PaintTranslate_dy;
  dart.setMethodSignature(engine.PaintTranslate, () => ({
    __proto__: dart.getMethods(engine.PaintTranslate.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintTranslate, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintTranslate, () => ({
    __proto__: dart.getFields(engine.PaintTranslate.__proto__),
    dx: dart.finalFieldType(core.double),
    dy: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(engine.PaintTranslate, ['toString']);
  const PaintScale_sx = dart.privateName(engine, "PaintScale.sx");
  const PaintScale_sy = dart.privateName(engine, "PaintScale.sy");
  engine.PaintScale = class PaintScale extends engine.PaintCommand {
    get sx() {
      return this[sx$];
    }
    set sx(value) {
      super.sx = value;
    }
    get sy() {
      return this[sy$];
    }
    set sy(value) {
      super.sy = value;
    }
    apply(canvas) {
      canvas.scale(this.sx, this.sy);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "scale(" + dart.str(this.sx) + ", " + dart.str(this.sy) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add](JSArrayOfnum().of([4, this.sx, this.sy]));
    }
  };
  (engine.PaintScale.new = function(sx, sy) {
    this[sx$] = sx;
    this[sy$] = sy;
    engine.PaintScale.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintScale.prototype;
  dart.addTypeTests(engine.PaintScale);
  const sx$ = PaintScale_sx;
  const sy$ = PaintScale_sy;
  dart.setMethodSignature(engine.PaintScale, () => ({
    __proto__: dart.getMethods(engine.PaintScale.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintScale, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintScale, () => ({
    __proto__: dart.getFields(engine.PaintScale.__proto__),
    sx: dart.finalFieldType(core.double),
    sy: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(engine.PaintScale, ['toString']);
  const PaintRotate_radians = dart.privateName(engine, "PaintRotate.radians");
  engine.PaintRotate = class PaintRotate extends engine.PaintCommand {
    get radians() {
      return this[radians$];
    }
    set radians(value) {
      super.radians = value;
    }
    apply(canvas) {
      canvas.rotate(this.radians);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "rotate(" + dart.str(this.radians) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add](JSArrayOfnum().of([5, this.radians]));
    }
  };
  (engine.PaintRotate.new = function(radians) {
    this[radians$] = radians;
    engine.PaintRotate.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintRotate.prototype;
  dart.addTypeTests(engine.PaintRotate);
  const radians$ = PaintRotate_radians;
  dart.setMethodSignature(engine.PaintRotate, () => ({
    __proto__: dart.getMethods(engine.PaintRotate.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintRotate, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintRotate, () => ({
    __proto__: dart.getFields(engine.PaintRotate.__proto__),
    radians: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(engine.PaintRotate, ['toString']);
  const PaintTransform_matrix4 = dart.privateName(engine, "PaintTransform.matrix4");
  engine.PaintTransform = class PaintTransform extends engine.PaintCommand {
    get matrix4() {
      return this[matrix4$];
    }
    set matrix4(value) {
      super.matrix4 = value;
    }
    apply(canvas) {
      canvas.transform(this.matrix4);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "transform(Matrix4.fromFloat64List(Float64List.fromList(<double>[" + dart.str(this.matrix4[$join](", ")) + "])))";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      let t5;
      serializedCommands[$add]((t5 = [6], t5[$addAll](this.matrix4), t5));
    }
  };
  (engine.PaintTransform.new = function(matrix4) {
    this[matrix4$] = matrix4;
    engine.PaintTransform.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintTransform.prototype;
  dart.addTypeTests(engine.PaintTransform);
  const matrix4$ = PaintTransform_matrix4;
  dart.setMethodSignature(engine.PaintTransform, () => ({
    __proto__: dart.getMethods(engine.PaintTransform.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintTransform, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintTransform, () => ({
    __proto__: dart.getFields(engine.PaintTransform.__proto__),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  dart.defineExtensionMethods(engine.PaintTransform, ['toString']);
  const PaintSkew_sx = dart.privateName(engine, "PaintSkew.sx");
  const PaintSkew_sy = dart.privateName(engine, "PaintSkew.sy");
  engine.PaintSkew = class PaintSkew extends engine.PaintCommand {
    get sx() {
      return this[sx$0];
    }
    set sx(value) {
      super.sx = value;
    }
    get sy() {
      return this[sy$0];
    }
    set sy(value) {
      super.sy = value;
    }
    apply(canvas) {
      canvas.skew(this.sx, this.sy);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "skew(" + dart.str(this.sx) + ", " + dart.str(this.sy) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add](JSArrayOfnum().of([7, this.sx, this.sy]));
    }
  };
  (engine.PaintSkew.new = function(sx, sy) {
    this[sx$0] = sx;
    this[sy$0] = sy;
    engine.PaintSkew.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintSkew.prototype;
  dart.addTypeTests(engine.PaintSkew);
  const sx$0 = PaintSkew_sx;
  const sy$0 = PaintSkew_sy;
  dart.setMethodSignature(engine.PaintSkew, () => ({
    __proto__: dart.getMethods(engine.PaintSkew.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintSkew, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintSkew, () => ({
    __proto__: dart.getFields(engine.PaintSkew.__proto__),
    sx: dart.finalFieldType(core.double),
    sy: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(engine.PaintSkew, ['toString']);
  const PaintClipRect_rect = dart.privateName(engine, "PaintClipRect.rect");
  engine.PaintClipRect = class PaintClipRect extends engine.PaintCommand {
    get rect() {
      return this[rect$];
    }
    set rect(value) {
      super.rect = value;
    }
    apply(canvas) {
      canvas.clipRect(this.rect);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "clipRect(" + dart.str(this.rect) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([8, engine._serializeRectToCssPaint(this.rect)]);
    }
  };
  (engine.PaintClipRect.new = function(rect) {
    this[rect$] = rect;
    engine.PaintClipRect.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintClipRect.prototype;
  dart.addTypeTests(engine.PaintClipRect);
  const rect$ = PaintClipRect_rect;
  dart.setMethodSignature(engine.PaintClipRect, () => ({
    __proto__: dart.getMethods(engine.PaintClipRect.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintClipRect, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintClipRect, () => ({
    __proto__: dart.getFields(engine.PaintClipRect.__proto__),
    rect: dart.finalFieldType(ui.Rect)
  }));
  dart.defineExtensionMethods(engine.PaintClipRect, ['toString']);
  const PaintClipRRect_rrect = dart.privateName(engine, "PaintClipRRect.rrect");
  engine.PaintClipRRect = class PaintClipRRect extends engine.PaintCommand {
    get rrect() {
      return this[rrect$];
    }
    set rrect(value) {
      super.rrect = value;
    }
    apply(canvas) {
      canvas.clipRRect(this.rrect);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "clipRRect(" + dart.str(this.rrect) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([9, engine._serializeRRectToCssPaint(this.rrect)]);
    }
  };
  (engine.PaintClipRRect.new = function(rrect) {
    this[rrect$] = rrect;
    engine.PaintClipRRect.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintClipRRect.prototype;
  dart.addTypeTests(engine.PaintClipRRect);
  const rrect$ = PaintClipRRect_rrect;
  dart.setMethodSignature(engine.PaintClipRRect, () => ({
    __proto__: dart.getMethods(engine.PaintClipRRect.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintClipRRect, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintClipRRect, () => ({
    __proto__: dart.getFields(engine.PaintClipRRect.__proto__),
    rrect: dart.finalFieldType(ui.RRect)
  }));
  dart.defineExtensionMethods(engine.PaintClipRRect, ['toString']);
  const PaintClipPath_path = dart.privateName(engine, "PaintClipPath.path");
  engine.PaintClipPath = class PaintClipPath extends engine.PaintCommand {
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    apply(canvas) {
      canvas.clipPath(this.path);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "clipPath(" + dart.str(this.path) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([10, this.path.webOnlySerializeToCssPaint()]);
    }
  };
  (engine.PaintClipPath.new = function(path) {
    this[path$] = path;
    engine.PaintClipPath.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintClipPath.prototype;
  dart.addTypeTests(engine.PaintClipPath);
  const path$ = PaintClipPath_path;
  dart.setMethodSignature(engine.PaintClipPath, () => ({
    __proto__: dart.getMethods(engine.PaintClipPath.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintClipPath, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintClipPath, () => ({
    __proto__: dart.getFields(engine.PaintClipPath.__proto__),
    path: dart.finalFieldType(ui.Path)
  }));
  dart.defineExtensionMethods(engine.PaintClipPath, ['toString']);
  const PaintDrawColor_color = dart.privateName(engine, "PaintDrawColor.color");
  const PaintDrawColor_blendMode = dart.privateName(engine, "PaintDrawColor.blendMode");
  engine.PaintDrawColor = class PaintDrawColor extends engine.PaintCommand {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get blendMode() {
      return this[blendMode$];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    apply(canvas) {
      canvas.drawColor(this.color, this.blendMode);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawColor(" + dart.str(this.color) + ", " + dart.str(this.blendMode) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([11, this.color.toCssString(), this.blendMode.index]);
    }
  };
  (engine.PaintDrawColor.new = function(color, blendMode) {
    this[color$] = color;
    this[blendMode$] = blendMode;
    engine.PaintDrawColor.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawColor.prototype;
  dart.addTypeTests(engine.PaintDrawColor);
  const color$ = PaintDrawColor_color;
  const blendMode$ = PaintDrawColor_blendMode;
  dart.setMethodSignature(engine.PaintDrawColor, () => ({
    __proto__: dart.getMethods(engine.PaintDrawColor.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawColor, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawColor, () => ({
    __proto__: dart.getFields(engine.PaintDrawColor.__proto__),
    color: dart.finalFieldType(ui.Color),
    blendMode: dart.finalFieldType(ui.BlendMode)
  }));
  dart.defineExtensionMethods(engine.PaintDrawColor, ['toString']);
  const PaintDrawLine_p1 = dart.privateName(engine, "PaintDrawLine.p1");
  const PaintDrawLine_p2 = dart.privateName(engine, "PaintDrawLine.p2");
  const PaintDrawLine_paint = dart.privateName(engine, "PaintDrawLine.paint");
  engine.PaintDrawLine = class PaintDrawLine extends engine.PaintCommand {
    get p1() {
      return this[p1$];
    }
    set p1(value) {
      super.p1 = value;
    }
    get p2() {
      return this[p2$];
    }
    set p2(value) {
      super.p2 = value;
    }
    get paint() {
      return this[paint$];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawLine(this.p1, this.p2, this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawLine(" + dart.str(this.p1) + ", " + dart.str(this.p2) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([12, this.p1.dx, this.p1.dy, this.p2.dx, this.p2.dy, engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (engine.PaintDrawLine.new = function(p1, p2, paint) {
    this[p1$] = p1;
    this[p2$] = p2;
    this[paint$] = paint;
    engine.PaintDrawLine.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawLine.prototype;
  dart.addTypeTests(engine.PaintDrawLine);
  const p1$ = PaintDrawLine_p1;
  const p2$ = PaintDrawLine_p2;
  const paint$ = PaintDrawLine_paint;
  dart.setMethodSignature(engine.PaintDrawLine, () => ({
    __proto__: dart.getMethods(engine.PaintDrawLine.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawLine, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawLine, () => ({
    __proto__: dart.getFields(engine.PaintDrawLine.__proto__),
    p1: dart.finalFieldType(ui.Offset),
    p2: dart.finalFieldType(ui.Offset),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawLine, ['toString']);
  const PaintDrawPaint_paint = dart.privateName(engine, "PaintDrawPaint.paint");
  engine.PaintDrawPaint = class PaintDrawPaint extends engine.PaintCommand {
    get paint() {
      return this[paint$0];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawPaint(this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawPaint(" + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([13, engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (engine.PaintDrawPaint.new = function(paint) {
    this[paint$0] = paint;
    engine.PaintDrawPaint.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawPaint.prototype;
  dart.addTypeTests(engine.PaintDrawPaint);
  const paint$0 = PaintDrawPaint_paint;
  dart.setMethodSignature(engine.PaintDrawPaint, () => ({
    __proto__: dart.getMethods(engine.PaintDrawPaint.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawPaint, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawPaint, () => ({
    __proto__: dart.getFields(engine.PaintDrawPaint.__proto__),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawPaint, ['toString']);
  const PaintDrawRect_rect = dart.privateName(engine, "PaintDrawRect.rect");
  const PaintDrawRect_paint = dart.privateName(engine, "PaintDrawRect.paint");
  engine.PaintDrawRect = class PaintDrawRect extends engine.PaintCommand {
    get rect() {
      return this[rect$0];
    }
    set rect(value) {
      super.rect = value;
    }
    get paint() {
      return this[paint$1];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawRect(this.rect, this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawRect(" + dart.str(this.rect) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([14, engine._serializeRectToCssPaint(this.rect), engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (engine.PaintDrawRect.new = function(rect, paint) {
    this[rect$0] = rect;
    this[paint$1] = paint;
    engine.PaintDrawRect.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawRect.prototype;
  dart.addTypeTests(engine.PaintDrawRect);
  const rect$0 = PaintDrawRect_rect;
  const paint$1 = PaintDrawRect_paint;
  dart.setMethodSignature(engine.PaintDrawRect, () => ({
    __proto__: dart.getMethods(engine.PaintDrawRect.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawRect, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawRect, () => ({
    __proto__: dart.getFields(engine.PaintDrawRect.__proto__),
    rect: dart.finalFieldType(ui.Rect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawRect, ['toString']);
  const PaintDrawRRect_rrect = dart.privateName(engine, "PaintDrawRRect.rrect");
  const PaintDrawRRect_paint = dart.privateName(engine, "PaintDrawRRect.paint");
  engine.PaintDrawRRect = class PaintDrawRRect extends engine.PaintCommand {
    get rrect() {
      return this[rrect$0];
    }
    set rrect(value) {
      super.rrect = value;
    }
    get paint() {
      return this[paint$2];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawRRect(this.rrect, this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawRRect(" + dart.str(this.rrect) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([15, engine._serializeRRectToCssPaint(this.rrect), engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (engine.PaintDrawRRect.new = function(rrect, paint) {
    this[rrect$0] = rrect;
    this[paint$2] = paint;
    engine.PaintDrawRRect.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawRRect.prototype;
  dart.addTypeTests(engine.PaintDrawRRect);
  const rrect$0 = PaintDrawRRect_rrect;
  const paint$2 = PaintDrawRRect_paint;
  dart.setMethodSignature(engine.PaintDrawRRect, () => ({
    __proto__: dart.getMethods(engine.PaintDrawRRect.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawRRect, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawRRect, () => ({
    __proto__: dart.getFields(engine.PaintDrawRRect.__proto__),
    rrect: dart.finalFieldType(ui.RRect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawRRect, ['toString']);
  const PaintDrawDRRect_outer = dart.privateName(engine, "PaintDrawDRRect.outer");
  const PaintDrawDRRect_inner = dart.privateName(engine, "PaintDrawDRRect.inner");
  const PaintDrawDRRect_paint = dart.privateName(engine, "PaintDrawDRRect.paint");
  engine.PaintDrawDRRect = class PaintDrawDRRect extends engine.PaintCommand {
    get outer() {
      return this[outer$];
    }
    set outer(value) {
      super.outer = value;
    }
    get inner() {
      return this[inner$];
    }
    set inner(value) {
      super.inner = value;
    }
    get paint() {
      return this[paint$3];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawDRRect(this.outer, this.inner, this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawDRRect(" + dart.str(this.outer) + ", " + dart.str(this.inner) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([16, engine._serializeRRectToCssPaint(this.outer), engine._serializeRRectToCssPaint(this.inner), engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (engine.PaintDrawDRRect.new = function(outer, inner, paint) {
    this[outer$] = outer;
    this[inner$] = inner;
    this[paint$3] = paint;
    engine.PaintDrawDRRect.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawDRRect.prototype;
  dart.addTypeTests(engine.PaintDrawDRRect);
  const outer$ = PaintDrawDRRect_outer;
  const inner$ = PaintDrawDRRect_inner;
  const paint$3 = PaintDrawDRRect_paint;
  dart.setMethodSignature(engine.PaintDrawDRRect, () => ({
    __proto__: dart.getMethods(engine.PaintDrawDRRect.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawDRRect, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawDRRect, () => ({
    __proto__: dart.getFields(engine.PaintDrawDRRect.__proto__),
    outer: dart.finalFieldType(ui.RRect),
    inner: dart.finalFieldType(ui.RRect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawDRRect, ['toString']);
  const PaintDrawOval_rect = dart.privateName(engine, "PaintDrawOval.rect");
  const PaintDrawOval_paint = dart.privateName(engine, "PaintDrawOval.paint");
  engine.PaintDrawOval = class PaintDrawOval extends engine.PaintCommand {
    get rect() {
      return this[rect$1];
    }
    set rect(value) {
      super.rect = value;
    }
    get paint() {
      return this[paint$4];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawOval(this.rect, this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawOval(" + dart.str(this.rect) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([17, engine._serializeRectToCssPaint(this.rect), engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (engine.PaintDrawOval.new = function(rect, paint) {
    this[rect$1] = rect;
    this[paint$4] = paint;
    engine.PaintDrawOval.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawOval.prototype;
  dart.addTypeTests(engine.PaintDrawOval);
  const rect$1 = PaintDrawOval_rect;
  const paint$4 = PaintDrawOval_paint;
  dart.setMethodSignature(engine.PaintDrawOval, () => ({
    __proto__: dart.getMethods(engine.PaintDrawOval.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawOval, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawOval, () => ({
    __proto__: dart.getFields(engine.PaintDrawOval.__proto__),
    rect: dart.finalFieldType(ui.Rect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawOval, ['toString']);
  const PaintDrawCircle_c = dart.privateName(engine, "PaintDrawCircle.c");
  const PaintDrawCircle_radius = dart.privateName(engine, "PaintDrawCircle.radius");
  const PaintDrawCircle_paint = dart.privateName(engine, "PaintDrawCircle.paint");
  engine.PaintDrawCircle = class PaintDrawCircle extends engine.PaintCommand {
    get c() {
      return this[c$];
    }
    set c(value) {
      super.c = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get paint() {
      return this[paint$5];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawCircle(this.c, this.radius, this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawCircle(" + dart.str(this.c) + ", " + dart.str(this.radius) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([18, this.c.dx, this.c.dy, this.radius, engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (engine.PaintDrawCircle.new = function(c, radius, paint) {
    this[c$] = c;
    this[radius$] = radius;
    this[paint$5] = paint;
    engine.PaintDrawCircle.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawCircle.prototype;
  dart.addTypeTests(engine.PaintDrawCircle);
  const c$ = PaintDrawCircle_c;
  const radius$ = PaintDrawCircle_radius;
  const paint$5 = PaintDrawCircle_paint;
  dart.setMethodSignature(engine.PaintDrawCircle, () => ({
    __proto__: dart.getMethods(engine.PaintDrawCircle.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawCircle, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawCircle, () => ({
    __proto__: dart.getFields(engine.PaintDrawCircle.__proto__),
    c: dart.finalFieldType(ui.Offset),
    radius: dart.finalFieldType(core.double),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawCircle, ['toString']);
  const PaintDrawPath_path = dart.privateName(engine, "PaintDrawPath.path");
  const PaintDrawPath_paint = dart.privateName(engine, "PaintDrawPath.paint");
  engine.PaintDrawPath = class PaintDrawPath extends engine.PaintCommand {
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get paint() {
      return this[paint$6];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawPath(this.path, this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawPath(" + dart.str(this.path) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([19, this.path.webOnlySerializeToCssPaint(), engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (engine.PaintDrawPath.new = function(path, paint) {
    this[path$0] = path;
    this[paint$6] = paint;
    engine.PaintDrawPath.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawPath.prototype;
  dart.addTypeTests(engine.PaintDrawPath);
  const path$0 = PaintDrawPath_path;
  const paint$6 = PaintDrawPath_paint;
  dart.setMethodSignature(engine.PaintDrawPath, () => ({
    __proto__: dart.getMethods(engine.PaintDrawPath.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawPath, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawPath, () => ({
    __proto__: dart.getFields(engine.PaintDrawPath.__proto__),
    path: dart.finalFieldType(ui.Path),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawPath, ['toString']);
  const PaintDrawShadow_path = dart.privateName(engine, "PaintDrawShadow.path");
  const PaintDrawShadow_color = dart.privateName(engine, "PaintDrawShadow.color");
  const PaintDrawShadow_elevation = dart.privateName(engine, "PaintDrawShadow.elevation");
  const PaintDrawShadow_transparentOccluder = dart.privateName(engine, "PaintDrawShadow.transparentOccluder");
  engine.PaintDrawShadow = class PaintDrawShadow extends engine.PaintCommand {
    get path() {
      return this[path$1];
    }
    set path(value) {
      super.path = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get elevation() {
      return this[elevation$];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get transparentOccluder() {
      return this[transparentOccluder$];
    }
    set transparentOccluder(value) {
      super.transparentOccluder = value;
    }
    apply(canvas) {
      canvas.drawShadow(this.path, this.color, this.elevation, this.transparentOccluder);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawShadow(" + dart.str(this.path) + ", " + dart.str(this.color) + ", " + dart.str(this.elevation) + ", " + dart.str(this.transparentOccluder) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([20, this.path.webOnlySerializeToCssPaint(), [this.color.alpha, this.color.red, this.color.green, this.color.blue], this.elevation, this.transparentOccluder]);
    }
  };
  (engine.PaintDrawShadow.new = function(path, color, elevation, transparentOccluder) {
    this[path$1] = path;
    this[color$0] = color;
    this[elevation$] = elevation;
    this[transparentOccluder$] = transparentOccluder;
    engine.PaintDrawShadow.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawShadow.prototype;
  dart.addTypeTests(engine.PaintDrawShadow);
  const path$1 = PaintDrawShadow_path;
  const color$0 = PaintDrawShadow_color;
  const elevation$ = PaintDrawShadow_elevation;
  const transparentOccluder$ = PaintDrawShadow_transparentOccluder;
  dart.setMethodSignature(engine.PaintDrawShadow, () => ({
    __proto__: dart.getMethods(engine.PaintDrawShadow.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawShadow, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawShadow, () => ({
    __proto__: dart.getFields(engine.PaintDrawShadow.__proto__),
    path: dart.finalFieldType(ui.Path),
    color: dart.finalFieldType(ui.Color),
    elevation: dart.finalFieldType(core.double),
    transparentOccluder: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(engine.PaintDrawShadow, ['toString']);
  const PaintDrawImage_image = dart.privateName(engine, "PaintDrawImage.image");
  const PaintDrawImage_offset = dart.privateName(engine, "PaintDrawImage.offset");
  const PaintDrawImage_paint = dart.privateName(engine, "PaintDrawImage.paint");
  engine.PaintDrawImage = class PaintDrawImage extends engine.PaintCommand {
    get image() {
      return this[image$0];
    }
    set image(value) {
      super.image = value;
    }
    get offset() {
      return this[offset$0];
    }
    set offset(value) {
      super.offset = value;
    }
    get paint() {
      return this[paint$7];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawImage(this.image, this.offset, this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawImage(" + dart.str(this.image) + ", " + dart.str(this.offset) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      if (dart.test(engine.assertionsEnabled)) {
        dart.throw(new core.UnsupportedError.new("drawImage not serializable"));
      }
    }
  };
  (engine.PaintDrawImage.new = function(image, offset, paint) {
    this[image$0] = image;
    this[offset$0] = offset;
    this[paint$7] = paint;
    engine.PaintDrawImage.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawImage.prototype;
  dart.addTypeTests(engine.PaintDrawImage);
  const image$0 = PaintDrawImage_image;
  const offset$0 = PaintDrawImage_offset;
  const paint$7 = PaintDrawImage_paint;
  dart.setMethodSignature(engine.PaintDrawImage, () => ({
    __proto__: dart.getMethods(engine.PaintDrawImage.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawImage, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawImage, () => ({
    __proto__: dart.getFields(engine.PaintDrawImage.__proto__),
    image: dart.finalFieldType(ui.Image),
    offset: dart.finalFieldType(ui.Offset),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawImage, ['toString']);
  const PaintDrawImageRect_image = dart.privateName(engine, "PaintDrawImageRect.image");
  const PaintDrawImageRect_src = dart.privateName(engine, "PaintDrawImageRect.src");
  const PaintDrawImageRect_dst = dart.privateName(engine, "PaintDrawImageRect.dst");
  const PaintDrawImageRect_paint = dart.privateName(engine, "PaintDrawImageRect.paint");
  engine.PaintDrawImageRect = class PaintDrawImageRect extends engine.PaintCommand {
    get image() {
      return this[image$1];
    }
    set image(value) {
      super.image = value;
    }
    get src() {
      return this[src$0];
    }
    set src(value) {
      super.src = value;
    }
    get dst() {
      return this[dst$];
    }
    set dst(value) {
      super.dst = value;
    }
    get paint() {
      return this[paint$8];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawImageRect(this.image, this.src, this.dst, this.paint);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "drawImageRect(" + dart.str(this.image) + ", " + dart.str(this.src) + ", " + dart.str(this.dst) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      if (dart.test(engine.assertionsEnabled)) {
        dart.throw(new core.UnsupportedError.new("drawImageRect not serializable"));
      }
    }
  };
  (engine.PaintDrawImageRect.new = function(image, src, dst, paint) {
    this[image$1] = image;
    this[src$0] = src;
    this[dst$] = dst;
    this[paint$8] = paint;
    engine.PaintDrawImageRect.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawImageRect.prototype;
  dart.addTypeTests(engine.PaintDrawImageRect);
  const image$1 = PaintDrawImageRect_image;
  const src$0 = PaintDrawImageRect_src;
  const dst$ = PaintDrawImageRect_dst;
  const paint$8 = PaintDrawImageRect_paint;
  dart.setMethodSignature(engine.PaintDrawImageRect, () => ({
    __proto__: dart.getMethods(engine.PaintDrawImageRect.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawImageRect, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawImageRect, () => ({
    __proto__: dart.getFields(engine.PaintDrawImageRect.__proto__),
    image: dart.finalFieldType(ui.Image),
    src: dart.finalFieldType(ui.Rect),
    dst: dart.finalFieldType(ui.Rect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(engine.PaintDrawImageRect, ['toString']);
  const PaintDrawParagraph_paragraph = dart.privateName(engine, "PaintDrawParagraph.paragraph");
  const PaintDrawParagraph_offset = dart.privateName(engine, "PaintDrawParagraph.offset");
  engine.PaintDrawParagraph = class PaintDrawParagraph extends engine.PaintCommand {
    get paragraph() {
      return this[paragraph$];
    }
    set paragraph(value) {
      super.paragraph = value;
    }
    get offset() {
      return this[offset$1];
    }
    set offset(value) {
      super.offset = value;
    }
    apply(canvas) {
      canvas.drawParagraph(this.paragraph, this.offset);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "DrawParagraph(" + dart.str(this.paragraph[_plainText]) + ", " + dart.str(this.offset) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      if (dart.test(engine.assertionsEnabled)) {
        dart.throw(new core.UnsupportedError.new("drawParagraph not serializable"));
      }
    }
  };
  (engine.PaintDrawParagraph.new = function(paragraph, offset) {
    this[paragraph$] = paragraph;
    this[offset$1] = offset;
    engine.PaintDrawParagraph.__proto__.new.call(this);
    ;
  }).prototype = engine.PaintDrawParagraph.prototype;
  dart.addTypeTests(engine.PaintDrawParagraph);
  const paragraph$ = PaintDrawParagraph_paragraph;
  const offset$1 = PaintDrawParagraph_offset;
  dart.setMethodSignature(engine.PaintDrawParagraph, () => ({
    __proto__: dart.getMethods(engine.PaintDrawParagraph.__proto__),
    apply: dart.fnType(dart.void, [engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setLibraryUri(engine.PaintDrawParagraph, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PaintDrawParagraph, () => ({
    __proto__: dart.getFields(engine.PaintDrawParagraph.__proto__),
    paragraph: dart.finalFieldType(engine.EngineParagraph),
    offset: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(engine.PaintDrawParagraph, ['toString']);
  const Subpath_startX = dart.privateName(engine, "Subpath.startX");
  const Subpath_startY = dart.privateName(engine, "Subpath.startY");
  const Subpath_currentX = dart.privateName(engine, "Subpath.currentX");
  const Subpath_currentY = dart.privateName(engine, "Subpath.currentY");
  const Subpath_commands = dart.privateName(engine, "Subpath.commands");
  engine.Subpath = class Subpath extends core.Object {
    get startX() {
      return this[startX$];
    }
    set startX(value) {
      this[startX$] = value;
    }
    get startY() {
      return this[startY$];
    }
    set startY(value) {
      this[startY$] = value;
    }
    get currentX() {
      return this[currentX];
    }
    set currentX(value) {
      this[currentX] = value;
    }
    get currentY() {
      return this[currentY];
    }
    set currentY(value) {
      this[currentY] = value;
    }
    get commands() {
      return this[commands];
    }
    set commands(value) {
      super.commands = value;
    }
    shift(offset) {
      let t5;
      let result = (t5 = new engine.Subpath.new(dart.notNull(this.startX) + dart.notNull(offset.dx), dart.notNull(this.startY) + dart.notNull(offset.dy)), t5.currentX = dart.notNull(this.currentX) + dart.notNull(offset.dx), t5.currentY = dart.notNull(this.currentY) + dart.notNull(offset.dy), t5);
      for (let command of this.commands) {
        result.commands[$add](command.shifted(offset));
      }
      return result;
    }
    serializeToCssPaint() {
      let serialization = [];
      for (let i = 0; i < dart.notNull(this.commands[$length]); i = i + 1) {
        serialization[$add](this.commands[$_get](i).serializeToCssPaint());
      }
      return serialization;
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "Subpath(" + dart.str(this.commands[$join](", ")) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.Subpath.new = function(startX, startY) {
    this[startX$] = 0.0;
    this[startY$] = 0.0;
    this[currentX] = 0.0;
    this[currentY] = 0.0;
    this[startX$] = startX;
    this[startY$] = startY;
    this[commands] = JSArrayOfPathCommand().of([]);
    ;
  }).prototype = engine.Subpath.prototype;
  dart.addTypeTests(engine.Subpath);
  const startX$ = Subpath_startX;
  const startY$ = Subpath_startY;
  const currentX = Subpath_currentX;
  const currentY = Subpath_currentY;
  const commands = Subpath_commands;
  dart.setMethodSignature(engine.Subpath, () => ({
    __proto__: dart.getMethods(engine.Subpath.__proto__),
    shift: dart.fnType(engine.Subpath, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.Subpath, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Subpath, () => ({
    __proto__: dart.getFields(engine.Subpath.__proto__),
    startX: dart.fieldType(core.double),
    startY: dart.fieldType(core.double),
    currentX: dart.fieldType(core.double),
    currentY: dart.fieldType(core.double),
    commands: dart.finalFieldType(core.List$(engine.PathCommand))
  }));
  dart.defineExtensionMethods(engine.Subpath, ['toString']);
  engine.PathCommandTypes = class PathCommandTypes extends core.Object {};
  (engine.PathCommandTypes.new = function() {
    ;
  }).prototype = engine.PathCommandTypes.prototype;
  dart.addTypeTests(engine.PathCommandTypes);
  dart.setLibraryUri(engine.PathCommandTypes, "package:flutter_web_ui/src/engine.dart");
  dart.defineLazy(engine.PathCommandTypes, {
    /*engine.PathCommandTypes.moveTo*/get moveTo() {
      return 0;
    },
    /*engine.PathCommandTypes.lineTo*/get lineTo() {
      return 1;
    },
    /*engine.PathCommandTypes.ellipse*/get ellipse() {
      return 2;
    },
    /*engine.PathCommandTypes.close*/get close() {
      return 3;
    },
    /*engine.PathCommandTypes.quadraticCurveTo*/get quadraticCurveTo() {
      return 4;
    },
    /*engine.PathCommandTypes.bezierCurveTo*/get bezierCurveTo() {
      return 5;
    },
    /*engine.PathCommandTypes.rect*/get rect() {
      return 6;
    },
    /*engine.PathCommandTypes.rRect*/get rRect() {
      return 7;
    }
  });
  const PathCommand_type = dart.privateName(engine, "PathCommand.type");
  engine.PathCommand = class PathCommand extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
  };
  (engine.PathCommand.new = function(type) {
    this[type$] = type;
    ;
  }).prototype = engine.PathCommand.prototype;
  dart.addTypeTests(engine.PathCommand);
  const type$ = PathCommand_type;
  dart.setLibraryUri(engine.PathCommand, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PathCommand, () => ({
    __proto__: dart.getFields(engine.PathCommand.__proto__),
    type: dart.finalFieldType(core.int)
  }));
  const MoveTo_x = dart.privateName(engine, "MoveTo.x");
  const MoveTo_y = dart.privateName(engine, "MoveTo.y");
  engine.MoveTo = class MoveTo extends engine.PathCommand {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    shifted(offset) {
      return new engine.MoveTo.new(dart.notNull(this.x) + dart.notNull(offset.dx), dart.notNull(this.y) + dart.notNull(offset.dy));
    }
    serializeToCssPaint() {
      return [1, this.x, this.y];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "MoveTo(" + dart.str(this.x) + ", " + dart.str(this.y) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.MoveTo.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    engine.MoveTo.__proto__.new.call(this, 0);
    ;
  }).prototype = engine.MoveTo.prototype;
  dart.addTypeTests(engine.MoveTo);
  const x$ = MoveTo_x;
  const y$ = MoveTo_y;
  dart.setMethodSignature(engine.MoveTo, () => ({
    __proto__: dart.getMethods(engine.MoveTo.__proto__),
    shifted: dart.fnType(engine.MoveTo, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.MoveTo, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.MoveTo, () => ({
    __proto__: dart.getFields(engine.MoveTo.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(engine.MoveTo, ['toString']);
  const LineTo_x = dart.privateName(engine, "LineTo.x");
  const LineTo_y = dart.privateName(engine, "LineTo.y");
  engine.LineTo = class LineTo extends engine.PathCommand {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    shifted(offset) {
      return new engine.LineTo.new(dart.notNull(this.x) + dart.notNull(offset.dx), dart.notNull(this.y) + dart.notNull(offset.dy));
    }
    serializeToCssPaint() {
      return [2, this.x, this.y];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "LineTo(" + dart.str(this.x) + ", " + dart.str(this.y) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.LineTo.new = function(x, y) {
    this[x$0] = x;
    this[y$0] = y;
    engine.LineTo.__proto__.new.call(this, 1);
    ;
  }).prototype = engine.LineTo.prototype;
  dart.addTypeTests(engine.LineTo);
  const x$0 = LineTo_x;
  const y$0 = LineTo_y;
  dart.setMethodSignature(engine.LineTo, () => ({
    __proto__: dart.getMethods(engine.LineTo.__proto__),
    shifted: dart.fnType(engine.LineTo, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.LineTo, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.LineTo, () => ({
    __proto__: dart.getFields(engine.LineTo.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(engine.LineTo, ['toString']);
  const Ellipse_x = dart.privateName(engine, "Ellipse.x");
  const Ellipse_y = dart.privateName(engine, "Ellipse.y");
  const Ellipse_radiusX = dart.privateName(engine, "Ellipse.radiusX");
  const Ellipse_radiusY = dart.privateName(engine, "Ellipse.radiusY");
  const Ellipse_rotation = dart.privateName(engine, "Ellipse.rotation");
  const Ellipse_startAngle = dart.privateName(engine, "Ellipse.startAngle");
  const Ellipse_endAngle = dart.privateName(engine, "Ellipse.endAngle");
  const Ellipse_anticlockwise = dart.privateName(engine, "Ellipse.anticlockwise");
  engine.Ellipse = class Ellipse extends engine.PathCommand {
    get x() {
      return this[x$1];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    get radiusX() {
      return this[radiusX$];
    }
    set radiusX(value) {
      super.radiusX = value;
    }
    get radiusY() {
      return this[radiusY$];
    }
    set radiusY(value) {
      super.radiusY = value;
    }
    get rotation() {
      return this[rotation$];
    }
    set rotation(value) {
      super.rotation = value;
    }
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    get endAngle() {
      return this[endAngle$];
    }
    set endAngle(value) {
      super.endAngle = value;
    }
    get anticlockwise() {
      return this[anticlockwise$];
    }
    set anticlockwise(value) {
      super.anticlockwise = value;
    }
    shifted(offset) {
      return new engine.Ellipse.new(dart.notNull(this.x) + dart.notNull(offset.dx), dart.notNull(this.y) + dart.notNull(offset.dy), this.radiusX, this.radiusY, this.rotation, this.startAngle, this.endAngle, this.anticlockwise);
    }
    serializeToCssPaint() {
      return [3, this.x, this.y, this.radiusX, this.radiusY, this.rotation, this.startAngle, this.endAngle, this.anticlockwise];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "Ellipse(" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.radiusX) + ", " + dart.str(this.radiusY) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.Ellipse.new = function(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
    this[x$1] = x;
    this[y$1] = y;
    this[radiusX$] = radiusX;
    this[radiusY$] = radiusY;
    this[rotation$] = rotation;
    this[startAngle$] = startAngle;
    this[endAngle$] = endAngle;
    this[anticlockwise$] = anticlockwise;
    engine.Ellipse.__proto__.new.call(this, 2);
    ;
  }).prototype = engine.Ellipse.prototype;
  dart.addTypeTests(engine.Ellipse);
  const x$1 = Ellipse_x;
  const y$1 = Ellipse_y;
  const radiusX$ = Ellipse_radiusX;
  const radiusY$ = Ellipse_radiusY;
  const rotation$ = Ellipse_rotation;
  const startAngle$ = Ellipse_startAngle;
  const endAngle$ = Ellipse_endAngle;
  const anticlockwise$ = Ellipse_anticlockwise;
  dart.setMethodSignature(engine.Ellipse, () => ({
    __proto__: dart.getMethods(engine.Ellipse.__proto__),
    shifted: dart.fnType(engine.Ellipse, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.Ellipse, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Ellipse, () => ({
    __proto__: dart.getFields(engine.Ellipse.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double),
    radiusX: dart.finalFieldType(core.double),
    radiusY: dart.finalFieldType(core.double),
    rotation: dart.finalFieldType(core.double),
    startAngle: dart.finalFieldType(core.double),
    endAngle: dart.finalFieldType(core.double),
    anticlockwise: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(engine.Ellipse, ['toString']);
  const QuadraticCurveTo_x1 = dart.privateName(engine, "QuadraticCurveTo.x1");
  const QuadraticCurveTo_y1 = dart.privateName(engine, "QuadraticCurveTo.y1");
  const QuadraticCurveTo_x2 = dart.privateName(engine, "QuadraticCurveTo.x2");
  const QuadraticCurveTo_y2 = dart.privateName(engine, "QuadraticCurveTo.y2");
  engine.QuadraticCurveTo = class QuadraticCurveTo extends engine.PathCommand {
    get x1() {
      return this[x1$];
    }
    set x1(value) {
      super.x1 = value;
    }
    get y1() {
      return this[y1$];
    }
    set y1(value) {
      super.y1 = value;
    }
    get x2() {
      return this[x2$];
    }
    set x2(value) {
      super.x2 = value;
    }
    get y2() {
      return this[y2$];
    }
    set y2(value) {
      super.y2 = value;
    }
    shifted(offset) {
      return new engine.QuadraticCurveTo.new(dart.notNull(this.x1) + dart.notNull(offset.dx), dart.notNull(this.y1) + dart.notNull(offset.dy), dart.notNull(this.x2) + dart.notNull(offset.dx), dart.notNull(this.y2) + dart.notNull(offset.dy));
    }
    serializeToCssPaint() {
      return [4, this.x1, this.y1, this.x2, this.y2];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "QuadraticCurveTo(" + dart.str(this.x1) + ", " + dart.str(this.y1) + ", " + dart.str(this.x2) + ", " + dart.str(this.y2) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.QuadraticCurveTo.new = function(x1, y1, x2, y2) {
    this[x1$] = x1;
    this[y1$] = y1;
    this[x2$] = x2;
    this[y2$] = y2;
    engine.QuadraticCurveTo.__proto__.new.call(this, 4);
    ;
  }).prototype = engine.QuadraticCurveTo.prototype;
  dart.addTypeTests(engine.QuadraticCurveTo);
  const x1$ = QuadraticCurveTo_x1;
  const y1$ = QuadraticCurveTo_y1;
  const x2$ = QuadraticCurveTo_x2;
  const y2$ = QuadraticCurveTo_y2;
  dart.setMethodSignature(engine.QuadraticCurveTo, () => ({
    __proto__: dart.getMethods(engine.QuadraticCurveTo.__proto__),
    shifted: dart.fnType(engine.QuadraticCurveTo, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.QuadraticCurveTo, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.QuadraticCurveTo, () => ({
    __proto__: dart.getFields(engine.QuadraticCurveTo.__proto__),
    x1: dart.finalFieldType(core.double),
    y1: dart.finalFieldType(core.double),
    x2: dart.finalFieldType(core.double),
    y2: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(engine.QuadraticCurveTo, ['toString']);
  const BezierCurveTo_x1 = dart.privateName(engine, "BezierCurveTo.x1");
  const BezierCurveTo_y1 = dart.privateName(engine, "BezierCurveTo.y1");
  const BezierCurveTo_x2 = dart.privateName(engine, "BezierCurveTo.x2");
  const BezierCurveTo_y2 = dart.privateName(engine, "BezierCurveTo.y2");
  const BezierCurveTo_x3 = dart.privateName(engine, "BezierCurveTo.x3");
  const BezierCurveTo_y3 = dart.privateName(engine, "BezierCurveTo.y3");
  engine.BezierCurveTo = class BezierCurveTo extends engine.PathCommand {
    get x1() {
      return this[x1$0];
    }
    set x1(value) {
      super.x1 = value;
    }
    get y1() {
      return this[y1$0];
    }
    set y1(value) {
      super.y1 = value;
    }
    get x2() {
      return this[x2$0];
    }
    set x2(value) {
      super.x2 = value;
    }
    get y2() {
      return this[y2$0];
    }
    set y2(value) {
      super.y2 = value;
    }
    get x3() {
      return this[x3$];
    }
    set x3(value) {
      super.x3 = value;
    }
    get y3() {
      return this[y3$];
    }
    set y3(value) {
      super.y3 = value;
    }
    shifted(offset) {
      return new engine.BezierCurveTo.new(dart.notNull(this.x1) + dart.notNull(offset.dx), dart.notNull(this.y1) + dart.notNull(offset.dy), dart.notNull(this.x2) + dart.notNull(offset.dx), dart.notNull(this.y2) + dart.notNull(offset.dy), dart.notNull(this.x3) + dart.notNull(offset.dx), dart.notNull(this.y3) + dart.notNull(offset.dy));
    }
    serializeToCssPaint() {
      return [5, this.x1, this.y1, this.x2, this.y2, this.x3, this.y3];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "BezierCurveTo(" + dart.str(this.x1) + ", " + dart.str(this.y1) + ", " + dart.str(this.x2) + ", " + dart.str(this.y2) + ", " + dart.str(this.x3) + ", " + dart.str(this.y3) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.BezierCurveTo.new = function(x1, y1, x2, y2, x3, y3) {
    this[x1$0] = x1;
    this[y1$0] = y1;
    this[x2$0] = x2;
    this[y2$0] = y2;
    this[x3$] = x3;
    this[y3$] = y3;
    engine.BezierCurveTo.__proto__.new.call(this, 5);
    ;
  }).prototype = engine.BezierCurveTo.prototype;
  dart.addTypeTests(engine.BezierCurveTo);
  const x1$0 = BezierCurveTo_x1;
  const y1$0 = BezierCurveTo_y1;
  const x2$0 = BezierCurveTo_x2;
  const y2$0 = BezierCurveTo_y2;
  const x3$ = BezierCurveTo_x3;
  const y3$ = BezierCurveTo_y3;
  dart.setMethodSignature(engine.BezierCurveTo, () => ({
    __proto__: dart.getMethods(engine.BezierCurveTo.__proto__),
    shifted: dart.fnType(engine.BezierCurveTo, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.BezierCurveTo, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.BezierCurveTo, () => ({
    __proto__: dart.getFields(engine.BezierCurveTo.__proto__),
    x1: dart.finalFieldType(core.double),
    y1: dart.finalFieldType(core.double),
    x2: dart.finalFieldType(core.double),
    y2: dart.finalFieldType(core.double),
    x3: dart.finalFieldType(core.double),
    y3: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(engine.BezierCurveTo, ['toString']);
  const RectCommand_x = dart.privateName(engine, "RectCommand.x");
  const RectCommand_y = dart.privateName(engine, "RectCommand.y");
  const RectCommand_width = dart.privateName(engine, "RectCommand.width");
  const RectCommand_height = dart.privateName(engine, "RectCommand.height");
  engine.RectCommand = class RectCommand extends engine.PathCommand {
    get x() {
      return this[x$2];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    shifted(offset) {
      return new engine.RectCommand.new(dart.notNull(this.x) + dart.notNull(offset.dx), dart.notNull(this.y) + dart.notNull(offset.dy), this.width, this.height);
    }
    serializeToCssPaint() {
      return [6, this.x, this.y, this.width, this.height];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "Rect(" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.width) + ", " + dart.str(this.height) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.RectCommand.new = function(x, y, width, height) {
    this[x$2] = x;
    this[y$2] = y;
    this[width$0] = width;
    this[height$0] = height;
    engine.RectCommand.__proto__.new.call(this, 6);
    ;
  }).prototype = engine.RectCommand.prototype;
  dart.addTypeTests(engine.RectCommand);
  const x$2 = RectCommand_x;
  const y$2 = RectCommand_y;
  const width$0 = RectCommand_width;
  const height$0 = RectCommand_height;
  dart.setMethodSignature(engine.RectCommand, () => ({
    __proto__: dart.getMethods(engine.RectCommand.__proto__),
    shifted: dart.fnType(engine.RectCommand, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.RectCommand, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.RectCommand, () => ({
    __proto__: dart.getFields(engine.RectCommand.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(engine.RectCommand, ['toString']);
  const RRectCommand_rrect = dart.privateName(engine, "RRectCommand.rrect");
  engine.RRectCommand = class RRectCommand extends engine.PathCommand {
    get rrect() {
      return this[rrect$1];
    }
    set rrect(value) {
      super.rrect = value;
    }
    shifted(offset) {
      return new engine.RRectCommand.new(this.rrect.shift(offset));
    }
    serializeToCssPaint() {
      return [7, engine._serializeRRectToCssPaint(this.rrect)];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return dart.str(this.rrect);
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.RRectCommand.new = function(rrect) {
    this[rrect$1] = rrect;
    engine.RRectCommand.__proto__.new.call(this, 7);
    ;
  }).prototype = engine.RRectCommand.prototype;
  dart.addTypeTests(engine.RRectCommand);
  const rrect$1 = RRectCommand_rrect;
  dart.setMethodSignature(engine.RRectCommand, () => ({
    __proto__: dart.getMethods(engine.RRectCommand.__proto__),
    shifted: dart.fnType(engine.RRectCommand, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.RRectCommand, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.RRectCommand, () => ({
    __proto__: dart.getFields(engine.RRectCommand.__proto__),
    rrect: dart.finalFieldType(ui.RRect)
  }));
  dart.defineExtensionMethods(engine.RRectCommand, ['toString']);
  engine.CloseCommand = class CloseCommand extends engine.PathCommand {
    shifted(offset) {
      return this;
    }
    serializeToCssPaint() {
      return [8];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "Close()";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.CloseCommand.new = function() {
    engine.CloseCommand.__proto__.new.call(this, 3);
    ;
  }).prototype = engine.CloseCommand.prototype;
  dart.addTypeTests(engine.CloseCommand);
  dart.setMethodSignature(engine.CloseCommand, () => ({
    __proto__: dart.getMethods(engine.CloseCommand.__proto__),
    shifted: dart.fnType(engine.CloseCommand, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.CloseCommand, "package:flutter_web_ui/src/engine.dart");
  dart.defineExtensionMethods(engine.CloseCommand, ['toString']);
  const _didPaintInsideClipArea = dart.privateName(engine, "_didPaintInsideClipArea");
  const _left = dart.privateName(engine, "_left");
  const _top = dart.privateName(engine, "_top");
  const _right = dart.privateName(engine, "_right");
  const _bottom = dart.privateName(engine, "_bottom");
  const _transforms = dart.privateName(engine, "_transforms");
  const _currentMatrixIsIdentity = dart.privateName(engine, "_currentMatrixIsIdentity");
  const _currentMatrix = dart.privateName(engine, "_currentMatrix");
  const _clipRectInitialized = dart.privateName(engine, "_clipRectInitialized");
  const _currentClipLeft = dart.privateName(engine, "_currentClipLeft");
  const _currentClipTop = dart.privateName(engine, "_currentClipTop");
  const _currentClipRight = dart.privateName(engine, "_currentClipRight");
  const _currentClipBottom = dart.privateName(engine, "_currentClipBottom");
  engine._PaintBounds = class _PaintBounds extends core.Object {
    translate(dx, dy) {
      if (dx !== 0.0 || dy !== 0.0) {
        this[_currentMatrixIsIdentity] = false;
      }
      this[_currentMatrix].translate(dx, dy);
    }
    scale(sx, sy) {
      if (sx !== 1.0 || sy !== 1.0) {
        this[_currentMatrixIsIdentity] = false;
      }
      this[_currentMatrix].scale(sx, sy);
    }
    rotateZ(radians) {
      if (radians !== 0.0) {
        this[_currentMatrixIsIdentity] = false;
      }
      this[_currentMatrix].rotateZ(radians);
    }
    transform(matrix4) {
      let m4 = new engine.Matrix4.fromFloat64List(matrix4);
      this[_currentMatrix].multiply(m4);
      this[_currentMatrixIsIdentity] = this[_currentMatrix].isIdentity();
    }
    skew(sx, sy) {
      this[_currentMatrixIsIdentity] = false;
      let skewMatrix = engine.Matrix4.identity();
      let storage = skewMatrix.storage;
      storage[$_set](1, sy);
      storage[$_set](4, sx);
      this[_currentMatrix].multiply(skewMatrix);
    }
    clipRect(rect) {
      if (!dart.test(this[_currentMatrixIsIdentity])) {
        let leftTop = this[_currentMatrix].transform3(engine.Vector3.new(rect.left, rect.top, 0.0));
        let rightTop = this[_currentMatrix].transform3(engine.Vector3.new(rect.right, rect.top, 0.0));
        let leftBottom = this[_currentMatrix].transform3(engine.Vector3.new(rect.left, rect.bottom, 0.0));
        let rightBottom = this[_currentMatrix].transform3(engine.Vector3.new(rect.right, rect.bottom, 0.0));
        rect = new ui.Rect.fromLTRB(math.min(core.double, math.min(core.double, math.min(core.double, leftTop.x, rightTop.x), leftBottom.x), rightBottom.x), math.min(core.double, math.min(core.double, math.min(core.double, leftTop.y, rightTop.y), leftBottom.y), rightBottom.y), math.max(core.double, math.max(core.double, math.max(core.double, leftTop.x, rightTop.x), leftBottom.x), rightBottom.x), math.max(core.double, math.max(core.double, math.max(core.double, leftTop.y, rightTop.y), leftBottom.y), rightBottom.y));
      }
      if (!dart.test(this[_clipRectInitialized])) {
        this[_currentClipLeft] = rect.left;
        this[_currentClipTop] = rect.top;
        this[_currentClipRight] = rect.right;
        this[_currentClipBottom] = rect.bottom;
        this[_clipRectInitialized] = true;
      } else {
        if (dart.notNull(rect.left) > dart.notNull(this[_currentClipLeft])) {
          this[_currentClipLeft] = rect.left;
        }
        if (dart.notNull(rect.top) > dart.notNull(this[_currentClipTop])) {
          this[_currentClipTop] = rect.top;
        }
        if (dart.notNull(rect.right) < dart.notNull(this[_currentClipRight])) {
          this[_currentClipRight] = rect.right;
        }
        if (dart.notNull(rect.bottom) < dart.notNull(this[_currentClipBottom])) {
          this[_currentClipBottom] = rect.bottom;
        }
      }
    }
    grow(r) {
      this.growLTRB(r.left, r.top, r.right, r.bottom);
    }
    growLTRB(left, top, right, bottom) {
      if (left == right || top == bottom) {
        return;
      }
      let transformedPointLeft = left;
      let transformedPointTop = top;
      let transformedPointRight = right;
      let transformedPointBottom = bottom;
      if (!dart.test(this[_currentMatrixIsIdentity])) {
        let transformedRect = engine.transformLTRB(this[_currentMatrix], left, top, right, bottom);
        transformedPointLeft = transformedRect.left;
        transformedPointTop = transformedRect.top;
        transformedPointRight = transformedRect.right;
        transformedPointBottom = transformedRect.bottom;
      }
      if (dart.test(this[_clipRectInitialized])) {
        if (dart.notNull(transformedPointLeft) > dart.notNull(this[_currentClipRight])) {
          return;
        }
        if (dart.notNull(transformedPointRight) < dart.notNull(this[_currentClipLeft])) {
          return;
        }
        if (dart.notNull(transformedPointTop) > dart.notNull(this[_currentClipBottom])) {
          return;
        }
        if (dart.notNull(transformedPointBottom) < dart.notNull(this[_currentClipTop])) {
          return;
        }
        if (dart.notNull(transformedPointLeft) < dart.notNull(this[_currentClipLeft])) {
          transformedPointLeft = this[_currentClipLeft];
        }
        if (dart.notNull(transformedPointRight) > dart.notNull(this[_currentClipRight])) {
          transformedPointRight = this[_currentClipRight];
        }
        if (dart.notNull(transformedPointTop) < dart.notNull(this[_currentClipTop])) {
          transformedPointTop = this[_currentClipTop];
        }
        if (dart.notNull(transformedPointBottom) > dart.notNull(this[_currentClipBottom])) {
          transformedPointBottom = this[_currentClipBottom];
        }
      }
      if (dart.test(this[_didPaintInsideClipArea])) {
        this[_left] = math.min(core.double, math.min(core.double, this[_left], transformedPointLeft), transformedPointRight);
        this[_right] = math.max(core.double, math.max(core.double, this[_right], transformedPointLeft), transformedPointRight);
        this[_top] = math.min(core.double, math.min(core.double, this[_top], transformedPointTop), transformedPointBottom);
        this[_bottom] = math.max(core.double, math.max(core.double, this[_bottom], transformedPointTop), transformedPointBottom);
      } else {
        this[_left] = math.min(core.double, transformedPointLeft, transformedPointRight);
        this[_right] = math.max(core.double, transformedPointLeft, transformedPointRight);
        this[_top] = math.min(core.double, transformedPointTop, transformedPointBottom);
        this[_bottom] = math.max(core.double, transformedPointTop, transformedPointBottom);
      }
      this[_didPaintInsideClipArea] = true;
    }
    saveTransformsAndClip() {
      let t5;
      this[_clipStack] == null ? this[_clipStack] = JSArrayOfRect().of([]) : null;
      this[_transforms] == null ? this[_transforms] = JSArrayOfMatrix4().of([]) : null;
      this[_transforms][$add]((t5 = this[_currentMatrix], t5 == null ? null : t5.clone()));
      this[_clipStack][$add](dart.test(this[_clipRectInitialized]) ? new ui.Rect.fromLTRB(this[_currentClipLeft], this[_currentClipTop], this[_currentClipRight], this[_currentClipBottom]) : null);
    }
    restoreTransformsAndClip() {
      this[_currentMatrix] = this[_transforms][$removeLast]();
      let clipRect = this[_clipStack][$removeLast]();
      if (clipRect != null) {
        this[_currentClipLeft] = clipRect.left;
        this[_currentClipTop] = clipRect.top;
        this[_currentClipRight] = clipRect.right;
        this[_currentClipBottom] = clipRect.bottom;
        this[_clipRectInitialized] = true;
      } else if (dart.test(this[_clipRectInitialized])) {
        this[_clipRectInitialized] = false;
      }
    }
    computeBounds() {
      if (!dart.test(this[_didPaintInsideClipArea])) {
        return ui.Rect.zero;
      }
      let maxLeft = this.maxPaintBounds.left[$isNaN] ? -1 / 0 : this.maxPaintBounds.left;
      let maxRight = this.maxPaintBounds.right[$isNaN] ? 1 / 0 : this.maxPaintBounds.right;
      let maxTop = this.maxPaintBounds.top[$isNaN] ? -1 / 0 : this.maxPaintBounds.top;
      let maxBottom = this.maxPaintBounds.bottom[$isNaN] ? 1 / 0 : this.maxPaintBounds.bottom;
      let left = math.min(core.double, this[_left], this[_right]);
      let right = math.max(core.double, this[_left], this[_right]);
      let top = math.min(core.double, this[_top], this[_bottom]);
      let bottom = math.max(core.double, this[_top], this[_bottom]);
      if (right < dart.notNull(maxLeft) || bottom < dart.notNull(maxTop)) {
        return ui.Rect.zero;
      }
      return new ui.Rect.fromLTRB(math.max(core.double, left, maxLeft), math.max(core.double, top, maxTop), math.min(core.double, right, maxRight), math.min(core.double, bottom, maxBottom));
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        let bounds = this.computeBounds();
        return "_PaintBounds(" + dart.str(bounds) + " of size " + dart.str(bounds.size) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine._PaintBounds.new = function(maxPaintBounds) {
    this[_didPaintInsideClipArea] = false;
    this[_left] = null;
    this[_top] = null;
    this[_right] = null;
    this[_bottom] = null;
    this[_transforms] = null;
    this[_clipStack] = null;
    this[_currentMatrixIsIdentity] = true;
    this[_currentMatrix] = engine.Matrix4.identity();
    this[_clipRectInitialized] = false;
    this[_currentClipLeft] = 0.0;
    this[_currentClipTop] = 0.0;
    this[_currentClipRight] = 0.0;
    this[_currentClipBottom] = 0.0;
    this.maxPaintBounds = maxPaintBounds;
    ;
  }).prototype = engine._PaintBounds.prototype;
  dart.addTypeTests(engine._PaintBounds);
  dart.setMethodSignature(engine._PaintBounds, () => ({
    __proto__: dart.getMethods(engine._PaintBounds.__proto__),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double, core.double]),
    rotateZ: dart.fnType(dart.void, [core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    grow: dart.fnType(dart.void, [ui.Rect]),
    growLTRB: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    saveTransformsAndClip: dart.fnType(dart.void, []),
    restoreTransformsAndClip: dart.fnType(dart.void, []),
    computeBounds: dart.fnType(ui.Rect, [])
  }));
  dart.setLibraryUri(engine._PaintBounds, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._PaintBounds, () => ({
    __proto__: dart.getFields(engine._PaintBounds.__proto__),
    maxPaintBounds: dart.finalFieldType(ui.Rect),
    [_didPaintInsideClipArea]: dart.fieldType(core.bool),
    [_left]: dart.fieldType(core.double),
    [_top]: dart.fieldType(core.double),
    [_right]: dart.fieldType(core.double),
    [_bottom]: dart.fieldType(core.double),
    [_transforms]: dart.fieldType(core.List$(engine.Matrix4)),
    [_clipStack]: dart.fieldType(core.List$(ui.Rect)),
    [_currentMatrixIsIdentity]: dart.fieldType(core.bool),
    [_currentMatrix]: dart.fieldType(engine.Matrix4),
    [_clipRectInitialized]: dart.fieldType(core.bool),
    [_currentClipLeft]: dart.fieldType(core.double),
    [_currentClipTop]: dart.fieldType(core.double),
    [_currentClipRight]: dart.fieldType(core.double),
    [_currentClipBottom]: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(engine._PaintBounds, ['toString']);
  const _removeElementTimer = dart.privateName(engine, "_removeElementTimer");
  let C64;
  const _element$ = dart.privateName(engine, "_element");
  const _createElement = dart.privateName(engine, "_createElement");
  const _domElement = dart.privateName(engine, "_domElement");
  let C65;
  const _initLiveRegion = dart.privateName(engine, "_initLiveRegion");
  const AccessibilityAnnouncements_durationA11yMessageIsOnDom = dart.privateName(engine, "AccessibilityAnnouncements.durationA11yMessageIsOnDom");
  engine.AccessibilityAnnouncements = class AccessibilityAnnouncements extends core.Object {
    get durationA11yMessageIsOnDom() {
      return this[durationA11yMessageIsOnDom];
    }
    set durationA11yMessageIsOnDom(value) {
      this[durationA11yMessageIsOnDom] = value;
    }
    static get instance() {
      let t5;
      t5 = engine.AccessibilityAnnouncements._instance;
      return t5 == null ? engine.AccessibilityAnnouncements._instance = new engine.AccessibilityAnnouncements.__() : t5;
    }
    get [_domElement]() {
      let t5;
      t5 = this[_element$];
      return t5 == null ? this[_element$] = this[_createElement]() : t5;
    }
    handleMessage(data) {
      let inputMap = core.Map._check((C65 || CT.C65).decodeMessage(data));
      let dataMap = core.Map._check(inputMap[$_get]("data"));
      let message = core.String._check(dataMap[$_get]("message"));
      if (message != null && message[$isNotEmpty]) {
        this[_initLiveRegion](message);
        this[_removeElementTimer] = async.Timer.new(this.durationA11yMessageIsOnDom, dart.fn(() => {
          this[_element$][$remove]();
        }, VoidToNull()));
      }
    }
    [_initLiveRegion](message) {
      this[_domElement][$setAttribute]("aria-live", "polite");
      this[_domElement][$text] = message;
      html.document.body[$append](this[_domElement]);
    }
    [_createElement]() {
      let t5;
      let liveRegion = html.LabelElement.new();
      liveRegion[$setAttribute]("id", "accessibility-element");
      t5 = liveRegion.style;
      t5[$position] = "fixed";
      t5[$overflow] = "hidden";
      t5[$transform] = "translate(-99999px, -99999px)";
      t5[$width] = "1px";
      t5[$height] = "1px";
      t5;
      return liveRegion;
    }
  };
  (engine.AccessibilityAnnouncements.__ = function() {
    this[_removeElementTimer] = null;
    this[durationA11yMessageIsOnDom] = C64 || CT.C64;
    this[_element$] = null;
    engine.registerHotRestartListener(dart.fn(() => {
      let t5;
      t5 = this[_removeElementTimer];
      t5 == null ? null : t5.cancel();
    }, VoidToNull()));
  }).prototype = engine.AccessibilityAnnouncements.prototype;
  dart.addTypeTests(engine.AccessibilityAnnouncements);
  const durationA11yMessageIsOnDom = AccessibilityAnnouncements_durationA11yMessageIsOnDom;
  dart.setMethodSignature(engine.AccessibilityAnnouncements, () => ({
    __proto__: dart.getMethods(engine.AccessibilityAnnouncements.__proto__),
    handleMessage: dart.fnType(dart.void, [typed_data.ByteData]),
    [_initLiveRegion]: dart.fnType(dart.void, [core.String]),
    [_createElement]: dart.fnType(html.LabelElement, [])
  }));
  dart.setGetterSignature(engine.AccessibilityAnnouncements, () => ({
    __proto__: dart.getGetters(engine.AccessibilityAnnouncements.__proto__),
    [_domElement]: html.HtmlElement
  }));
  dart.setLibraryUri(engine.AccessibilityAnnouncements, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.AccessibilityAnnouncements, () => ({
    __proto__: dart.getFields(engine.AccessibilityAnnouncements.__proto__),
    [_removeElementTimer]: dart.fieldType(async.Timer),
    durationA11yMessageIsOnDom: dart.fieldType(core.Duration),
    [_element$]: dart.fieldType(html.HtmlElement)
  }));
  dart.defineLazy(engine.AccessibilityAnnouncements, {
    /*engine.AccessibilityAnnouncements._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  let C66;
  let C67;
  let C68;
  let C69;
  engine._CheckableKind = class _CheckableKind extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine._CheckableKind.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine._CheckableKind.prototype;
  dart.addTypeTests(engine._CheckableKind);
  dart.setLibraryUri(engine._CheckableKind, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._CheckableKind, () => ({
    __proto__: dart.getFields(engine._CheckableKind.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine._CheckableKind, ['toString']);
  engine._CheckableKind.checkbox = C66 || CT.C66;
  engine._CheckableKind.radio = C67 || CT.C67;
  engine._CheckableKind.toggle = C68 || CT.C68;
  engine._CheckableKind.values = C69 || CT.C69;
  const _kind = dart.privateName(engine, "_kind");
  const _updateDisabledAttribute = dart.privateName(engine, "_updateDisabledAttribute");
  const _removeDisabledAttribute = dart.privateName(engine, "_removeDisabledAttribute");
  const RoleManager_role = dart.privateName(engine, "RoleManager.role");
  const RoleManager_semanticsObject = dart.privateName(engine, "RoleManager.semanticsObject");
  engine.RoleManager = class RoleManager extends core.Object {
    get role() {
      return this[role$];
    }
    set role(value) {
      super.role = value;
    }
    get semanticsObject() {
      return this[semanticsObject$];
    }
    set semanticsObject(value) {
      super.semanticsObject = value;
    }
  };
  (engine.RoleManager.new = function(role, semanticsObject) {
    this[role$] = role;
    this[semanticsObject$] = semanticsObject;
    if (!(semanticsObject != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 193, 16, "semanticsObject != null");
    ;
  }).prototype = engine.RoleManager.prototype;
  dart.addTypeTests(engine.RoleManager);
  const role$ = RoleManager_role;
  const semanticsObject$ = RoleManager_semanticsObject;
  dart.setLibraryUri(engine.RoleManager, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.RoleManager, () => ({
    __proto__: dart.getFields(engine.RoleManager.__proto__),
    role: dart.finalFieldType(engine.Role),
    semanticsObject: dart.finalFieldType(engine.SemanticsObject)
  }));
  engine.Checkable = class Checkable extends engine.RoleManager {
    update() {
      if (dart.test(this.semanticsObject.isFlagsDirty)) {
        switch (this[_kind]) {
          case C66 || CT.C66:
          {
            this.semanticsObject.setAriaRole("checkbox", true);
            break;
          }
          case C67 || CT.C67:
          {
            this.semanticsObject.setAriaRole("radio", true);
            break;
          }
          case C68 || CT.C68:
          {
            this.semanticsObject.setAriaRole("switch", true);
            break;
          }
        }
        this[_updateDisabledAttribute]();
        this.semanticsObject.element[$setAttribute]("aria-checked", dart.test(this.semanticsObject.hasFlag(ui.SemanticsFlag.isChecked)) || dart.test(this.semanticsObject.hasFlag(ui.SemanticsFlag.isToggled)) ? "true" : "false");
      }
    }
    dispose() {
      switch (this[_kind]) {
        case C66 || CT.C66:
        {
          this.semanticsObject.setAriaRole("checkbox", false);
          break;
        }
        case C67 || CT.C67:
        {
          this.semanticsObject.setAriaRole("radio", false);
          break;
        }
        case C68 || CT.C68:
        {
          this.semanticsObject.setAriaRole("switch", false);
          break;
        }
      }
      this[_removeDisabledAttribute]();
    }
    [_updateDisabledAttribute]() {
      let t5;
      if (!dart.test(this.semanticsObject.hasFlag(ui.SemanticsFlag.isEnabled))) {
        let element = this.semanticsObject.element;
        t5 = element;
        t5[$setAttribute]("aria-disabled", "true");
        t5[$setAttribute]("disabled", "true");
        t5;
      } else {
        this[_removeDisabledAttribute]();
      }
    }
    [_removeDisabledAttribute]() {
      let t5;
      let element = this.semanticsObject.element;
      t5 = element;
      t5[$removeAttribute]("aria-disabled");
      t5[$removeAttribute]("disabled");
      t5;
    }
  };
  (engine.Checkable.new = function(semanticsObject) {
    this[_kind] = null;
    engine.Checkable.__proto__.new.call(this, engine.Role.checkable, semanticsObject);
    if (dart.test(semanticsObject.hasFlag(ui.SemanticsFlag.isInMutuallyExclusiveGroup))) {
      this[_kind] = engine._CheckableKind.radio;
    } else if (dart.test(semanticsObject.hasFlag(ui.SemanticsFlag.hasToggledState))) {
      this[_kind] = engine._CheckableKind.toggle;
    } else {
      this[_kind] = engine._CheckableKind.checkbox;
    }
  }).prototype = engine.Checkable.prototype;
  dart.addTypeTests(engine.Checkable);
  dart.setMethodSignature(engine.Checkable, () => ({
    __proto__: dart.getMethods(engine.Checkable.__proto__),
    update: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, []),
    [_updateDisabledAttribute]: dart.fnType(dart.void, []),
    [_removeDisabledAttribute]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.Checkable, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Checkable, () => ({
    __proto__: dart.getFields(engine.Checkable.__proto__),
    [_kind]: dart.fieldType(engine._CheckableKind)
  }));
  const _auxiliaryImageElement = dart.privateName(engine, "_auxiliaryImageElement");
  const _setLabel = dart.privateName(engine, "_setLabel");
  const _cleanUpAuxiliaryElement = dart.privateName(engine, "_cleanUpAuxiliaryElement");
  const _cleanupElement = dart.privateName(engine, "_cleanupElement");
  engine.ImageRoleManager = class ImageRoleManager extends engine.RoleManager {
    update() {
      let t5;
      if (dart.test(this.semanticsObject.isVisualOnly) && dart.test(this.semanticsObject.hasChildren)) {
        if (this[_auxiliaryImageElement] == null) {
          this[_auxiliaryImageElement] = html.Element.tag("flt-semantics-img");
          if (dart.test(this.semanticsObject.hasChildren)) {
            t5 = this[_auxiliaryImageElement].style;
            t5[$position] = "absolute";
            t5[$top] = "0";
            t5[$left] = "0";
            t5[$width] = dart.str(this.semanticsObject.rect.width) + "px";
            t5[$height] = dart.str(this.semanticsObject.rect.height) + "px";
            t5;
          }
          this[_auxiliaryImageElement].style[$fontSize] = "6px";
          this.semanticsObject.element[$append](this[_auxiliaryImageElement]);
        }
        this[_auxiliaryImageElement][$setAttribute]("role", "img");
        this[_setLabel](this[_auxiliaryImageElement]);
      } else if (dart.test(this.semanticsObject.isVisualOnly)) {
        this.semanticsObject.setAriaRole("img", true);
        this[_setLabel](this.semanticsObject.element);
        this[_cleanUpAuxiliaryElement]();
      } else {
        this[_cleanUpAuxiliaryElement]();
        this[_cleanupElement]();
      }
    }
    [_setLabel](element) {
      if (dart.test(this.semanticsObject.hasLabel)) {
        element[$setAttribute]("aria-label", this.semanticsObject.label);
      }
    }
    [_cleanUpAuxiliaryElement]() {
      if (this[_auxiliaryImageElement] != null) {
        this[_auxiliaryImageElement][$remove]();
        this[_auxiliaryImageElement] = null;
      }
    }
    [_cleanupElement]() {
      this.semanticsObject.setAriaRole("img", false);
      this.semanticsObject.element[$attributes][$remove]("aria-label");
    }
    dispose() {
      this[_cleanUpAuxiliaryElement]();
      this[_cleanupElement]();
    }
  };
  (engine.ImageRoleManager.new = function(semanticsObject) {
    this[_auxiliaryImageElement] = null;
    engine.ImageRoleManager.__proto__.new.call(this, engine.Role.image, semanticsObject);
    ;
  }).prototype = engine.ImageRoleManager.prototype;
  dart.addTypeTests(engine.ImageRoleManager);
  dart.setMethodSignature(engine.ImageRoleManager, () => ({
    __proto__: dart.getMethods(engine.ImageRoleManager.__proto__),
    update: dart.fnType(dart.void, []),
    [_setLabel]: dart.fnType(dart.void, [html.Element]),
    [_cleanUpAuxiliaryElement]: dart.fnType(dart.void, []),
    [_cleanupElement]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.ImageRoleManager, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ImageRoleManager, () => ({
    __proto__: dart.getFields(engine.ImageRoleManager.__proto__),
    [_auxiliaryImageElement]: dart.fieldType(html.Element)
  }));
  const _currentSurrogateValue = dart.privateName(engine, "_currentSurrogateValue");
  const _gestureModeListener = dart.privateName(engine, "_gestureModeListener");
  const _pendingResync = dart.privateName(engine, "_pendingResync");
  const _enableBrowserGestureHandling = dart.privateName(engine, "_enableBrowserGestureHandling");
  const _updateInputValues = dart.privateName(engine, "_updateInputValues");
  let C70;
  const _disableBrowserGestureHandling = dart.privateName(engine, "_disableBrowserGestureHandling");
  let C71;
  engine.Incrementable = class Incrementable extends engine.RoleManager {
    update() {
      switch (this.semanticsObject.owner.gestureMode) {
        case C70 || CT.C70:
        {
          this[_enableBrowserGestureHandling]();
          this[_updateInputValues]();
          break;
        }
        case C71 || CT.C71:
        {
          this[_disableBrowserGestureHandling]();
          break;
        }
      }
    }
    [_enableBrowserGestureHandling]() {
      if (!dart.equals(this.semanticsObject.owner.gestureMode, engine.GestureMode.browserGestures)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/incrementable.dart", 86, 12, "semanticsObject.owner.gestureMode == GestureMode.browserGestures");
      if (!dart.test(this[_element$].disabled)) {
        return;
      }
      this[_element$].disabled = false;
    }
    [_updateInputValues]() {
      if (!dart.equals(this.semanticsObject.owner.gestureMode, engine.GestureMode.browserGestures)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/incrementable.dart", 94, 12, "semanticsObject.owner.gestureMode == GestureMode.browserGestures");
      let updateNeeded = dart.test(this[_pendingResync]) || dart.test(this.semanticsObject.isValueDirty) || dart.test(this.semanticsObject.isIncreasedValueDirty) || dart.test(this.semanticsObject.isDecreasedValueDirty);
      if (!updateNeeded) {
        return;
      }
      this[_pendingResync] = false;
      let surrogateTextValue = dart.str(this[_currentSurrogateValue]);
      this[_element$].value = surrogateTextValue;
      this[_element$][$setAttribute]("aria-valuenow", surrogateTextValue);
      this[_element$][$setAttribute]("aria-valuetext", this.semanticsObject.value);
      let canIncrease = this.semanticsObject.increasedValue != null;
      let surrogateMaxTextValue = canIncrease ? dart.str(dart.notNull(this[_currentSurrogateValue]) + 1) : surrogateTextValue;
      this[_element$].max = surrogateMaxTextValue;
      this[_element$][$setAttribute]("aria-valuemax", surrogateMaxTextValue);
      let canDecrease = this.semanticsObject.decreasedValue != null;
      let surrogateMinTextValue = canDecrease ? dart.str(dart.notNull(this[_currentSurrogateValue]) - 1) : surrogateTextValue;
      this[_element$].min = surrogateMinTextValue;
      this[_element$][$setAttribute]("aria-valuemin", surrogateMinTextValue);
    }
    [_disableBrowserGestureHandling]() {
      if (dart.test(this[_element$].disabled)) {
        return;
      }
      this[_element$].disabled = true;
    }
    dispose() {
      if (!(this[_gestureModeListener] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/incrementable.dart", 134, 12, "_gestureModeListener != null");
      this.semanticsObject.owner.removeGestureModeListener(this[_gestureModeListener]);
      this[_gestureModeListener] = null;
      this[_disableBrowserGestureHandling]();
      this[_element$][$remove]();
    }
  };
  (engine.Incrementable.new = function(semanticsObject) {
    this[_element$] = html.InputElement.new();
    this[_currentSurrogateValue] = 1;
    this[_gestureModeListener] = null;
    this[_pendingResync] = false;
    engine.Incrementable.__proto__.new.call(this, engine.Role.incrementable, semanticsObject);
    semanticsObject.element[$append](this[_element$]);
    this[_element$].type = "range";
    this[_element$][$setAttribute]("role", "slider");
    this[_element$][$addEventListener]("change", dart.fn(_ => {
      if (dart.test(this[_element$].disabled)) {
        return;
      }
      this[_pendingResync] = true;
      let newInputValue = core.int.parse(this[_element$].value);
      if (dart.notNull(newInputValue) > dart.notNull(this[_currentSurrogateValue])) {
        this[_currentSurrogateValue] = dart.notNull(this[_currentSurrogateValue]) + 1;
        ui.window.onSemanticsAction(semanticsObject.id, ui.SemanticsAction.increase, null);
      } else if (dart.notNull(newInputValue) < dart.notNull(this[_currentSurrogateValue])) {
        this[_currentSurrogateValue] = dart.notNull(this[_currentSurrogateValue]) - 1;
        ui.window.onSemanticsAction(semanticsObject.id, ui.SemanticsAction.decrease, null);
      }
    }, EventToNull()));
    this[_gestureModeListener] = dart.fn(mode => {
      this.update();
    }, GestureModeToNull());
    semanticsObject.owner.addGestureModeListener(this[_gestureModeListener]);
  }).prototype = engine.Incrementable.prototype;
  dart.addTypeTests(engine.Incrementable);
  dart.setMethodSignature(engine.Incrementable, () => ({
    __proto__: dart.getMethods(engine.Incrementable.__proto__),
    update: dart.fnType(dart.void, []),
    [_enableBrowserGestureHandling]: dart.fnType(dart.void, []),
    [_updateInputValues]: dart.fnType(dart.void, []),
    [_disableBrowserGestureHandling]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.Incrementable, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Incrementable, () => ({
    __proto__: dart.getFields(engine.Incrementable.__proto__),
    [_element$]: dart.finalFieldType(html.InputElement),
    [_currentSurrogateValue]: dart.fieldType(core.int),
    [_gestureModeListener]: dart.fieldType(dart.fnType(dart.void, [engine.GestureMode])),
    [_pendingResync]: dart.fieldType(core.bool)
  }));
  const _auxiliaryValueElement = dart.privateName(engine, "_auxiliaryValueElement");
  const _cleanUpDom = dart.privateName(engine, "_cleanUpDom");
  engine.LabelAndValue = class LabelAndValue extends engine.RoleManager {
    update() {
      let t5;
      let hasValue = this.semanticsObject.hasValue;
      let hasLabel = this.semanticsObject.hasLabel;
      let shouldDisplayValue = dart.test(hasValue) && !dart.test(this.semanticsObject.isIncrementable) && !dart.test(this.semanticsObject.isTextField);
      if (!dart.test(hasLabel) && !shouldDisplayValue) {
        this[_cleanUpDom]();
        return;
      }
      let combinedValue = new core.StringBuffer.new();
      if (dart.test(hasLabel)) {
        combinedValue.write(this.semanticsObject.label);
        if (shouldDisplayValue) {
          combinedValue.write(" ");
        }
      }
      if (shouldDisplayValue) {
        combinedValue.write(this.semanticsObject.value);
      }
      this.semanticsObject.element[$setAttribute]("aria-label", combinedValue.toString());
      if (dart.test(this.semanticsObject.hasFlag(ui.SemanticsFlag.isHeader))) {
        this.semanticsObject.setAriaRole("heading", true);
      }
      if (this[_auxiliaryValueElement] == null) {
        this[_auxiliaryValueElement] = html.Element.tag("flt-semantics-value");
        if (dart.test(this.semanticsObject.hasChildren)) {
          t5 = this[_auxiliaryValueElement].style;
          t5[$position] = "absolute";
          t5[$top] = "0";
          t5[$left] = "0";
          t5[$width] = dart.str(this.semanticsObject.rect.width) + "px";
          t5[$height] = dart.str(this.semanticsObject.rect.height) + "px";
          t5;
        }
        this[_auxiliaryValueElement].style[$fontSize] = "6px";
        this.semanticsObject.element[$append](this[_auxiliaryValueElement]);
      }
      this[_auxiliaryValueElement][$text] = combinedValue.toString();
    }
    [_cleanUpDom]() {
      if (this[_auxiliaryValueElement] != null) {
        this[_auxiliaryValueElement][$remove]();
        this[_auxiliaryValueElement] = null;
      }
      this.semanticsObject.element[$attributes][$remove]("aria-label");
      this.semanticsObject.setAriaRole("heading", false);
    }
    dispose() {
      this[_cleanUpDom]();
    }
  };
  (engine.LabelAndValue.new = function(semanticsObject) {
    this[_auxiliaryValueElement] = null;
    engine.LabelAndValue.__proto__.new.call(this, engine.Role.labelAndValue, semanticsObject);
    ;
  }).prototype = engine.LabelAndValue.prototype;
  dart.addTypeTests(engine.LabelAndValue);
  dart.setMethodSignature(engine.LabelAndValue, () => ({
    __proto__: dart.getMethods(engine.LabelAndValue.__proto__),
    update: dart.fnType(dart.void, []),
    [_cleanUpDom]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.LabelAndValue, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.LabelAndValue, () => ({
    __proto__: dart.getFields(engine.LabelAndValue.__proto__),
    [_auxiliaryValueElement]: dart.fieldType(html.Element)
  }));
  const _cleanupDom = dart.privateName(engine, "_cleanupDom");
  engine.LiveRegion = class LiveRegion extends engine.RoleManager {
    update() {
      if (dart.test(this.semanticsObject.hasLabel)) {
        this.semanticsObject.element[$setAttribute]("aria-live", "polite");
      } else {
        this[_cleanupDom]();
      }
    }
    [_cleanupDom]() {
      this.semanticsObject.element[$attributes][$remove]("aria-live");
    }
    dispose() {
      this[_cleanupDom]();
    }
  };
  (engine.LiveRegion.new = function(semanticsObject) {
    engine.LiveRegion.__proto__.new.call(this, engine.Role.labelAndValue, semanticsObject);
    ;
  }).prototype = engine.LiveRegion.prototype;
  dart.addTypeTests(engine.LiveRegion);
  dart.setMethodSignature(engine.LiveRegion, () => ({
    __proto__: dart.getMethods(engine.LiveRegion.__proto__),
    update: dart.fnType(dart.void, []),
    [_cleanupDom]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.LiveRegion, "package:flutter_web_ui/src/engine.dart");
  const _scrollListener = dart.privateName(engine, "_scrollListener");
  const _effectiveNeutralScrollPosition = dart.privateName(engine, "_effectiveNeutralScrollPosition");
  const _domScrollPosition = dart.privateName(engine, "_domScrollPosition");
  const _neutralizeDomScrollPosition = dart.privateName(engine, "_neutralizeDomScrollPosition");
  const _recomputeScrollPosition = dart.privateName(engine, "_recomputeScrollPosition");
  const _gestureModeDidChange = dart.privateName(engine, "_gestureModeDidChange");
  engine.Scrollable = class Scrollable extends engine.RoleManager {
    [_recomputeScrollPosition]() {
      if (this[_domScrollPosition] != this[_effectiveNeutralScrollPosition]) {
        if (!dart.test(this.semanticsObject.owner.shouldAcceptBrowserGesture("scroll"))) {
          return;
        }
        let doScrollForward = dart.notNull(this[_domScrollPosition]) > dart.notNull(this[_effectiveNeutralScrollPosition]);
        this[_neutralizeDomScrollPosition]();
        this.semanticsObject.recomputePositionAndSize();
        let semanticsId = this.semanticsObject.id;
        if (doScrollForward) {
          if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
            ui.window.onSemanticsAction(semanticsId, ui.SemanticsAction.scrollUp, null);
          } else {
            if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/scrollable.dart", 58, 18, "semanticsObject.isHorizontalScrollContainer");
            ui.window.onSemanticsAction(semanticsId, ui.SemanticsAction.scrollLeft, null);
          }
        } else {
          if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
            ui.window.onSemanticsAction(semanticsId, ui.SemanticsAction.scrollDown, null);
          } else {
            if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/scrollable.dart", 67, 18, "semanticsObject.isHorizontalScrollContainer");
            ui.window.onSemanticsAction(semanticsId, ui.SemanticsAction.scrollRight, null);
          }
        }
      }
    }
    update() {
      if (this[_scrollListener] == null) {
        this.semanticsObject.element.style[$touchAction] = "none";
        this[_gestureModeDidChange]();
        this.semanticsObject.owner.addOneTimePostUpdateCallback(dart.fn(() => {
          this[_neutralizeDomScrollPosition]();
        }, VoidToNull()));
        this[_gestureModeListener] = dart.fn(_ => {
          this[_gestureModeDidChange]();
        }, GestureModeToNull());
        this.semanticsObject.owner.addGestureModeListener(this[_gestureModeListener]);
        this[_scrollListener] = dart.fn(_ => {
          this[_recomputeScrollPosition]();
        }, EventToNull());
        this.semanticsObject.element[$addEventListener]("scroll", this[_scrollListener]);
      }
    }
    get [_domScrollPosition]() {
      if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
        return this.semanticsObject.element[$scrollTop];
      } else {
        if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/scrollable.dart", 117, 14, "semanticsObject.isHorizontalScrollContainer");
        return this.semanticsObject.element[$scrollLeft];
      }
    }
    [_neutralizeDomScrollPosition]() {
      let t5, t5$;
      let element = this.semanticsObject.element;
      if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
        element[$scrollTop] = 10;
        this[_effectiveNeutralScrollPosition] = element[$scrollTop];
        t5 = this.semanticsObject;
        t5.verticalContainerAdjustment = this[_effectiveNeutralScrollPosition][$toDouble]();
        t5.horizontalContainerAdjustment = 0.0;
        t5;
      } else {
        element[$scrollLeft] = 10;
        this[_effectiveNeutralScrollPosition] = element[$scrollLeft];
        t5$ = this.semanticsObject;
        t5$.verticalContainerAdjustment = 0.0;
        t5$.horizontalContainerAdjustment = this[_effectiveNeutralScrollPosition][$toDouble]();
        t5$;
      }
    }
    [_gestureModeDidChange]() {
      let element = this.semanticsObject.element;
      switch (this.semanticsObject.owner.gestureMode) {
        case C70 || CT.C70:
        {
          if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
            element.style[$overflowY] = "scroll";
          } else {
            if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/scrollable.dart", 168, 18, "semanticsObject.isHorizontalScrollContainer");
            element.style[$overflowX] = "scroll";
          }
          break;
        }
        case C71 || CT.C71:
        {
          if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
            element.style[$overflowY] = "hidden";
          } else {
            if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/scrollable.dart", 179, 18, "semanticsObject.isHorizontalScrollContainer");
            element.style[$overflowX] = "hidden";
          }
          break;
        }
      }
    }
    dispose() {
      let style = this.semanticsObject.element.style;
      if (!(this[_gestureModeListener] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/scrollable.dart", 189, 12, "_gestureModeListener != null");
      style.removeProperty("overflowY");
      style.removeProperty("overflowX");
      style.removeProperty("touch-action");
      if (this[_scrollListener] != null) {
        this.semanticsObject.element[$removeEventListener]("scroll", this[_scrollListener]);
      }
      this.semanticsObject.owner.removeGestureModeListener(this[_gestureModeListener]);
      this[_gestureModeListener] = null;
    }
  };
  (engine.Scrollable.new = function(semanticsObject) {
    this[_gestureModeListener] = null;
    this[_scrollListener] = null;
    this[_effectiveNeutralScrollPosition] = 0;
    engine.Scrollable.__proto__.new.call(this, engine.Role.scrollable, semanticsObject);
    ;
  }).prototype = engine.Scrollable.prototype;
  dart.addTypeTests(engine.Scrollable);
  dart.setMethodSignature(engine.Scrollable, () => ({
    __proto__: dart.getMethods(engine.Scrollable.__proto__),
    [_recomputeScrollPosition]: dart.fnType(dart.void, []),
    update: dart.fnType(dart.void, []),
    [_neutralizeDomScrollPosition]: dart.fnType(dart.void, []),
    [_gestureModeDidChange]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.Scrollable, () => ({
    __proto__: dart.getGetters(engine.Scrollable.__proto__),
    [_domScrollPosition]: core.int
  }));
  dart.setLibraryUri(engine.Scrollable, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Scrollable, () => ({
    __proto__: dart.getFields(engine.Scrollable.__proto__),
    [_gestureModeListener]: dart.fieldType(dart.fnType(dart.void, [engine.GestureMode])),
    [_scrollListener]: dart.fieldType(dart.fnType(dart.dynamic, [html.Event])),
    [_effectiveNeutralScrollPosition]: dart.fieldType(core.int)
  }));
  const _nodeUpdates = dart.privateName(engine, "_nodeUpdates");
  engine.SemanticsUpdate = class SemanticsUpdate extends core.Object {
    dispose() {
    }
  };
  (engine.SemanticsUpdate.new = function(opts) {
    let nodeUpdates = opts && 'nodeUpdates' in opts ? opts.nodeUpdates : null;
    this[_nodeUpdates] = nodeUpdates;
    ;
  }).prototype = engine.SemanticsUpdate.prototype;
  dart.addTypeTests(engine.SemanticsUpdate);
  engine.SemanticsUpdate[dart.implements] = () => [ui.SemanticsUpdate];
  dart.setMethodSignature(engine.SemanticsUpdate, () => ({
    __proto__: dart.getMethods(engine.SemanticsUpdate.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.SemanticsUpdate, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SemanticsUpdate, () => ({
    __proto__: dart.getFields(engine.SemanticsUpdate.__proto__),
    [_nodeUpdates]: dart.finalFieldType(core.List$(engine.SemanticsNodeUpdate))
  }));
  const SemanticsNodeUpdate_id = dart.privateName(engine, "SemanticsNodeUpdate.id");
  const SemanticsNodeUpdate_flags = dart.privateName(engine, "SemanticsNodeUpdate.flags");
  const SemanticsNodeUpdate_actions = dart.privateName(engine, "SemanticsNodeUpdate.actions");
  const SemanticsNodeUpdate_textSelectionBase = dart.privateName(engine, "SemanticsNodeUpdate.textSelectionBase");
  const SemanticsNodeUpdate_textSelectionExtent = dart.privateName(engine, "SemanticsNodeUpdate.textSelectionExtent");
  const SemanticsNodeUpdate_platformViewId = dart.privateName(engine, "SemanticsNodeUpdate.platformViewId");
  const SemanticsNodeUpdate_scrollChildren = dart.privateName(engine, "SemanticsNodeUpdate.scrollChildren");
  const SemanticsNodeUpdate_scrollIndex = dart.privateName(engine, "SemanticsNodeUpdate.scrollIndex");
  const SemanticsNodeUpdate_scrollPosition = dart.privateName(engine, "SemanticsNodeUpdate.scrollPosition");
  const SemanticsNodeUpdate_scrollExtentMax = dart.privateName(engine, "SemanticsNodeUpdate.scrollExtentMax");
  const SemanticsNodeUpdate_scrollExtentMin = dart.privateName(engine, "SemanticsNodeUpdate.scrollExtentMin");
  const SemanticsNodeUpdate_rect = dart.privateName(engine, "SemanticsNodeUpdate.rect");
  const SemanticsNodeUpdate_label = dart.privateName(engine, "SemanticsNodeUpdate.label");
  const SemanticsNodeUpdate_hint = dart.privateName(engine, "SemanticsNodeUpdate.hint");
  const SemanticsNodeUpdate_value = dart.privateName(engine, "SemanticsNodeUpdate.value");
  const SemanticsNodeUpdate_increasedValue = dart.privateName(engine, "SemanticsNodeUpdate.increasedValue");
  const SemanticsNodeUpdate_decreasedValue = dart.privateName(engine, "SemanticsNodeUpdate.decreasedValue");
  const SemanticsNodeUpdate_textDirection = dart.privateName(engine, "SemanticsNodeUpdate.textDirection");
  const SemanticsNodeUpdate_transform = dart.privateName(engine, "SemanticsNodeUpdate.transform");
  const SemanticsNodeUpdate_childrenInTraversalOrder = dart.privateName(engine, "SemanticsNodeUpdate.childrenInTraversalOrder");
  const SemanticsNodeUpdate_childrenInHitTestOrder = dart.privateName(engine, "SemanticsNodeUpdate.childrenInHitTestOrder");
  const SemanticsNodeUpdate_additionalActions = dart.privateName(engine, "SemanticsNodeUpdate.additionalActions");
  const SemanticsNodeUpdate_elevation = dart.privateName(engine, "SemanticsNodeUpdate.elevation");
  const SemanticsNodeUpdate_thickness = dart.privateName(engine, "SemanticsNodeUpdate.thickness");
  engine.SemanticsNodeUpdate = class SemanticsNodeUpdate extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get actions() {
      return this[actions$];
    }
    set actions(value) {
      super.actions = value;
    }
    get textSelectionBase() {
      return this[textSelectionBase$];
    }
    set textSelectionBase(value) {
      super.textSelectionBase = value;
    }
    get textSelectionExtent() {
      return this[textSelectionExtent$];
    }
    set textSelectionExtent(value) {
      super.textSelectionExtent = value;
    }
    get platformViewId() {
      return this[platformViewId$];
    }
    set platformViewId(value) {
      super.platformViewId = value;
    }
    get scrollChildren() {
      return this[scrollChildren$];
    }
    set scrollChildren(value) {
      super.scrollChildren = value;
    }
    get scrollIndex() {
      return this[scrollIndex$];
    }
    set scrollIndex(value) {
      super.scrollIndex = value;
    }
    get scrollPosition() {
      return this[scrollPosition$];
    }
    set scrollPosition(value) {
      super.scrollPosition = value;
    }
    get scrollExtentMax() {
      return this[scrollExtentMax$];
    }
    set scrollExtentMax(value) {
      super.scrollExtentMax = value;
    }
    get scrollExtentMin() {
      return this[scrollExtentMin$];
    }
    set scrollExtentMin(value) {
      super.scrollExtentMin = value;
    }
    get rect() {
      return this[rect$2];
    }
    set rect(value) {
      super.rect = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get hint() {
      return this[hint$];
    }
    set hint(value) {
      super.hint = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get increasedValue() {
      return this[increasedValue$];
    }
    set increasedValue(value) {
      super.increasedValue = value;
    }
    get decreasedValue() {
      return this[decreasedValue$];
    }
    set decreasedValue(value) {
      super.decreasedValue = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get childrenInTraversalOrder() {
      return this[childrenInTraversalOrder$];
    }
    set childrenInTraversalOrder(value) {
      super.childrenInTraversalOrder = value;
    }
    get childrenInHitTestOrder() {
      return this[childrenInHitTestOrder$];
    }
    set childrenInHitTestOrder(value) {
      super.childrenInHitTestOrder = value;
    }
    get additionalActions() {
      return this[additionalActions$];
    }
    set additionalActions(value) {
      super.additionalActions = value;
    }
    get elevation() {
      return this[elevation$0];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
  };
  (engine.SemanticsNodeUpdate.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    let textSelectionBase = opts && 'textSelectionBase' in opts ? opts.textSelectionBase : null;
    let textSelectionExtent = opts && 'textSelectionExtent' in opts ? opts.textSelectionExtent : null;
    let platformViewId = opts && 'platformViewId' in opts ? opts.platformViewId : null;
    let scrollChildren = opts && 'scrollChildren' in opts ? opts.scrollChildren : null;
    let scrollIndex = opts && 'scrollIndex' in opts ? opts.scrollIndex : null;
    let scrollPosition = opts && 'scrollPosition' in opts ? opts.scrollPosition : null;
    let scrollExtentMax = opts && 'scrollExtentMax' in opts ? opts.scrollExtentMax : null;
    let scrollExtentMin = opts && 'scrollExtentMin' in opts ? opts.scrollExtentMin : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let hint = opts && 'hint' in opts ? opts.hint : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let increasedValue = opts && 'increasedValue' in opts ? opts.increasedValue : null;
    let decreasedValue = opts && 'decreasedValue' in opts ? opts.decreasedValue : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let childrenInTraversalOrder = opts && 'childrenInTraversalOrder' in opts ? opts.childrenInTraversalOrder : null;
    let childrenInHitTestOrder = opts && 'childrenInHitTestOrder' in opts ? opts.childrenInHitTestOrder : null;
    let additionalActions = opts && 'additionalActions' in opts ? opts.additionalActions : null;
    this[id$] = id;
    this[flags$] = flags;
    this[actions$] = actions;
    this[textSelectionBase$] = textSelectionBase;
    this[textSelectionExtent$] = textSelectionExtent;
    this[platformViewId$] = platformViewId;
    this[scrollChildren$] = scrollChildren;
    this[scrollIndex$] = scrollIndex;
    this[scrollPosition$] = scrollPosition;
    this[scrollExtentMax$] = scrollExtentMax;
    this[scrollExtentMin$] = scrollExtentMin;
    this[rect$2] = rect;
    this[label$] = label;
    this[hint$] = hint;
    this[value$] = value;
    this[increasedValue$] = increasedValue;
    this[decreasedValue$] = decreasedValue;
    this[textDirection$] = textDirection;
    this[transform$] = transform;
    this[elevation$0] = elevation;
    this[thickness$] = thickness;
    this[childrenInTraversalOrder$] = childrenInTraversalOrder;
    this[childrenInHitTestOrder$] = childrenInHitTestOrder;
    this[additionalActions$] = additionalActions;
    ;
  }).prototype = engine.SemanticsNodeUpdate.prototype;
  dart.addTypeTests(engine.SemanticsNodeUpdate);
  const id$ = SemanticsNodeUpdate_id;
  const flags$ = SemanticsNodeUpdate_flags;
  const actions$ = SemanticsNodeUpdate_actions;
  const textSelectionBase$ = SemanticsNodeUpdate_textSelectionBase;
  const textSelectionExtent$ = SemanticsNodeUpdate_textSelectionExtent;
  const platformViewId$ = SemanticsNodeUpdate_platformViewId;
  const scrollChildren$ = SemanticsNodeUpdate_scrollChildren;
  const scrollIndex$ = SemanticsNodeUpdate_scrollIndex;
  const scrollPosition$ = SemanticsNodeUpdate_scrollPosition;
  const scrollExtentMax$ = SemanticsNodeUpdate_scrollExtentMax;
  const scrollExtentMin$ = SemanticsNodeUpdate_scrollExtentMin;
  const rect$2 = SemanticsNodeUpdate_rect;
  const label$ = SemanticsNodeUpdate_label;
  const hint$ = SemanticsNodeUpdate_hint;
  const value$ = SemanticsNodeUpdate_value;
  const increasedValue$ = SemanticsNodeUpdate_increasedValue;
  const decreasedValue$ = SemanticsNodeUpdate_decreasedValue;
  const textDirection$ = SemanticsNodeUpdate_textDirection;
  const transform$ = SemanticsNodeUpdate_transform;
  const childrenInTraversalOrder$ = SemanticsNodeUpdate_childrenInTraversalOrder;
  const childrenInHitTestOrder$ = SemanticsNodeUpdate_childrenInHitTestOrder;
  const additionalActions$ = SemanticsNodeUpdate_additionalActions;
  const elevation$0 = SemanticsNodeUpdate_elevation;
  const thickness$ = SemanticsNodeUpdate_thickness;
  dart.setLibraryUri(engine.SemanticsNodeUpdate, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SemanticsNodeUpdate, () => ({
    __proto__: dart.getFields(engine.SemanticsNodeUpdate.__proto__),
    id: dart.finalFieldType(core.int),
    flags: dart.finalFieldType(core.int),
    actions: dart.finalFieldType(core.int),
    textSelectionBase: dart.finalFieldType(core.int),
    textSelectionExtent: dart.finalFieldType(core.int),
    platformViewId: dart.finalFieldType(core.int),
    scrollChildren: dart.finalFieldType(core.int),
    scrollIndex: dart.finalFieldType(core.int),
    scrollPosition: dart.finalFieldType(core.double),
    scrollExtentMax: dart.finalFieldType(core.double),
    scrollExtentMin: dart.finalFieldType(core.double),
    rect: dart.finalFieldType(ui.Rect),
    label: dart.finalFieldType(core.String),
    hint: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.String),
    increasedValue: dart.finalFieldType(core.String),
    decreasedValue: dart.finalFieldType(core.String),
    textDirection: dart.finalFieldType(ui.TextDirection),
    transform: dart.finalFieldType(typed_data.Float64List),
    childrenInTraversalOrder: dart.finalFieldType(typed_data.Int32List),
    childrenInHitTestOrder: dart.finalFieldType(typed_data.Int32List),
    additionalActions: dart.finalFieldType(typed_data.Int32List),
    elevation: dart.finalFieldType(core.double),
    thickness: dart.finalFieldType(core.double)
  }));
  let C72;
  let C73;
  let C74;
  let C75;
  let C76;
  let C77;
  let C78;
  let C79;
  let C80;
  engine.Role = class Role extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.Role.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.Role.prototype;
  dart.addTypeTests(engine.Role);
  dart.setLibraryUri(engine.Role, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Role, () => ({
    __proto__: dart.getFields(engine.Role.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.Role, ['toString']);
  engine.Role.incrementable = C72 || CT.C72;
  engine.Role.scrollable = C73 || CT.C73;
  engine.Role.labelAndValue = C74 || CT.C74;
  engine.Role.tappable = C75 || CT.C75;
  engine.Role.textField = C76 || CT.C76;
  engine.Role.checkable = C77 || CT.C77;
  engine.Role.image = C78 || CT.C78;
  engine.Role.liveRegion = C79 || CT.C79;
  engine.Role.values = C80 || CT.C80;
  const _flags = dart.privateName(engine, "_flags");
  const _actions = dart.privateName(engine, "_actions");
  const _textSelectionBase = dart.privateName(engine, "_textSelectionBase");
  const _textSelectionExtent = dart.privateName(engine, "_textSelectionExtent");
  const _scrollChildren = dart.privateName(engine, "_scrollChildren");
  const _scrollIndex = dart.privateName(engine, "_scrollIndex");
  const _scrollPosition = dart.privateName(engine, "_scrollPosition");
  const _scrollExtentMax = dart.privateName(engine, "_scrollExtentMax");
  const _scrollExtentMin = dart.privateName(engine, "_scrollExtentMin");
  const _rect = dart.privateName(engine, "_rect");
  const _label = dart.privateName(engine, "_label");
  const _hint = dart.privateName(engine, "_hint");
  const _value = dart.privateName(engine, "_value");
  const _increasedValue = dart.privateName(engine, "_increasedValue");
  const _decreasedValue = dart.privateName(engine, "_decreasedValue");
  const _textDirection = dart.privateName(engine, "_textDirection");
  const _childrenInTraversalOrder = dart.privateName(engine, "_childrenInTraversalOrder");
  const _childrenInHitTestOrder = dart.privateName(engine, "_childrenInHitTestOrder");
  const _additionalActions = dart.privateName(engine, "_additionalActions");
  const _dirtyFields = dart.privateName(engine, "_dirtyFields");
  const _childContainerElement = dart.privateName(engine, "_childContainerElement");
  const _parent = dart.privateName(engine, "_parent");
  const _roleManagers = dart.privateName(engine, "_roleManagers");
  const _previousChildrenInTraversalOrder = dart.privateName(engine, "_previousChildrenInTraversalOrder");
  const _isDirty = dart.privateName(engine, "_isDirty");
  const _markFlagsDirty = dart.privateName(engine, "_markFlagsDirty");
  const _markActionsDirty = dart.privateName(engine, "_markActionsDirty");
  const _markTextSelectionBaseDirty = dart.privateName(engine, "_markTextSelectionBaseDirty");
  const _markTextSelectionExtentDirty = dart.privateName(engine, "_markTextSelectionExtentDirty");
  const _markScrollChildrenDirty = dart.privateName(engine, "_markScrollChildrenDirty");
  const _markScrollIndexDirty = dart.privateName(engine, "_markScrollIndexDirty");
  const _markScrollPositionDirty = dart.privateName(engine, "_markScrollPositionDirty");
  const _markScrollExtentMaxDirty = dart.privateName(engine, "_markScrollExtentMaxDirty");
  const _markScrollExtentMinDirty = dart.privateName(engine, "_markScrollExtentMinDirty");
  const _markRectDirty = dart.privateName(engine, "_markRectDirty");
  const _markLabelDirty = dart.privateName(engine, "_markLabelDirty");
  const _markHintDirty = dart.privateName(engine, "_markHintDirty");
  const _markValueDirty = dart.privateName(engine, "_markValueDirty");
  const _markIncreasedValueDirty = dart.privateName(engine, "_markIncreasedValueDirty");
  const _markDecreasedValueDirty = dart.privateName(engine, "_markDecreasedValueDirty");
  const _markTextDirectionDirty = dart.privateName(engine, "_markTextDirectionDirty");
  const _markTransformDirty = dart.privateName(engine, "_markTransformDirty");
  const _markChildrenInTraversalOrderDirty = dart.privateName(engine, "_markChildrenInTraversalOrderDirty");
  const _markChildrenInHitTestOrderDirty = dart.privateName(engine, "_markChildrenInHitTestOrderDirty");
  const _markAdditionalActionsDirty = dart.privateName(engine, "_markAdditionalActionsDirty");
  const _updateRoles = dart.privateName(engine, "_updateRoles");
  const _updateChildrenInTraversalOrder = dart.privateName(engine, "_updateChildrenInTraversalOrder");
  const _updateRole = dart.privateName(engine, "_updateRole");
  const _detachObject = dart.privateName(engine, "_detachObject");
  const _attachObject = dart.privateName(engine, "_attachObject");
  const SemanticsObject_id = dart.privateName(engine, "SemanticsObject.id");
  const SemanticsObject_owner = dart.privateName(engine, "SemanticsObject.owner");
  const SemanticsObject_element = dart.privateName(engine, "SemanticsObject.element");
  const SemanticsObject_verticalContainerAdjustment = dart.privateName(engine, "SemanticsObject.verticalContainerAdjustment");
  const SemanticsObject_horizontalContainerAdjustment = dart.privateName(engine, "SemanticsObject.horizontalContainerAdjustment");
  engine.SemanticsObject = class SemanticsObject extends core.Object {
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    get owner() {
      return this[owner$];
    }
    set owner(value) {
      super.owner = value;
    }
    get element() {
      return this[element];
    }
    set element(value) {
      super.element = value;
    }
    get verticalContainerAdjustment() {
      return this[verticalContainerAdjustment];
    }
    set verticalContainerAdjustment(value) {
      this[verticalContainerAdjustment] = value;
    }
    get horizontalContainerAdjustment() {
      return this[horizontalContainerAdjustment];
    }
    set horizontalContainerAdjustment(value) {
      this[horizontalContainerAdjustment] = value;
    }
    get flags() {
      return this[_flags];
    }
    get isFlagsDirty() {
      return this[_isDirty](1);
    }
    [_markFlagsDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 1) >>> 0;
    }
    get actions() {
      return this[_actions];
    }
    get isActionsDirty() {
      return this[_isDirty](2);
    }
    [_markActionsDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 2) >>> 0;
    }
    get textSelectionBase() {
      return this[_textSelectionBase];
    }
    get isTextSelectionBaseDirty() {
      return this[_isDirty](4);
    }
    [_markTextSelectionBaseDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 4) >>> 0;
    }
    get textSelectionExtent() {
      return this[_textSelectionExtent];
    }
    get isTextSelectionExtentDirty() {
      return this[_isDirty](8);
    }
    [_markTextSelectionExtentDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 8) >>> 0;
    }
    get scrollChildren() {
      return this[_scrollChildren];
    }
    get isScrollChildrenDirty() {
      return this[_isDirty](16);
    }
    [_markScrollChildrenDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 16) >>> 0;
    }
    get scrollIndex() {
      return this[_scrollIndex];
    }
    get isScrollIndexDirty() {
      return this[_isDirty](32);
    }
    [_markScrollIndexDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 32) >>> 0;
    }
    get scrollPosition() {
      return this[_scrollPosition];
    }
    get isScrollPositionDirty() {
      return this[_isDirty](64);
    }
    [_markScrollPositionDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 64) >>> 0;
    }
    get scrollExtentMax() {
      return this[_scrollExtentMax];
    }
    get isScrollExtentMaxDirty() {
      return this[_isDirty](128);
    }
    [_markScrollExtentMaxDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 128) >>> 0;
    }
    get scrollExtentMin() {
      return this[_scrollExtentMin];
    }
    get isScrollExtentMinDirty() {
      return this[_isDirty](256);
    }
    [_markScrollExtentMinDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 256) >>> 0;
    }
    get rect() {
      return this[_rect];
    }
    get isRectDirty() {
      return this[_isDirty](512);
    }
    [_markRectDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 512) >>> 0;
    }
    get label() {
      return this[_label];
    }
    get hasLabel() {
      return this[_label] != null && this[_label][$isNotEmpty];
    }
    get isLabelDirty() {
      return this[_isDirty](1024);
    }
    [_markLabelDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 1024) >>> 0;
    }
    get hint() {
      return this[_hint];
    }
    get isHintDirty() {
      return this[_isDirty](2048);
    }
    [_markHintDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 2048) >>> 0;
    }
    get value() {
      return this[_value];
    }
    get hasValue() {
      return this[_value] != null && this[_value][$isNotEmpty];
    }
    get isValueDirty() {
      return this[_isDirty](4096);
    }
    [_markValueDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 4096) >>> 0;
    }
    get increasedValue() {
      return this[_increasedValue];
    }
    get isIncreasedValueDirty() {
      return this[_isDirty](8192);
    }
    [_markIncreasedValueDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 8192) >>> 0;
    }
    get decreasedValue() {
      return this[_decreasedValue];
    }
    get isDecreasedValueDirty() {
      return this[_isDirty](16384);
    }
    [_markDecreasedValueDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 16384) >>> 0;
    }
    get textDirection() {
      return this[_textDirection];
    }
    get isTextDirectionDirty() {
      return this[_isDirty](32768);
    }
    [_markTextDirectionDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 32768) >>> 0;
    }
    get transform() {
      return this[_transform$];
    }
    get isTransformDirty() {
      return this[_isDirty](65536);
    }
    [_markTransformDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 65536) >>> 0;
    }
    get childrenInTraversalOrder() {
      return this[_childrenInTraversalOrder];
    }
    get isChildrenInTraversalOrderDirty() {
      return this[_isDirty](524288);
    }
    [_markChildrenInTraversalOrderDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 524288) >>> 0;
    }
    get childrenInHitTestOrder() {
      return this[_childrenInHitTestOrder];
    }
    get isChildrenInHitTestOrderDirty() {
      return this[_isDirty](1048576);
    }
    [_markChildrenInHitTestOrderDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 1048576) >>> 0;
    }
    get additionalActions() {
      return this[_additionalActions];
    }
    get isAdditionalActionsDirty() {
      return this[_isDirty](2097152);
    }
    [_markAdditionalActionsDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | 2097152) >>> 0;
    }
    [_isDirty](fieldIndex) {
      return (dart.notNull(this[_dirtyFields]) & dart.notNull(fieldIndex)) !== 0;
    }
    getOrCreateChildContainer() {
      if (this[_childContainerElement] == null) {
        this[_childContainerElement] = html.Element.tag("flt-semantics-container");
        this[_childContainerElement].style[$position] = "absolute";
        this.element[$append](this[_childContainerElement]);
      }
      return this[_childContainerElement];
    }
    hasFlag(flag) {
      return (dart.notNull(this[_flags]) & dart.notNull(flag.index)) !== 0;
    }
    hasAction(action) {
      return (dart.notNull(this[_actions]) & dart.notNull(action.index)) !== 0;
    }
    get isVerticalScrollContainer() {
      return dart.test(this.hasAction(ui.SemanticsAction.scrollDown)) || dart.test(this.hasAction(ui.SemanticsAction.scrollUp));
    }
    get isHorizontalScrollContainer() {
      return dart.test(this.hasAction(ui.SemanticsAction.scrollLeft)) || dart.test(this.hasAction(ui.SemanticsAction.scrollRight));
    }
    get hasChildren() {
      return this[_childrenInTraversalOrder] != null && dart.test(this[_childrenInTraversalOrder][$isNotEmpty]);
    }
    get isTextField() {
      return this.hasFlag(ui.SemanticsFlag.isTextField);
    }
    get isLiveRegion() {
      return dart.test(this.hasFlag(ui.SemanticsFlag.isLiveRegion)) && !dart.test(this.hasFlag(ui.SemanticsFlag.isHidden));
    }
    get isVisualOnly() {
      return dart.test(this.hasFlag(ui.SemanticsFlag.isImage)) && !dart.test(this.hasAction(ui.SemanticsAction.tap)) && !dart.test(this.hasFlag(ui.SemanticsFlag.isButton));
    }
    updateWith(update) {
      if (!(update.flags != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 606, 12, "update.flags != null");
      if (this[_flags] != update.flags) {
        this[_flags] = update.flags;
        this[_markFlagsDirty]();
      }
      if (this[_value] != update.value) {
        this[_value] = update.value;
        this[_markValueDirty]();
      }
      if (this[_label] != update.label) {
        this[_label] = update.label;
        this[_markLabelDirty]();
      }
      if (!dart.equals(this[_rect], update.rect)) {
        this[_rect] = update.rect;
        this[_markRectDirty]();
      }
      if (!dart.equals(this[_transform$], update.transform)) {
        this[_transform$] = update.transform;
        this[_markTransformDirty]();
      }
      if (this[_scrollPosition] != update.scrollPosition) {
        this[_scrollPosition] = update.scrollPosition;
        this[_markScrollPositionDirty]();
      }
      if (this[_actions] != update.actions) {
        this[_actions] = update.actions;
        this[_markActionsDirty]();
      }
      if (this[_textSelectionBase] != update.textSelectionBase) {
        this[_textSelectionBase] = update.textSelectionBase;
        this[_markTextSelectionBaseDirty]();
      }
      if (this[_textSelectionExtent] != update.textSelectionExtent) {
        this[_textSelectionExtent] = update.textSelectionExtent;
        this[_markTextSelectionExtentDirty]();
      }
      if (this[_scrollChildren] != update.scrollChildren) {
        this[_scrollChildren] = update.scrollChildren;
        this[_markScrollChildrenDirty]();
      }
      if (this[_scrollIndex] != update.scrollIndex) {
        this[_scrollIndex] = update.scrollIndex;
        this[_markScrollIndexDirty]();
      }
      if (this[_scrollExtentMax] != update.scrollExtentMax) {
        this[_scrollExtentMax] = update.scrollExtentMax;
        this[_markScrollExtentMaxDirty]();
      }
      if (this[_scrollExtentMin] != update.scrollExtentMin) {
        this[_scrollExtentMin] = update.scrollExtentMin;
        this[_markScrollExtentMinDirty]();
      }
      if (this[_hint] != update.hint) {
        this[_hint] = update.hint;
        this[_markHintDirty]();
      }
      if (this[_increasedValue] != update.increasedValue) {
        this[_increasedValue] = update.increasedValue;
        this[_markIncreasedValueDirty]();
      }
      if (this[_decreasedValue] != update.decreasedValue) {
        this[_decreasedValue] = update.decreasedValue;
        this[_markDecreasedValueDirty]();
      }
      if (!dart.equals(this[_textDirection], update.textDirection)) {
        this[_textDirection] = update.textDirection;
        this[_markTextDirectionDirty]();
      }
      if (!dart.equals(this[_childrenInHitTestOrder], update.childrenInHitTestOrder)) {
        this[_childrenInHitTestOrder] = update.childrenInHitTestOrder;
        this[_markChildrenInHitTestOrderDirty]();
      }
      if (!dart.equals(this[_childrenInTraversalOrder], update.childrenInTraversalOrder)) {
        this[_childrenInTraversalOrder] = update.childrenInTraversalOrder;
        this[_markChildrenInTraversalOrderDirty]();
      }
      if (!dart.equals(this[_additionalActions], update.additionalActions)) {
        this[_additionalActions] = update.additionalActions;
        this[_markAdditionalActionsDirty]();
      }
      this[_updateRoles]();
      this[_updateChildrenInTraversalOrder]();
      if (dart.test(this.isRectDirty) || dart.test(this.isTransformDirty) || dart.test(this.isScrollPositionDirty)) {
        this.recomputePositionAndSize();
      }
      if (!(this[_childContainerElement] == null || dart.test(this.hasChildren))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 718, 12, "_childContainerElement == null || hasChildren");
      this[_dirtyFields] = 0;
    }
    setAriaRole(ariaRoleName, condition) {
      if (dart.test(condition)) {
        this.element[$setAttribute]("role", ariaRoleName);
      } else if (this.element[$getAttribute]("role") == ariaRoleName) {
        this.element[$attributes][$remove]("role");
      }
    }
    [_updateRoles]() {
      this[_updateRole](engine.Role.labelAndValue, (dart.test(this.hasLabel) || dart.test(this.hasValue)) && !dart.test(this.isVisualOnly));
      this[_updateRole](engine.Role.textField, this.isTextField);
      this[_updateRole](engine.Role.tappable, dart.test(this.hasAction(ui.SemanticsAction.tap)) || dart.test(this.hasFlag(ui.SemanticsFlag.isButton)));
      this[_updateRole](engine.Role.incrementable, this.isIncrementable);
      this[_updateRole](engine.Role.scrollable, dart.test(this.isVerticalScrollContainer) || dart.test(this.isHorizontalScrollContainer));
      this[_updateRole](engine.Role.checkable, dart.test(this.hasFlag(ui.SemanticsFlag.hasCheckedState)) || dart.test(this.hasFlag(ui.SemanticsFlag.hasToggledState)));
      this[_updateRole](engine.Role.image, this.isVisualOnly);
      this[_updateRole](engine.Role.liveRegion, this.isLiveRegion);
    }
    [_updateRole](role, enabled) {
      let manager = this[_roleManagers][$_get](role);
      if (dart.test(enabled)) {
        if (manager == null) {
          manager = engine._roleFactories[$_get](role)(this);
          this[_roleManagers][$_set](role, manager);
        }
        manager.update();
      } else if (manager != null) {
        manager.dispose();
        this[_roleManagers][$remove](role);
      }
    }
    get isIncrementable() {
      return dart.test(this.hasAction(ui.SemanticsAction.increase)) || dart.test(this.hasAction(ui.SemanticsAction.decrease));
    }
    recomputePositionAndSize() {
      let t5, t5$, t5$0, t5$1, t5$2, t5$3, t5$4, t5$5;
      t5 = this.element.style;
      t5[$width] = dart.str(this[_rect].width) + "px";
      t5[$height] = dart.str(this[_rect].height) + "px";
      t5;
      let containerElement = dart.test(this.hasChildren) ? this.getOrCreateChildContainer() : null;
      let hasZeroRectOffset = this[_rect].top === 0.0 && this[_rect].left === 0.0;
      let hasIdentityTransform = this[_transform$] == null || dart.test(engine.isIdentityFloat64ListTransform(this[_transform$]));
      if (hasZeroRectOffset && hasIdentityTransform && this.verticalContainerAdjustment === 0.0 && this.horizontalContainerAdjustment === 0.0) {
        t5$ = this.element.style;
        t5$.removeProperty("transform-origin");
        t5$.removeProperty("transform");
        t5$;
        if (containerElement != null) {
          t5$0 = containerElement.style;
          t5$0.removeProperty("transform-origin");
          t5$0.removeProperty("transform");
          t5$0;
        }
        return;
      }
      let effectiveTransform = null;
      let effectiveTransformIsIdentity = true;
      if (!hasZeroRectOffset) {
        if (this[_transform$] == null) {
          let left = this[_rect].left;
          let top = this[_rect].top;
          effectiveTransform = engine.Matrix4.translationValues(left, top, 0.0);
          effectiveTransformIsIdentity = left === 0.0 && top === 0.0;
        } else {
          effectiveTransform = (t5$1 = new engine.Matrix4.fromFloat64List(this[_transform$]).clone(), t5$1.translate(this[_rect].left, this[_rect].top, 0.0), t5$1);
          effectiveTransformIsIdentity = effectiveTransform.isIdentity();
        }
      } else if (!hasIdentityTransform) {
        effectiveTransform = new engine.Matrix4.fromFloat64List(this[_transform$]);
        effectiveTransformIsIdentity = false;
      }
      if (!dart.test(effectiveTransformIsIdentity)) {
        t5$2 = this.element.style;
        t5$2[$transformOrigin] = "0 0 0";
        t5$2[$transform] = engine.matrix4ToCssTransform(effectiveTransform);
        t5$2;
      } else {
        t5$3 = this.element.style;
        t5$3.removeProperty("transform-origin");
        t5$3.removeProperty("transform");
        t5$3;
      }
      if (containerElement != null) {
        if (!hasZeroRectOffset || this.verticalContainerAdjustment !== 0.0 || this.horizontalContainerAdjustment !== 0.0) {
          let translateX = -dart.notNull(this[_rect].left) + dart.notNull(this.horizontalContainerAdjustment);
          let translateY = -dart.notNull(this[_rect].top) + dart.notNull(this.verticalContainerAdjustment);
          t5$4 = containerElement.style;
          t5$4[$transformOrigin] = "0 0 0";
          t5$4[$transform] = "translate(" + dart.str(translateX) + "px, " + dart.str(translateY) + "px)";
          t5$4;
        } else {
          t5$5 = containerElement.style;
          t5$5.removeProperty("transform-origin");
          t5$5.removeProperty("transform");
          t5$5;
        }
      }
    }
    [_updateChildrenInTraversalOrder]() {
      if (this[_childrenInTraversalOrder] == null || dart.test(this[_childrenInTraversalOrder][$isEmpty])) {
        if (this[_previousChildrenInTraversalOrder] == null || dart.test(this[_previousChildrenInTraversalOrder][$isEmpty])) {
          if (!(this[_childContainerElement] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 899, 16, "_childContainerElement == null");
          this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
          return;
        }
        if (!(this[_childContainerElement] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 905, 14, "_childContainerElement != null");
        let len = this[_previousChildrenInTraversalOrder][$length];
        for (let i = 0; i < dart.notNull(len); i = i + 1) {
          this.owner[_detachObject](this[_previousChildrenInTraversalOrder][$_get](i));
        }
        this[_previousChildrenInTraversalOrder] = null;
        this[_childContainerElement][$remove]();
        this[_childContainerElement] = null;
        this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
        return;
      }
      let containerElement = this.getOrCreateChildContainer();
      if (this[_previousChildrenInTraversalOrder] == null || dart.test(this[_previousChildrenInTraversalOrder][$isEmpty])) {
        this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
        for (let id of this[_previousChildrenInTraversalOrder]) {
          let child = this.owner.getOrCreateObject(id);
          containerElement[$append](child.element);
          this.owner[_attachObject]({parent: this, child: child});
        }
        this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
        return;
      }
      let intersectionIndicesNew = JSArrayOfint().of([]);
      let intersectionIndicesOld = JSArrayOfint().of([]);
      let newIndex = 0;
      let minLength = math.min(core.int, this[_previousChildrenInTraversalOrder][$length], this[_childrenInTraversalOrder][$length]);
      while (newIndex < minLength && this[_previousChildrenInTraversalOrder][$_get](newIndex) == this[_childrenInTraversalOrder][$_get](newIndex)) {
        intersectionIndicesNew[$add](newIndex);
        intersectionIndicesOld[$add](newIndex);
        newIndex = newIndex + 1;
      }
      if (this[_previousChildrenInTraversalOrder][$length] == this[_childrenInTraversalOrder][$length] && newIndex === this[_childrenInTraversalOrder][$length]) {
        return;
      }
      while (newIndex < dart.notNull(this[_childrenInTraversalOrder][$length])) {
        for (let oldIndex = 0; oldIndex < dart.notNull(this[_previousChildrenInTraversalOrder][$length]); oldIndex = oldIndex + 1) {
          if (this[_previousChildrenInTraversalOrder][$_get](oldIndex) == this[_childrenInTraversalOrder][$_get](newIndex)) {
            intersectionIndicesNew[$add](newIndex);
            intersectionIndicesOld[$add](oldIndex);
            break;
          }
        }
        newIndex = newIndex + 1;
      }
      let longestSequence = engine.longestIncreasingSubsequence(intersectionIndicesOld);
      let stationaryIds = JSArrayOfint().of([]);
      for (let i = 0; i < dart.notNull(longestSequence[$length]); i = i + 1) {
        stationaryIds[$add](this[_previousChildrenInTraversalOrder][$_get](intersectionIndicesOld[$_get](longestSequence[$_get](i))));
      }
      for (let i = 0; i < dart.notNull(this[_previousChildrenInTraversalOrder][$length]); i = i + 1) {
        if (!dart.test(intersectionIndicesOld[$contains](i))) {
          let childId = this[_previousChildrenInTraversalOrder][$_get](i);
          this.owner[_detachObject](childId);
        }
      }
      let refNode = null;
      for (let i = dart.notNull(this[_childrenInTraversalOrder][$length]) - 1; i >= 0; i = i - 1) {
        let childId = this[_childrenInTraversalOrder][$_get](i);
        let child = this.owner.getOrCreateObject(childId);
        if (!dart.test(stationaryIds[$contains](childId))) {
          if (refNode == null) {
            containerElement[$append](child.element);
          } else {
            containerElement.insertBefore(child.element, refNode);
          }
          this.owner[_attachObject]({parent: this, child: child});
        } else {
          if (!dart.equals(child[_parent], this)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1015, 16, "child._parent == this");
        }
        refNode = child.element;
      }
      this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        let children = this[_childrenInTraversalOrder] != null && dart.test(this[_childrenInTraversalOrder][$isNotEmpty]) ? "[" + dart.str(this[_childrenInTraversalOrder][$join](", ")) + "]" : "<empty>";
        return dart.str(this[$runtimeType]) + "(#" + dart.str(this.id) + ", children: " + children + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.SemanticsObject.new = function(id, owner) {
    let t5;
    this[_flags] = null;
    this[_actions] = null;
    this[_textSelectionBase] = null;
    this[_textSelectionExtent] = null;
    this[_scrollChildren] = null;
    this[_scrollIndex] = null;
    this[_scrollPosition] = null;
    this[_scrollExtentMax] = null;
    this[_scrollExtentMin] = null;
    this[_rect] = null;
    this[_label] = null;
    this[_hint] = null;
    this[_value] = null;
    this[_increasedValue] = null;
    this[_decreasedValue] = null;
    this[_textDirection] = null;
    this[_transform$] = null;
    this[_childrenInTraversalOrder] = null;
    this[_childrenInHitTestOrder] = null;
    this[_additionalActions] = null;
    this[element] = html.Element.tag("flt-semantics");
    this[_dirtyFields] = -1;
    this[_childContainerElement] = null;
    this[_parent] = null;
    this[_roleManagers] = new (LinkedMapOfRole$RoleManager()).new();
    this[verticalContainerAdjustment] = 0.0;
    this[horizontalContainerAdjustment] = 0.0;
    this[_previousChildrenInTraversalOrder] = null;
    this[id$0] = id;
    this[owner$] = owner;
    this.element.style[$position] = "absolute";
    if (this.id === 0) {
      this.element.style[$filter] = "opacity(0%)";
      this.element.style[$color] = "rgba(0,0,0,0)";
    }
    if (false) {
      t5 = this.element.style;
      t5[$filter] = "opacity(90%)";
      t5[$outline] = "1px solid green";
      t5[$color] = "purple";
      t5;
    }
  }).prototype = engine.SemanticsObject.prototype;
  dart.addTypeTests(engine.SemanticsObject);
  const id$0 = SemanticsObject_id;
  const owner$ = SemanticsObject_owner;
  const element = SemanticsObject_element;
  const verticalContainerAdjustment = SemanticsObject_verticalContainerAdjustment;
  const horizontalContainerAdjustment = SemanticsObject_horizontalContainerAdjustment;
  dart.setMethodSignature(engine.SemanticsObject, () => ({
    __proto__: dart.getMethods(engine.SemanticsObject.__proto__),
    [_markFlagsDirty]: dart.fnType(dart.void, []),
    [_markActionsDirty]: dart.fnType(dart.void, []),
    [_markTextSelectionBaseDirty]: dart.fnType(dart.void, []),
    [_markTextSelectionExtentDirty]: dart.fnType(dart.void, []),
    [_markScrollChildrenDirty]: dart.fnType(dart.void, []),
    [_markScrollIndexDirty]: dart.fnType(dart.void, []),
    [_markScrollPositionDirty]: dart.fnType(dart.void, []),
    [_markScrollExtentMaxDirty]: dart.fnType(dart.void, []),
    [_markScrollExtentMinDirty]: dart.fnType(dart.void, []),
    [_markRectDirty]: dart.fnType(dart.void, []),
    [_markLabelDirty]: dart.fnType(dart.void, []),
    [_markHintDirty]: dart.fnType(dart.void, []),
    [_markValueDirty]: dart.fnType(dart.void, []),
    [_markIncreasedValueDirty]: dart.fnType(dart.void, []),
    [_markDecreasedValueDirty]: dart.fnType(dart.void, []),
    [_markTextDirectionDirty]: dart.fnType(dart.void, []),
    [_markTransformDirty]: dart.fnType(dart.void, []),
    [_markChildrenInTraversalOrderDirty]: dart.fnType(dart.void, []),
    [_markChildrenInHitTestOrderDirty]: dart.fnType(dart.void, []),
    [_markAdditionalActionsDirty]: dart.fnType(dart.void, []),
    [_isDirty]: dart.fnType(core.bool, [core.int]),
    getOrCreateChildContainer: dart.fnType(html.Element, []),
    hasFlag: dart.fnType(core.bool, [ui.SemanticsFlag]),
    hasAction: dart.fnType(core.bool, [ui.SemanticsAction]),
    updateWith: dart.fnType(dart.void, [engine.SemanticsNodeUpdate]),
    setAriaRole: dart.fnType(dart.void, [core.String, core.bool]),
    [_updateRoles]: dart.fnType(dart.void, []),
    [_updateRole]: dart.fnType(dart.void, [engine.Role, core.bool]),
    recomputePositionAndSize: dart.fnType(dart.void, []),
    [_updateChildrenInTraversalOrder]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.SemanticsObject, () => ({
    __proto__: dart.getGetters(engine.SemanticsObject.__proto__),
    flags: core.int,
    isFlagsDirty: core.bool,
    actions: core.int,
    isActionsDirty: core.bool,
    textSelectionBase: core.int,
    isTextSelectionBaseDirty: core.bool,
    textSelectionExtent: core.int,
    isTextSelectionExtentDirty: core.bool,
    scrollChildren: core.int,
    isScrollChildrenDirty: core.bool,
    scrollIndex: core.int,
    isScrollIndexDirty: core.bool,
    scrollPosition: core.double,
    isScrollPositionDirty: core.bool,
    scrollExtentMax: core.double,
    isScrollExtentMaxDirty: core.bool,
    scrollExtentMin: core.double,
    isScrollExtentMinDirty: core.bool,
    rect: ui.Rect,
    isRectDirty: core.bool,
    label: core.String,
    hasLabel: core.bool,
    isLabelDirty: core.bool,
    hint: core.String,
    isHintDirty: core.bool,
    value: core.String,
    hasValue: core.bool,
    isValueDirty: core.bool,
    increasedValue: core.String,
    isIncreasedValueDirty: core.bool,
    decreasedValue: core.String,
    isDecreasedValueDirty: core.bool,
    textDirection: ui.TextDirection,
    isTextDirectionDirty: core.bool,
    transform: typed_data.Float64List,
    isTransformDirty: core.bool,
    childrenInTraversalOrder: typed_data.Int32List,
    isChildrenInTraversalOrderDirty: core.bool,
    childrenInHitTestOrder: typed_data.Int32List,
    isChildrenInHitTestOrderDirty: core.bool,
    additionalActions: typed_data.Int32List,
    isAdditionalActionsDirty: core.bool,
    isVerticalScrollContainer: core.bool,
    isHorizontalScrollContainer: core.bool,
    hasChildren: core.bool,
    isTextField: core.bool,
    isLiveRegion: core.bool,
    isVisualOnly: core.bool,
    isIncrementable: core.bool
  }));
  dart.setLibraryUri(engine.SemanticsObject, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.SemanticsObject, () => ({
    __proto__: dart.getFields(engine.SemanticsObject.__proto__),
    [_flags]: dart.fieldType(core.int),
    [_actions]: dart.fieldType(core.int),
    [_textSelectionBase]: dart.fieldType(core.int),
    [_textSelectionExtent]: dart.fieldType(core.int),
    [_scrollChildren]: dart.fieldType(core.int),
    [_scrollIndex]: dart.fieldType(core.int),
    [_scrollPosition]: dart.fieldType(core.double),
    [_scrollExtentMax]: dart.fieldType(core.double),
    [_scrollExtentMin]: dart.fieldType(core.double),
    [_rect]: dart.fieldType(ui.Rect),
    [_label]: dart.fieldType(core.String),
    [_hint]: dart.fieldType(core.String),
    [_value]: dart.fieldType(core.String),
    [_increasedValue]: dart.fieldType(core.String),
    [_decreasedValue]: dart.fieldType(core.String),
    [_textDirection]: dart.fieldType(ui.TextDirection),
    [_transform$]: dart.fieldType(typed_data.Float64List),
    [_childrenInTraversalOrder]: dart.fieldType(typed_data.Int32List),
    [_childrenInHitTestOrder]: dart.fieldType(typed_data.Int32List),
    [_additionalActions]: dart.fieldType(typed_data.Int32List),
    id: dart.finalFieldType(core.int),
    owner: dart.finalFieldType(engine.EngineSemanticsOwner),
    element: dart.finalFieldType(html.Element),
    [_dirtyFields]: dart.fieldType(core.int),
    [_childContainerElement]: dart.fieldType(html.Element),
    [_parent]: dart.fieldType(engine.SemanticsObject),
    [_roleManagers]: dart.finalFieldType(core.Map$(engine.Role, engine.RoleManager)),
    verticalContainerAdjustment: dart.fieldType(core.double),
    horizontalContainerAdjustment: dart.fieldType(core.double),
    [_previousChildrenInTraversalOrder]: dart.fieldType(typed_data.Int32List)
  }));
  dart.defineExtensionMethods(engine.SemanticsObject, ['toString']);
  dart.defineLazy(engine.SemanticsObject, {
    /*engine.SemanticsObject._flagsIndex*/get _flagsIndex() {
      return 1;
    },
    /*engine.SemanticsObject._actionsIndex*/get _actionsIndex() {
      return 2;
    },
    /*engine.SemanticsObject._textSelectionBaseIndex*/get _textSelectionBaseIndex() {
      return 4;
    },
    /*engine.SemanticsObject._textSelectionExtentIndex*/get _textSelectionExtentIndex() {
      return 8;
    },
    /*engine.SemanticsObject._scrollChildrenIndex*/get _scrollChildrenIndex() {
      return 16;
    },
    /*engine.SemanticsObject._scrollIndexIndex*/get _scrollIndexIndex() {
      return 32;
    },
    /*engine.SemanticsObject._scrollPositionIndex*/get _scrollPositionIndex() {
      return 64;
    },
    /*engine.SemanticsObject._scrollExtentMaxIndex*/get _scrollExtentMaxIndex() {
      return 128;
    },
    /*engine.SemanticsObject._scrollExtentMinIndex*/get _scrollExtentMinIndex() {
      return 256;
    },
    /*engine.SemanticsObject._rectIndex*/get _rectIndex() {
      return 512;
    },
    /*engine.SemanticsObject._labelIndex*/get _labelIndex() {
      return 1024;
    },
    /*engine.SemanticsObject._hintIndex*/get _hintIndex() {
      return 2048;
    },
    /*engine.SemanticsObject._valueIndex*/get _valueIndex() {
      return 4096;
    },
    /*engine.SemanticsObject._increasedValueIndex*/get _increasedValueIndex() {
      return 8192;
    },
    /*engine.SemanticsObject._decreasedValueIndex*/get _decreasedValueIndex() {
      return 16384;
    },
    /*engine.SemanticsObject._textDirectionIndex*/get _textDirectionIndex() {
      return 32768;
    },
    /*engine.SemanticsObject._transformIndex*/get _transformIndex() {
      return 65536;
    },
    /*engine.SemanticsObject._childrenInTraversalOrderIndex*/get _childrenInTraversalOrderIndex() {
      return 524288;
    },
    /*engine.SemanticsObject._childrenInHitTestOrderIndex*/get _childrenInHitTestOrderIndex() {
      return 1048576;
    },
    /*engine.SemanticsObject._additionalActionsIndex*/get _additionalActionsIndex() {
      return 2097152;
    }
  });
  let C81;
  let C82;
  let C83;
  engine.AccessibilityMode = class AccessibilityMode extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.AccessibilityMode.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.AccessibilityMode.prototype;
  dart.addTypeTests(engine.AccessibilityMode);
  dart.setLibraryUri(engine.AccessibilityMode, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.AccessibilityMode, () => ({
    __proto__: dart.getFields(engine.AccessibilityMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.AccessibilityMode, ['toString']);
  engine.AccessibilityMode.unknown = C81 || CT.C81;
  engine.AccessibilityMode.known = C82 || CT.C82;
  engine.AccessibilityMode.values = C83 || CT.C83;
  let C84;
  engine.GestureMode = class GestureMode extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.GestureMode.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.GestureMode.prototype;
  dart.addTypeTests(engine.GestureMode);
  dart.setLibraryUri(engine.GestureMode, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.GestureMode, () => ({
    __proto__: dart.getFields(engine.GestureMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.GestureMode, ['toString']);
  engine.GestureMode.pointerEvents = C71 || CT.C71;
  engine.GestureMode.browserGestures = C70 || CT.C70;
  engine.GestureMode.values = C84 || CT.C84;
  const _semanticsTree = dart.privateName(engine, "_semanticsTree");
  const _attachments = dart.privateName(engine, "_attachments");
  const _detachments = dart.privateName(engine, "_detachments");
  const _oneTimePostUpdateCallbacks = dart.privateName(engine, "_oneTimePostUpdateCallbacks");
  const _rootSemanticsElement = dart.privateName(engine, "_rootSemanticsElement");
  const _now = dart.privateName(engine, "_now");
  const _semanticsPlaceholder = dart.privateName(engine, "_semanticsPlaceholder");
  const _semanticsActivationTimer = dart.privateName(engine, "_semanticsActivationTimer");
  const _semanticsActivationAttempts = dart.privateName(engine, "_semanticsActivationAttempts");
  const _schedulePlaceholderRemoval = dart.privateName(engine, "_schedulePlaceholderRemoval");
  const _semanticsEnabled = dart.privateName(engine, "_semanticsEnabled");
  const _mode = dart.privateName(engine, "_mode");
  const _gestureMode = dart.privateName(engine, "_gestureMode");
  const _gestureModeClock = dart.privateName(engine, "_gestureModeClock");
  const _gestureModeListeners = dart.privateName(engine, "_gestureModeListeners");
  const _finalizeTree = dart.privateName(engine, "_finalizeTree");
  const _isWaitingToEnableSemantics = dart.privateName(engine, "_isWaitingToEnableSemantics");
  let C85;
  let C86;
  const _tryEnableSemantics = dart.privateName(engine, "_tryEnableSemantics");
  const _notifyGestureModeListeners = dart.privateName(engine, "_notifyGestureModeListeners");
  const _getGestureModeClock = dart.privateName(engine, "_getGestureModeClock");
  let C87;
  const _temporarilyDisableBrowserGestureMode = dart.privateName(engine, "_temporarilyDisableBrowserGestureMode");
  let C88;
  let C89;
  engine.EngineSemanticsOwner = class EngineSemanticsOwner extends core.Object {
    static get instance() {
      let t5;
      t5 = engine.EngineSemanticsOwner._instance;
      return t5 == null ? engine.EngineSemanticsOwner._instance = new engine.EngineSemanticsOwner.__() : t5;
    }
    static debugResetSemantics() {
      if (engine.EngineSemanticsOwner._instance == null) {
        return;
      }
      engine.EngineSemanticsOwner._instance.semanticsEnabled = false;
      engine.EngineSemanticsOwner._instance = null;
    }
    [_attachObject](opts) {
      let parent = opts && 'parent' in opts ? opts.parent : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (!(child != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1106, 12, "child != null");
      if (!(parent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1107, 12, "parent != null");
      child[_parent] = parent;
      this[_attachments][$_set](child.id, parent);
    }
    [_detachObject](id) {
      if (!dart.test(this[_semanticsTree][$containsKey](id))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1124, 12, "_semanticsTree.containsKey(id)");
      let object = this[_semanticsTree][$_get](id);
      this[_detachments][$add](object);
    }
    addOneTimePostUpdateCallback(callback) {
      this[_oneTimePostUpdateCallbacks][$add](callback);
    }
    [_finalizeTree]() {
      for (let object of this[_detachments]) {
        let parent = this[_attachments][$_get](object.id);
        if (parent == null) {
          this[_semanticsTree][$remove](object.id);
          object[_parent] = null;
          object.element[$remove]();
        } else {
          if (!dart.equals(object[_parent], parent)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1153, 16, "object._parent == parent");
          if (!dart.equals(object.element[$parent], parent[_childContainerElement])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1154, 16, "object.element.parent == parent._childContainerElement");
        }
      }
      this[_detachments] = JSArrayOfSemanticsObject().of([]);
      this[_attachments] = new (IdentityMapOfint$SemanticsObject()).new();
      if (dart.test(this[_oneTimePostUpdateCallbacks][$isNotEmpty])) {
        for (let callback of this[_oneTimePostUpdateCallbacks]) {
          callback();
        }
        this[_oneTimePostUpdateCallbacks] = JSArrayOfVoidTovoid().of([]);
      }
    }
    get debugSemanticsTree() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        result = this[_semanticsTree];
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1173, 12, "() {\r\n      result = _semanticsTree;\r\n      return true;\r\n    }()");
      return result;
    }
    debugOverrideTimestampFunction(value) {
      this[_now] = value;
    }
    debugResetTimestampFunction() {
      this[_now] = dart.fn(() => new core.DateTime.now(), VoidToDateTime());
    }
    get [_isWaitingToEnableSemantics]() {
      return this[_semanticsPlaceholder] != null;
    }
    [_tryEnableSemantics](event) {
      if (dart.test(this[_schedulePlaceholderRemoval])) {
        let removeNow = !dart.equals(engine.browserEngine, engine.BrowserEngine.webkit) || event.type === "touchend";
        if (removeNow) {
          this[_semanticsPlaceholder][$remove]();
          this[_semanticsPlaceholder] = null;
          this[_semanticsActivationTimer] = null;
        }
        return true;
      }
      if (dart.test(this.semanticsEnabled)) {
        return true;
      }
      this[_semanticsActivationAttempts] = dart.notNull(this[_semanticsActivationAttempts]) + 1;
      if (dart.notNull(this[_semanticsActivationAttempts]) >= 20) {
        this[_schedulePlaceholderRemoval] = true;
        return true;
      }
      let kInterestingEventTypes = C85 || CT.C85;
      if (!dart.test(kInterestingEventTypes[$contains](event.type))) {
        return true;
      }
      if (this[_semanticsActivationTimer] != null) {
        return false;
      }
      let blinkEnableConditionPassed = dart.equals(engine.browserEngine, engine.BrowserEngine.blink) && dart.equals(this[_gestureMode], engine.GestureMode.browserGestures);
      let safariEnableConditionPassed = false;
      if (dart.equals(engine.browserEngine, engine.BrowserEngine.webkit)) {
        let activationPoint = null;
        switch (event.type) {
          case "click":
          {
            let click = html.MouseEvent._check(event);
            activationPoint = click[$offset];
            break;
          }
          case "touchstart":
          case "touchend":
          {
            let touch = html.TouchEvent._check(event);
            activationPoint = touch.changedTouches[$first][$client];
            break;
          }
          default:
          {
            return true;
          }
        }
        if (!(activationPoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1315, 14, "activationPoint != null");
        let activatingElementRect = engine.domRenderer.glassPaneElement.getBoundingClientRect();
        let midX = dart.notNull(activatingElementRect[$left]) + (dart.notNull(activatingElementRect[$right]) - dart.notNull(activatingElementRect[$left])) / 2;
        let midY = dart.notNull(activatingElementRect[$top]) + (dart.notNull(activatingElementRect[$bottom]) - dart.notNull(activatingElementRect[$top])) / 2;
        let deltaX = dart.notNull(activationPoint.x) - midX;
        let deltaY = dart.notNull(activationPoint.y) - midY;
        let deltaSquared = deltaX * deltaX + deltaY * deltaY;
        if (deltaSquared < 1.0) {
          safariEnableConditionPassed = true;
        }
      }
      if (blinkEnableConditionPassed || safariEnableConditionPassed) {
        if (!(this[_semanticsActivationTimer] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1332, 14, "_semanticsActivationTimer == null");
        this[_semanticsActivationTimer] = async.Timer.new(C86 || CT.C86, dart.fn(() => {
          this.semanticsEnabled = true;
          this[_schedulePlaceholderRemoval] = true;
        }, VoidToNull()));
        return false;
      }
      return true;
    }
    autoEnableOnTap(domRenderer) {
      let t5, t5$;
      this[_semanticsPlaceholder] = html.Element.tag("flt-semantics-placeholder");
      this[_semanticsPlaceholder][$addEventListener]("click", dart.fn(event => {
        this[_tryEnableSemantics](event);
      }, EventToNull()), true);
      t5 = this[_semanticsPlaceholder];
      t5[$setAttribute]("role", "button");
      t5[$setAttribute]("aria-label", engine.EngineSemanticsOwner.placeholderMessage);
      t5;
      t5$ = this[_semanticsPlaceholder].style;
      t5$[$position] = "absolute";
      t5$[$left] = "0";
      t5$[$top] = "0";
      t5$[$right] = "0";
      t5$[$bottom] = "0";
      t5$;
      domRenderer.glassPaneElement.insertBefore(this[_semanticsPlaceholder], domRenderer.sceneHostElement);
    }
    get semanticsEnabled() {
      return this[_semanticsEnabled];
    }
    set semanticsEnabled(value) {
      let t5, t5$;
      if (dart.equals(value, this[_semanticsEnabled])) {
        return;
      }
      this[_semanticsEnabled] = value;
      if (!dart.test(this[_semanticsEnabled])) {
        if (!dart.equals(this[_gestureMode], engine.GestureMode.pointerEvents)) {
          this[_gestureMode] = engine.GestureMode.pointerEvents;
          this[_notifyGestureModeListeners]();
        }
        let keys = this[_semanticsTree][$keys][$toList]();
        let len = keys[$length];
        for (let i = 0; i < dart.notNull(len); i = i + 1) {
          this[_detachObject](keys[$_get](i));
        }
        this[_finalizeTree]();
        t5 = this[_rootSemanticsElement];
        t5 == null ? null : t5[$remove]();
        this[_rootSemanticsElement] = null;
        t5$ = this[_gestureModeClock];
        t5$ == null ? null : t5$.datetime = null;
      }
      if (ui.window.onSemanticsEnabledChanged != null) {
        ui.window.onSemanticsEnabledChanged();
      }
    }
    get mode() {
      return this[_mode];
    }
    set mode(value) {
      if (!(value != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1429, 12, "value != null");
      this[_mode] = value;
    }
    get gestureMode() {
      return this[_gestureMode];
    }
    [_getGestureModeClock]() {
      if (this[_gestureModeClock] == null) {
        this[_gestureModeClock] = new engine.AlarmClock.new(this[_now]);
        this[_gestureModeClock].callback = dart.fn(() => {
          if (dart.equals(this[_gestureMode], engine.GestureMode.browserGestures)) {
            return;
          }
          this[_gestureMode] = engine.GestureMode.browserGestures;
          this[_notifyGestureModeListeners]();
        }, VoidToNull());
      }
      return this[_gestureModeClock];
    }
    [_temporarilyDisableBrowserGestureMode]() {
      let _kDebounceThreshold = C87 || CT.C87;
      this[_getGestureModeClock]().datetime = this[_now]().add(_kDebounceThreshold);
      if (!dart.equals(this[_gestureMode], engine.GestureMode.pointerEvents)) {
        this[_gestureMode] = engine.GestureMode.pointerEvents;
        this[_notifyGestureModeListeners]();
      }
    }
    receiveGlobalEvent(event) {
      let _pointerEventTypes = C88 || CT.C88;
      if (dart.test(_pointerEventTypes[$contains](event.type))) {
        this[_temporarilyDisableBrowserGestureMode]();
      }
      if (!dart.test(this[_isWaitingToEnableSemantics])) {
        return true;
      } else {
        return this[_tryEnableSemantics](event);
      }
    }
    addGestureModeListener(callback) {
      this[_gestureModeListeners][$add](callback);
    }
    removeGestureModeListener(callback) {
      if (!dart.test(this[_gestureModeListeners][$contains](callback))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1556, 12, "_gestureModeListeners.contains(callback)");
      this[_gestureModeListeners][$remove](callback);
    }
    [_notifyGestureModeListeners]() {
      for (let i = 0; i < dart.notNull(this[_gestureModeListeners][$length]); i = i + 1) {
        this[_gestureModeListeners][$_get](i)(this[_gestureMode]);
      }
    }
    shouldAcceptBrowserGesture(eventType) {
      if (dart.equals(this[_mode], engine.AccessibilityMode.known)) {
        return this.semanticsEnabled;
      }
      let pointerDebouncedGestures = C89 || CT.C89;
      if (dart.test(pointerDebouncedGestures[$contains](eventType))) {
        return dart.equals(this[_gestureMode], engine.GestureMode.browserGestures);
      }
      return false;
    }
    getOrCreateObject(id) {
      let object = this[_semanticsTree][$_get](id);
      if (object == null) {
        object = new engine.SemanticsObject.new(id, this);
        this[_semanticsTree][$_set](id, object);
      }
      return object;
    }
    updateSemantics(uiUpdate) {
      if (!dart.test(this[_semanticsEnabled])) {
        return;
      }
      let update = engine.SemanticsUpdate._check(uiUpdate);
      for (let nodeUpdate of update[_nodeUpdates]) {
        let object = this.getOrCreateObject(nodeUpdate.id);
        object.updateWith(nodeUpdate);
      }
      if (this[_rootSemanticsElement] == null) {
        let root = this[_semanticsTree][$_get](0);
        this[_rootSemanticsElement] = root.element;
        engine.domRenderer.glassPaneElement.insertBefore(this[_rootSemanticsElement], engine.domRenderer.sceneHostElement);
      }
      this[_finalizeTree]();
      if (!dart.test(this[_semanticsTree][$containsKey](0))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1638, 12, "_semanticsTree.containsKey(0)");
      if (!dart.test(dart.fn(() => {
        this[_semanticsTree][$forEach](dart.fn((id, object) => {
          if (!(id == object.id)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1642, 16, "id == object.id");
          if (object[_childrenInTraversalOrder] != null) {
            for (let childId of object[_childrenInTraversalOrder]) {
              let child = this[_semanticsTree][$_get](childId);
              if (child == null) {
                dart.throw(new core.AssertionError.new("Child #" + dart.str(childId) + " is missing in the tree."));
              }
              if (child[_parent] == null) {
                dart.throw(new core.AssertionError.new("Child #" + dart.str(childId) + " of parent #" + dart.str(object.id) + " has null parent " + "reference."));
              }
              if (child[_parent] != object) {
                dart.throw(new core.AssertionError.new("Parent #" + dart.str(object.id) + " has child #" + dart.str(childId) + ". However, the " + "child is attached to #" + dart.str(child[_parent].id) + "."));
              }
            }
          }
        }, intAndSemanticsObjectToNull()));
        let iter = update[_nodeUpdates];
        for (let update of iter) {
          if (!dart.test(this[_semanticsTree][$containsKey](update.id))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1668, 16, "_semanticsTree.containsKey(update.id)");
          if (!(this[_semanticsTree][$_get](update.id).element != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1670, 16, "_semanticsTree[update.id].element != null");
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart", 1639, 12, "() {\r\n      // Validate tree\r\n      _semanticsTree.forEach((int id, SemanticsObject object) {\r\n        assert(id == object.id);\r\n        // Ensure child ID list is consistent with the parent-child\r\n        // relationship of the semantics tree.\r\n        if (object._childrenInTraversalOrder != null) {\r\n          for (int childId in object._childrenInTraversalOrder) {\r\n            final SemanticsObject child = _semanticsTree[childId];\r\n            if (child == null) {\r\n              throw AssertionError('Child #$childId is missing in the tree.');\r\n            }\r\n            if (child._parent == null) {\r\n              throw AssertionError(\r\n                  'Child #$childId of parent #${object.id} has null parent '\r\n                  'reference.');\r\n            }\r\n            if (!identical(child._parent, object)) {\r\n              throw AssertionError(\r\n                  'Parent #${object.id} has child #$childId. However, the '\r\n                  'child is attached to #${child._parent.id}.');\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      // Validate that all updates were applied\r\n      for (SemanticsNodeUpdate update in update._nodeUpdates) {\r\n        // Node was added to the tree.\r\n        assert(_semanticsTree.containsKey(update.id));\r\n        // We created a DOM element for it.\r\n        assert(_semanticsTree[update.id].element != null);\r\n      }\r\n\r\n      return true;\r\n    }()");
    }
  };
  (engine.EngineSemanticsOwner.__ = function() {
    this[_semanticsTree] = new (IdentityMapOfint$SemanticsObject()).new();
    this[_attachments] = new (IdentityMapOfint$SemanticsObject()).new();
    this[_detachments] = JSArrayOfSemanticsObject().of([]);
    this[_oneTimePostUpdateCallbacks] = JSArrayOfVoidTovoid().of([]);
    this[_rootSemanticsElement] = null;
    this[_now] = dart.fn(() => new core.DateTime.now(), VoidToDateTime());
    this[_semanticsPlaceholder] = null;
    this[_semanticsActivationTimer] = null;
    this[_semanticsActivationAttempts] = 0;
    this[_schedulePlaceholderRemoval] = false;
    this[_semanticsEnabled] = false;
    this[_mode] = engine.AccessibilityMode.unknown;
    this[_gestureMode] = engine.GestureMode.browserGestures;
    this[_gestureModeClock] = null;
    this[_gestureModeListeners] = JSArrayOfGestureModeTovoid().of([]);
    engine.registerHotRestartListener(dart.fn(() => {
      let t5;
      t5 = this[_rootSemanticsElement];
      t5 == null ? null : t5[$remove]();
    }, VoidToNull()));
  }).prototype = engine.EngineSemanticsOwner.prototype;
  dart.addTypeTests(engine.EngineSemanticsOwner);
  dart.setMethodSignature(engine.EngineSemanticsOwner, () => ({
    __proto__: dart.getMethods(engine.EngineSemanticsOwner.__proto__),
    [_attachObject]: dart.fnType(dart.void, [], {child: engine.SemanticsObject, parent: engine.SemanticsObject}),
    [_detachObject]: dart.fnType(dart.void, [core.int]),
    addOneTimePostUpdateCallback: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    [_finalizeTree]: dart.fnType(dart.void, []),
    debugOverrideTimestampFunction: dart.fnType(dart.void, [dart.fnType(core.DateTime, [])]),
    debugResetTimestampFunction: dart.fnType(dart.void, []),
    [_tryEnableSemantics]: dart.fnType(core.bool, [html.Event]),
    autoEnableOnTap: dart.fnType(dart.void, [engine.DomRenderer]),
    [_getGestureModeClock]: dart.fnType(engine.AlarmClock, []),
    [_temporarilyDisableBrowserGestureMode]: dart.fnType(dart.void, []),
    receiveGlobalEvent: dart.fnType(core.bool, [html.Event]),
    addGestureModeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [engine.GestureMode])]),
    removeGestureModeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [engine.GestureMode])]),
    [_notifyGestureModeListeners]: dart.fnType(dart.void, []),
    shouldAcceptBrowserGesture: dart.fnType(core.bool, [core.String]),
    getOrCreateObject: dart.fnType(engine.SemanticsObject, [core.int]),
    updateSemantics: dart.fnType(dart.void, [ui.SemanticsUpdate])
  }));
  dart.setGetterSignature(engine.EngineSemanticsOwner, () => ({
    __proto__: dart.getGetters(engine.EngineSemanticsOwner.__proto__),
    debugSemanticsTree: core.Map$(core.int, engine.SemanticsObject),
    [_isWaitingToEnableSemantics]: core.bool,
    semanticsEnabled: core.bool,
    mode: engine.AccessibilityMode,
    gestureMode: engine.GestureMode
  }));
  dart.setSetterSignature(engine.EngineSemanticsOwner, () => ({
    __proto__: dart.getSetters(engine.EngineSemanticsOwner.__proto__),
    semanticsEnabled: core.bool,
    mode: engine.AccessibilityMode
  }));
  dart.setLibraryUri(engine.EngineSemanticsOwner, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.EngineSemanticsOwner, () => ({
    __proto__: dart.getFields(engine.EngineSemanticsOwner.__proto__),
    [_semanticsTree]: dart.finalFieldType(core.Map$(core.int, engine.SemanticsObject)),
    [_attachments]: dart.fieldType(core.Map$(core.int, engine.SemanticsObject)),
    [_detachments]: dart.fieldType(core.List$(engine.SemanticsObject)),
    [_oneTimePostUpdateCallbacks]: dart.fieldType(core.List$(dart.fnType(dart.void, []))),
    [_rootSemanticsElement]: dart.fieldType(html.Element),
    [_now]: dart.fieldType(dart.fnType(core.DateTime, [])),
    [_semanticsPlaceholder]: dart.fieldType(html.Element),
    [_semanticsActivationTimer]: dart.fieldType(async.Timer),
    [_semanticsActivationAttempts]: dart.fieldType(core.int),
    [_schedulePlaceholderRemoval]: dart.fieldType(core.bool),
    [_semanticsEnabled]: dart.fieldType(core.bool),
    [_mode]: dart.fieldType(engine.AccessibilityMode),
    [_gestureMode]: dart.fieldType(engine.GestureMode),
    [_gestureModeClock]: dart.fieldType(engine.AlarmClock),
    [_gestureModeListeners]: dart.fieldType(core.List$(dart.fnType(dart.void, [engine.GestureMode])))
  }));
  dart.defineLazy(engine.EngineSemanticsOwner, {
    /*engine.EngineSemanticsOwner._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*engine.EngineSemanticsOwner._kMaxSemanticsActivationAttempts*/get _kMaxSemanticsActivationAttempts() {
      return 20;
    },
    /*engine.EngineSemanticsOwner.placeholderMessage*/get placeholderMessage() {
      return "Enable accessibility";
    },
    set placeholderMessage(_) {}
  });
  const _clickListener = dart.privateName(engine, "_clickListener");
  const _stopListening = dart.privateName(engine, "_stopListening");
  engine.Tappable = class Tappable extends engine.RoleManager {
    update() {
      let element = this.semanticsObject.element;
      this.semanticsObject.setAriaRole("button", this.semanticsObject.hasFlag(ui.SemanticsFlag.isButton));
      if (!dart.test(this.semanticsObject.hasFlag(ui.SemanticsFlag.isEnabled)) && dart.test(this.semanticsObject.hasFlag(ui.SemanticsFlag.isButton))) {
        this.semanticsObject.element[$setAttribute]("aria-disabled", "true");
        this[_stopListening]();
      } else {
        if (dart.test(this.semanticsObject.hasAction(ui.SemanticsAction.tap)) && !dart.test(this.semanticsObject.hasFlag(ui.SemanticsFlag.isTextField))) {
          if (this[_clickListener] == null) {
            this[_clickListener] = dart.fn(_ => {
              if (!dart.equals(this.semanticsObject.owner.gestureMode, engine.GestureMode.browserGestures)) {
                return;
              }
              ui.window.onSemanticsAction(this.semanticsObject.id, ui.SemanticsAction.tap, null);
            }, EventToNull());
            element[$addEventListener]("click", this[_clickListener]);
          }
        } else {
          this[_stopListening]();
        }
      }
    }
    [_stopListening]() {
      if (this[_clickListener] == null) {
        return;
      }
      this.semanticsObject.element[$removeEventListener]("click", this[_clickListener]);
      this[_clickListener] = null;
    }
    dispose() {
      this[_stopListening]();
      this.semanticsObject.setAriaRole("button", false);
    }
  };
  (engine.Tappable.new = function(semanticsObject) {
    this[_clickListener] = null;
    engine.Tappable.__proto__.new.call(this, engine.Role.tappable, semanticsObject);
    ;
  }).prototype = engine.Tappable.prototype;
  dart.addTypeTests(engine.Tappable);
  dart.setMethodSignature(engine.Tappable, () => ({
    __proto__: dart.getMethods(engine.Tappable.__proto__),
    update: dart.fnType(dart.void, []),
    [_stopListening]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.Tappable, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Tappable, () => ({
    __proto__: dart.getFields(engine.Tappable.__proto__),
    [_clickListener]: dart.fieldType(dart.fnType(dart.dynamic, [html.Event]))
  }));
  const _setupDomElement = dart.privateName(engine, "_setupDomElement");
  const _textFieldElement = dart.privateName(engine, "_textFieldElement");
  const _initializeForBlink = dart.privateName(engine, "_initializeForBlink");
  const _initializeForWebkit = dart.privateName(engine, "_initializeForWebkit");
  const TextField_persistentTextEditingElement = dart.privateName(engine, "TextField.persistentTextEditingElement");
  engine.TextField = class TextField extends engine.RoleManager {
    get persistentTextEditingElement() {
      return this[persistentTextEditingElement];
    }
    set persistentTextEditingElement(value) {
      this[persistentTextEditingElement] = value;
    }
    get [_textFieldElement]() {
      return this.persistentTextEditingElement.domElement;
    }
    [_setupDomElement]() {
      let t5, t5$;
      t5 = this[_textFieldElement];
      t5.spellcheck = false;
      t5[$setAttribute]("spellcheck", "false");
      t5[$setAttribute]("autocorrect", "off");
      t5[$setAttribute]("autocomplete", "off");
      t5[$setAttribute]("data-semantics-role", "text-field");
      t5;
      t5$ = this[_textFieldElement].style;
      t5$[$position] = "absolute";
      t5$[$top] = "0";
      t5$[$left] = "0";
      t5$[$width] = dart.str(this.semanticsObject.rect.width) + "px";
      t5$[$height] = dart.str(this.semanticsObject.rect.height) + "px";
      t5$;
      this.semanticsObject.element[$append](this[_textFieldElement]);
      switch (engine.browserEngine) {
        case C2 || CT.C2:
        case C4 || CT.C4:
        case C5 || CT.C5:
        {
          this[_initializeForBlink]();
          break;
        }
        case C3 || CT.C3:
        {
          this[_initializeForWebkit]();
          break;
        }
      }
    }
    [_initializeForBlink]() {
      this[_textFieldElement][$addEventListener]("focus", dart.fn(event => {
        if (!dart.equals(this.semanticsObject.owner.gestureMode, engine.GestureMode.browserGestures)) {
          return;
        }
        engine.textEditing.useCustomEditableElement(this.persistentTextEditingElement);
        ui.window.onSemanticsAction(this.semanticsObject.id, ui.SemanticsAction.tap, null);
      }, EventToNull()));
    }
    [_initializeForWebkit]() {
      let lastTouchStartOffsetX = null;
      let lastTouchStartOffsetY = null;
      this[_textFieldElement][$addEventListener]("touchstart", dart.fn(event => {
        engine.textEditing.useCustomEditableElement(this.persistentTextEditingElement);
        let touchEvent = html.TouchEvent._check(event);
        lastTouchStartOffsetX = touchEvent.changedTouches[$last][$client].x;
        lastTouchStartOffsetY = touchEvent.changedTouches[$last][$client].y;
      }, EventToNull()), true);
      this[_textFieldElement][$addEventListener]("touchend", dart.fn(event => {
        let touchEvent = html.TouchEvent._check(event);
        if (lastTouchStartOffsetX != null) {
          if (!(lastTouchStartOffsetY != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/text_field.dart", 111, 16, "lastTouchStartOffsetY != null");
          let offsetX = touchEvent.changedTouches[$last][$client].x;
          let offsetY = touchEvent.changedTouches[$last][$client].y;
          if (dart.notNull(offsetX) * dart.notNull(offsetX) + dart.notNull(offsetY) * dart.notNull(offsetY) < 324) {
            ui.window.onSemanticsAction(this.semanticsObject.id, ui.SemanticsAction.tap, null);
          }
        } else {
          if (!(lastTouchStartOffsetY == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/text_field.dart", 128, 16, "lastTouchStartOffsetY == null");
        }
        lastTouchStartOffsetX = null;
        lastTouchStartOffsetY = null;
      }, EventToNull()), true);
    }
    update() {
    }
    dispose() {
      this[_textFieldElement][$remove]();
      engine.textEditing.stopUsingCustomEditableElement();
    }
  };
  (engine.TextField.new = function(semanticsObject) {
    this[persistentTextEditingElement] = null;
    engine.TextField.__proto__.new.call(this, engine.Role.textField, semanticsObject);
    let editableDomElement = dart.test(semanticsObject.hasFlag(ui.SemanticsFlag.isMultiline)) ? html.TextAreaElement.new() : html.InputElement.new();
    this.persistentTextEditingElement = new engine.PersistentTextEditingElement.new(engine.textEditing, editableDomElement, {onDomElementSwap: dart.bind(this, _setupDomElement)});
    this[_setupDomElement]();
  }).prototype = engine.TextField.prototype;
  dart.addTypeTests(engine.TextField);
  const persistentTextEditingElement = TextField_persistentTextEditingElement;
  dart.setMethodSignature(engine.TextField, () => ({
    __proto__: dart.getMethods(engine.TextField.__proto__),
    [_setupDomElement]: dart.fnType(dart.void, []),
    [_initializeForBlink]: dart.fnType(dart.void, []),
    [_initializeForWebkit]: dart.fnType(dart.void, []),
    update: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.TextField, () => ({
    __proto__: dart.getGetters(engine.TextField.__proto__),
    [_textFieldElement]: html.Element
  }));
  dart.setLibraryUri(engine.TextField, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.TextField, () => ({
    __proto__: dart.getFields(engine.TextField.__proto__),
    persistentTextEditingElement: dart.fieldType(engine.PersistentTextEditingElement)
  }));
  const _buffer = dart.privateName(engine, "_buffer");
  const _length = dart.privateName(engine, "_length");
  const _typedBuffer = dart.privateName(engine, "_typedBuffer");
  const _defaultValue = dart.privateName(engine, "_defaultValue");
  const _createBuffer = dart.privateName(engine, "_createBuffer");
  const _createBiggerBuffer = dart.privateName(engine, "_createBiggerBuffer");
  const _grow = dart.privateName(engine, "_grow");
  const _add = dart.privateName(engine, "_add");
  const _addAll = dart.privateName(engine, "_addAll");
  const _insertKnownLength = dart.privateName(engine, "_insertKnownLength");
  const _ensureCapacity = dart.privateName(engine, "_ensureCapacity");
  const _setRange = dart.privateName(engine, "_setRange");
  const _is__TypedDataBuffer_default = Symbol('_is__TypedDataBuffer_default');
  engine._TypedDataBuffer$ = dart.generic(E => {
    let IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    let _TypedDataBufferOfE = () => (_TypedDataBufferOfE = dart.constFn(engine._TypedDataBuffer$(E)))();
    class _TypedDataBuffer extends collection.ListBase$(E) {
      get [_typedBuffer]() {
        return typed_data.TypedData.as(this[_buffer]);
      }
      get length() {
        return this[_length];
      }
      _get(index) {
        if (dart.notNull(index) >= dart.notNull(this.length)) {
          dart.throw(new core.IndexError.new(index, this));
        }
        return this[_buffer][$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        E._check(value);
        if (dart.notNull(index) >= dart.notNull(this.length)) {
          dart.throw(new core.IndexError.new(index, this));
        }
        this[_buffer][$_set](index, value);
        return value$;
      }
      set length(newLength) {
        if (dart.notNull(newLength) < dart.notNull(this[_length])) {
          let defaultValue = this[_defaultValue];
          for (let i = newLength; dart.notNull(i) < dart.notNull(this[_length]); i = dart.notNull(i) + 1) {
            this[_buffer][$_set](i, defaultValue);
          }
        } else if (dart.notNull(newLength) > dart.notNull(this[_buffer][$length])) {
          let newBuffer = null;
          if (dart.test(this[_buffer][$isEmpty])) {
            newBuffer = this[_createBuffer](newLength);
          } else {
            newBuffer = this[_createBiggerBuffer](newLength);
          }
          newBuffer[$setRange](0, this[_length], this[_buffer]);
          this[_buffer] = newBuffer;
        }
        this[_length] = newLength;
      }
      [_add](value) {
        let t5;
        if (this[_length] == this[_buffer][$length]) {
          this[_grow](this[_length]);
        }
        this[_buffer][$_set]((t5 = this[_length], this[_length] = dart.notNull(t5) + 1, t5), value);
      }
      add(value) {
        E._check(value);
        this[_add](value);
      }
      addAll(values, start, end) {
        IterableOfE()._check(values);
        if (start === void 0) start = 0;
        if (end === void 0) end = null;
        core.RangeError.checkNotNegative(start, "start");
        if (end != null && dart.notNull(start) > dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, null, "end"));
        }
        this[_addAll](values, start, end);
      }
      insertAll(index, values, start, end) {
        let t5;
        IterableOfE()._check(values);
        if (start === void 0) start = 0;
        if (end === void 0) end = null;
        core.RangeError.checkValidIndex(index, this, "index", dart.notNull(this[_length]) + 1);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null) {
          if (dart.notNull(start) > dart.notNull(end)) {
            dart.throw(new core.RangeError.range(end, start, null, "end"));
          }
          if (start == end) {
            return;
          }
        }
        if (index == this[_length]) {
          this[_addAll](values, start, end);
          return;
        }
        if (end == null && core.List.is(values)) {
          end = values[$length];
        }
        if (end != null) {
          this[_insertKnownLength](index, values, start, end);
          return;
        }
        let writeIndex = this[_length];
        let skipCount = start;
        for (let value of values) {
          if (dart.notNull(skipCount) > 0) {
            skipCount = dart.notNull(skipCount) - 1;
            continue;
          }
          if (writeIndex == this[_buffer][$length]) {
            this[_grow](writeIndex);
          }
          this[_buffer][$_set]((t5 = writeIndex, writeIndex = dart.notNull(t5) + 1, t5), value);
        }
        if (dart.notNull(skipCount) > 0) {
          dart.throw(new core.StateError.new("Too few elements"));
        }
        if (end != null && dart.notNull(writeIndex) < dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, writeIndex, "end"));
        }
        engine._TypedDataBuffer._reverse(this[_buffer], index, this[_length]);
        engine._TypedDataBuffer._reverse(this[_buffer], this[_length], writeIndex);
        engine._TypedDataBuffer._reverse(this[_buffer], index, writeIndex);
        this[_length] = writeIndex;
        return;
      }
      static _reverse(buffer, start, end) {
        end = dart.notNull(end) - 1;
        while (dart.notNull(start) < dart.notNull(end)) {
          let first = buffer[$_get](start);
          let last = buffer[$_get](end);
          buffer[$_set](end, first);
          buffer[$_set](start, last);
          start = dart.notNull(start) + 1;
          end = dart.notNull(end) - 1;
        }
      }
      [_addAll](values, start, end) {
        if (start === void 0) start = 0;
        if (end === void 0) end = null;
        if (core.List.is(values)) {
          end == null ? end = values[$length] : null;
        }
        if (end != null) {
          this[_insertKnownLength](this[_length], values, start, end);
          return;
        }
        let i = 0;
        for (let value of values) {
          if (i >= dart.notNull(start)) {
            this.add(value);
          }
          i = i + 1;
        }
        if (i < dart.notNull(start)) {
          dart.throw(new core.StateError.new("Too few elements"));
        }
      }
      [_insertKnownLength](index, values, start, end) {
        if (core.List.is(values)) {
          end == null ? end = values[$length] : null;
          if (dart.notNull(start) > dart.notNull(values[$length]) || dart.notNull(end) > dart.notNull(values[$length])) {
            dart.throw(new core.StateError.new("Too few elements"));
          }
        } else {
          if (!(end != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/services/buffers.dart", 220, 14, "end != null");
        }
        let valuesLength = dart.notNull(end) - dart.notNull(start);
        let newLength = dart.notNull(this[_length]) + valuesLength;
        this[_ensureCapacity](newLength);
        this[_buffer][$setRange](dart.notNull(index) + valuesLength, dart.notNull(this[_length]) + valuesLength, this[_buffer], index);
        this[_buffer][$setRange](index, dart.notNull(index) + valuesLength, values, start);
        this[_length] = newLength;
      }
      insert(index, element) {
        E._check(element);
        if (dart.notNull(index) < 0 || dart.notNull(index) > dart.notNull(this[_length])) {
          dart.throw(new core.RangeError.range(index, 0, this[_length]));
        }
        if (dart.notNull(this[_length]) < dart.notNull(this[_buffer][$length])) {
          this[_buffer][$setRange](dart.notNull(index) + 1, dart.notNull(this[_length]) + 1, this[_buffer], index);
          this[_buffer][$_set](index, element);
          this[_length] = dart.notNull(this[_length]) + 1;
          return;
        }
        let newBuffer = this[_createBiggerBuffer](null);
        newBuffer[$setRange](0, index, this[_buffer]);
        newBuffer[$setRange](dart.notNull(index) + 1, dart.notNull(this[_length]) + 1, this[_buffer], index);
        newBuffer[$_set](index, element);
        this[_length] = dart.notNull(this[_length]) + 1;
        this[_buffer] = newBuffer;
      }
      [_ensureCapacity](requiredCapacity) {
        if (dart.notNull(requiredCapacity) <= dart.notNull(this[_buffer][$length])) {
          return;
        }
        let newBuffer = this[_createBiggerBuffer](requiredCapacity);
        newBuffer[$setRange](0, this[_length], this[_buffer]);
        this[_buffer] = newBuffer;
      }
      [_createBiggerBuffer](requiredCapacity) {
        let newLength = dart.notNull(this[_buffer][$length]) * 2;
        if (requiredCapacity != null && dart.notNull(newLength) < dart.notNull(requiredCapacity)) {
          newLength = requiredCapacity;
        } else if (dart.notNull(newLength) < 8) {
          newLength = 8;
        }
        return this[_createBuffer](newLength);
      }
      [_grow](length) {
        let t5;
        this[_buffer] = (t5 = this[_createBiggerBuffer](null), t5[$setRange](0, length, this[_buffer]), t5);
      }
      setRange(start, end, source, skipCount) {
        IterableOfE()._check(source);
        if (skipCount === void 0) skipCount = 0;
        if (dart.notNull(end) > dart.notNull(this[_length])) {
          dart.throw(new core.RangeError.range(end, 0, this[_length]));
        }
        this[_setRange](start, end, source, skipCount);
      }
      [_setRange](start, end, source, skipCount) {
        if (_TypedDataBufferOfE().is(source)) {
          this[_buffer][$setRange](start, end, source[_buffer], skipCount);
        } else {
          this[_buffer][$setRange](start, end, source, skipCount);
        }
      }
      get elementSizeInBytes() {
        return this[_typedBuffer][$elementSizeInBytes];
      }
      get lengthInBytes() {
        return dart.notNull(this[_length]) * dart.notNull(this[_typedBuffer][$elementSizeInBytes]);
      }
      get offsetInBytes() {
        return this[_typedBuffer][$offsetInBytes];
      }
      get buffer() {
        return this[_typedBuffer][$buffer];
      }
    }
    (_TypedDataBuffer.new = function(buffer) {
      this[_buffer] = buffer;
      this[_length] = buffer[$length];
      ;
    }).prototype = _TypedDataBuffer.prototype;
    dart.addTypeTests(_TypedDataBuffer);
    _TypedDataBuffer.prototype[_is__TypedDataBuffer_default] = true;
    dart.setMethodSignature(_TypedDataBuffer, () => ({
      __proto__: dart.getMethods(_TypedDataBuffer.__proto__),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, core.Object]),
      [$_set]: dart.fnType(dart.void, [core.int, core.Object]),
      [_add]: dart.fnType(dart.void, [E]),
      addAll: dart.fnType(dart.void, [core.Object], [core.int, core.int]),
      [$addAll]: dart.fnType(dart.void, [core.Object], [core.int, core.int]),
      insertAll: dart.fnType(dart.void, [core.int, core.Object], [core.int, core.int]),
      [$insertAll]: dart.fnType(dart.void, [core.int, core.Object], [core.int, core.int]),
      [_addAll]: dart.fnType(dart.void, [core.Iterable$(E)], [core.int, core.int]),
      [_insertKnownLength]: dart.fnType(dart.void, [core.int, core.Iterable$(E), core.int, core.int]),
      [_ensureCapacity]: dart.fnType(dart.void, [core.int]),
      [_createBiggerBuffer]: dart.fnType(core.List$(E), [core.int]),
      [_grow]: dart.fnType(dart.void, [core.int]),
      [_setRange]: dart.fnType(dart.void, [core.int, core.int, core.Iterable$(E), core.int])
    }));
    dart.setGetterSignature(_TypedDataBuffer, () => ({
      __proto__: dart.getGetters(_TypedDataBuffer.__proto__),
      [_typedBuffer]: typed_data.TypedData,
      length: core.int,
      [$length]: core.int,
      elementSizeInBytes: core.int,
      lengthInBytes: core.int,
      offsetInBytes: core.int,
      buffer: typed_data.ByteBuffer
    }));
    dart.setSetterSignature(_TypedDataBuffer, () => ({
      __proto__: dart.getSetters(_TypedDataBuffer.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(_TypedDataBuffer, "package:flutter_web_ui/src/engine.dart");
    dart.setFieldSignature(_TypedDataBuffer, () => ({
      __proto__: dart.getFields(_TypedDataBuffer.__proto__),
      [_buffer]: dart.fieldType(core.List$(E)),
      [_length]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(_TypedDataBuffer, [
      '_get',
      '_set',
      'add',
      'addAll',
      'insertAll',
      'insert',
      'setRange'
    ]);
    dart.defineExtensionAccessors(_TypedDataBuffer, ['length']);
    return _TypedDataBuffer;
  });
  engine._TypedDataBuffer = engine._TypedDataBuffer$();
  dart.defineLazy(engine._TypedDataBuffer, {
    /*engine._TypedDataBuffer._initialLength*/get _initialLength() {
      return 8;
    }
  });
  dart.addTypeTests(engine._TypedDataBuffer, _is__TypedDataBuffer_default);
  engine._IntBuffer = class _IntBuffer extends engine._TypedDataBuffer$(core.int) {
    get [_defaultValue]() {
      return 0;
    }
  };
  (engine._IntBuffer.new = function(buffer) {
    engine._IntBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = engine._IntBuffer.prototype;
  dart.addTypeTests(engine._IntBuffer);
  dart.setGetterSignature(engine._IntBuffer, () => ({
    __proto__: dart.getGetters(engine._IntBuffer.__proto__),
    [_defaultValue]: core.int
  }));
  dart.setLibraryUri(engine._IntBuffer, "package:flutter_web_ui/src/engine.dart");
  engine.Uint8Buffer = class Uint8Buffer extends engine._IntBuffer {
    [_createBuffer](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
  };
  (engine.Uint8Buffer.new = function(initialLength) {
    if (initialLength === void 0) initialLength = 0;
    engine.Uint8Buffer.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(initialLength));
    ;
  }).prototype = engine.Uint8Buffer.prototype;
  dart.addTypeTests(engine.Uint8Buffer);
  dart.setMethodSignature(engine.Uint8Buffer, () => ({
    __proto__: dart.getMethods(engine.Uint8Buffer.__proto__),
    [_createBuffer]: dart.fnType(typed_data.Uint8List, [core.int])
  }));
  dart.setLibraryUri(engine.Uint8Buffer, "package:flutter_web_ui/src/engine.dart");
  const _is_MessageCodec_default = Symbol('_is_MessageCodec_default');
  engine.MessageCodec$ = dart.generic(T => {
    class MessageCodec extends core.Object {}
    (MessageCodec.new = function() {
      ;
    }).prototype = MessageCodec.prototype;
    dart.addTypeTests(MessageCodec);
    MessageCodec.prototype[_is_MessageCodec_default] = true;
    dart.setLibraryUri(MessageCodec, "package:flutter_web_ui/src/engine.dart");
    return MessageCodec;
  });
  engine.MessageCodec = engine.MessageCodec$();
  dart.addTypeTests(engine.MessageCodec, _is_MessageCodec_default);
  const MethodCall_method = dart.privateName(engine, "MethodCall.method");
  const MethodCall_arguments = dart.privateName(engine, "MethodCall.arguments");
  engine.MethodCall = class MethodCall extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get arguments() {
      return this[arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.method) + ", " + dart.str(this.arguments) + ")";
    }
  };
  (engine.MethodCall.new = function(method, $arguments) {
    if ($arguments === void 0) $arguments = null;
    this[method$] = method;
    this[arguments$] = $arguments;
    if (!(method != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/services/message_codec.dart", 33, 60, "method != null");
    ;
  }).prototype = engine.MethodCall.prototype;
  dart.addTypeTests(engine.MethodCall);
  const method$ = MethodCall_method;
  const arguments$ = MethodCall_arguments;
  dart.setLibraryUri(engine.MethodCall, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.MethodCall, () => ({
    __proto__: dart.getFields(engine.MethodCall.__proto__),
    method: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(engine.MethodCall, ['toString']);
  engine.MethodCodec = class MethodCodec extends core.Object {};
  (engine.MethodCodec.new = function() {
    ;
  }).prototype = engine.MethodCodec.prototype;
  dart.addTypeTests(engine.MethodCodec);
  dart.setLibraryUri(engine.MethodCodec, "package:flutter_web_ui/src/engine.dart");
  const PlatformException_code = dart.privateName(engine, "PlatformException.code");
  const PlatformException_message = dart.privateName(engine, "PlatformException.message");
  const PlatformException_details = dart.privateName(engine, "PlatformException.details");
  engine.PlatformException = class PlatformException extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
    toString() {
      return "PlatformException(" + dart.str(this.code) + ", " + dart.str(this.message) + ", " + dart.str(this.details) + ")";
    }
  };
  (engine.PlatformException.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let details = opts && 'details' in opts ? opts.details : null;
    this[code$] = code;
    this[message$] = message;
    this[details$] = details;
    if (!(code != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/services/message_codec.dart", 102, 15, "code != null");
    ;
  }).prototype = engine.PlatformException.prototype;
  dart.addTypeTests(engine.PlatformException);
  const code$ = PlatformException_code;
  const message$ = PlatformException_message;
  const details$ = PlatformException_details;
  engine.PlatformException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(engine.PlatformException, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PlatformException, () => ({
    __proto__: dart.getFields(engine.PlatformException.__proto__),
    code: dart.finalFieldType(core.String),
    message: dart.finalFieldType(core.String),
    details: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(engine.PlatformException, ['toString']);
  const MissingPluginException_message = dart.privateName(engine, "MissingPluginException.message");
  engine.MissingPluginException = class MissingPluginException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "MissingPluginException(" + dart.str(this.message) + ")";
    }
  };
  (engine.MissingPluginException.new = function(message) {
    if (message === void 0) message = null;
    this[message$0] = message;
    ;
  }).prototype = engine.MissingPluginException.prototype;
  dart.addTypeTests(engine.MissingPluginException);
  const message$0 = MissingPluginException_message;
  engine.MissingPluginException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(engine.MissingPluginException, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.MissingPluginException, () => ({
    __proto__: dart.getFields(engine.MissingPluginException.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.MissingPluginException, ['toString']);
  engine.BinaryCodec = class BinaryCodec extends core.Object {
    decodeMessage(message) {
      return message;
    }
    encodeMessage(message) {
      typed_data.ByteData._check(message);
      return message;
    }
  };
  (engine.BinaryCodec.new = function() {
    ;
  }).prototype = engine.BinaryCodec.prototype;
  dart.addTypeTests(engine.BinaryCodec);
  engine.BinaryCodec[dart.implements] = () => [engine.MessageCodec$(typed_data.ByteData)];
  dart.setMethodSignature(engine.BinaryCodec, () => ({
    __proto__: dart.getMethods(engine.BinaryCodec.__proto__),
    decodeMessage: dart.fnType(typed_data.ByteData, [typed_data.ByteData]),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object])
  }));
  dart.setLibraryUri(engine.BinaryCodec, "package:flutter_web_ui/src/engine.dart");
  engine.StringCodec = class StringCodec extends core.Object {
    decodeMessage(message) {
      if (message == null) {
        return null;
      }
      return convert.utf8.decoder.convert(message[$buffer][$asUint8List]());
    }
    encodeMessage(message) {
      core.String._check(message);
      if (message == null) {
        return null;
      }
      let encoded = convert.utf8.encoder.convert(message);
      return encoded[$buffer][$asByteData]();
    }
  };
  (engine.StringCodec.new = function() {
    ;
  }).prototype = engine.StringCodec.prototype;
  dart.addTypeTests(engine.StringCodec);
  engine.StringCodec[dart.implements] = () => [engine.MessageCodec$(core.String)];
  dart.setMethodSignature(engine.StringCodec, () => ({
    __proto__: dart.getMethods(engine.StringCodec.__proto__),
    decodeMessage: dart.fnType(core.String, [typed_data.ByteData]),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object])
  }));
  dart.setLibraryUri(engine.StringCodec, "package:flutter_web_ui/src/engine.dart");
  let C90;
  engine.JSONMessageCodec = class JSONMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) {
        return null;
      }
      return (C90 || CT.C90).encodeMessage(convert.json.encode(message));
    }
    decodeMessage(message) {
      if (message == null) {
        return message;
      }
      return convert.json.decode((C90 || CT.C90).decodeMessage(message));
    }
  };
  (engine.JSONMessageCodec.new = function() {
    ;
  }).prototype = engine.JSONMessageCodec.prototype;
  dart.addTypeTests(engine.JSONMessageCodec);
  engine.JSONMessageCodec[dart.implements] = () => [engine.MessageCodec];
  dart.setMethodSignature(engine.JSONMessageCodec, () => ({
    __proto__: dart.getMethods(engine.JSONMessageCodec.__proto__),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object]),
    decodeMessage: dart.fnType(dart.dynamic, [typed_data.ByteData])
  }));
  dart.setLibraryUri(engine.JSONMessageCodec, "package:flutter_web_ui/src/engine.dart");
  engine.JSONMethodCodec = class JSONMethodCodec extends core.Object {
    encodeMethodCall(call) {
      return (C57 || CT.C57).encodeMessage(new (IdentityMapOfString$dynamic()).from(["method", call.method, "args", call.arguments]));
    }
    decodeMethodCall(methodCall) {
      let decoded = (C57 || CT.C57).decodeMessage(methodCall);
      if (!core.Map.is(decoded)) {
        dart.throw(new core.FormatException.new("Expected method call Map, got " + dart.str(decoded)));
      }
      let method = dart.dsend(decoded, '_get', ["method"]);
      let $arguments = dart.dsend(decoded, '_get', ["args"]);
      if (typeof method == 'string') {
        return new engine.MethodCall.new(method, $arguments);
      }
      dart.throw(new core.FormatException.new("Invalid method call: " + dart.str(decoded)));
    }
    decodeEnvelope(envelope) {
      let decoded = (C57 || CT.C57).decodeMessage(envelope);
      if (!core.List.is(decoded)) {
        dart.throw(new core.FormatException.new("Expected envelope List, got " + dart.str(decoded)));
      }
      if (dart.equals(dart.dload(decoded, 'length'), 1)) {
        return dart.dsend(decoded, '_get', [0]);
      }
      if (dart.equals(dart.dload(decoded, 'length'), 3) && typeof dart.dsend(decoded, '_get', [0]) == 'string' && (dart.dsend(decoded, '_get', [1]) == null || typeof dart.dsend(decoded, '_get', [1]) == 'string')) {
        dart.throw(new engine.PlatformException.new({code: core.String._check(dart.dsend(decoded, '_get', [0])), message: core.String._check(dart.dsend(decoded, '_get', [1])), details: dart.dsend(decoded, '_get', [2])}));
      }
      dart.throw(new core.FormatException.new("Invalid envelope: " + dart.str(decoded)));
    }
    encodeSuccessEnvelope(result) {
      return (C57 || CT.C57).encodeMessage([result]);
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      if (!(code != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/services/message_codecs.dart", 165, 12, "code != null");
      return (C57 || CT.C57).encodeMessage([code, message, details]);
    }
  };
  (engine.JSONMethodCodec.new = function() {
    ;
  }).prototype = engine.JSONMethodCodec.prototype;
  dart.addTypeTests(engine.JSONMethodCodec);
  engine.JSONMethodCodec[dart.implements] = () => [engine.MethodCodec];
  dart.setMethodSignature(engine.JSONMethodCodec, () => ({
    __proto__: dart.getMethods(engine.JSONMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [engine.MethodCall]),
    decodeMethodCall: dart.fnType(engine.MethodCall, [typed_data.ByteData]),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.dynamic]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {code: core.String, details: dart.dynamic, message: core.String})
  }));
  dart.setLibraryUri(engine.JSONMethodCodec, "package:flutter_web_ui/src/engine.dart");
  const FormatException_offset = dart.privateName(core, "FormatException.offset");
  const FormatException_source = dart.privateName(core, "FormatException.source");
  const FormatException_message = dart.privateName(core, "FormatException.message");
  let C91;
  engine.StandardMessageCodec = class StandardMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) {
        return null;
      }
      let buffer = new engine.WriteBuffer.new();
      this.writeValue(buffer, message);
      return buffer.done();
    }
    decodeMessage(message) {
      if (message == null) {
        return null;
      }
      let buffer = new engine.ReadBuffer.new(message);
      let result = this.readValue(buffer);
      if (dart.test(buffer.hasRemaining)) {
        dart.throw(C91 || CT.C91);
      }
      return result;
    }
    writeValue(buffer, value) {
      if (value == null) {
        buffer.putUint8(0);
      } else if (typeof value == 'boolean') {
        buffer.putUint8(dart.test(value) ? 1 : 2);
      } else if (typeof value == 'number') {
        buffer.putUint8(6);
        buffer.putFloat64(value);
      } else if (core.int.is(value)) {
        if (-2147483647 - 1 <= dart.notNull(value) && dart.notNull(value) <= 2147483647) {
          buffer.putUint8(3);
          buffer.putInt32(value);
        } else {
          buffer.putUint8(4);
          buffer.putInt64(value);
        }
      } else if (typeof value == 'string') {
        buffer.putUint8(7);
        let bytes = convert.utf8.encoder.convert(value);
        this.writeSize(buffer, bytes[$length]);
        buffer.putUint8List(typed_data.Uint8List._check(bytes));
      } else if (typed_data.Uint8List.is(value)) {
        buffer.putUint8(8);
        this.writeSize(buffer, value[$length]);
        buffer.putUint8List(value);
      } else if (typed_data.Int32List.is(value)) {
        buffer.putUint8(9);
        this.writeSize(buffer, value[$length]);
        buffer.putInt32List(value);
      } else if (typed_data.Int64List.is(value)) {
        buffer.putUint8(10);
        this.writeSize(buffer, value[$length]);
        buffer.putInt64List(value);
      } else if (typed_data.Float64List.is(value)) {
        buffer.putUint8(11);
        this.writeSize(buffer, value[$length]);
        buffer.putFloat64List(value);
      } else if (core.List.is(value)) {
        buffer.putUint8(12);
        this.writeSize(buffer, value[$length]);
        for (let item of value) {
          this.writeValue(buffer, item);
        }
      } else if (core.Map.is(value)) {
        buffer.putUint8(13);
        this.writeSize(buffer, value[$length]);
        value[$forEach](dart.fn((key, value) => {
          this.writeValue(buffer, key);
          this.writeValue(buffer, value);
        }, dynamicAnddynamicToNull()));
      } else {
        dart.throw(new core.ArgumentError.value(value));
      }
    }
    readValue(buffer) {
      if (!dart.test(buffer.hasRemaining)) {
        dart.throw(C91 || CT.C91);
      }
      let type = buffer.getUint8();
      return this.readValueOfType(type, buffer);
    }
    readValueOfType(type, buffer) {
      let result = null;
      switch (type) {
        case 0:
        {
          result = null;
          break;
        }
        case 1:
        {
          result = true;
          break;
        }
        case 2:
        {
          result = false;
          break;
        }
        case 3:
        {
          result = buffer.getInt32();
          break;
        }
        case 4:
        {
          result = buffer.getInt64();
          break;
        }
        case 5:
        {
          let length = this.readSize(buffer);
          let hex = convert.utf8.decoder.convert(buffer.getUint8List(length));
          result = core.int.parse(hex, {radix: 16});
          break;
        }
        case 6:
        {
          result = buffer.getFloat64();
          break;
        }
        case 7:
        {
          let length = this.readSize(buffer);
          result = convert.utf8.decoder.convert(buffer.getUint8List(length));
          break;
        }
        case 8:
        {
          let length = this.readSize(buffer);
          result = buffer.getUint8List(length);
          break;
        }
        case 9:
        {
          let length = this.readSize(buffer);
          result = buffer.getInt32List(length);
          break;
        }
        case 10:
        {
          let length = this.readSize(buffer);
          result = buffer.getInt64List(length);
          break;
        }
        case 11:
        {
          let length = this.readSize(buffer);
          result = buffer.getFloat64List(length);
          break;
        }
        case 12:
        {
          let length = this.readSize(buffer);
          result = core.List.new(length);
          for (let i = 0; i < dart.notNull(length); i = i + 1) {
            dart.dsend(result, '_set', [i, this.readValue(buffer)]);
          }
          break;
        }
        case 13:
        {
          let length = this.readSize(buffer);
          result = new _js_helper.LinkedMap.new();
          for (let i = 0; i < dart.notNull(length); i = i + 1) {
            dart.dsend(result, '_set', [this.readValue(buffer), this.readValue(buffer)]);
          }
          break;
        }
        default:
        {
          dart.throw(C91 || CT.C91);
        }
      }
      return result;
    }
    writeSize(buffer, value) {
      if (!(0 <= dart.notNull(value) && dart.notNull(value) <= 4294967295)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/services/message_codecs.dart", 454, 12, "0 <= value && value <= 0xffffffff");
      if (dart.notNull(value) < 254) {
        buffer.putUint8(value);
      } else if (dart.notNull(value) <= 65535) {
        buffer.putUint8(254);
        buffer.putUint16(value);
      } else {
        buffer.putUint8(255);
        buffer.putUint32(value);
      }
    }
    readSize(buffer) {
      let value = buffer.getUint8();
      switch (value) {
        case 254:
        {
          return buffer.getUint16();
        }
        case 255:
        {
          return buffer.getUint32();
        }
        default:
        {
          return value;
        }
      }
    }
  };
  (engine.StandardMessageCodec.new = function() {
    ;
  }).prototype = engine.StandardMessageCodec.prototype;
  dart.addTypeTests(engine.StandardMessageCodec);
  engine.StandardMessageCodec[dart.implements] = () => [engine.MessageCodec];
  dart.setMethodSignature(engine.StandardMessageCodec, () => ({
    __proto__: dart.getMethods(engine.StandardMessageCodec.__proto__),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object]),
    decodeMessage: dart.fnType(dart.dynamic, [typed_data.ByteData]),
    writeValue: dart.fnType(dart.void, [engine.WriteBuffer, dart.dynamic]),
    readValue: dart.fnType(dart.dynamic, [engine.ReadBuffer]),
    readValueOfType: dart.fnType(dart.dynamic, [core.int, engine.ReadBuffer]),
    writeSize: dart.fnType(dart.void, [engine.WriteBuffer, core.int]),
    readSize: dart.fnType(core.int, [engine.ReadBuffer])
  }));
  dart.setLibraryUri(engine.StandardMessageCodec, "package:flutter_web_ui/src/engine.dart");
  dart.defineLazy(engine.StandardMessageCodec, {
    /*engine.StandardMessageCodec._valueNull*/get _valueNull() {
      return 0;
    },
    /*engine.StandardMessageCodec._valueTrue*/get _valueTrue() {
      return 1;
    },
    /*engine.StandardMessageCodec._valueFalse*/get _valueFalse() {
      return 2;
    },
    /*engine.StandardMessageCodec._valueInt32*/get _valueInt32() {
      return 3;
    },
    /*engine.StandardMessageCodec._valueInt64*/get _valueInt64() {
      return 4;
    },
    /*engine.StandardMessageCodec._valueLargeInt*/get _valueLargeInt() {
      return 5;
    },
    /*engine.StandardMessageCodec._valueFloat64*/get _valueFloat64() {
      return 6;
    },
    /*engine.StandardMessageCodec._valueString*/get _valueString() {
      return 7;
    },
    /*engine.StandardMessageCodec._valueUint8List*/get _valueUint8List() {
      return 8;
    },
    /*engine.StandardMessageCodec._valueInt32List*/get _valueInt32List() {
      return 9;
    },
    /*engine.StandardMessageCodec._valueInt64List*/get _valueInt64List() {
      return 10;
    },
    /*engine.StandardMessageCodec._valueFloat64List*/get _valueFloat64List() {
      return 11;
    },
    /*engine.StandardMessageCodec._valueList*/get _valueList() {
      return 12;
    },
    /*engine.StandardMessageCodec._valueMap*/get _valueMap() {
      return 13;
    }
  });
  let C92;
  let C93;
  let C94;
  const StandardMethodCodec_messageCodec = dart.privateName(engine, "StandardMethodCodec.messageCodec");
  engine.StandardMethodCodec = class StandardMethodCodec extends core.Object {
    get messageCodec() {
      return this[messageCodec$];
    }
    set messageCodec(value) {
      super.messageCodec = value;
    }
    encodeMethodCall(call) {
      let buffer = new engine.WriteBuffer.new();
      this.messageCodec.writeValue(buffer, call.method);
      this.messageCodec.writeValue(buffer, call.arguments);
      return buffer.done();
    }
    decodeMethodCall(methodCall) {
      let buffer = new engine.ReadBuffer.new(methodCall);
      let method = this.messageCodec.readValue(buffer);
      let $arguments = this.messageCodec.readValue(buffer);
      if (typeof method == 'string' && !dart.test(buffer.hasRemaining))
        return new engine.MethodCall.new(method, $arguments);
      else
        dart.throw(C92 || CT.C92);
    }
    encodeSuccessEnvelope(result) {
      let buffer = new engine.WriteBuffer.new();
      buffer.putUint8(0);
      this.messageCodec.writeValue(buffer, result);
      return buffer.done();
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      let buffer = new engine.WriteBuffer.new();
      buffer.putUint8(1);
      this.messageCodec.writeValue(buffer, code);
      this.messageCodec.writeValue(buffer, message);
      this.messageCodec.writeValue(buffer, details);
      return buffer.done();
    }
    decodeEnvelope(envelope) {
      if (envelope[$lengthInBytes] === 0) dart.throw(C93 || CT.C93);
      let buffer = new engine.ReadBuffer.new(envelope);
      if (buffer.getUint8() === 0) {
        return this.messageCodec.readValue(buffer);
      }
      let errorCode = this.messageCodec.readValue(buffer);
      let errorMessage = this.messageCodec.readValue(buffer);
      let errorDetails = this.messageCodec.readValue(buffer);
      if (typeof errorCode == 'string' && (errorMessage == null || typeof errorMessage == 'string') && !dart.test(buffer.hasRemaining))
        dart.throw(new engine.PlatformException.new({code: errorCode, message: core.String._check(errorMessage), details: errorDetails}));
      else
        dart.throw(C94 || CT.C94);
    }
  };
  (engine.StandardMethodCodec.new = function(messageCodec) {
    if (messageCodec === void 0) messageCodec = C65 || CT.C65;
    this[messageCodec$] = messageCodec;
    ;
  }).prototype = engine.StandardMethodCodec.prototype;
  dart.addTypeTests(engine.StandardMethodCodec);
  const messageCodec$ = StandardMethodCodec_messageCodec;
  engine.StandardMethodCodec[dart.implements] = () => [engine.MethodCodec];
  dart.setMethodSignature(engine.StandardMethodCodec, () => ({
    __proto__: dart.getMethods(engine.StandardMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [engine.MethodCall]),
    decodeMethodCall: dart.fnType(engine.MethodCall, [typed_data.ByteData]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.dynamic]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {code: core.String, details: dart.dynamic, message: core.String}),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData])
  }));
  dart.setLibraryUri(engine.StandardMethodCodec, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.StandardMethodCodec, () => ({
    __proto__: dart.getFields(engine.StandardMethodCodec.__proto__),
    messageCodec: dart.finalFieldType(engine.StandardMessageCodec)
  }));
  const _eightBytes = dart.privateName(engine, "_eightBytes");
  const _eightBytesAsList = dart.privateName(engine, "_eightBytesAsList");
  const _alignTo = dart.privateName(engine, "_alignTo");
  engine.WriteBuffer = class WriteBuffer extends core.Object {
    putUint8(byte) {
      this[_buffer].add(byte);
    }
    putUint16(value) {
      this[_eightBytes][$setUint16](0, value, typed_data.Endian.host);
      this[_buffer].addAll(this[_eightBytesAsList], 0, 2);
    }
    putUint32(value) {
      this[_eightBytes][$setUint32](0, value, typed_data.Endian.host);
      this[_buffer].addAll(this[_eightBytesAsList], 0, 4);
    }
    putInt32(value) {
      this[_eightBytes][$setInt32](0, value, typed_data.Endian.host);
      this[_buffer].addAll(this[_eightBytesAsList], 0, 4);
    }
    putInt64(value) {
      this[_eightBytes][$setInt64](0, value, typed_data.Endian.host);
      this[_buffer].addAll(this[_eightBytesAsList], 0, 8);
    }
    putFloat64(value) {
      this[_alignTo](8);
      this[_eightBytes][$setFloat64](0, value, typed_data.Endian.host);
      this[_buffer].addAll(this[_eightBytesAsList]);
    }
    putUint8List(list) {
      this[_buffer].addAll(list);
    }
    putInt32List(list) {
      this[_alignTo](4);
      this[_buffer].addAll(list[$buffer][$asUint8List](list[$offsetInBytes], 4 * dart.notNull(list[$length])));
    }
    putInt64List(list) {
      this[_alignTo](8);
      this[_buffer].addAll(list[$buffer][$asUint8List](list[$offsetInBytes], 8 * dart.notNull(list[$length])));
    }
    putFloat64List(list) {
      this[_alignTo](8);
      this[_buffer].addAll(list[$buffer][$asUint8List](list[$offsetInBytes], 8 * dart.notNull(list[$length])));
    }
    [_alignTo](alignment) {
      let mod = this[_buffer].length[$modulo](alignment);
      if (mod !== 0) {
        for (let i = 0; i < dart.notNull(alignment) - mod; i = i + 1) {
          this[_buffer].add(0);
        }
      }
    }
    done() {
      let result = this[_buffer].buffer[$asByteData](0, this[_buffer].lengthInBytes);
      this[_buffer] = null;
      return result;
    }
  };
  (engine.WriteBuffer.new = function() {
    this[_buffer] = null;
    this[_eightBytes] = null;
    this[_eightBytesAsList] = null;
    this[_buffer] = new engine.Uint8Buffer.new();
    this[_eightBytes] = _native_typed_data.NativeByteData.new(8);
    this[_eightBytesAsList] = this[_eightBytes][$buffer][$asUint8List]();
  }).prototype = engine.WriteBuffer.prototype;
  dart.addTypeTests(engine.WriteBuffer);
  dart.setMethodSignature(engine.WriteBuffer, () => ({
    __proto__: dart.getMethods(engine.WriteBuffer.__proto__),
    putUint8: dart.fnType(dart.void, [core.int]),
    putUint16: dart.fnType(dart.void, [core.int]),
    putUint32: dart.fnType(dart.void, [core.int]),
    putInt32: dart.fnType(dart.void, [core.int]),
    putInt64: dart.fnType(dart.void, [core.int]),
    putFloat64: dart.fnType(dart.void, [core.double]),
    putUint8List: dart.fnType(dart.void, [typed_data.Uint8List]),
    putInt32List: dart.fnType(dart.void, [typed_data.Int32List]),
    putInt64List: dart.fnType(dart.void, [typed_data.Int64List]),
    putFloat64List: dart.fnType(dart.void, [typed_data.Float64List]),
    [_alignTo]: dart.fnType(dart.void, [core.int]),
    done: dart.fnType(typed_data.ByteData, [])
  }));
  dart.setLibraryUri(engine.WriteBuffer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.WriteBuffer, () => ({
    __proto__: dart.getFields(engine.WriteBuffer.__proto__),
    [_buffer]: dart.fieldType(engine.Uint8Buffer),
    [_eightBytes]: dart.fieldType(typed_data.ByteData),
    [_eightBytesAsList]: dart.fieldType(typed_data.Uint8List)
  }));
  const _position = dart.privateName(engine, "_position");
  const ReadBuffer_data = dart.privateName(engine, "ReadBuffer.data");
  engine.ReadBuffer = class ReadBuffer extends core.Object {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    get hasRemaining() {
      return dart.notNull(this[_position]) < dart.notNull(this.data[$lengthInBytes]);
    }
    getUint8() {
      let t5;
      return this.data[$getUint8]((t5 = this[_position], this[_position] = dart.notNull(t5) + 1, t5));
    }
    getUint16() {
      let value = this.data[$getUint16](this[_position], typed_data.Endian.host);
      this[_position] = dart.notNull(this[_position]) + 2;
      return value;
    }
    getUint32() {
      let value = this.data[$getUint32](this[_position], typed_data.Endian.host);
      this[_position] = dart.notNull(this[_position]) + 4;
      return value;
    }
    getInt32() {
      let value = this.data[$getInt32](this[_position], typed_data.Endian.host);
      this[_position] = dart.notNull(this[_position]) + 4;
      return value;
    }
    getInt64() {
      let value = this.data[$getInt64](this[_position], typed_data.Endian.host);
      this[_position] = dart.notNull(this[_position]) + 8;
      return value;
    }
    getFloat64() {
      this[_alignTo](8);
      let value = this.data[$getFloat64](this[_position], typed_data.Endian.host);
      this[_position] = dart.notNull(this[_position]) + 8;
      return value;
    }
    getUint8List(length) {
      let list = this.data[$buffer][$asUint8List](dart.notNull(this.data[$offsetInBytes]) + dart.notNull(this[_position]), length);
      this[_position] = dart.notNull(this[_position]) + dart.notNull(length);
      return list;
    }
    getInt32List(length) {
      this[_alignTo](4);
      let list = this.data[$buffer][$asInt32List](dart.notNull(this.data[$offsetInBytes]) + dart.notNull(this[_position]), length);
      this[_position] = dart.notNull(this[_position]) + 4 * dart.notNull(length);
      return list;
    }
    getInt64List(length) {
      this[_alignTo](8);
      let list = this.data[$buffer][$asInt64List](dart.notNull(this.data[$offsetInBytes]) + dart.notNull(this[_position]), length);
      this[_position] = dart.notNull(this[_position]) + 8 * dart.notNull(length);
      return list;
    }
    getFloat64List(length) {
      this[_alignTo](8);
      let list = this.data[$buffer][$asFloat64List](dart.notNull(this.data[$offsetInBytes]) + dart.notNull(this[_position]), length);
      this[_position] = dart.notNull(this[_position]) + 8 * dart.notNull(length);
      return list;
    }
    [_alignTo](alignment) {
      let mod = this[_position][$modulo](alignment);
      if (mod !== 0) {
        this[_position] = dart.notNull(this[_position]) + (dart.notNull(alignment) - mod);
      }
    }
  };
  (engine.ReadBuffer.new = function(data) {
    this[_position] = 0;
    this[data$0] = data;
    if (!(data != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/services/serialization.dart", 109, 34, "data != null");
    ;
  }).prototype = engine.ReadBuffer.prototype;
  dart.addTypeTests(engine.ReadBuffer);
  const data$0 = ReadBuffer_data;
  dart.setMethodSignature(engine.ReadBuffer, () => ({
    __proto__: dart.getMethods(engine.ReadBuffer.__proto__),
    getUint8: dart.fnType(core.int, []),
    getUint16: dart.fnType(core.int, []),
    getUint32: dart.fnType(core.int, []),
    getInt32: dart.fnType(core.int, []),
    getInt64: dart.fnType(core.int, []),
    getFloat64: dart.fnType(core.double, []),
    getUint8List: dart.fnType(typed_data.Uint8List, [core.int]),
    getInt32List: dart.fnType(typed_data.Int32List, [core.int]),
    getInt64List: dart.fnType(typed_data.Int64List, [core.int]),
    getFloat64List: dart.fnType(typed_data.Float64List, [core.int]),
    [_alignTo]: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(engine.ReadBuffer, () => ({
    __proto__: dart.getGetters(engine.ReadBuffer.__proto__),
    hasRemaining: core.bool
  }));
  dart.setLibraryUri(engine.ReadBuffer, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ReadBuffer, () => ({
    __proto__: dart.getFields(engine.ReadBuffer.__proto__),
    data: dart.finalFieldType(typed_data.ByteData),
    [_position]: dart.fieldType(core.int)
  }));
  engine.EngineGradient = class EngineGradient extends core.Object {
    webOnlySerializeToCssPaint() {
      dart.throw(new core.UnsupportedError.new("CSS paint not implemented for this shader type"));
    }
  };
  (engine.EngineGradient.__ = function() {
    ;
  }).prototype = engine.EngineGradient.prototype;
  dart.addTypeTests(engine.EngineGradient);
  engine.EngineGradient[dart.implements] = () => [ui.Gradient];
  dart.setMethodSignature(engine.EngineGradient, () => ({
    __proto__: dart.getMethods(engine.EngineGradient.__proto__),
    webOnlySerializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(engine.EngineGradient, "package:flutter_web_ui/src/engine.dart");
  const GradientSweep_center = dart.privateName(engine, "GradientSweep.center");
  const GradientSweep_colors = dart.privateName(engine, "GradientSweep.colors");
  const GradientSweep_colorStops = dart.privateName(engine, "GradientSweep.colorStops");
  const GradientSweep_tileMode = dart.privateName(engine, "GradientSweep.tileMode");
  const GradientSweep_startAngle = dart.privateName(engine, "GradientSweep.startAngle");
  const GradientSweep_endAngle = dart.privateName(engine, "GradientSweep.endAngle");
  const GradientSweep_matrix4 = dart.privateName(engine, "GradientSweep.matrix4");
  engine.GradientSweep = class GradientSweep extends engine.EngineGradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get colorStops() {
      return this[colorStops$];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    get tileMode() {
      return this[tileMode$];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get startAngle() {
      return this[startAngle$0];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    get endAngle() {
      return this[endAngle$0];
    }
    set endAngle(value) {
      super.endAngle = value;
    }
    get matrix4() {
      return this[matrix4$0];
    }
    set matrix4(value) {
      super.matrix4 = value;
    }
    createPaintStyle(ctx) {
      dart.throw(new core.UnimplementedError.new());
    }
    createSkiaShader() {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (engine.GradientSweep.new = function(center, colors, colorStops, tileMode, startAngle, endAngle, matrix4) {
    this[center$] = center;
    this[colors$] = colors;
    this[colorStops$] = colorStops;
    this[tileMode$] = tileMode;
    this[startAngle$0] = startAngle;
    this[endAngle$0] = endAngle;
    this[matrix4$0] = matrix4;
    if (!dart.test(engine._offsetIsValid(center))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 38, 16, "_offsetIsValid(center)");
    if (!(colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 39, 16, "colors != null");
    if (!(tileMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 40, 16, "tileMode != null");
    if (!(startAngle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 41, 16, "startAngle != null");
    if (!(endAngle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 42, 16, "endAngle != null");
    if (!(dart.notNull(startAngle) < dart.notNull(endAngle))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 43, 16, "startAngle < endAngle");
    if (!(matrix4 == null || dart.test(engine._matrix4IsValid(matrix4)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 44, 16, "matrix4 == null || _matrix4IsValid(matrix4)");
    engine.GradientSweep.__proto__.__.call(this);
    engine._validateColorStops(this.colors, this.colorStops);
  }).prototype = engine.GradientSweep.prototype;
  dart.addTypeTests(engine.GradientSweep);
  const center$ = GradientSweep_center;
  const colors$ = GradientSweep_colors;
  const colorStops$ = GradientSweep_colorStops;
  const tileMode$ = GradientSweep_tileMode;
  const startAngle$0 = GradientSweep_startAngle;
  const endAngle$0 = GradientSweep_endAngle;
  const matrix4$0 = GradientSweep_matrix4;
  dart.setMethodSignature(engine.GradientSweep, () => ({
    __proto__: dart.getMethods(engine.GradientSweep.__proto__),
    createPaintStyle: dart.fnType(core.Object, [html.CanvasRenderingContext2D]),
    createSkiaShader: dart.fnType(js.JsObject, [])
  }));
  dart.setLibraryUri(engine.GradientSweep, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.GradientSweep, () => ({
    __proto__: dart.getFields(engine.GradientSweep.__proto__),
    center: dart.finalFieldType(ui.Offset),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    colorStops: dart.finalFieldType(core.List$(core.double)),
    tileMode: dart.finalFieldType(ui.TileMode),
    startAngle: dart.finalFieldType(core.double),
    endAngle: dart.finalFieldType(core.double),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  const GradientLinear_from = dart.privateName(engine, "GradientLinear.from");
  const GradientLinear_to = dart.privateName(engine, "GradientLinear.to");
  const GradientLinear_colors = dart.privateName(engine, "GradientLinear.colors");
  const GradientLinear_colorStops = dart.privateName(engine, "GradientLinear.colorStops");
  const GradientLinear_tileMode = dart.privateName(engine, "GradientLinear.tileMode");
  engine.GradientLinear = class GradientLinear extends engine.EngineGradient {
    get from() {
      return this[from$];
    }
    set from(value) {
      super.from = value;
    }
    get to() {
      return this[to$];
    }
    set to(value) {
      super.to = value;
    }
    get colors() {
      return this[colors$0];
    }
    set colors(value) {
      super.colors = value;
    }
    get colorStops() {
      return this[colorStops$0];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    get tileMode() {
      return this[tileMode$0];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    createPaintStyle(ctx) {
      let gradient = ctx.createLinearGradient(this.from.dx, this.from.dy, this.to.dx, this.to.dy);
      if (this.colorStops == null) {
        if (!(this.colors[$length] === 2)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 106, 14, "colors.length == 2");
        gradient.addColorStop(0, this.colors[$_get](0).toCssString());
        gradient.addColorStop(1, this.colors[$_get](1).toCssString());
        return gradient;
      }
      for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
        gradient.addColorStop(this.colorStops[$_get](i), this.colors[$_get](i).toCssString());
      }
      return gradient;
    }
    webOnlySerializeToCssPaint() {
      let serializedColors = [];
      for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
        serializedColors[$add](this.colors[$_get](i).toCssString());
      }
      return [1, this.from.dx, this.from.dy, this.to.dx, this.to.dy, serializedColors, this.colorStops, this.tileMode.index];
    }
    createSkiaShader() {
      if (!false) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 137, 12, "experimentalUseSkia");
      let jsColors = new (JsArrayOfnum()).new();
      jsColors.length = this.colors[$length];
      for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
        jsColors._set(i, this.colors[$_get](i).value);
      }
      let jsColorStops = null;
      if (this.colorStops == null) {
        jsColorStops = new (JsArrayOfdouble()).new();
        jsColorStops.length = 2;
        jsColorStops._set(0, 0.0);
        jsColorStops._set(1, 1.0);
      } else {
        jsColorStops = new (JsArrayOfdouble()).from(this.colorStops);
        jsColorStops.length = this.colorStops[$length];
      }
      return js.JsObject._check(engine.canvasKit.callMethod("MakeLinearGradientShader", [engine.makeSkPoint(this.from), engine.makeSkPoint(this.to), jsColors, jsColorStops, this.tileMode.index]));
    }
  };
  (engine.GradientLinear.new = function(from, to, colors, colorStops, tileMode) {
    this[from$] = from;
    this[to$] = to;
    this[colors$0] = colors;
    this[colorStops$0] = colorStops;
    this[tileMode$0] = tileMode;
    if (!dart.test(engine._offsetIsValid(from))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 87, 16, "_offsetIsValid(from)");
    if (!dart.test(engine._offsetIsValid(to))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 88, 16, "_offsetIsValid(to)");
    if (!(colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 89, 16, "colors != null");
    if (!(tileMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 90, 16, "tileMode != null");
    engine.GradientLinear.__proto__.__.call(this);
    engine._validateColorStops(this.colors, this.colorStops);
  }).prototype = engine.GradientLinear.prototype;
  dart.addTypeTests(engine.GradientLinear);
  const from$ = GradientLinear_from;
  const to$ = GradientLinear_to;
  const colors$0 = GradientLinear_colors;
  const colorStops$0 = GradientLinear_colorStops;
  const tileMode$0 = GradientLinear_tileMode;
  dart.setMethodSignature(engine.GradientLinear, () => ({
    __proto__: dart.getMethods(engine.GradientLinear.__proto__),
    createPaintStyle: dart.fnType(html.CanvasGradient, [html.CanvasRenderingContext2D]),
    createSkiaShader: dart.fnType(js.JsObject, [])
  }));
  dart.setLibraryUri(engine.GradientLinear, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.GradientLinear, () => ({
    __proto__: dart.getFields(engine.GradientLinear.__proto__),
    from: dart.finalFieldType(ui.Offset),
    to: dart.finalFieldType(ui.Offset),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    colorStops: dart.finalFieldType(core.List$(core.double)),
    tileMode: dart.finalFieldType(ui.TileMode)
  }));
  const GradientRadial_center = dart.privateName(engine, "GradientRadial.center");
  const GradientRadial_radius = dart.privateName(engine, "GradientRadial.radius");
  const GradientRadial_colors = dart.privateName(engine, "GradientRadial.colors");
  const GradientRadial_colorStops = dart.privateName(engine, "GradientRadial.colorStops");
  const GradientRadial_tileMode = dart.privateName(engine, "GradientRadial.tileMode");
  const GradientRadial_matrix4 = dart.privateName(engine, "GradientRadial.matrix4");
  engine.GradientRadial = class GradientRadial extends engine.EngineGradient {
    get center() {
      return this[center$0];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$0];
    }
    set radius(value) {
      super.radius = value;
    }
    get colors() {
      return this[colors$1];
    }
    set colors(value) {
      super.colors = value;
    }
    get colorStops() {
      return this[colorStops$1];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    get tileMode() {
      return this[tileMode$1];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get matrix4() {
      return this[matrix4$1];
    }
    set matrix4(value) {
      super.matrix4 = value;
    }
    createPaintStyle(ctx) {
      dart.throw(new core.UnimplementedError.new());
    }
    createSkiaShader() {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (engine.GradientRadial.new = function(center, radius, colors, colorStops, tileMode, matrix4) {
    this[center$0] = center;
    this[radius$0] = radius;
    this[colors$1] = colors;
    this[colorStops$1] = colorStops;
    this[tileMode$1] = tileMode;
    this[matrix4$1] = matrix4;
    engine.GradientRadial.__proto__.__.call(this);
    ;
  }).prototype = engine.GradientRadial.prototype;
  dart.addTypeTests(engine.GradientRadial);
  const center$0 = GradientRadial_center;
  const radius$0 = GradientRadial_radius;
  const colors$1 = GradientRadial_colors;
  const colorStops$1 = GradientRadial_colorStops;
  const tileMode$1 = GradientRadial_tileMode;
  const matrix4$1 = GradientRadial_matrix4;
  dart.setMethodSignature(engine.GradientRadial, () => ({
    __proto__: dart.getMethods(engine.GradientRadial.__proto__),
    createPaintStyle: dart.fnType(core.Object, [html.CanvasRenderingContext2D]),
    createSkiaShader: dart.fnType(js.JsObject, [])
  }));
  dart.setLibraryUri(engine.GradientRadial, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.GradientRadial, () => ({
    __proto__: dart.getFields(engine.GradientRadial.__proto__),
    center: dart.finalFieldType(ui.Offset),
    radius: dart.finalFieldType(core.double),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    colorStops: dart.finalFieldType(core.List$(core.double)),
    tileMode: dart.finalFieldType(ui.TileMode),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  const GradientConical_focal = dart.privateName(engine, "GradientConical.focal");
  const GradientConical_focalRadius = dart.privateName(engine, "GradientConical.focalRadius");
  const GradientConical_center = dart.privateName(engine, "GradientConical.center");
  const GradientConical_radius = dart.privateName(engine, "GradientConical.radius");
  const GradientConical_colors = dart.privateName(engine, "GradientConical.colors");
  const GradientConical_colorStops = dart.privateName(engine, "GradientConical.colorStops");
  const GradientConical_tileMode = dart.privateName(engine, "GradientConical.tileMode");
  const GradientConical_matrix4 = dart.privateName(engine, "GradientConical.matrix4");
  engine.GradientConical = class GradientConical extends engine.EngineGradient {
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    get center() {
      return this[center$1];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$1];
    }
    set radius(value) {
      super.radius = value;
    }
    get colors() {
      return this[colors$2];
    }
    set colors(value) {
      super.colors = value;
    }
    get colorStops() {
      return this[colorStops$2];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    get tileMode() {
      return this[tileMode$2];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get matrix4() {
      return this[matrix4$2];
    }
    set matrix4(value) {
      super.matrix4 = value;
    }
    createPaintStyle(ctx) {
      dart.throw(new core.UnimplementedError.new());
    }
    createSkiaShader() {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (engine.GradientConical.new = function(focal, focalRadius, center, radius, colors, colorStops, tileMode, matrix4) {
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    this[center$1] = center;
    this[radius$1] = radius;
    this[colors$2] = colors;
    this[colorStops$2] = colorStops;
    this[tileMode$2] = tileMode;
    this[matrix4$2] = matrix4;
    engine.GradientConical.__proto__.__.call(this);
    ;
  }).prototype = engine.GradientConical.prototype;
  dart.addTypeTests(engine.GradientConical);
  const focal$ = GradientConical_focal;
  const focalRadius$ = GradientConical_focalRadius;
  const center$1 = GradientConical_center;
  const radius$1 = GradientConical_radius;
  const colors$2 = GradientConical_colors;
  const colorStops$2 = GradientConical_colorStops;
  const tileMode$2 = GradientConical_tileMode;
  const matrix4$2 = GradientConical_matrix4;
  dart.setMethodSignature(engine.GradientConical, () => ({
    __proto__: dart.getMethods(engine.GradientConical.__proto__),
    createPaintStyle: dart.fnType(core.Object, [html.CanvasRenderingContext2D]),
    createSkiaShader: dart.fnType(js.JsObject, [])
  }));
  dart.setLibraryUri(engine.GradientConical, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.GradientConical, () => ({
    __proto__: dart.getFields(engine.GradientConical.__proto__),
    focal: dart.finalFieldType(ui.Offset),
    focalRadius: dart.finalFieldType(core.double),
    center: dart.finalFieldType(ui.Offset),
    radius: dart.finalFieldType(core.double),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    colorStops: dart.finalFieldType(core.List$(core.double)),
    tileMode: dart.finalFieldType(ui.TileMode),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  let C95;
  engine.ElevationShadow = class ElevationShadow extends core.Object {
    static applyShadowTransition(style) {
      style[$transition] = "box-shadow .28s cubic-bezier(.4, 0, .2, 1)";
    }
    static applyShadowNone(style) {
      style[$boxShadow] = "none";
    }
    static applyShadowElevation(style, opts) {
      let dp = opts && 'dp' in opts ? opts.dp : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let rgb = dart.str(color.red) + ", " + dart.str(color.green) + ", " + dart.str(color.blue);
      if (dp === 2) {
        style[$boxShadow] = "0 2px 2px 0 rgba(" + rgb + ", " + dart.str(0.14) + "), " + "0 3px 1px -2px rgba(" + rgb + ", " + dart.str(0.12) + "), " + "0 1px 5px 0 rgba(" + rgb + ", " + dart.str(0.2) + ")";
      } else if (dp === 3) {
        style[$boxShadow] = "0 3px 4px 0 rgba(" + rgb + ", " + dart.str(0.14) + "), " + "0 3px 3px -2px rgba(" + rgb + ", " + dart.str(0.12) + "), " + "0 1px 8px 0 rgba(" + rgb + ", " + dart.str(0.2) + ")";
      } else if (dp === 4) {
        style[$boxShadow] = "0 4px 5px 0 rgba(" + rgb + ", " + dart.str(0.14) + "), " + "0 1px 10px 0 rgba(" + rgb + ", " + dart.str(0.12) + "), " + "0 2px 4px -1px rgba(" + rgb + ", " + dart.str(0.2) + ")";
      } else if (dp === 6) {
        style[$boxShadow] = "0 6px 10px 0 rgba(" + rgb + ", " + dart.str(0.14) + "), " + "0 1px 18px 0 rgba(" + rgb + ", " + dart.str(0.12) + "), " + "0 3px 5px -1px rgba(" + rgb + ", " + dart.str(0.2) + ")";
      } else if (dp === 8) {
        style[$boxShadow] = "0 8px 10px 1px rgba(" + rgb + ", " + dart.str(0.14) + "), " + "0 3px 14px 2px rgba(" + rgb + ", " + dart.str(0.12) + "), " + "0 5px 5px -3px rgba(" + rgb + ", " + dart.str(0.2) + ")";
      } else if (dp === 12) {
        style[$boxShadow] = "0 12px 17px 2px rgba(" + rgb + ", " + dart.str(0.14) + "), " + "0 5px 22px 4px rgba(" + rgb + ", " + dart.str(0.12) + "), " + "0 7px 8px -4px rgba(" + rgb + ", " + dart.str(0.2) + ")";
      } else if (dp === 16) {
        style[$boxShadow] = "0 16px 24px 2px rgba(" + rgb + ", " + dart.str(0.14) + "), " + "0  6px 30px 5px rgba(" + rgb + ", " + dart.str(0.12) + "), " + "0  8px 10px -5px rgba(" + rgb + ", " + dart.str(0.2) + ")";
      } else {
        style[$boxShadow] = "0 24px 38px 3px rgba(" + rgb + ", " + dart.str(0.14) + "), " + "0  9px 46px 8px rgba(" + rgb + ", " + dart.str(0.12) + "), " + "0  11px 15px -7px rgba(" + rgb + ", " + dart.str(0.2) + ")";
      }
    }
    static applyShadow(style, elevation, color) {
      engine.ElevationShadow.applyShadowTransition(style);
      if (dart.notNull(elevation) <= 0.0) {
        engine.ElevationShadow.applyShadowNone(style);
      } else if (dart.notNull(elevation) <= 1.0) {
        engine.ElevationShadow.applyShadowElevation(style, {dp: 2, color: color});
      } else if (dart.notNull(elevation) <= 2.0) {
        engine.ElevationShadow.applyShadowElevation(style, {dp: 4, color: color});
      } else if (dart.notNull(elevation) <= 3.0) {
        engine.ElevationShadow.applyShadowElevation(style, {dp: 6, color: color});
      } else if (dart.notNull(elevation) <= 4.0) {
        engine.ElevationShadow.applyShadowElevation(style, {dp: 8, color: color});
      } else if (dart.notNull(elevation) <= 5.0) {
        engine.ElevationShadow.applyShadowElevation(style, {dp: 16, color: color});
      } else {
        engine.ElevationShadow.applyShadowElevation(style, {dp: 24, color: color});
      }
    }
    static computeCanvasShadows(elevation, color) {
      if (dart.notNull(elevation) <= 0.0) {
        return C95 || CT.C95;
      } else if (dart.notNull(elevation) <= 1.0) {
        return engine.ElevationShadow.computeShadowElevation({dp: 2, color: color});
      } else if (dart.notNull(elevation) <= 2.0) {
        return engine.ElevationShadow.computeShadowElevation({dp: 4, color: color});
      } else if (dart.notNull(elevation) <= 3.0) {
        return engine.ElevationShadow.computeShadowElevation({dp: 6, color: color});
      } else if (dart.notNull(elevation) <= 4.0) {
        return engine.ElevationShadow.computeShadowElevation({dp: 8, color: color});
      } else if (dart.notNull(elevation) <= 5.0) {
        return engine.ElevationShadow.computeShadowElevation({dp: 16, color: color});
      } else {
        return engine.ElevationShadow.computeShadowElevation({dp: 24, color: color});
      }
    }
    static computeShadowRect(r, elevation) {
      if (dart.notNull(elevation) <= 0.0) {
        return r;
      } else if (dart.notNull(elevation) <= 1.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 2.5, dart.notNull(r.top) - 1.5, dart.notNull(r.right) + 3, dart.notNull(r.bottom) + 4);
      } else if (dart.notNull(elevation) <= 2.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 5, dart.notNull(r.top) - 3, dart.notNull(r.right) + 6, dart.notNull(r.bottom) + 7);
      } else if (dart.notNull(elevation) <= 3.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 9, dart.notNull(r.top) - 8, dart.notNull(r.right) + 9, dart.notNull(r.bottom) + 11);
      } else if (dart.notNull(elevation) <= 4.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 10, dart.notNull(r.top) - 6, dart.notNull(r.right) + 10, dart.notNull(r.bottom) + 14);
      } else if (dart.notNull(elevation) <= 5.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 15, dart.notNull(r.top) - 9, dart.notNull(r.right) + 20, dart.notNull(r.bottom) + 30);
      } else {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 23, dart.notNull(r.top) - 14, dart.notNull(r.right) + 23, dart.notNull(r.bottom) + 45);
      }
    }
    static computeShadowElevation(opts) {
      let dp = opts && 'dp' in opts ? opts.dp : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let red = color.red;
      let green = color.green;
      let blue = color.blue;
      let penumbraColor = new ui.Color.fromARGB(36, red, green, blue);
      let ambientShadowColor = new ui.Color.fromARGB(31, red, green, blue);
      let umbraColor = new ui.Color.fromARGB(51, red, green, blue);
      let result = JSArrayOfCanvasShadow().of([]);
      if (dp === 2) {
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 2.0, blur: 1.0, spread: 0.0, color: penumbraColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 3.0, blur: 0.5, spread: -2.0, color: ambientShadowColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.0, blur: 2.5, spread: 0.0, color: umbraColor}));
      } else if (dp === 3) {
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.5, blur: 4.0, spread: 0.0, color: penumbraColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 3.0, blur: 1.5, spread: -2.0, color: ambientShadowColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.0, blur: 4.0, spread: 0.0, color: umbraColor}));
      } else if (dp === 4) {
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 4.0, blur: 2.5, spread: 0.0, color: penumbraColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.0, blur: 5.0, spread: 0.0, color: ambientShadowColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 2.0, blur: 2.0, spread: -1.0, color: umbraColor}));
      } else if (dp === 6) {
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 6.0, blur: 5.0, spread: 0.0, color: penumbraColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.0, blur: 9.0, spread: 0.0, color: ambientShadowColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 3.0, blur: 2.5, spread: -1.0, color: umbraColor}));
      } else if (dp === 8) {
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 4.0, blur: 10.0, spread: 1.0, color: penumbraColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 3.0, blur: 7.0, spread: 2.0, color: ambientShadowColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 5.0, blur: 2.5, spread: -3.0, color: umbraColor}));
      } else if (dp === 12) {
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 12.0, blur: 8.5, spread: 2.0, color: penumbraColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 5.0, blur: 11.0, spread: 4.0, color: ambientShadowColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 7.0, blur: 4.0, spread: -4.0, color: umbraColor}));
      } else if (dp === 16) {
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 16.0, blur: 12.0, spread: 2.0, color: penumbraColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 6.0, blur: 15.0, spread: 5.0, color: ambientShadowColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 0.0, blur: 5.0, spread: -5.0, color: umbraColor}));
      } else {
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 24.0, blur: 18.0, spread: 3.0, color: penumbraColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 9.0, blur: 23.0, spread: 8.0, color: ambientShadowColor}));
        result[$add](new engine.CanvasShadow.new({offsetX: 0.0, offsetY: 11.0, blur: 7.5, spread: -7.0, color: umbraColor}));
      }
      return result;
    }
  };
  (engine.ElevationShadow.new = function() {
    ;
  }).prototype = engine.ElevationShadow.prototype;
  dart.addTypeTests(engine.ElevationShadow);
  dart.setLibraryUri(engine.ElevationShadow, "package:flutter_web_ui/src/engine.dart");
  const CanvasShadow_offsetX = dart.privateName(engine, "CanvasShadow.offsetX");
  const CanvasShadow_offsetY = dart.privateName(engine, "CanvasShadow.offsetY");
  const CanvasShadow_blur = dart.privateName(engine, "CanvasShadow.blur");
  const CanvasShadow_spread = dart.privateName(engine, "CanvasShadow.spread");
  const CanvasShadow_color = dart.privateName(engine, "CanvasShadow.color");
  engine.CanvasShadow = class CanvasShadow extends core.Object {
    get offsetX() {
      return this[offsetX$];
    }
    set offsetX(value) {
      super.offsetX = value;
    }
    get offsetY() {
      return this[offsetY$];
    }
    set offsetY(value) {
      super.offsetY = value;
    }
    get blur() {
      return this[blur$];
    }
    set blur(value) {
      super.blur = value;
    }
    get spread() {
      return this[spread$];
    }
    set spread(value) {
      super.spread = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
  };
  (engine.CanvasShadow.new = function(opts) {
    let offsetX = opts && 'offsetX' in opts ? opts.offsetX : null;
    let offsetY = opts && 'offsetY' in opts ? opts.offsetY : null;
    let blur = opts && 'blur' in opts ? opts.blur : null;
    let spread = opts && 'spread' in opts ? opts.spread : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[offsetX$] = offsetX;
    this[offsetY$] = offsetY;
    this[blur$] = blur;
    this[spread$] = spread;
    this[color$1] = color;
    ;
  }).prototype = engine.CanvasShadow.prototype;
  dart.addTypeTests(engine.CanvasShadow);
  const offsetX$ = CanvasShadow_offsetX;
  const offsetY$ = CanvasShadow_offsetY;
  const blur$ = CanvasShadow_blur;
  const spread$ = CanvasShadow_spread;
  const color$1 = CanvasShadow_color;
  dart.setLibraryUri(engine.CanvasShadow, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.CanvasShadow, () => ({
    __proto__: dart.getFields(engine.CanvasShadow.__proto__),
    offsetX: dart.finalFieldType(core.double),
    offsetY: dart.finalFieldType(core.double),
    blur: dart.finalFieldType(core.double),
    spread: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color)
  }));
  const _childContainer = dart.privateName(engine, "_childContainer");
  const _filterElement = dart.privateName(engine, "_filterElement");
  const _invertedTransform = dart.privateName(engine, "_invertedTransform");
  const _previousTransform = dart.privateName(engine, "_previousTransform");
  const _localTransformInverse = dart.privateName(engine, "_localTransformInverse");
  const _oldLayer = dart.privateName(engine, "_oldLayer");
  const _localClipBounds = dart.privateName(engine, "_localClipBounds");
  const _projectedClip = dart.privateName(engine, "_projectedClip");
  const _updateZeroToMany = dart.privateName(engine, "_updateZeroToMany");
  const _updateManyToOne = dart.privateName(engine, "_updateManyToOne");
  const _updateManyToMany = dart.privateName(engine, "_updateManyToMany");
  const _debugValidateContainerUpdate = dart.privateName(engine, "_debugValidateContainerUpdate");
  const _matchChildren = dart.privateName(engine, "_matchChildren");
  let C96;
  const _state = dart.privateName(engine, "_state");
  const _debugValidateStateTransition = dart.privateName(engine, "_debugValidateStateTransition");
  const PersistedSurface_rootElement = dart.privateName(engine, "PersistedSurface.rootElement");
  const PersistedSurface_parent = dart.privateName(engine, "PersistedSurface.parent");
  engine.PersistedSurface = class PersistedSurface extends core.Object {
    get rootElement() {
      return this[rootElement$2];
    }
    set rootElement(value) {
      this[rootElement$2] = value;
    }
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      this[parent$] = value;
    }
    get state() {
      return this[_state];
    }
    set state(newState) {
      if (!(newState != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 507, 12, "newState != null");
      if (!!dart.equals(newState, this[_state])) dart.assertFailed("Attempted to set state that the surface is already in. This likely indicates a bug in the compositor.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 508, 12, "newState != _state");
      if (!dart.test(this[_debugValidateStateTransition](newState))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 510, 12, "_debugValidateStateTransition(newState)");
      this[_state] = newState;
    }
    [_debugValidateStateTransition](newState) {
      if (dart.equals(newState, engine.PersistedSurfaceState.created)) {
        if (!dart.test(this.isReleased)) dart.assertFailed("Only released surfaces may be revived.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 518, 14, "isReleased");
      } else {
        if (!!dart.test(this.isReleased)) dart.assertFailed("Released surfaces may only be revived, but caught attempt to set " + dart.str(newState) + ".", "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 520, 14, "!isReleased");
      }
      if (dart.equals(newState, engine.PersistedSurfaceState.active)) {
        if (!(dart.test(this.isCreated) || dart.test(this.isPendingRetention) || dart.test(this.isPendingUpdate))) dart.assertFailed("Surface is " + dart.str(this.state) + ". Only created, pending retention, and pending update surfaces may be activated.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 525, 9, "isCreated || isPendingRetention || isPendingUpdate");
      }
      if (dart.equals(newState, engine.PersistedSurfaceState.pendingRetention)) {
        if (!dart.test(this.isActive)) dart.assertFailed("Surface is not active. Only active surfaces may be retained.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 530, 14, "isActive");
      }
      if (dart.equals(newState, engine.PersistedSurfaceState.pendingUpdate)) {
        if (!dart.test(this.isActive)) dart.assertFailed("Surface is not active. Only active surfaces may be updated.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 534, 14, "isActive");
      }
      if (dart.equals(newState, engine.PersistedSurfaceState.released)) {
        if (!(dart.test(this.isActive) || dart.test(this.isPendingUpdate))) dart.assertFailed("A surface may only be released if it is currently active or pending update, but it is in " + dart.str(this.state) + ".", "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 538, 14, "isActive || isPendingUpdate");
      }
      return true;
    }
    tryRetain() {
      if (!(dart.test(this.isActive) || dart.test(this.isReleased))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 551, 12, "isActive || isReleased");
      if (dart.test(this.isActive)) {
        this.state = engine.PersistedSurfaceState.pendingRetention;
      } else {
        this.revive();
      }
    }
    revive() {
      if (!dart.test(this.isReleased)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 573, 12, "isReleased");
      this.state = engine.PersistedSurfaceState.created;
    }
    get isCreated() {
      return dart.equals(this[_state], engine.PersistedSurfaceState.created);
    }
    get isActive() {
      return dart.equals(this[_state], engine.PersistedSurfaceState.active);
    }
    get isPendingRetention() {
      return dart.equals(this[_state], engine.PersistedSurfaceState.pendingRetention);
    }
    get isPendingUpdate() {
      return dart.equals(this[_state], engine.PersistedSurfaceState.pendingUpdate);
    }
    get isReleased() {
      return dart.equals(this[_state], engine.PersistedSurfaceState.released);
    }
    canUpdateAsMatch(oldSurface) {
      return dart.test(oldSurface.isActive) && dart.equals(this[$runtimeType], dart.runtimeType(oldSurface));
    }
    get childContainer() {
      return this.rootElement;
    }
    build() {
      let t5;
      if (!(this.rootElement == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 641, 12, "rootElement == null");
      if (!dart.test(this.isCreated)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 642, 12, "isCreated");
      this.rootElement = this.createElement();
      if (false) {
        t5 = engine._surfaceStatsFor(this);
        t5.allocatedDomNodeCount = dart.notNull(t5.allocatedDomNodeCount) + 1;
      }
      this.apply();
      this.state = engine.PersistedSurfaceState.active;
    }
    adoptElements(oldSurface) {
      let t5;
      engine.PersistedSurface._check(oldSurface);
      if (!(oldSurface.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 660, 12, "oldSurface.rootElement != null");
      if (!(dart.test(oldSurface.isActive) || dart.test(oldSurface.isPendingUpdate))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 661, 12, "oldSurface.isActive || oldSurface.isPendingUpdate");
      if (!dart.test(dart.fn(() => {
        if (dart.test(oldSurface.isPendingUpdate)) {
          let self = engine.PersistedContainerSurface._check(this);
          if (!(self.oldLayer == oldSurface)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 665, 16, "identical(self.oldLayer, oldSurface)");
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 662, 12, "() {\r\n      if (oldSurface.isPendingUpdate) {\r\n        final PersistedContainerSurface self = this;\r\n        assert(identical(self.oldLayer, oldSurface));\r\n      }\r\n      return true;\r\n    }()");
      this.rootElement = oldSurface.rootElement;
      if (false) {
        t5 = engine._surfaceStatsFor(this);
        t5.reuseElementCount = dart.notNull(t5.reuseElementCount) + 1;
      }
      oldSurface.rootElement = null;
      oldSurface.state = engine.PersistedSurfaceState.released;
    }
    update(oldSurface) {
      engine.PersistedSurface._check(oldSurface);
      if (!(oldSurface != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 687, 12, "oldSurface != null");
      if (!(oldSurface !== this)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 688, 12, "!identical(oldSurface, this)");
      if (!(dart.test(this.isCreated) && (dart.test(oldSurface.isPendingUpdate) || dart.test(oldSurface.isActive)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 689, 12, "isCreated && (oldSurface.isPendingUpdate || oldSurface.isActive)");
      this.adoptElements(oldSurface);
      if (dart.test(engine.assertionsEnabled)) {
        this.rootElement[$setAttribute]("flt-layer-state", "updated");
      }
      this.state = engine.PersistedSurfaceState.active;
      if (!(this.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 697, 12, "rootElement != null");
    }
    retain() {
      let t5;
      if (!(this.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 710, 12, "rootElement != null");
      if (dart.test(this.isPendingRetention)) {
        engine._retainedSurfaces[$add](this);
      }
      if (dart.test(engine.assertionsEnabled)) {
        this.rootElement[$setAttribute]("flt-layer-state", "retained");
      }
      if (false) {
        t5 = engine._surfaceStatsFor(this);
        t5.retainSurfaceCount = dart.notNull(t5.retainSurfaceCount) + 1;
      }
    }
    discard() {
      if (!dart.test(this.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 734, 12, "isActive");
      if (!(this.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 735, 12, "rootElement != null");
      this.rootElement[$remove]();
      this.rootElement = null;
      this.state = engine.PersistedSurfaceState.released;
    }
    debugValidate(validationErrors) {
      if (this.rootElement == null) {
        validationErrors[$add](dart.str(engine.debugIdentify(this)) + " has null rootElement.");
      }
      if (!dart.test(this.isActive)) {
        validationErrors[$add](dart.str(engine.debugIdentify(this)) + " is in the wrong state.\n" + "It is in the live DOM tree expectec to be in " + dart.str(engine.PersistedSurfaceState.active) + ".\n" + "However, it is currently in " + dart.str(this.state) + ".");
      }
    }
    defaultCreateElement(tagName) {
      let element = html.Element.tag(tagName);
      element.style[$position] = "absolute";
      if (dart.test(engine.assertionsEnabled)) {
        element[$setAttribute]("flt-layer-state", "new");
      }
      return element;
    }
    get transform() {
      return this[_transform$];
    }
    recomputeTransformAndClip() {
      this[_transform$] = this.parent[_transform$];
      this[_localClipBounds] = null;
      this[_localTransformInverse] = null;
      this[_projectedClip] = null;
    }
    preroll() {
      this.recomputeTransformAndClip();
    }
    debugPrint(buffer, indent) {
      if (this.rootElement != null) {
        buffer.write("  "[$times](indent) + "<" + this.rootElement.tagName[$toLowerCase]() + " ");
      } else {
        buffer.write("  "[$times](indent) + "<" + dart.str(this[$runtimeType]) + " recycled ");
      }
      this.debugPrintAttributes(buffer);
      buffer.writeln(">");
      this.debugPrintChildren(buffer, indent);
      if (this.rootElement != null) {
        buffer.writeln("  "[$times](indent) + "</" + this.rootElement.tagName[$toLowerCase]() + ">");
      } else {
        buffer.writeln("  "[$times](indent) + "</" + dart.str(this[$runtimeType]) + ">");
      }
    }
    debugPrintAttributes(buffer) {
      if (this.rootElement != null) {
        buffer.write("@" + dart.str(dart.hashCode(this.rootElement)) + " ");
      }
    }
    debugPrintChildren(buffer, indent) {
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        let log = new core.StringBuffer.new();
        this.debugPrint(log, 0);
        return log.toString();
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.PersistedSurface.new = function() {
    this[_state] = engine.PersistedSurfaceState.created;
    this[rootElement$2] = null;
    this[parent$] = null;
    this[_transform$] = null;
    this[_projectedClip] = null;
    this[_localClipBounds] = null;
    this[_localTransformInverse] = null;
    ;
  }).prototype = engine.PersistedSurface.prototype;
  dart.addTypeTests(engine.PersistedSurface);
  const rootElement$2 = PersistedSurface_rootElement;
  const parent$ = PersistedSurface_parent;
  engine.PersistedSurface[dart.implements] = () => [ui.EngineLayer];
  dart.setMethodSignature(engine.PersistedSurface, () => ({
    __proto__: dart.getMethods(engine.PersistedSurface.__proto__),
    [_debugValidateStateTransition]: dart.fnType(core.bool, [engine.PersistedSurfaceState]),
    tryRetain: dart.fnType(dart.void, []),
    revive: dart.fnType(dart.void, []),
    canUpdateAsMatch: dart.fnType(core.bool, [engine.PersistedSurface]),
    build: dart.fnType(dart.void, []),
    adoptElements: dart.fnType(dart.void, [core.Object]),
    update: dart.fnType(dart.void, [core.Object]),
    retain: dart.fnType(dart.void, []),
    discard: dart.fnType(dart.void, []),
    debugValidate: dart.fnType(dart.void, [core.List$(core.String)]),
    defaultCreateElement: dart.fnType(html.Element, [core.String]),
    recomputeTransformAndClip: dart.fnType(dart.void, []),
    preroll: dart.fnType(dart.void, []),
    debugPrint: dart.fnType(dart.void, [core.StringBuffer, core.int]),
    debugPrintAttributes: dart.fnType(dart.void, [core.StringBuffer]),
    debugPrintChildren: dart.fnType(dart.void, [core.StringBuffer, core.int])
  }));
  dart.setGetterSignature(engine.PersistedSurface, () => ({
    __proto__: dart.getGetters(engine.PersistedSurface.__proto__),
    state: engine.PersistedSurfaceState,
    isCreated: core.bool,
    isActive: core.bool,
    isPendingRetention: core.bool,
    isPendingUpdate: core.bool,
    isReleased: core.bool,
    childContainer: html.Element,
    transform: engine.Matrix4
  }));
  dart.setSetterSignature(engine.PersistedSurface, () => ({
    __proto__: dart.getSetters(engine.PersistedSurface.__proto__),
    state: engine.PersistedSurfaceState
  }));
  dart.setLibraryUri(engine.PersistedSurface, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedSurface, () => ({
    __proto__: dart.getFields(engine.PersistedSurface.__proto__),
    [_state]: dart.fieldType(engine.PersistedSurfaceState),
    rootElement: dart.fieldType(html.Element),
    parent: dart.fieldType(engine.PersistedContainerSurface),
    [_transform$]: dart.fieldType(engine.Matrix4),
    [_projectedClip]: dart.fieldType(ui.Rect),
    [_localClipBounds]: dart.fieldType(ui.Rect),
    [_localTransformInverse]: dart.fieldType(engine.Matrix4)
  }));
  dart.defineExtensionMethods(engine.PersistedSurface, ['toString']);
  engine.PersistedContainerSurface = class PersistedContainerSurface extends engine.PersistedSurface {
    get oldLayer() {
      return this[_oldLayer].value;
    }
    visitChildren(visitor) {
      this[_children][$forEach](visitor);
    }
    appendChild(child) {
      if (!(dart.test(child.isCreated) || dart.test(child.isPendingRetention) || dart.test(child.isPendingUpdate))) dart.assertFailed("Child is in incorrect state " + dart.str(child.state), "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 919, 12, "child.isCreated || child.isPendingRetention || child.isPendingUpdate");
      this[_children][$add](child);
      child.parent = this;
    }
    preroll() {
      super.preroll();
      let length = this[_children][$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        this[_children][$_get](i).preroll();
      }
    }
    recomputeTransformAndClip() {
      this[_transform$] = this.parent[_transform$];
      this[_localClipBounds] = null;
      this[_localTransformInverse] = null;
      this[_projectedClip] = null;
    }
    build() {
      super.build();
      let len = this[_children][$length];
      let containerElement = this.childContainer;
      for (let i = 0; i < dart.notNull(len); i = i + 1) {
        let child = this[_children][$_get](i);
        if (dart.test(child.isPendingRetention)) {
          if (!(child.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 952, 16, "child.rootElement != null");
          child.retain();
        } else if (engine.PersistedContainerSurface.is(child) && child.oldLayer != null) {
          let oldLayer = child.oldLayer;
          if (!(oldLayer.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 956, 16, "oldLayer.rootElement != null");
          if (!dart.test(oldLayer.isPendingUpdate)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 957, 16, "oldLayer.isPendingUpdate");
          child.update(engine.PersistedContainerSurface._check(child.oldLayer));
        } else {
          if (!dart.test(child.isCreated)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 960, 16, "child.isCreated");
          if (!(child.rootElement == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 961, 16, "child.rootElement == null");
          child.build();
        }
        containerElement[$append](child.rootElement);
      }
    }
    matchForUpdate(existingSurface) {
      engine.PersistedContainerSurface._check(existingSurface);
      if (!dart.equals(dart.runtimeType(existingSurface), this[$runtimeType])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 970, 12, "existingSurface.runtimeType == runtimeType");
      return 1.0;
    }
    update(oldSurface) {
      engine.PersistedContainerSurface._check(oldSurface);
      if (!(dart.test(oldSurface.isActive) || dart.test(oldSurface.isPendingUpdate))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 984, 12, "oldSurface.isActive || oldSurface.isPendingUpdate");
      if (!dart.equals(this[$runtimeType], dart.runtimeType(oldSurface))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 985, 12, "runtimeType == oldSurface.runtimeType");
      super.update(oldSurface);
      if (!dart.test(oldSurface.isReleased)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 987, 12, "oldSurface.isReleased");
      if (dart.test(oldSurface[_children][$isEmpty])) {
        this[_updateZeroToMany](oldSurface);
      } else if (this[_children][$length] === 1) {
        this[_updateManyToOne](oldSurface);
      } else if (dart.test(this[_children][$isEmpty])) {
        engine.PersistedContainerSurface._discardActiveChildren(oldSurface);
      } else {
        this[_updateManyToMany](oldSurface);
      }
      if (dart.test(engine.assertionsEnabled)) {
        this[_debugValidateContainerUpdate](oldSurface);
      }
    }
    [_debugValidateContainerUpdate](oldSurface) {
      if (!dart.test(dart.fn(() => {
        for (let i = 0; i < dart.notNull(oldSurface[_children][$length]); i = i + 1) {
          let oldChild = oldSurface[_children][$_get](i);
          if (!(!dart.test(oldChild.isActive) && !dart.test(oldChild.isCreated))) dart.assertFailed("Old child is in incorrect state " + dart.str(oldChild.state), "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1010, 16, "!oldChild.isActive && !oldChild.isCreated");
          if (dart.test(oldChild.isReleased)) {
            if (!(oldChild.rootElement == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1013, 18, "oldChild.rootElement == null");
            if (!(oldChild.childContainer == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1014, 18, "oldChild.childContainer == null");
          }
        }
        for (let i = 0; i < dart.notNull(this[_children][$length]); i = i + 1) {
          let newChild = this[_children][$_get](i);
          if (!(dart.test(newChild.isActive) || dart.test(newChild.isPendingRetention))) dart.assertFailed("New child is in incorrect state " + dart.str(newChild.state), "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1019, 16, "newChild.isActive || newChild.isPendingRetention");
          if (!(newChild.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1021, 16, "newChild.rootElement != null");
          if (!dart.equals(newChild.rootElement[$parent], this.childContainer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1022, 16, "newChild.rootElement.parent == childContainer");
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1007, 12, "() {\r\n      for (int i = 0; i < oldSurface._children.length; i++) {\r\n        final PersistedSurface oldChild = oldSurface._children[i];\r\n        assert(!oldChild.isActive && !oldChild.isCreated,\r\n            'Old child is in incorrect state ${oldChild.state}');\r\n        if (oldChild.isReleased) {\r\n          assert(oldChild.rootElement == null);\r\n          assert(oldChild.childContainer == null);\r\n        }\r\n      }\r\n      for (int i = 0; i < _children.length; i++) {\r\n        final PersistedSurface newChild = _children[i];\r\n        assert(newChild.isActive || newChild.isPendingRetention,\r\n            'New child is in incorrect state ${newChild.state}');\r\n        assert(newChild.rootElement != null);\r\n        assert(newChild.rootElement.parent == childContainer);\r\n      }\r\n      return true;\r\n    }()");
    }
    [_updateZeroToMany](oldSurface) {
      if (!dart.test(oldSurface[_children][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1033, 12, "oldSurface._children.isEmpty");
      let containerElement = this.childContainer;
      let length = this[_children][$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let newChild = this[_children][$_get](i);
        if (dart.test(newChild.isPendingRetention)) {
          newChild.retain();
          if (!dart.test(newChild.isPendingRetention)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1043, 16, "newChild.isPendingRetention");
        } else if (engine.PersistedContainerSurface.is(newChild) && newChild.oldLayer != null) {
          let oldLayer = engine.PersistedContainerSurface._check(newChild.oldLayer);
          if (!dart.test(oldLayer.isPendingUpdate)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1047, 16, "oldLayer.isPendingUpdate");
          newChild.update(oldLayer);
          if (!dart.test(oldLayer.isReleased)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1049, 16, "oldLayer.isReleased");
          if (!dart.test(newChild.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1050, 16, "newChild.isActive");
        } else {
          newChild.build();
          if (!dart.test(newChild.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1053, 16, "newChild.isActive");
        }
        if (!(newChild.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1055, 14, "newChild.rootElement != null");
        containerElement[$append](newChild.rootElement);
      }
    }
    static _discardActiveChildren(surface) {
      let length = surface[_children][$length];
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        let child = surface[_children][$_get](i);
        if (dart.test(child.isActive)) {
          child.discard();
        }
        if (!(!dart.test(child.isCreated) && !dart.test(child.isActive))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1070, 14, "!child.isCreated && !child.isActive");
      }
    }
    [_updateManyToOne](oldSurface) {
      if (!(this[_children][$length] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1077, 12, "_children.length == 1");
      let newChild = this[_children][$_get](0);
      if (dart.test(newChild.isPendingRetention)) {
        if (!(newChild.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1083, 14, "newChild.rootElement != null");
        if (!dart.equals(newChild.rootElement[$parent], this.childContainer)) {
          this.childContainer[$append](newChild.rootElement);
        }
        newChild.retain();
        engine.PersistedContainerSurface._discardActiveChildren(oldSurface);
        if (!dart.test(newChild.isPendingRetention)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1093, 14, "newChild.isPendingRetention");
        return;
      }
      if (engine.PersistedContainerSurface.is(newChild) && newChild.oldLayer != null) {
        if (!dart.test(newChild.oldLayer.isPendingUpdate)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1100, 14, "newChild.oldLayer.isPendingUpdate");
        if (!(newChild.rootElement == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1101, 14, "newChild.rootElement == null");
        if (!(newChild.oldLayer.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1102, 14, "newChild.oldLayer.rootElement != null");
        let oldLayer = engine.PersistedContainerSurface._check(newChild.oldLayer);
        if (!dart.equals(oldLayer.rootElement[$parent], this.childContainer)) {
          this.childContainer[$append](oldLayer.rootElement);
        }
        newChild.update(oldLayer);
        engine.PersistedContainerSurface._discardActiveChildren(oldSurface);
        if (!dart.test(oldLayer.isReleased)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1113, 14, "oldLayer.isReleased");
        if (!dart.test(newChild.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1114, 14, "newChild.isActive");
        return;
      }
      if (!dart.test(newChild.isCreated)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1118, 12, "newChild.isCreated");
      let bestMatch = null;
      let bestScore = 2.0;
      for (let i = 0; i < dart.notNull(oldSurface[_children][$length]); i = i + 1) {
        let candidate = oldSurface[_children][$_get](i);
        if (!dart.test(newChild.canUpdateAsMatch(candidate))) {
          continue;
        }
        let score = newChild.matchForUpdate(candidate);
        if (dart.notNull(score) < dart.notNull(bestScore)) {
          bestMatch = candidate;
          bestScore = score;
        }
      }
      if (bestMatch != null) {
        if (!dart.test(bestMatch.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1135, 14, "bestMatch.isActive");
        newChild.update(bestMatch);
        if (!dart.equals(newChild.rootElement[$parent], this.childContainer)) {
          this.childContainer[$append](newChild.rootElement);
        }
        if (!dart.test(bestMatch.isReleased)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1143, 14, "bestMatch.isReleased");
      } else {
        newChild.build();
        this.childContainer[$append](newChild.rootElement);
        if (!dart.test(newChild.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1147, 14, "newChild.isActive");
      }
      for (let i = 0; i < dart.notNull(oldSurface[_children][$length]); i = i + 1) {
        let oldChild = oldSurface[_children][$_get](i);
        if (oldChild != bestMatch && dart.test(oldChild.isActive)) {
          oldChild.discard();
        }
        if (!(!dart.test(oldChild.isCreated) && !dart.test(oldChild.isActive))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1157, 14, "!oldChild.isCreated && !oldChild.isActive");
      }
    }
    [_updateManyToMany](oldSurface) {
      if (!(dart.test(this[_children][$isNotEmpty]) && dart.test(oldSurface[_children][$isNotEmpty]))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1164, 12, "_children.isNotEmpty && oldSurface._children.isNotEmpty");
      let containerElement = this.childContainer;
      let nextSibling = null;
      const insertDomNodeIfMoved = newChild => {
        let t5;
        if (!(newChild.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1175, 14, "newChild.rootElement != null");
        if (!dart.equals(newChild.parent, this)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1176, 14, "newChild.parent == this");
        let reparented = !dart.equals(newChild.rootElement[$parent], containerElement);
        let moved = reparented || !dart.equals(newChild.rootElement.nextElementSibling, (t5 = nextSibling, t5 == null ? null : t5.rootElement));
        if (moved) {
          if (nextSibling == null) {
            containerElement[$append](newChild.rootElement);
          } else {
            containerElement.insertBefore(newChild.rootElement, nextSibling.rootElement);
          }
        }
      };
      dart.fn(insertDomNodeIfMoved, PersistedSurfaceTovoid());
      let matches = this[_matchChildren](oldSurface);
      for (let bottomInNew = dart.notNull(this[_children][$length]) - 1; bottomInNew >= 0; bottomInNew = bottomInNew - 1) {
        let newChild = this[_children][$_get](bottomInNew);
        if (dart.test(newChild.isPendingRetention)) {
          newChild.retain();
          if (!dart.test(newChild.isPendingRetention)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1202, 16, "newChild.isPendingRetention");
        } else if (engine.PersistedContainerSurface.is(newChild) && newChild.oldLayer != null) {
          let oldLayer = engine.PersistedContainerSurface._check(newChild.oldLayer);
          if (!dart.test(oldLayer.isPendingUpdate)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1206, 16, "oldLayer.isPendingUpdate");
          newChild.update(oldLayer);
          if (!dart.test(oldLayer.isReleased)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1208, 16, "oldLayer.isReleased");
          if (!dart.test(newChild.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1209, 16, "newChild.isActive");
        } else {
          let matchedOldChild = matches[$_get](newChild);
          if (matchedOldChild != null) {
            if (!dart.test(matchedOldChild.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1213, 18, "matchedOldChild.isActive");
            newChild.update(matchedOldChild);
            if (!dart.test(matchedOldChild.isReleased)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1215, 18, "matchedOldChild.isReleased");
            if (!dart.test(newChild.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1216, 18, "newChild.isActive");
          } else {
            newChild.build();
            if (!dart.test(newChild.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1219, 18, "newChild.isActive");
          }
        }
        insertDomNodeIfMoved(newChild);
        if (!(newChild.rootElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1223, 14, "newChild.rootElement != null");
        if (!(dart.test(newChild.isActive) || dart.test(newChild.isPendingRetention))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1224, 14, "newChild.isActive || newChild.isPendingRetention");
        nextSibling = newChild;
      }
      engine.PersistedContainerSurface._discardActiveChildren(oldSurface);
    }
    [_matchChildren](oldSurface) {
      let newUnfilteredChildCount = this[_children][$length];
      let oldUnfilteredChildCount = oldSurface[_children][$length];
      let newChildren = JSArrayOfPersistedSurface().of([]);
      for (let i = 0; i < dart.notNull(newUnfilteredChildCount); i = i + 1) {
        let child = this[_children][$_get](i);
        if (dart.test(child.isCreated)) {
          newChildren[$add](child);
        }
      }
      let oldChildren = JSArrayOfPersistedSurface().of([]);
      for (let i = 0; i < dart.notNull(oldUnfilteredChildCount); i = i + 1) {
        let child = oldSurface[_children][$_get](i);
        if (dart.test(child.isActive)) {
          oldChildren[$add](child);
        }
      }
      let newChildCount = newChildren[$length];
      let oldChildCount = oldChildren[$length];
      if (newChildCount === 0 || oldChildCount === 0) {
        return C96 || CT.C96;
      }
      let allMatches = JSArrayOf_PersistedSurfaceMatch().of([]);
      for (let indexInNew = 0; indexInNew < dart.notNull(newChildCount); indexInNew = indexInNew + 1) {
        let newChild = newChildren[$_get](indexInNew);
        for (let indexInOld = 0; indexInOld < dart.notNull(oldChildCount); indexInOld = indexInOld + 1) {
          let oldChild = oldChildren[$_get](indexInOld);
          let childAlreadyClaimed = oldChild == null;
          if (childAlreadyClaimed || !dart.test(newChild.canUpdateAsMatch(oldChild))) {
            continue;
          }
          allMatches[$add](new engine._PersistedSurfaceMatch.new({matchQuality: newChild.matchForUpdate(oldChild), newChild: newChild, oldChildIndex: indexInOld}));
        }
      }
      allMatches[$sort](dart.fn((m1, m2) => m1.matchQuality[$compareTo](m2.matchQuality), _PersistedSurfaceMatchAnd_PersistedSurfaceMatchToint()));
      let result = new (LinkedMapOfPersistedSurface$PersistedSurface()).new();
      for (let i = 0; i < dart.notNull(allMatches[$length]); i = i + 1) {
        let match = allMatches[$_get](i);
        let matchedChild = oldChildren[$_get](match.oldChildIndex);
        if (matchedChild != null) {
          oldChildren[$_set](match.oldChildIndex, null);
          result[$_set](match.newChild, matchedChild);
        }
      }
      if (!(result[$length] == LinkedHashSetOfPersistedSurface().from(result[$values])[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 1303, 12, "result.length == Set<PersistedSurface>.from(result.values).length");
      return result;
    }
    retain() {
      super.retain();
      let len = this[_children][$length];
      for (let i = 0; i < dart.notNull(len); i = i + 1) {
        this[_children][$_get](i).retain();
      }
    }
    revive() {
      super.revive();
      let len = this[_children][$length];
      for (let i = 0; i < dart.notNull(len); i = i + 1) {
        this[_children][$_get](i).revive();
      }
    }
    discard() {
      super.discard();
      engine.PersistedContainerSurface._discardActiveChildren(this);
    }
    debugValidate(validationErrors) {
      super.debugValidate(validationErrors);
      for (let i = 0; i < dart.notNull(this[_children][$length]); i = i + 1) {
        let child = this[_children][$_get](i);
        if (!dart.equals(child.parent, this)) {
          validationErrors[$add](dart.str(engine.debugIdentify(child)) + " parent is " + dart.str(engine.debugIdentify(child.parent)) + " but expected the parent to be " + dart.str(engine.debugIdentify(this)));
        }
      }
      for (let i = 0; i < dart.notNull(this[_children][$length]); i = i + 1) {
        this[_children][$_get](i).debugValidate(validationErrors);
      }
    }
    debugPrintChildren(buffer, indent) {
      super.debugPrintChildren(buffer, indent);
      for (let i = 0; i < dart.notNull(this[_children][$length]); i = i + 1) {
        this[_children][$_get](i).debugPrint(buffer, dart.notNull(indent) + 1);
      }
    }
  };
  (engine.PersistedContainerSurface.new = function(oldLayer) {
    this[_children] = JSArrayOfPersistedSurface().of([]);
    this[_oldLayer] = new (FrameReferenceOfPersistedSurface()).new(oldLayer != null && dart.test(oldLayer.isActive) ? oldLayer : null);
    engine.PersistedContainerSurface.__proto__.new.call(this);
    if (!(oldLayer == null || dart.equals(this[$runtimeType], dart.runtimeType(oldLayer)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 899, 12, "oldLayer == null || runtimeType == oldLayer.runtimeType");
  }).prototype = engine.PersistedContainerSurface.prototype;
  dart.addTypeTests(engine.PersistedContainerSurface);
  dart.setMethodSignature(engine.PersistedContainerSurface, () => ({
    __proto__: dart.getMethods(engine.PersistedContainerSurface.__proto__),
    visitChildren: dart.fnType(dart.void, [dart.fnType(dart.void, [engine.PersistedSurface])]),
    appendChild: dart.fnType(dart.void, [engine.PersistedSurface]),
    matchForUpdate: dart.fnType(core.double, [core.Object]),
    [_debugValidateContainerUpdate]: dart.fnType(dart.void, [engine.PersistedContainerSurface]),
    [_updateZeroToMany]: dart.fnType(dart.void, [engine.PersistedContainerSurface]),
    [_updateManyToOne]: dart.fnType(dart.void, [engine.PersistedContainerSurface]),
    [_updateManyToMany]: dart.fnType(dart.void, [engine.PersistedContainerSurface]),
    [_matchChildren]: dart.fnType(core.Map$(engine.PersistedSurface, engine.PersistedSurface), [engine.PersistedContainerSurface])
  }));
  dart.setGetterSignature(engine.PersistedContainerSurface, () => ({
    __proto__: dart.getGetters(engine.PersistedContainerSurface.__proto__),
    oldLayer: engine.PersistedSurface
  }));
  dart.setLibraryUri(engine.PersistedContainerSurface, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedContainerSurface, () => ({
    __proto__: dart.getFields(engine.PersistedContainerSurface.__proto__),
    [_oldLayer]: dart.finalFieldType(engine.FrameReference$(engine.PersistedSurface)),
    [_children]: dart.finalFieldType(core.List$(engine.PersistedSurface))
  }));
  const PersistedBackdropFilter_filter = dart.privateName(engine, "PersistedBackdropFilter.filter");
  engine.PersistedBackdropFilter = class PersistedBackdropFilter extends engine.PersistedContainerSurface {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      super.filter = value;
    }
    get childContainer() {
      return this[_childContainer];
    }
    get localTransformInverse() {
      let t5;
      t5 = this[_localTransformInverse];
      return t5 == null ? this[_localTransformInverse] = engine.Matrix4.identity() : t5;
    }
    adoptElements(oldSurface) {
      engine.PersistedBackdropFilter._check(oldSurface);
      super.adoptElements(oldSurface);
      this[_childContainer] = oldSurface[_childContainer];
      this[_filterElement] = oldSurface[_filterElement];
      oldSurface[_childContainer] = null;
    }
    createElement() {
      let t5, t5$, t5$0;
      let element = (t5 = this.defaultCreateElement("flt-backdrop"), t5.style[$transformOrigin] = "0 0 0", t5);
      this[_childContainer] = html.Element.tag("flt-backdrop-interior");
      this[_childContainer].style[$position] = "absolute";
      if (false) {
        t5$ = engine._surfaceStatsFor(this);
        t5$.allocatedDomNodeCount = dart.notNull(t5$.allocatedDomNodeCount) + 1;
      }
      this[_filterElement] = this.defaultCreateElement("flt-backdrop-filter");
      this[_filterElement].style[$transformOrigin] = "0 0 0";
      t5$0 = element;
      t5$0[$append](this[_filterElement]);
      t5$0[$append](this[_childContainer]);
      t5$0;
      return element;
    }
    discard() {
      super.discard();
      this[_childContainer] = null;
      this[_filterElement] = null;
    }
    apply() {
      let t5, t5$;
      if (!dart.equals(this[_previousTransform], this[_transform$])) {
        this[_invertedTransform] = engine.Matrix4.inverted(this[_transform$]);
        this[_previousTransform] = this[_transform$];
      }
      let rect = engine.transformLTRB(this[_invertedTransform], 0.0, 0.0, ui.window.physicalSize.width, ui.window.physicalSize.height);
      let filterElementStyle = this[_filterElement].style;
      t5 = filterElementStyle;
      t5[$position] = "absolute";
      t5[$transform] = "translate(" + dart.str(rect.left) + "px, " + dart.str(rect.top) + "px)";
      t5[$width] = dart.str(rect.width) + "px";
      t5[$height] = dart.str(rect.height) + "px";
      t5;
      if (dart.equals(engine.browserEngine, engine.BrowserEngine.blink)) {
        t5$ = filterElementStyle;
        t5$[$backgroundColor] = "#000";
        t5$[$opacity] = "0.2";
        t5$;
      } else {
        engine.domRenderer.setElementStyle(this[_filterElement], "backdrop-filter", "blur(" + dart.str(math.max(core.double, this.filter.sigmaX, this.filter.sigmaY) * 2) + "px)");
      }
    }
    update(oldSurface) {
      engine.PersistedBackdropFilter._check(oldSurface);
      super.update(oldSurface);
      if (!dart.equals(this.filter, oldSurface.filter)) {
        this.apply();
      }
    }
  };
  (engine.PersistedBackdropFilter.new = function(oldLayer, filter) {
    this[_childContainer] = null;
    this[_filterElement] = null;
    this[_invertedTransform] = null;
    this[_previousTransform] = null;
    this[filter$] = filter;
    engine.PersistedBackdropFilter.__proto__.new.call(this, oldLayer);
    ;
  }).prototype = engine.PersistedBackdropFilter.prototype;
  dart.addTypeTests(engine.PersistedBackdropFilter);
  const filter$ = PersistedBackdropFilter_filter;
  engine.PersistedBackdropFilter[dart.implements] = () => [ui.BackdropFilterEngineLayer];
  dart.setMethodSignature(engine.PersistedBackdropFilter, () => ({
    __proto__: dart.getMethods(engine.PersistedBackdropFilter.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedBackdropFilter, () => ({
    __proto__: dart.getGetters(engine.PersistedBackdropFilter.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedBackdropFilter, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedBackdropFilter, () => ({
    __proto__: dart.getFields(engine.PersistedBackdropFilter.__proto__),
    filter: dart.finalFieldType(ui.ImageFilter),
    [_childContainer]: dart.fieldType(html.Element),
    [_filterElement]: dart.fieldType(html.Element),
    [_invertedTransform]: dart.fieldType(engine.Matrix4),
    [_previousTransform]: dart.fieldType(engine.Matrix4)
  }));
  engine._DomClip = class _DomClip extends engine.PersistedContainerSurface {};
  engine._DomClip[dart.mixinOn] = PersistedContainerSurface => class _DomClip extends PersistedContainerSurface {
    get childContainer() {
      return this[_childContainer];
    }
    adoptElements(oldSurface) {
      engine._DomClip._check(oldSurface);
      super.adoptElements(oldSurface);
      this[_childContainer] = oldSurface[_childContainer];
      oldSurface[_childContainer] = null;
    }
    createElement() {
      let t5;
      let element = this.defaultCreateElement("flt-clip");
      if (!dart.test(engine.debugShowClipLayers)) {
        element.style[$overflow] = "hidden";
      } else {
        element.style[$boxShadow] = "inset 0 0 10px green";
      }
      this[_childContainer] = html.Element.tag("flt-clip-interior");
      if (false) {
        t5 = engine._surfaceStatsFor(this);
        t5.allocatedDomNodeCount = dart.notNull(t5.allocatedDomNodeCount) + 1;
      }
      this[_childContainer].style[$position] = "absolute";
      element[$append](this[_childContainer]);
      return element;
    }
    discard() {
      super.discard();
      this[_childContainer] = null;
    }
  };
  (engine._DomClip[dart.mixinNew] = function() {
    this[_childContainer] = null;
  }).prototype = engine._DomClip.prototype;
  dart.addTypeTests(engine._DomClip);
  engine._DomClip[dart.implements] = () => [engine.PersistedContainerSurface];
  dart.setMethodSignature(engine._DomClip, () => ({
    __proto__: dart.getMethods(engine._DomClip.__proto__),
    createElement: dart.fnType(html.Element, [])
  }));
  dart.setLibraryUri(engine._DomClip, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._DomClip, () => ({
    __proto__: dart.getFields(engine._DomClip.__proto__),
    [_childContainer]: dart.fieldType(html.Element)
  }));
  const PersistedClipRect_rect = dart.privateName(engine, "PersistedClipRect.rect");
  const PersistedContainerSurface__DomClip$36 = class PersistedContainerSurface__DomClip extends engine.PersistedContainerSurface {};
  (PersistedContainerSurface__DomClip$36.new = function(oldLayer) {
    engine._DomClip[dart.mixinNew].call(this);
    PersistedContainerSurface__DomClip$36.__proto__.new.call(this, oldLayer);
  }).prototype = PersistedContainerSurface__DomClip$36.prototype;
  dart.applyMixin(PersistedContainerSurface__DomClip$36, engine._DomClip);
  engine.PersistedClipRect = class PersistedClipRect extends PersistedContainerSurface__DomClip$36 {
    get rect() {
      return this[rect$3];
    }
    set rect(value) {
      super.rect = value;
    }
    recomputeTransformAndClip() {
      this[_transform$] = this.parent[_transform$];
      this[_localClipBounds] = this.rect;
      this[_localTransformInverse] = null;
      this[_projectedClip] = null;
    }
    get localTransformInverse() {
      let t5;
      t5 = this[_localTransformInverse];
      return t5 == null ? this[_localTransformInverse] = engine.Matrix4.identity() : t5;
    }
    createElement() {
      let t5;
      t5 = super.createElement();
      t5[$setAttribute]("clip-type", "rect");
      return t5;
    }
    apply() {
      let t5;
      t5 = this.rootElement.style;
      t5[$transform] = "translate(" + dart.str(this.rect.left) + "px, " + dart.str(this.rect.top) + "px)";
      t5[$width] = dart.str(dart.notNull(this.rect.right) - dart.notNull(this.rect.left)) + "px";
      t5[$height] = dart.str(dart.notNull(this.rect.bottom) - dart.notNull(this.rect.top)) + "px";
      t5;
      this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(this.rect.left)) + "px, " + dart.str(-dart.notNull(this.rect.top)) + "px)";
    }
    update(oldSurface) {
      engine.PersistedClipRect._check(oldSurface);
      super.update(oldSurface);
      if (!dart.equals(this.rect, oldSurface.rect)) {
        this.apply();
      }
    }
  };
  (engine.PersistedClipRect.new = function(oldLayer, rect) {
    this[rect$3] = rect;
    engine.PersistedClipRect.__proto__.new.call(this, oldLayer);
    ;
  }).prototype = engine.PersistedClipRect.prototype;
  dart.addTypeTests(engine.PersistedClipRect);
  const rect$3 = PersistedClipRect_rect;
  engine.PersistedClipRect[dart.implements] = () => [ui.ClipRectEngineLayer];
  dart.setMethodSignature(engine.PersistedClipRect, () => ({
    __proto__: dart.getMethods(engine.PersistedClipRect.__proto__),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedClipRect, () => ({
    __proto__: dart.getGetters(engine.PersistedClipRect.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedClipRect, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedClipRect, () => ({
    __proto__: dart.getFields(engine.PersistedClipRect.__proto__),
    rect: dart.finalFieldType(ui.Rect)
  }));
  const PersistedClipRRect_rrect = dart.privateName(engine, "PersistedClipRRect.rrect");
  const PersistedClipRRect_clipBehavior = dart.privateName(engine, "PersistedClipRRect.clipBehavior");
  const PersistedContainerSurface__DomClip$36$ = class PersistedContainerSurface__DomClip extends engine.PersistedContainerSurface {};
  (PersistedContainerSurface__DomClip$36$.new = function(oldLayer) {
    engine._DomClip[dart.mixinNew].call(this);
    PersistedContainerSurface__DomClip$36$.__proto__.new.call(this, oldLayer);
  }).prototype = PersistedContainerSurface__DomClip$36$.prototype;
  dart.applyMixin(PersistedContainerSurface__DomClip$36$, engine._DomClip);
  engine.PersistedClipRRect = class PersistedClipRRect extends PersistedContainerSurface__DomClip$36$ {
    get rrect() {
      return this[rrect$2];
    }
    set rrect(value) {
      super.rrect = value;
    }
    get clipBehavior() {
      return this[clipBehavior$];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    recomputeTransformAndClip() {
      this[_transform$] = this.parent[_transform$];
      this[_localClipBounds] = this.rrect.outerRect;
      this[_localTransformInverse] = null;
      this[_projectedClip] = null;
    }
    get localTransformInverse() {
      let t5;
      t5 = this[_localTransformInverse];
      return t5 == null ? this[_localTransformInverse] = engine.Matrix4.identity() : t5;
    }
    createElement() {
      let t5;
      t5 = super.createElement();
      t5[$setAttribute]("clip-type", "rrect");
      return t5;
    }
    apply() {
      let t5;
      t5 = this.rootElement.style;
      t5[$transform] = "translate(" + dart.str(this.rrect.left) + "px, " + dart.str(this.rrect.top) + "px)";
      t5[$width] = dart.str(this.rrect.width) + "px";
      t5[$height] = dart.str(this.rrect.height) + "px";
      t5[$borderTopLeftRadius] = dart.str(this.rrect.tlRadiusX) + "px";
      t5[$borderTopRightRadius] = dart.str(this.rrect.trRadiusX) + "px";
      t5[$borderBottomRightRadius] = dart.str(this.rrect.brRadiusX) + "px";
      t5[$borderBottomLeftRadius] = dart.str(this.rrect.blRadiusX) + "px";
      t5;
      this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(this.rrect.left)) + "px, " + dart.str(-dart.notNull(this.rrect.top)) + "px)";
    }
    update(oldSurface) {
      engine.PersistedClipRRect._check(oldSurface);
      super.update(oldSurface);
      if (!dart.equals(this.rrect, oldSurface.rrect)) {
        this.apply();
      }
    }
  };
  (engine.PersistedClipRRect.new = function(oldLayer, rrect, clipBehavior) {
    this[rrect$2] = rrect;
    this[clipBehavior$] = clipBehavior;
    engine.PersistedClipRRect.__proto__.new.call(this, engine.PersistedSurface._check(oldLayer));
    ;
  }).prototype = engine.PersistedClipRRect.prototype;
  dart.addTypeTests(engine.PersistedClipRRect);
  const rrect$2 = PersistedClipRRect_rrect;
  const clipBehavior$ = PersistedClipRRect_clipBehavior;
  engine.PersistedClipRRect[dart.implements] = () => [ui.ClipRRectEngineLayer];
  dart.setMethodSignature(engine.PersistedClipRRect, () => ({
    __proto__: dart.getMethods(engine.PersistedClipRRect.__proto__),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedClipRRect, () => ({
    __proto__: dart.getGetters(engine.PersistedClipRRect.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedClipRRect, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedClipRRect, () => ({
    __proto__: dart.getFields(engine.PersistedClipRRect.__proto__),
    rrect: dart.finalFieldType(ui.RRect),
    clipBehavior: dart.finalFieldType(ui.Clip)
  }));
  const _clipElement = dart.privateName(engine, "_clipElement");
  const _applyColor = dart.privateName(engine, "_applyColor");
  const _applyShadow = dart.privateName(engine, "_applyShadow");
  const _applyShape = dart.privateName(engine, "_applyShape");
  const PersistedPhysicalShape_path = dart.privateName(engine, "PersistedPhysicalShape.path");
  const PersistedPhysicalShape_elevation = dart.privateName(engine, "PersistedPhysicalShape.elevation");
  const PersistedPhysicalShape_color = dart.privateName(engine, "PersistedPhysicalShape.color");
  const PersistedPhysicalShape_shadowColor = dart.privateName(engine, "PersistedPhysicalShape.shadowColor");
  const PersistedPhysicalShape_clipBehavior = dart.privateName(engine, "PersistedPhysicalShape.clipBehavior");
  const PersistedContainerSurface__DomClip$36$0 = class PersistedContainerSurface__DomClip extends engine.PersistedContainerSurface {};
  (PersistedContainerSurface__DomClip$36$0.new = function(oldLayer) {
    engine._DomClip[dart.mixinNew].call(this);
    PersistedContainerSurface__DomClip$36$0.__proto__.new.call(this, oldLayer);
  }).prototype = PersistedContainerSurface__DomClip$36$0.prototype;
  dart.applyMixin(PersistedContainerSurface__DomClip$36$0, engine._DomClip);
  engine.PersistedPhysicalShape = class PersistedPhysicalShape extends PersistedContainerSurface__DomClip$36$0 {
    get path() {
      return this[path$2];
    }
    set path(value) {
      super.path = value;
    }
    get elevation() {
      return this[elevation$1];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get color() {
      return this[color$2];
    }
    set color(value) {
      super.color = value;
    }
    get shadowColor() {
      return this[shadowColor$];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    get clipBehavior() {
      return this[clipBehavior$0];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    recomputeTransformAndClip() {
      this[_transform$] = this.parent[_transform$];
      let roundRect = this.path.webOnlyPathAsRoundedRect;
      if (roundRect != null) {
        this[_localClipBounds] = roundRect.outerRect;
      } else {
        let rect = this.path.webOnlyPathAsRect;
        if (rect != null) {
          this[_localClipBounds] = rect;
        } else {
          this[_localClipBounds] = null;
        }
      }
      this[_localTransformInverse] = null;
      this[_projectedClip] = null;
    }
    get localTransformInverse() {
      let t5;
      t5 = this[_localTransformInverse];
      return t5 == null ? this[_localTransformInverse] = engine.Matrix4.identity() : t5;
    }
    [_applyColor]() {
      this.rootElement.style[$backgroundColor] = this.color.toCssString();
    }
    [_applyShadow]() {
      engine.ElevationShadow.applyShadow(this.rootElement.style, this.elevation, this.shadowColor);
    }
    createElement() {
      let t5;
      t5 = super.createElement();
      t5[$setAttribute]("clip-type", "physical-shape");
      return t5;
    }
    apply() {
      this[_applyColor]();
      this[_applyShadow]();
      this[_applyShape]();
    }
    [_applyShape]() {
      let t5, t5$, t5$0, t5$1;
      if (this.path == null) {
        return;
      }
      let roundRect = this.path.webOnlyPathAsRoundedRect;
      if (roundRect != null) {
        let borderRadius = dart.str(roundRect.tlRadiusX) + "px " + dart.str(roundRect.trRadiusX) + "px " + dart.str(roundRect.brRadiusX) + "px " + dart.str(roundRect.blRadiusX) + "px";
        let style = this.rootElement.style;
        t5 = style;
        t5[$transform] = "translate(" + dart.str(roundRect.left) + "px, " + dart.str(roundRect.top) + "px)";
        t5[$width] = dart.str(roundRect.width) + "px";
        t5[$height] = dart.str(roundRect.height) + "px";
        t5[$borderRadius] = borderRadius;
        t5;
        this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(roundRect.left)) + "px, " + dart.str(-dart.notNull(roundRect.top)) + "px)";
        if (!dart.equals(this.clipBehavior, ui.Clip.none)) {
          style[$overflow] = "hidden";
        }
        return;
      } else {
        let rect = this.path.webOnlyPathAsRect;
        if (rect != null) {
          let style = this.rootElement.style;
          t5$ = style;
          t5$[$transform] = "translate(" + dart.str(rect.left) + "px, " + dart.str(rect.top) + "px)";
          t5$[$width] = dart.str(rect.width) + "px";
          t5$[$height] = dart.str(rect.height) + "px";
          t5$[$borderRadius] = "";
          t5$;
          this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(rect.left)) + "px, " + dart.str(-dart.notNull(rect.top)) + "px)";
          if (!dart.equals(this.clipBehavior, ui.Clip.none)) {
            style[$overflow] = "hidden";
          }
          return;
        } else {
          let ellipse = this.path.webOnlyPathAsCircle;
          if (ellipse != null) {
            let rx = ellipse.radiusX;
            let ry = ellipse.radiusY;
            let borderRadius = rx == ry ? dart.str(rx) + "px " : dart.str(rx) + "px " + dart.str(ry) + "px ";
            let style = this.rootElement.style;
            let left = dart.notNull(ellipse.x) - dart.notNull(rx);
            let top = dart.notNull(ellipse.y) - dart.notNull(ry);
            t5$0 = style;
            t5$0[$transform] = "translate(" + dart.str(left) + "px, " + dart.str(top) + "px)";
            t5$0[$width] = dart.str(dart.notNull(rx) * 2) + "px";
            t5$0[$height] = dart.str(dart.notNull(ry) * 2) + "px";
            t5$0[$borderRadius] = borderRadius;
            t5$0;
            this.childContainer.style[$transform] = "translate(" + dart.str(-left) + "px, " + dart.str(-top) + "px)";
            if (!dart.equals(this.clipBehavior, ui.Clip.none)) {
              style[$overflow] = "hidden";
            }
            return;
          }
        }
      }
      let bounds = this.path.getBounds();
      let svgClipPath = engine._pathToSvgClipPath(this.path, {offsetX: -dart.notNull(bounds.left), offsetY: -dart.notNull(bounds.top)});
      if (!(this[_clipElement] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/clip.dart", 285, 12, "_clipElement == null");
      this[_clipElement] = html.Element.html(svgClipPath, {treeSanitizer: new engine._NullTreeSanitizer.new()});
      engine.domRenderer.append(this.rootElement, this[_clipElement]);
      engine.domRenderer.setElementStyle(this.rootElement, "clip-path", "url(#svgClip" + dart.str(engine._clipIdCounter) + ")");
      engine.domRenderer.setElementStyle(this.rootElement, "-webkit-clip-path", "url(#svgClip" + dart.str(engine._clipIdCounter) + ")");
      let rootElementStyle = this.rootElement.style;
      t5$1 = rootElementStyle;
      t5$1[$overflow] = "";
      t5$1[$transform] = "translate(" + dart.str(bounds.left) + "px, " + dart.str(bounds.top) + "px)";
      t5$1[$width] = dart.str(bounds.width) + "px";
      t5$1[$height] = dart.str(bounds.height) + "px";
      t5$1[$borderRadius] = "";
      t5$1;
      this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(bounds.left)) + "px, " + dart.str(-dart.notNull(bounds.top)) + "px)";
    }
    update(oldSurface) {
      let t5;
      engine.PersistedPhysicalShape._check(oldSurface);
      super.update(oldSurface);
      if (!dart.equals(oldSurface.color, this.color)) {
        this[_applyColor]();
      }
      if (oldSurface.elevation != this.elevation || !dart.equals(oldSurface.shadowColor, this.shadowColor)) {
        this[_applyShadow]();
      }
      if (!dart.equals(oldSurface.path, this.path)) {
        t5 = oldSurface[_clipElement];
        t5 == null ? null : t5[$remove]();
        let style = this.rootElement.style;
        style[$transform] = "";
        style[$borderRadius] = "";
        engine.domRenderer.setElementStyle(this.rootElement, "clip-path", "");
        engine.domRenderer.setElementStyle(this.rootElement, "-webkit-clip-path", "");
        this[_applyShape]();
      } else {
        this[_clipElement] = oldSurface[_clipElement];
      }
      oldSurface[_clipElement] = null;
    }
  };
  (engine.PersistedPhysicalShape.new = function(oldLayer, path, elevation, color, shadowColor, clipBehavior) {
    this[_clipElement] = null;
    this[path$2] = path;
    this[elevation$1] = elevation;
    this[clipBehavior$0] = clipBehavior;
    this[color$2] = new ui.Color.new(color);
    this[shadowColor$] = new ui.Color.new(shadowColor);
    engine.PersistedPhysicalShape.__proto__.new.call(this, oldLayer);
    ;
  }).prototype = engine.PersistedPhysicalShape.prototype;
  dart.addTypeTests(engine.PersistedPhysicalShape);
  const path$2 = PersistedPhysicalShape_path;
  const elevation$1 = PersistedPhysicalShape_elevation;
  const color$2 = PersistedPhysicalShape_color;
  const shadowColor$ = PersistedPhysicalShape_shadowColor;
  const clipBehavior$0 = PersistedPhysicalShape_clipBehavior;
  engine.PersistedPhysicalShape[dart.implements] = () => [ui.PhysicalShapeEngineLayer];
  dart.setMethodSignature(engine.PersistedPhysicalShape, () => ({
    __proto__: dart.getMethods(engine.PersistedPhysicalShape.__proto__),
    [_applyColor]: dart.fnType(dart.void, []),
    [_applyShadow]: dart.fnType(dart.void, []),
    apply: dart.fnType(dart.void, []),
    [_applyShape]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedPhysicalShape, () => ({
    __proto__: dart.getGetters(engine.PersistedPhysicalShape.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedPhysicalShape, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedPhysicalShape, () => ({
    __proto__: dart.getFields(engine.PersistedPhysicalShape.__proto__),
    path: dart.finalFieldType(ui.Path),
    elevation: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color),
    shadowColor: dart.finalFieldType(ui.Color),
    clipBehavior: dart.finalFieldType(ui.Clip),
    [_clipElement]: dart.fieldType(html.Element)
  }));
  const PersistedClipPath_clipPath = dart.privateName(engine, "PersistedClipPath.clipPath");
  const PersistedClipPath_clipBehavior = dart.privateName(engine, "PersistedClipPath.clipBehavior");
  engine.PersistedClipPath = class PersistedClipPath extends engine.PersistedContainerSurface {
    get clipPath() {
      return this[clipPath$];
    }
    set clipPath(value) {
      super.clipPath = value;
    }
    get clipBehavior() {
      return this[clipBehavior$1];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    createElement() {
      return this.defaultCreateElement("flt-clippath");
    }
    recomputeTransformAndClip() {
      super.recomputeTransformAndClip();
      this[_localClipBounds] == null ? this[_localClipBounds] = this.clipPath.getBounds() : null;
    }
    get localTransformInverse() {
      let t5;
      t5 = this[_localTransformInverse];
      return t5 == null ? this[_localTransformInverse] = engine.Matrix4.identity() : t5;
    }
    apply() {
      let t5;
      if (this.clipPath == null) {
        if (this[_clipElement] != null) {
          engine.domRenderer.setElementStyle(this.childContainer, "clip-path", "");
          engine.domRenderer.setElementStyle(this.childContainer, "-webkit-clip-path", "");
          this[_clipElement][$remove]();
          this[_clipElement] = null;
        }
        return;
      }
      let svgClipPath = engine._pathToSvgClipPath(this.clipPath);
      t5 = this[_clipElement];
      t5 == null ? null : t5[$remove]();
      this[_clipElement] = html.Element.html(svgClipPath, {treeSanitizer: new engine._NullTreeSanitizer.new()});
      engine.domRenderer.append(this.childContainer, this[_clipElement]);
      engine.domRenderer.setElementStyle(this.childContainer, "clip-path", "url(#svgClip" + dart.str(engine._clipIdCounter) + ")");
      engine.domRenderer.setElementStyle(this.childContainer, "-webkit-clip-path", "url(#svgClip" + dart.str(engine._clipIdCounter) + ")");
    }
    update(oldSurface) {
      let t5;
      engine.PersistedClipPath._check(oldSurface);
      super.update(oldSurface);
      if (!dart.equals(oldSurface.clipPath, this.clipPath)) {
        this[_localClipBounds] = null;
        t5 = oldSurface[_clipElement];
        t5 == null ? null : t5[$remove]();
        this.apply();
      } else {
        this[_clipElement] = oldSurface[_clipElement];
      }
      oldSurface[_clipElement] = null;
    }
    discard() {
      let t5;
      t5 = this[_clipElement];
      t5 == null ? null : t5[$remove]();
      this[_clipElement] = null;
      super.discard();
    }
  };
  (engine.PersistedClipPath.new = function(oldLayer, clipPath, clipBehavior) {
    this[_clipElement] = null;
    this[clipPath$] = clipPath;
    this[clipBehavior$1] = clipBehavior;
    engine.PersistedClipPath.__proto__.new.call(this, oldLayer);
    ;
  }).prototype = engine.PersistedClipPath.prototype;
  dart.addTypeTests(engine.PersistedClipPath);
  const clipPath$ = PersistedClipPath_clipPath;
  const clipBehavior$1 = PersistedClipPath_clipBehavior;
  engine.PersistedClipPath[dart.implements] = () => [ui.ClipPathEngineLayer];
  dart.setMethodSignature(engine.PersistedClipPath, () => ({
    __proto__: dart.getMethods(engine.PersistedClipPath.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedClipPath, () => ({
    __proto__: dart.getGetters(engine.PersistedClipPath.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedClipPath, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedClipPath, () => ({
    __proto__: dart.getFields(engine.PersistedClipPath.__proto__),
    clipPath: dart.finalFieldType(ui.Path),
    clipBehavior: dart.finalFieldType(ui.Clip),
    [_clipElement]: dart.fieldType(html.Element)
  }));
  const _created = dart.privateName(engine, "_created");
  const _kept = dart.privateName(engine, "_kept");
  const _reused = dart.privateName(engine, "_reused");
  const _disposed = dart.privateName(engine, "_disposed");
  const _inRecycle = dart.privateName(engine, "_inRecycle");
  const _createdCount = dart.privateName(engine, "_createdCount");
  const _keptCount = dart.privateName(engine, "_keptCount");
  const _reusedCount = dart.privateName(engine, "_reusedCount");
  const _disposedCount = dart.privateName(engine, "_disposedCount");
  const _inRecycleCount = dart.privateName(engine, "_inRecycleCount");
  const _reset = dart.privateName(engine, "_reset");
  const _update = dart.privateName(engine, "_update");
  engine.DebugCanvasReuseOverlay = class DebugCanvasReuseOverlay extends core.Object {
    static get instance() {
      if (engine.DebugCanvasReuseOverlay._instance == null) {
        if (dart.test(engine.assertionsEnabled)) {
          engine.DebugCanvasReuseOverlay._instance = new engine.DebugCanvasReuseOverlay.__();
        }
      }
      return engine.DebugCanvasReuseOverlay._instance;
    }
    get createdCount() {
      return this[_createdCount];
    }
    set createdCount(createdCount) {
      this[_createdCount] = createdCount;
      this[_update]();
    }
    get keptCount() {
      return this[_keptCount];
    }
    set keptCount(keptCount) {
      this[_keptCount] = keptCount;
      this[_update]();
    }
    get reusedCount() {
      return this[_reusedCount];
    }
    set reusedCount(reusedCount) {
      this[_reusedCount] = reusedCount;
      this[_update]();
    }
    get disposedCount() {
      return this[_disposedCount];
    }
    set disposedCount(disposedCount) {
      this[_disposedCount] = disposedCount;
      this[_update]();
    }
    get inRecycleCount() {
      return this[_inRecycleCount];
    }
    set inRecycleCount(inRecycleCount) {
      this[_inRecycleCount] = inRecycleCount;
      this[_update]();
    }
    [_update]() {
      this[_created][$text] = dart.str(this[_createdCount]);
      this[_kept][$text] = dart.str(this[_keptCount]);
      this[_reused][$text] = dart.str(this[_reusedCount]);
      this[_disposed][$text] = dart.str(this[_disposedCount]);
      this[_inRecycle][$text] = dart.str(this[_inRecycleCount]);
    }
    [_reset]() {
      this[_createdCount] = this[_keptCount] = this[_reusedCount] = this[_disposedCount] = this[_inRecycleCount] = 0;
      this[_update]();
    }
  };
  (engine.DebugCanvasReuseOverlay.__ = function() {
    let t5, t6, t6$, t6$0, t6$1, t6$2, t7, t6$3, t5$;
    this[_created] = html.Text.new("0");
    this[_kept] = html.Text.new("0");
    this[_reused] = html.Text.new("0");
    this[_disposed] = html.Text.new("0");
    this[_inRecycle] = html.Text.new("0");
    this[_createdCount] = 0;
    this[_keptCount] = 0;
    this[_reusedCount] = 0;
    this[_disposedCount] = 0;
    this[_inRecycleCount] = 0;
    let container = engine._createContainer();
    let title = html.DivElement.new();
    t5 = title.style;
    t5[$fontWeight] = "bold";
    t5[$textDecoration] = "underline";
    t5;
    title[$text] = "Canvas Reuse";
    html.document.body[$append]((t5$ = container, t5$[$append](title), t5$[$append]((t6 = html.DivElement.new(), t6[$appendText]("Created: "), t6[$append](this[_created]), t6)), t5$[$append]((t6$ = html.DivElement.new(), t6$[$appendText]("Kept: "), t6$[$append](this[_kept]), t6$)), t5$[$append]((t6$0 = html.DivElement.new(), t6$0[$appendText]("Reused: "), t6$0[$append](this[_reused]), t6$0)), t5$[$append]((t6$1 = html.DivElement.new(), t6$1[$appendText]("Disposed: "), t6$1[$append](this[_disposed]), t6$1)), t5$[$append]((t6$2 = html.DivElement.new(), t6$2[$appendText]("In Recycle List: "), t6$2[$append](this[_inRecycle]), t6$2)), t5$[$append]((t6$3 = html.DivElement.new(), t6$3[$append]((t7 = html.ButtonElement.new(), t7[$text] = "Reset", t7[$addEventListener]("click", dart.fn(_ => this[_reset](), EventTovoid())), t7)), t6$3)), t5$));
  }).prototype = engine.DebugCanvasReuseOverlay.prototype;
  dart.addTypeTests(engine.DebugCanvasReuseOverlay);
  dart.setMethodSignature(engine.DebugCanvasReuseOverlay, () => ({
    __proto__: dart.getMethods(engine.DebugCanvasReuseOverlay.__proto__),
    [_update]: dart.fnType(dart.void, []),
    [_reset]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.DebugCanvasReuseOverlay, () => ({
    __proto__: dart.getGetters(engine.DebugCanvasReuseOverlay.__proto__),
    createdCount: core.int,
    keptCount: core.int,
    reusedCount: core.int,
    disposedCount: core.int,
    inRecycleCount: core.int
  }));
  dart.setSetterSignature(engine.DebugCanvasReuseOverlay, () => ({
    __proto__: dart.getSetters(engine.DebugCanvasReuseOverlay.__proto__),
    createdCount: core.int,
    keptCount: core.int,
    reusedCount: core.int,
    disposedCount: core.int,
    inRecycleCount: core.int
  }));
  dart.setLibraryUri(engine.DebugCanvasReuseOverlay, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.DebugCanvasReuseOverlay, () => ({
    __proto__: dart.getFields(engine.DebugCanvasReuseOverlay.__proto__),
    [_created]: dart.finalFieldType(html.Text),
    [_kept]: dart.finalFieldType(html.Text),
    [_reused]: dart.finalFieldType(html.Text),
    [_disposed]: dart.finalFieldType(html.Text),
    [_inRecycle]: dart.finalFieldType(html.Text),
    [_createdCount]: dart.fieldType(core.int),
    [_keptCount]: dart.fieldType(core.int),
    [_reusedCount]: dart.fieldType(core.int),
    [_disposedCount]: dart.fieldType(core.int),
    [_inRecycleCount]: dart.fieldType(core.int)
  }));
  dart.defineLazy(engine.DebugCanvasReuseOverlay, {
    /*engine.DebugCanvasReuseOverlay._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  const PersistedOffset_dx = dart.privateName(engine, "PersistedOffset.dx");
  const PersistedOffset_dy = dart.privateName(engine, "PersistedOffset.dy");
  engine.PersistedOffset = class PersistedOffset extends engine.PersistedContainerSurface {
    get dx() {
      return this[dx$0];
    }
    set dx(value) {
      super.dx = value;
    }
    get dy() {
      return this[dy$0];
    }
    set dy(value) {
      super.dy = value;
    }
    recomputeTransformAndClip() {
      this[_transform$] = this.parent[_transform$];
      if (this.dx !== 0.0 || this.dy !== 0.0) {
        this[_transform$] = this[_transform$].clone();
        this[_transform$].translate(this.dx, this.dy);
      }
      this[_projectedClip] = null;
      this[_localTransformInverse] = null;
    }
    get localTransformInverse() {
      let t5;
      t5 = this[_localTransformInverse];
      return t5 == null ? this[_localTransformInverse] = engine.Matrix4.translationValues(-dart.notNull(this.dx), -dart.notNull(this.dy), 0.0) : t5;
    }
    createElement() {
      let t5;
      t5 = this.defaultCreateElement("flt-offset");
      t5.style[$transformOrigin] = "0 0 0";
      return t5;
    }
    apply() {
      this.rootElement.style[$transform] = "translate(" + dart.str(this.dx) + "px, " + dart.str(this.dy) + "px)";
    }
    update(oldSurface) {
      engine.PersistedOffset._check(oldSurface);
      super.update(oldSurface);
      if (oldSurface.dx != this.dx || oldSurface.dy != this.dy) {
        this.apply();
      }
    }
  };
  (engine.PersistedOffset.new = function(oldLayer, dx, dy) {
    this[dx$0] = dx;
    this[dy$0] = dy;
    engine.PersistedOffset.__proto__.new.call(this, oldLayer);
    ;
  }).prototype = engine.PersistedOffset.prototype;
  dart.addTypeTests(engine.PersistedOffset);
  const dx$0 = PersistedOffset_dx;
  const dy$0 = PersistedOffset_dy;
  engine.PersistedOffset[dart.implements] = () => [ui.OffsetEngineLayer];
  dart.setMethodSignature(engine.PersistedOffset, () => ({
    __proto__: dart.getMethods(engine.PersistedOffset.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedOffset, () => ({
    __proto__: dart.getGetters(engine.PersistedOffset.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedOffset, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedOffset, () => ({
    __proto__: dart.getFields(engine.PersistedOffset.__proto__),
    dx: dart.finalFieldType(core.double),
    dy: dart.finalFieldType(core.double)
  }));
  const PersistedOpacity_alpha = dart.privateName(engine, "PersistedOpacity.alpha");
  const PersistedOpacity_offset = dart.privateName(engine, "PersistedOpacity.offset");
  engine.PersistedOpacity = class PersistedOpacity extends engine.PersistedContainerSurface {
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get offset() {
      return this[offset$2];
    }
    set offset(value) {
      super.offset = value;
    }
    recomputeTransformAndClip() {
      this[_transform$] = this.parent[_transform$];
      let dx = this.offset.dx;
      let dy = this.offset.dy;
      if (dx !== 0.0 || dy !== 0.0) {
        this[_transform$] = this[_transform$].clone();
        this[_transform$].translate(dx, dy);
      }
      this[_localTransformInverse] = null;
      this[_projectedClip] = null;
    }
    get localTransformInverse() {
      let t5;
      t5 = this[_localTransformInverse];
      return t5 == null ? this[_localTransformInverse] = engine.Matrix4.translationValues(-dart.notNull(this.offset.dx), -dart.notNull(this.offset.dy), 0.0) : t5;
    }
    createElement() {
      let t5;
      t5 = this.defaultCreateElement("flt-opacity");
      t5.style[$transformOrigin] = "0 0 0";
      return t5;
    }
    apply() {
      this.rootElement.style[$opacity] = dart.str(dart.notNull(this.alpha) / 255);
      this.rootElement.style[$transform] = "translate(" + dart.str(this.offset.dx) + "px, " + dart.str(this.offset.dy) + "px)";
    }
    update(oldSurface) {
      engine.PersistedOpacity._check(oldSurface);
      super.update(oldSurface);
      if (this.alpha != oldSurface.alpha || !dart.equals(this.offset, oldSurface.offset)) {
        this.apply();
      }
    }
  };
  (engine.PersistedOpacity.new = function(oldLayer, alpha, offset) {
    this[alpha$] = alpha;
    this[offset$2] = offset;
    engine.PersistedOpacity.__proto__.new.call(this, oldLayer);
    ;
  }).prototype = engine.PersistedOpacity.prototype;
  dart.addTypeTests(engine.PersistedOpacity);
  const alpha$ = PersistedOpacity_alpha;
  const offset$2 = PersistedOpacity_offset;
  engine.PersistedOpacity[dart.implements] = () => [ui.OpacityEngineLayer];
  dart.setMethodSignature(engine.PersistedOpacity, () => ({
    __proto__: dart.getMethods(engine.PersistedOpacity.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedOpacity, () => ({
    __proto__: dart.getGetters(engine.PersistedOpacity.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedOpacity, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedOpacity, () => ({
    __proto__: dart.getFields(engine.PersistedOpacity.__proto__),
    alpha: dart.finalFieldType(core.int),
    offset: dart.finalFieldType(ui.Offset)
  }));
  engine._PaintRequest = class _PaintRequest extends core.Object {};
  (engine._PaintRequest.new = function(opts) {
    let canvasSize = opts && 'canvasSize' in opts ? opts.canvasSize : null;
    let paintCallback = opts && 'paintCallback' in opts ? opts.paintCallback : null;
    this.canvasSize = canvasSize;
    this.paintCallback = paintCallback;
    if (!(canvasSize != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 31, 16, "canvasSize != null");
    if (!(paintCallback != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 32, 16, "paintCallback != null");
    ;
  }).prototype = engine._PaintRequest.prototype;
  dart.addTypeTests(engine._PaintRequest);
  dart.setLibraryUri(engine._PaintRequest, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._PaintRequest, () => ({
    __proto__: dart.getFields(engine._PaintRequest.__proto__),
    canvasSize: dart.finalFieldType(ui.Size),
    paintCallback: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  const _optimalLocalCullRect = dart.privateName(engine, "_optimalLocalCullRect");
  const _exactGlobalCullRect = dart.privateName(engine, "_exactGlobalCullRect");
  const _exactLocalCullRect = dart.privateName(engine, "_exactLocalCullRect");
  const _computeExactCullRects = dart.privateName(engine, "_computeExactCullRects");
  const _computeOptimalCullRect = dart.privateName(engine, "_computeOptimalCullRect");
  const _applyTranslate = dart.privateName(engine, "_applyTranslate");
  engine.PersistedLeafSurface = class PersistedLeafSurface extends engine.PersistedSurface {
    visitChildren(visitor) {
    }
  };
  (engine.PersistedLeafSurface.new = function() {
    engine.PersistedLeafSurface.__proto__.new.call(this);
    ;
  }).prototype = engine.PersistedLeafSurface.prototype;
  dart.addTypeTests(engine.PersistedLeafSurface);
  dart.setMethodSignature(engine.PersistedLeafSurface, () => ({
    __proto__: dart.getMethods(engine.PersistedLeafSurface.__proto__),
    visitChildren: dart.fnType(dart.void, [dart.fnType(dart.void, [engine.PersistedSurface])])
  }));
  dart.setLibraryUri(engine.PersistedLeafSurface, "package:flutter_web_ui/src/engine.dart");
  const PersistedPicture_dx = dart.privateName(engine, "PersistedPicture.dx");
  const PersistedPicture_dy = dart.privateName(engine, "PersistedPicture.dy");
  const PersistedPicture_picture = dart.privateName(engine, "PersistedPicture.picture");
  const PersistedPicture_localPaintBounds = dart.privateName(engine, "PersistedPicture.localPaintBounds");
  const PersistedPicture_hints = dart.privateName(engine, "PersistedPicture.hints");
  engine.PersistedPicture = class PersistedPicture extends engine.PersistedLeafSurface {
    get dx() {
      return this[dx$1];
    }
    set dx(value) {
      super.dx = value;
    }
    get dy() {
      return this[dy$1];
    }
    set dy(value) {
      super.dy = value;
    }
    get picture() {
      return this[picture$0];
    }
    set picture(value) {
      super.picture = value;
    }
    get localPaintBounds() {
      return this[localPaintBounds];
    }
    set localPaintBounds(value) {
      super.localPaintBounds = value;
    }
    get hints() {
      return this[hints$];
    }
    set hints(value) {
      super.hints = value;
    }
    createElement() {
      return this.defaultCreateElement("flt-picture");
    }
    recomputeTransformAndClip() {
      this[_transform$] = this.parent[_transform$];
      if (this.dx !== 0.0 || this.dy !== 0.0) {
        this[_transform$] = this[_transform$].clone();
        this[_transform$].translate(this.dx, this.dy);
      }
      this[_computeExactCullRects]();
    }
    get optimalLocalCullRect() {
      return this[_optimalLocalCullRect];
    }
    get debugExactGlobalCullRect() {
      return this[_exactGlobalCullRect];
    }
    [_computeExactCullRects]() {
      if (!(this.transform != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 396, 12, "transform != null");
      if (!(this.localPaintBounds != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 397, 12, "localPaintBounds != null");
      if (this.parent[_projectedClip] == null) {
        let bounds = null;
        let parentSurface = this.parent;
        let clipTransform = engine.Matrix4.identity();
        while (parentSurface != null) {
          let localClipBounds = parentSurface[_localClipBounds];
          if (localClipBounds != null) {
            if (bounds == null) {
              bounds = engine.transformRect(clipTransform, localClipBounds);
            } else {
              bounds = bounds.intersect(engine.transformRect(clipTransform, localClipBounds));
            }
          }
          let localInverse = parentSurface.localTransformInverse;
          if (localInverse != null && !dart.test(localInverse.isIdentity())) {
            clipTransform.multiply(localInverse);
          }
          parentSurface = parentSurface.parent;
        }
        if (bounds != null && (dart.notNull(bounds.width) <= 0 || dart.notNull(bounds.height) <= 0)) {
          bounds = ui.Rect.zero;
        }
        this.parent[_projectedClip] = bounds;
      }
      if (this.parent[_projectedClip] == null) {
        this[_exactLocalCullRect] = this.localPaintBounds;
      } else {
        this[_exactLocalCullRect] = this.localPaintBounds.intersect(this.parent[_projectedClip]);
      }
      if (dart.notNull(this[_exactLocalCullRect].width) <= 0 || dart.notNull(this[_exactLocalCullRect].height) <= 0) {
        this[_exactLocalCullRect] = ui.Rect.zero;
        this[_exactGlobalCullRect] = ui.Rect.zero;
      } else {
        if (!dart.test(dart.fn(() => {
          this[_exactGlobalCullRect] = engine.transformRect(this.transform, this[_exactLocalCullRect]);
          return true;
        }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 439, 14, "() {\r\n        _exactGlobalCullRect = transformRect(transform, _exactLocalCullRect);\r\n        return true;\r\n      }()");
      }
    }
    [_computeOptimalCullRect](oldSurface) {
      if (!(this[_exactLocalCullRect] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 447, 12, "_exactLocalCullRect != null");
      if (oldSurface == null || !dart.test(oldSurface.picture.recordingCanvas.didDraw)) {
        this[_optimalLocalCullRect] = this[_exactLocalCullRect];
        return true;
      }
      if (!(oldSurface[_optimalLocalCullRect] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 455, 12, "oldSurface._optimalLocalCullRect != null");
      let surfaceBeingRetained = oldSurface === this;
      let oldOptimalLocalCullRect = surfaceBeingRetained ? this[_optimalLocalCullRect] : oldSurface[_optimalLocalCullRect];
      if (dart.equals(this[_exactLocalCullRect], ui.Rect.zero)) {
        this[_optimalLocalCullRect] = ui.Rect.zero;
        return !dart.equals(oldOptimalLocalCullRect, ui.Rect.zero);
      }
      if (dart.test(engine.rectContainsOther(oldOptimalLocalCullRect, this[_exactLocalCullRect]))) {
        this[_optimalLocalCullRect] = oldOptimalLocalCullRect;
        return false;
      }
      let leftwardTrend = 3 * math.max(core.num, dart.notNull(oldOptimalLocalCullRect.left) - dart.notNull(this[_exactLocalCullRect].left), 0);
      let upwardTrend = 3 * math.max(core.num, dart.notNull(oldOptimalLocalCullRect.top) - dart.notNull(this[_exactLocalCullRect].top), 0);
      let rightwardTrend = 3 * math.max(core.num, dart.notNull(this[_exactLocalCullRect].right) - dart.notNull(oldOptimalLocalCullRect.right), 0);
      let bottomwardTrend = 3 * math.max(core.num, dart.notNull(this[_exactLocalCullRect].bottom) - dart.notNull(oldOptimalLocalCullRect.bottom), 0);
      let newLocalCullRect = new ui.Rect.fromLTRB(dart.notNull(oldOptimalLocalCullRect.left) - leftwardTrend, dart.notNull(oldOptimalLocalCullRect.top) - upwardTrend, dart.notNull(oldOptimalLocalCullRect.right) + rightwardTrend, dart.notNull(oldOptimalLocalCullRect.bottom) + bottomwardTrend).intersect(this.localPaintBounds);
      let localCullRectChanged = !dart.equals(this[_optimalLocalCullRect], newLocalCullRect);
      this[_optimalLocalCullRect] = newLocalCullRect;
      return localCullRectChanged;
    }
    [_applyPaint](oldSurface) {
      let t5, t5$;
      let oldCanvas = (t5 = oldSurface, t5 == null ? null : t5[_canvas]);
      if (!dart.test(this.picture.recordingCanvas.didDraw)) {
        engine._recycleCanvas(oldCanvas);
        engine.domRenderer.clearDom(this.rootElement);
        return;
      }
      if (false) {
        t5$ = engine._surfaceStatsFor(this);
        t5$.paintCount = dart.notNull(t5$.paintCount) + 1;
      }
      if (!(this[_optimalLocalCullRect] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 533, 12, "_optimalLocalCullRect != null");
      this.applyPaint(oldCanvas);
    }
    [_applyTranslate]() {
      this.rootElement.style[$transform] = "translate(" + dart.str(this.dx) + "px, " + dart.str(this.dy) + "px)";
    }
    apply() {
      this[_applyTranslate]();
      this[_applyPaint](null);
    }
    build() {
      this[_computeOptimalCullRect](null);
      super.build();
    }
    update(oldSurface) {
      engine.PersistedPicture._check(oldSurface);
      super.update(oldSurface);
      if (this.dx != oldSurface.dx || this.dy != oldSurface.dy) {
        this[_applyTranslate]();
      }
      let cullRectChangeRequiresRepaint = this[_computeOptimalCullRect](oldSurface);
      if (this.picture == oldSurface.picture) {
        if (dart.test(cullRectChangeRequiresRepaint)) {
          this[_applyPaint](oldSurface);
        } else {
          this[_canvas] = oldSurface[_canvas];
        }
      } else {
        this[_applyPaint](oldSurface);
      }
    }
    retain() {
      super.retain();
      let cullRectChangeRequiresRepaint = this[_computeOptimalCullRect](this);
      if (dart.test(cullRectChangeRequiresRepaint)) {
        this[_applyPaint](this);
      }
    }
    discard() {
      engine._recycleCanvas(this[_canvas]);
      super.discard();
    }
    debugPrintChildren(buffer, indent) {
      super.debugPrintChildren(buffer, indent);
      if (this.rootElement != null && this.rootElement.firstChild != null) {
        let firstChild = html.Element._check(this.rootElement.firstChild);
        let canvasTag = firstChild.tagName[$toLowerCase]();
        let canvasHash = dart.hashCode(this.rootElement.firstChild);
        buffer.writeln("  "[$times](dart.notNull(indent) + 1) + "<" + canvasTag + " @" + dart.str(canvasHash) + " />");
      } else if (this.rootElement != null) {
        buffer.writeln("  "[$times](dart.notNull(indent) + 1) + "<" + this.rootElement.tagName[$toLowerCase]() + " @" + dart.str(this[$hashCode]) + " />");
      } else {
        buffer.writeln("  "[$times](dart.notNull(indent) + 1) + "<recycled-canvas />");
      }
    }
    debugValidate(validationErrors) {
      super.debugValidate(validationErrors);
      if (dart.test(this.picture.recordingCanvas.didDraw)) {
        if (this[_canvas] == null) {
          validationErrors[$add](dart.str(this[$runtimeType]) + " has non-trivial picture but it has null canvas");
        }
        if (this[_optimalLocalCullRect] == null) {
          validationErrors[$add](dart.str(this[$runtimeType]) + " has null _optimalLocalCullRect");
        }
        if (this[_exactGlobalCullRect] == null) {
          validationErrors[$add](dart.str(this[$runtimeType]) + " has null _exactGlobalCullRect");
        }
        if (this[_exactLocalCullRect] == null) {
          validationErrors[$add](dart.str(this[$runtimeType]) + " has null _exactLocalCullRect");
        }
      }
    }
  };
  (engine.PersistedPicture.new = function(dx, dy, picture, hints) {
    this[_canvas] = null;
    this[_optimalLocalCullRect] = null;
    this[_exactGlobalCullRect] = null;
    this[_exactLocalCullRect] = null;
    this[dx$1] = dx;
    this[dy$1] = dy;
    this[picture$0] = picture;
    this[hints$] = hints;
    this[localPaintBounds] = picture.recordingCanvas.computePaintBounds();
    engine.PersistedPicture.__proto__.new.call(this);
    ;
  }).prototype = engine.PersistedPicture.prototype;
  dart.addTypeTests(engine.PersistedPicture);
  const dx$1 = PersistedPicture_dx;
  const dy$1 = PersistedPicture_dy;
  const picture$0 = PersistedPicture_picture;
  const localPaintBounds = PersistedPicture_localPaintBounds;
  const hints$ = PersistedPicture_hints;
  dart.setMethodSignature(engine.PersistedPicture, () => ({
    __proto__: dart.getMethods(engine.PersistedPicture.__proto__),
    createElement: dart.fnType(html.Element, []),
    [_computeExactCullRects]: dart.fnType(dart.void, []),
    [_computeOptimalCullRect]: dart.fnType(core.bool, [engine.PersistedPicture]),
    [_applyPaint]: dart.fnType(dart.void, [engine.PersistedPicture]),
    [_applyTranslate]: dart.fnType(dart.void, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedPicture, () => ({
    __proto__: dart.getGetters(engine.PersistedPicture.__proto__),
    optimalLocalCullRect: ui.Rect,
    debugExactGlobalCullRect: ui.Rect
  }));
  dart.setLibraryUri(engine.PersistedPicture, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedPicture, () => ({
    __proto__: dart.getFields(engine.PersistedPicture.__proto__),
    [_canvas]: dart.fieldType(engine.EngineCanvas),
    dx: dart.finalFieldType(core.double),
    dy: dart.finalFieldType(core.double),
    picture: dart.finalFieldType(ui.Picture),
    localPaintBounds: dart.finalFieldType(ui.Rect),
    hints: dart.finalFieldType(core.int),
    [_optimalLocalCullRect]: dart.fieldType(ui.Rect),
    [_exactGlobalCullRect]: dart.fieldType(ui.Rect),
    [_exactLocalCullRect]: dart.fieldType(ui.Rect)
  }));
  engine.PersistedHoudiniPicture = class PersistedHoudiniPicture extends engine.PersistedPicture {
    matchForUpdate(existingSurface) {
      engine.PersistedPicture._check(existingSurface);
      return dart.equals(existingSurface.picture, this.picture) ? 0.0 : 1.0;
    }
    get localTransformInverse() {
      let t5;
      t5 = this[_localTransformInverse];
      return t5 == null ? this[_localTransformInverse] = engine.Matrix4.identity() : t5;
    }
    static _registerCssPainter() {
      engine.PersistedHoudiniPicture._cssPainterRegistered = true;
      let css = js_util.getProperty(html.window, "CSS");
      let paintWorklet = js_util.getProperty(css, "paintWorklet");
      if (paintWorklet == null) {
        html.window[$console].warn("WARNING: CSS.paintWorklet not available. Paint worklets are only " + "supported on sites served from https:// or http://localhost.");
        return;
      }
      js_util.callMethod(paintWorklet, "addModule", ["/packages/flutter_web_ui/assets/houdini_painter.js"]);
    }
    get bitmapPixelCount() {
      return 0;
    }
    applyPaint(oldCanvas) {
      engine._recycleCanvas(oldCanvas);
      let canvas = new engine.HoudiniCanvas.new(this[_optimalLocalCullRect]);
      this[_canvas] = canvas;
      engine.domRenderer.clearDom(this.rootElement);
      this.rootElement[$append](this[_canvas].rootElement);
      this.picture.recordingCanvas.apply(this[_canvas]);
      canvas.commit();
    }
  };
  (engine.PersistedHoudiniPicture.new = function(dx, dy, picture, hints) {
    engine.PersistedHoudiniPicture.__proto__.new.call(this, dx, dy, picture, hints);
    if (!dart.test(engine.PersistedHoudiniPicture._cssPainterRegistered)) {
      engine.PersistedHoudiniPicture._registerCssPainter();
    }
  }).prototype = engine.PersistedHoudiniPicture.prototype;
  dart.addTypeTests(engine.PersistedHoudiniPicture);
  dart.setMethodSignature(engine.PersistedHoudiniPicture, () => ({
    __proto__: dart.getMethods(engine.PersistedHoudiniPicture.__proto__),
    matchForUpdate: dart.fnType(core.double, [core.Object]),
    applyPaint: dart.fnType(dart.void, [engine.EngineCanvas])
  }));
  dart.setGetterSignature(engine.PersistedHoudiniPicture, () => ({
    __proto__: dart.getGetters(engine.PersistedHoudiniPicture.__proto__),
    localTransformInverse: engine.Matrix4,
    bitmapPixelCount: core.int
  }));
  dart.setLibraryUri(engine.PersistedHoudiniPicture, "package:flutter_web_ui/src/engine.dart");
  dart.defineLazy(engine.PersistedHoudiniPicture, {
    /*engine.PersistedHoudiniPicture._cssPainterRegistered*/get _cssPainterRegistered() {
      return false;
    },
    set _cssPainterRegistered(_) {}
  });
  const _didApplyPaint = dart.privateName(engine, "_didApplyPaint");
  const _applyBitmapPaint = dart.privateName(engine, "_applyBitmapPaint");
  const _applyDomPaint = dart.privateName(engine, "_applyDomPaint");
  const _findOrCreateCanvas = dart.privateName(engine, "_findOrCreateCanvas");
  engine.PersistedStandardPicture = class PersistedStandardPicture extends engine.PersistedPicture {
    matchForUpdate(existingSurface) {
      engine.PersistedStandardPicture._check(existingSurface);
      if (dart.equals(existingSurface.picture, this.picture)) {
        return 0.0;
      }
      if (!dart.test(existingSurface.picture.recordingCanvas.didDraw)) {
        return 1.0;
      }
      let didRequireBitmap = existingSurface.picture.recordingCanvas.hasArbitraryPaint;
      let requiresBitmap = this.picture.recordingCanvas.hasArbitraryPaint;
      if (!dart.equals(didRequireBitmap, requiresBitmap)) {
        return 1.0;
      } else if (!dart.test(requiresBitmap)) {
        return 1.0;
      } else {
        let oldCanvas = engine.BitmapCanvas._check(existingSurface[_canvas]);
        if (!dart.test(engine.PersistedStandardPicture._doesCanvasFitBounds(oldCanvas, this[_exactLocalCullRect]))) {
          return 1.0;
        } else {
          let newPixelCount = dart.notNull(this[_exactLocalCullRect].size.width) * dart.notNull(this[_exactLocalCullRect].size.height);
          let oldPixelCount = dart.notNull(oldCanvas.size.width) * dart.notNull(oldCanvas.size.height);
          if (oldPixelCount === 0) {
            return 1.0;
          }
          let pixelCountRatio = newPixelCount / oldPixelCount;
          if (!(0 <= pixelCountRatio && pixelCountRatio <= 1.0)) dart.assertFailed("Invalid pixel count ratio " + dart.str(pixelCountRatio), "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 186, 16, "0 <= pixelCountRatio && pixelCountRatio <= 1.0");
          return 1.0 - pixelCountRatio;
        }
      }
    }
    get localTransformInverse() {
      return null;
    }
    get bitmapPixelCount() {
      if (!engine.BitmapCanvas.is(this[_canvas])) {
        return 0;
      }
      let bitmapCanvas = engine.BitmapCanvas._check(this[_canvas]);
      return bitmapCanvas.bitmapPixelCount;
    }
    applyPaint(oldCanvas) {
      if (dart.test(this.picture.recordingCanvas.hasArbitraryPaint)) {
        this[_applyBitmapPaint](oldCanvas);
      } else {
        this[_applyDomPaint](oldCanvas);
      }
      this[_didApplyPaint].value = true;
    }
    [_applyDomPaint](oldCanvas) {
      engine._recycleCanvas(oldCanvas);
      this[_canvas] = new engine.DomCanvas.new();
      engine.domRenderer.clearDom(this.rootElement);
      this.rootElement[$append](this[_canvas].rootElement);
      this.picture.recordingCanvas.apply(this[_canvas]);
    }
    static _doesCanvasFitBounds(canvas, newBounds) {
      if (!(canvas != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 227, 12, "canvas != null");
      if (!(newBounds != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 228, 12, "newBounds != null");
      let canvasBounds = canvas.bounds;
      if (!(canvasBounds != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/picture.dart", 230, 12, "canvasBounds != null");
      return dart.notNull(canvasBounds.width) >= dart.notNull(newBounds.width) && dart.notNull(canvasBounds.height) >= dart.notNull(newBounds.height);
    }
    [_applyBitmapPaint](oldCanvas) {
      let t5;
      if (engine.BitmapCanvas.is(oldCanvas) && dart.test(engine.PersistedStandardPicture._doesCanvasFitBounds(oldCanvas, this[_optimalLocalCullRect])) && dart.test(oldCanvas.isReusable())) {
        if (false) {
          t5 = engine.DebugCanvasReuseOverlay.instance;
          t5.keptCount = dart.notNull(t5.keptCount) + 1;
        }
        oldCanvas.bounds = this[_optimalLocalCullRect];
        this[_canvas] = oldCanvas;
        this[_canvas].clear();
        this.picture.recordingCanvas.apply(this[_canvas]);
      } else {
        engine._recycleCanvas(oldCanvas);
        engine._paintQueue[$add](new engine._PaintRequest.new({canvasSize: this[_optimalLocalCullRect].size, paintCallback: dart.fn(() => {
            let t5;
            this[_canvas] = this[_findOrCreateCanvas](this[_optimalLocalCullRect]);
            if (false) {
              let bitmapCanvas = engine.BitmapCanvas._check(this[_canvas]);
              t5 = engine._surfaceStatsFor(this);
              t5.paintPixelCount = dart.notNull(t5.paintPixelCount) + dart.notNull(bitmapCanvas.bitmapPixelCount);
            }
            engine.domRenderer.clearDom(this.rootElement);
            this.rootElement[$append](this[_canvas].rootElement);
            this[_canvas].clear();
            this.picture.recordingCanvas.apply(this[_canvas]);
          }, VoidToNull())}));
      }
    }
    [_findOrCreateCanvas](bounds) {
      let t5, t5$, t5$0, t6, t5$1;
      let canvasSize = bounds.size;
      let bestRecycledCanvas = null;
      let lastPixelCount = 1 / 0;
      for (let i = 0; i < dart.notNull(engine._recycledCanvases[$length]); i = i + 1) {
        let candidate = engine._recycledCanvases[$_get](i);
        if (!dart.test(candidate.isReusable())) {
          continue;
        }
        let candidateSize = candidate.size;
        let candidatePixelCount = dart.notNull(candidateSize.width) * dart.notNull(candidateSize.height);
        let fits = engine.PersistedStandardPicture._doesCanvasFitBounds(candidate, bounds);
        let isSmaller = candidatePixelCount < lastPixelCount;
        if (dart.test(fits) && isSmaller) {
          bestRecycledCanvas = candidate;
          lastPixelCount = candidatePixelCount;
          let fitsExactly = candidateSize.width == canvasSize.width && candidateSize.height == canvasSize.height;
          if (fitsExactly) {
            break;
          }
        }
      }
      if (bestRecycledCanvas != null) {
        if (false) {
          t5 = engine._surfaceStatsFor(this);
          t5.reuseCanvasCount = dart.notNull(t5.reuseCanvasCount) + 1;
        }
        engine._recycledCanvases[$remove](bestRecycledCanvas);
        if (false) {
          engine.DebugCanvasReuseOverlay.instance.inRecycleCount = engine._recycledCanvases[$length];
        }
        if (false) {
          t5$ = engine.DebugCanvasReuseOverlay.instance;
          t5$.reusedCount = dart.notNull(t5$.reusedCount) + 1;
        }
        bestRecycledCanvas.bounds = bounds;
        return bestRecycledCanvas;
      }
      if (false) {
        t5$0 = engine.DebugCanvasReuseOverlay.instance;
        t5$0.createdCount = dart.notNull(t5$0.createdCount) + 1;
      }
      let canvas = new engine.BitmapCanvas.new(bounds);
      if (false) {
        t5$1 = engine._surfaceStatsFor(this);
        t6 = t5$1;
        t6.allocateBitmapCanvasCount = dart.notNull(t6.allocateBitmapCanvasCount) + 1;
        t5$1.allocatedBitmapSizeInPixels = dart.notNull(canvas.widthInBitmapPixels) * dart.notNull(canvas.heightInBitmapPixels);
        t5$1;
      }
      return canvas;
    }
  };
  (engine.PersistedStandardPicture.new = function(dx, dy, picture, hints) {
    this[_didApplyPaint] = new (FrameReferenceOfbool()).new(false);
    engine.PersistedStandardPicture.__proto__.new.call(this, dx, dy, picture, hints);
    ;
  }).prototype = engine.PersistedStandardPicture.prototype;
  dart.addTypeTests(engine.PersistedStandardPicture);
  dart.setMethodSignature(engine.PersistedStandardPicture, () => ({
    __proto__: dart.getMethods(engine.PersistedStandardPicture.__proto__),
    matchForUpdate: dart.fnType(core.double, [core.Object]),
    applyPaint: dart.fnType(dart.void, [engine.EngineCanvas]),
    [_applyDomPaint]: dart.fnType(dart.void, [engine.EngineCanvas]),
    [_applyBitmapPaint]: dart.fnType(dart.void, [engine.EngineCanvas]),
    [_findOrCreateCanvas]: dart.fnType(engine.BitmapCanvas, [ui.Rect])
  }));
  dart.setGetterSignature(engine.PersistedStandardPicture, () => ({
    __proto__: dart.getGetters(engine.PersistedStandardPicture.__proto__),
    localTransformInverse: engine.Matrix4,
    bitmapPixelCount: core.int
  }));
  dart.setLibraryUri(engine.PersistedStandardPicture, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedStandardPicture, () => ({
    __proto__: dart.getFields(engine.PersistedStandardPicture.__proto__),
    [_didApplyPaint]: dart.fieldType(engine.FrameReference$(core.bool))
  }));
  const _hostElement = dart.privateName(engine, "_hostElement");
  const _shadowRoot = dart.privateName(engine, "_shadowRoot");
  const PersistedPlatformView_viewId = dart.privateName(engine, "PersistedPlatformView.viewId");
  const PersistedPlatformView_dx = dart.privateName(engine, "PersistedPlatformView.dx");
  const PersistedPlatformView_dy = dart.privateName(engine, "PersistedPlatformView.dy");
  const PersistedPlatformView_width = dart.privateName(engine, "PersistedPlatformView.width");
  const PersistedPlatformView_height = dart.privateName(engine, "PersistedPlatformView.height");
  engine.PersistedPlatformView = class PersistedPlatformView extends engine.PersistedLeafSurface {
    get viewId() {
      return this[viewId$];
    }
    set viewId(value) {
      super.viewId = value;
    }
    get dx() {
      return this[dx$2];
    }
    set dx(value) {
      super.dx = value;
    }
    get dy() {
      return this[dy$2];
    }
    set dy(value) {
      super.dy = value;
    }
    get width() {
      return this[width$1];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$1];
    }
    set height(value) {
      super.height = value;
    }
    createElement() {
      this[_hostElement] = html.HtmlElement._check(this.defaultCreateElement("flt-platform-view"));
      this[_hostElement].style[$pointerEvents] = "auto";
      this[_shadowRoot] = this[_hostElement][$attachShadow](new (IdentityMapOfString$String()).from(["mode", "open"]));
      let _styleReset = html.StyleElement.new();
      _styleReset[$innerHtml] = "      :host {\n        all: initial;\n      }";
      this[_shadowRoot][$append](_styleReset);
      let platformView = engine.platformViewRegistry.getCreatedView(this.viewId);
      if (platformView != null) {
        this[_shadowRoot][$append](platformView);
      } else {
        html.window[$console].warn("No platform view created for id " + dart.str(this.viewId));
      }
      return this[_hostElement];
    }
    get localTransformInverse() {
      return null;
    }
    apply() {
      let t5;
      t5 = this[_hostElement].style;
      t5[$transform] = "translate(" + dart.str(this.dx) + "px, " + dart.str(this.dy) + "px)";
      t5[$width] = dart.str(this.width) + "px";
      t5[$height] = dart.str(this.height) + "px";
      t5;
    }
    matchForUpdate(existingSurface) {
      engine.PersistedPlatformView._check(existingSurface);
      return existingSurface.viewId == this.viewId ? 0.0 : 1.0;
    }
  };
  (engine.PersistedPlatformView.new = function(viewId, dx, dy, width, height) {
    this[_hostElement] = null;
    this[_shadowRoot] = null;
    this[viewId$] = viewId;
    this[dx$2] = dx;
    this[dy$2] = dy;
    this[width$1] = width;
    this[height$1] = height;
    engine.PersistedPlatformView.__proto__.new.call(this);
    ;
  }).prototype = engine.PersistedPlatformView.prototype;
  dart.addTypeTests(engine.PersistedPlatformView);
  const viewId$ = PersistedPlatformView_viewId;
  const dx$2 = PersistedPlatformView_dx;
  const dy$2 = PersistedPlatformView_dy;
  const width$1 = PersistedPlatformView_width;
  const height$1 = PersistedPlatformView_height;
  dart.setMethodSignature(engine.PersistedPlatformView, () => ({
    __proto__: dart.getMethods(engine.PersistedPlatformView.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, []),
    matchForUpdate: dart.fnType(core.double, [core.Object])
  }));
  dart.setGetterSignature(engine.PersistedPlatformView, () => ({
    __proto__: dart.getGetters(engine.PersistedPlatformView.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedPlatformView, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedPlatformView, () => ({
    __proto__: dart.getFields(engine.PersistedPlatformView.__proto__),
    viewId: dart.finalFieldType(core.int),
    dx: dart.finalFieldType(core.double),
    dy: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    [_hostElement]: dart.fieldType(html.HtmlElement),
    [_shadowRoot]: dart.fieldType(html.ShadowRoot)
  }));
  engine.PersistedScene = class PersistedScene extends engine.PersistedContainerSurface {
    recomputeTransformAndClip() {
      let screenWidth = html.window.innerWidth[$toDouble]();
      let screenHeight = html.window.innerHeight[$toDouble]();
      this[_localClipBounds] = new ui.Rect.fromLTRB(0.0, 0.0, screenWidth, screenHeight);
      this[_localTransformInverse] = engine.Matrix4.identity();
      this[_projectedClip] = null;
    }
    get localTransformInverse() {
      return this[_localTransformInverse];
    }
    createElement() {
      return this.defaultCreateElement("flt-scene");
    }
    apply() {
    }
  };
  (engine.PersistedScene.new = function(oldLayer) {
    engine.PersistedScene.__proto__.new.call(this, oldLayer);
    this[_transform$] = engine.Matrix4.identity();
  }).prototype = engine.PersistedScene.prototype;
  dart.addTypeTests(engine.PersistedScene);
  dart.setMethodSignature(engine.PersistedScene, () => ({
    __proto__: dart.getMethods(engine.PersistedScene.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedScene, () => ({
    __proto__: dart.getGetters(engine.PersistedScene.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedScene, "package:flutter_web_ui/src/engine.dart");
  const _is_FrameReference_default = Symbol('_is_FrameReference_default');
  const FrameReference_value = dart.privateName(engine, "FrameReference.value");
  engine.FrameReference$ = dart.generic(V => {
    class FrameReference extends core.Object {
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = V._check(value);
      }
    }
    (FrameReference.new = function(value) {
      if (value === void 0) value = null;
      this[value$] = value;
      engine._frameReferences[$add](this);
    }).prototype = FrameReference.prototype;
    dart.addTypeTests(FrameReference);
    FrameReference.prototype[_is_FrameReference_default] = true;
    const value$ = FrameReference_value;
    dart.setLibraryUri(FrameReference, "package:flutter_web_ui/src/engine.dart");
    dart.setFieldSignature(FrameReference, () => ({
      __proto__: dart.getFields(FrameReference.__proto__),
      value: dart.fieldType(V)
    }));
    return FrameReference;
  });
  engine.FrameReference = engine.FrameReference$();
  dart.addTypeTests(engine.FrameReference, _is_FrameReference_default);
  engine._DebugSurfaceStats = class _DebugSurfaceStats extends core.Object {
    aggregate(oneSurfaceStats) {
      this.retainSurfaceCount = dart.notNull(this.retainSurfaceCount) + dart.notNull(oneSurfaceStats.retainSurfaceCount);
      this.reuseElementCount = dart.notNull(this.reuseElementCount) + dart.notNull(oneSurfaceStats.reuseElementCount);
      this.paintCount = dart.notNull(this.paintCount) + dart.notNull(oneSurfaceStats.paintCount);
      this.paintPixelCount = dart.notNull(this.paintPixelCount) + dart.notNull(oneSurfaceStats.paintPixelCount);
      this.reuseCanvasCount = dart.notNull(this.reuseCanvasCount) + dart.notNull(oneSurfaceStats.reuseCanvasCount);
      this.allocateBitmapCanvasCount = dart.notNull(this.allocateBitmapCanvasCount) + dart.notNull(oneSurfaceStats.allocateBitmapCanvasCount);
      this.allocatedBitmapSizeInPixels = dart.notNull(this.allocatedBitmapSizeInPixels) + dart.notNull(oneSurfaceStats.allocatedBitmapSizeInPixels);
      this.allocatedDomNodeCount = dart.notNull(this.allocatedDomNodeCount) + dart.notNull(oneSurfaceStats.allocatedDomNodeCount);
    }
  };
  (engine._DebugSurfaceStats.new = function(surface) {
    this.retainSurfaceCount = 0;
    this.reuseElementCount = 0;
    this.paintCount = 0;
    this.paintPixelCount = 0;
    this.reuseCanvasCount = 0;
    this.allocateBitmapCanvasCount = 0;
    this.allocatedBitmapSizeInPixels = 0;
    this.allocatedDomNodeCount = 0;
    this.surface = surface;
    ;
  }).prototype = engine._DebugSurfaceStats.prototype;
  dart.addTypeTests(engine._DebugSurfaceStats);
  dart.setMethodSignature(engine._DebugSurfaceStats, () => ({
    __proto__: dart.getMethods(engine._DebugSurfaceStats.__proto__),
    aggregate: dart.fnType(dart.void, [engine._DebugSurfaceStats])
  }));
  dart.setLibraryUri(engine._DebugSurfaceStats, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._DebugSurfaceStats, () => ({
    __proto__: dart.getFields(engine._DebugSurfaceStats.__proto__),
    surface: dart.finalFieldType(engine.PersistedSurface),
    retainSurfaceCount: dart.fieldType(core.int),
    reuseElementCount: dart.fieldType(core.int),
    paintCount: dart.fieldType(core.int),
    paintPixelCount: dart.fieldType(core.int),
    reuseCanvasCount: dart.fieldType(core.int),
    allocateBitmapCanvasCount: dart.fieldType(core.int),
    allocatedBitmapSizeInPixels: dart.fieldType(core.int),
    allocatedDomNodeCount: dart.fieldType(core.int)
  }));
  let C97;
  let C98;
  let C99;
  let C100;
  let C101;
  let C102;
  engine.PersistedSurfaceState = class PersistedSurfaceState extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.PersistedSurfaceState.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.PersistedSurfaceState.prototype;
  dart.addTypeTests(engine.PersistedSurfaceState);
  dart.setLibraryUri(engine.PersistedSurfaceState, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedSurfaceState, () => ({
    __proto__: dart.getFields(engine.PersistedSurfaceState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.PersistedSurfaceState, ['toString']);
  engine.PersistedSurfaceState.created = C97 || CT.C97;
  engine.PersistedSurfaceState.active = C98 || CT.C98;
  engine.PersistedSurfaceState.pendingRetention = C99 || CT.C99;
  engine.PersistedSurfaceState.pendingUpdate = C100 || CT.C100;
  engine.PersistedSurfaceState.released = C101 || CT.C101;
  engine.PersistedSurfaceState.values = C102 || CT.C102;
  engine._PersistedSurfaceMatch = class _PersistedSurfaceMatch extends core.Object {};
  (engine._PersistedSurfaceMatch.new = function(opts) {
    let newChild = opts && 'newChild' in opts ? opts.newChild : null;
    let oldChildIndex = opts && 'oldChildIndex' in opts ? opts.oldChildIndex : null;
    let matchQuality = opts && 'matchQuality' in opts ? opts.matchQuality : null;
    this.newChild = newChild;
    this.oldChildIndex = oldChildIndex;
    this.matchQuality = matchQuality;
    ;
  }).prototype = engine._PersistedSurfaceMatch.prototype;
  dart.addTypeTests(engine._PersistedSurfaceMatch);
  dart.setLibraryUri(engine._PersistedSurfaceMatch, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._PersistedSurfaceMatch, () => ({
    __proto__: dart.getFields(engine._PersistedSurfaceMatch.__proto__),
    newChild: dart.finalFieldType(engine.PersistedSurface),
    oldChildIndex: dart.finalFieldType(core.int),
    matchQuality: dart.finalFieldType(core.double)
  }));
  const PersistedTransform_matrix4 = dart.privateName(engine, "PersistedTransform.matrix4");
  engine.PersistedTransform = class PersistedTransform extends engine.PersistedContainerSurface {
    get matrix4() {
      return this[matrix4$3];
    }
    set matrix4(value) {
      super.matrix4 = value;
    }
    recomputeTransformAndClip() {
      this[_transform$] = this.parent[_transform$].multiplied(new engine.Matrix4.fromFloat64List(this.matrix4));
      this[_localTransformInverse] = null;
      this[_projectedClip] = null;
    }
    get localTransformInverse() {
      this[_localTransformInverse] == null ? this[_localTransformInverse] = engine.Matrix4.tryInvert(new engine.Matrix4.fromFloat64List(this.matrix4)) : null;
      return this[_localTransformInverse];
    }
    createElement() {
      let t5;
      t5 = this.defaultCreateElement("flt-transform");
      t5.style[$transformOrigin] = "0 0 0";
      return t5;
    }
    apply() {
      this.rootElement.style[$transform] = engine.float64ListToCssTransform(this.matrix4);
    }
    update(oldSurface) {
      engine.PersistedTransform._check(oldSurface);
      super.update(oldSurface);
      if (oldSurface.matrix4 == this.matrix4) {
        return;
      }
      let matrixChanged = false;
      for (let i = 0; i < dart.notNull(this.matrix4[$length]); i = i + 1) {
        if (this.matrix4[$_get](i) != oldSurface.matrix4[$_get](i)) {
          matrixChanged = true;
          break;
        }
      }
      if (matrixChanged) {
        this.apply();
      }
    }
  };
  (engine.PersistedTransform.new = function(oldLayer, matrix4) {
    this[matrix4$3] = matrix4;
    engine.PersistedTransform.__proto__.new.call(this, oldLayer);
    ;
  }).prototype = engine.PersistedTransform.prototype;
  dart.addTypeTests(engine.PersistedTransform);
  const matrix4$3 = PersistedTransform_matrix4;
  engine.PersistedTransform[dart.implements] = () => [ui.TransformEngineLayer];
  dart.setMethodSignature(engine.PersistedTransform, () => ({
    __proto__: dart.getMethods(engine.PersistedTransform.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(engine.PersistedTransform, () => ({
    __proto__: dart.getGetters(engine.PersistedTransform.__proto__),
    localTransformInverse: engine.Matrix4
  }));
  dart.setLibraryUri(engine.PersistedTransform, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistedTransform, () => ({
    __proto__: dart.getFields(engine.PersistedTransform.__proto__),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  const _HistoryEntry_state = dart.privateName(engine, "_HistoryEntry.state");
  const _HistoryEntry_title = dart.privateName(engine, "_HistoryEntry.title");
  const _HistoryEntry_url = dart.privateName(engine, "_HistoryEntry.url");
  engine._HistoryEntry = class _HistoryEntry extends core.Object {
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get url() {
      return this[url$0];
    }
    set url(value) {
      super.url = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(state:" + dart.str(this.state) + ", title:\"" + dart.str(this.title) + "\", url:\"" + dart.str(this.url) + "\")";
    }
  };
  (engine._HistoryEntry.new = function(state, title, url) {
    this[state$] = state;
    this[title$] = title;
    this[url$0] = url;
    ;
  }).prototype = engine._HistoryEntry.prototype;
  dart.addTypeTests(engine._HistoryEntry);
  const state$ = _HistoryEntry_state;
  const title$ = _HistoryEntry_title;
  const url$0 = _HistoryEntry_url;
  dart.setLibraryUri(engine._HistoryEntry, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._HistoryEntry, () => ({
    __proto__: dart.getFields(engine._HistoryEntry.__proto__),
    state: dart.finalFieldType(dart.dynamic),
    title: dart.finalFieldType(core.String),
    url: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine._HistoryEntry, ['toString']);
  const _currentEntryIndex = dart.privateName(engine, "_currentEntryIndex");
  const _firePopStateEvent = dart.privateName(engine, "_firePopStateEvent");
  const _nextEventLoop = dart.privateName(engine, "_nextEventLoop");
  const TestLocationStrategy_history = dart.privateName(engine, "TestLocationStrategy.history");
  const TestLocationStrategy_listeners = dart.privateName(engine, "TestLocationStrategy.listeners");
  engine.TestLocationStrategy = class TestLocationStrategy extends engine.LocationStrategy {
    get history() {
      return this[history];
    }
    set history(value) {
      super.history = value;
    }
    get listeners() {
      return this[listeners];
    }
    set listeners(value) {
      super.listeners = value;
    }
    get path() {
      return engine.ensureLeading(this.currentEntry.url, "/");
    }
    get currentEntry() {
      if (!dart.test(this.withinAppHistory)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/test_embedding.dart", 41, 12, "withinAppHistory");
      return this.history[$_get](this[_currentEntryIndex]);
    }
    set currentEntry(entry) {
      if (!dart.test(this.withinAppHistory)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/test_embedding.dart", 46, 12, "withinAppHistory");
      this.history[$_set](this[_currentEntryIndex], entry);
    }
    get withinAppHistory() {
      return dart.notNull(this[_currentEntryIndex]) >= 0;
    }
    pushState(state, title, url) {
      if (!dart.test(this.withinAppHistory)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/test_embedding.dart", 57, 12, "withinAppHistory");
      this[_currentEntryIndex] = dart.notNull(this[_currentEntryIndex]) + 1;
      this.history[$removeRange](this[_currentEntryIndex], this.history[$length]);
      this.history[$add](new engine._HistoryEntry.new(state, title, url));
      if (false) {
        core.print(dart.str(this[$runtimeType]) + ".pushState(...) -> " + dart.str(this));
      }
    }
    replaceState(state, title, url) {
      if (!dart.test(this.withinAppHistory)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/test_embedding.dart", 74, 12, "withinAppHistory");
      this.currentEntry = new engine._HistoryEntry.new(state, title, url);
      if (false) {
        core.print(dart.str(this[$runtimeType]) + ".replaceState(...) -> " + dart.str(this));
      }
    }
    simulateUserTypingUrl(url) {
      if (!dart.test(this.withinAppHistory)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/test_embedding.dart", 85, 12, "withinAppHistory");
      return this[_nextEventLoop](dart.fn(() => {
        this.pushState(null, "", url);
        this[_firePopStateEvent]();
      }, VoidToNull()));
    }
    back() {
      if (!dart.test(this.withinAppHistory)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/test_embedding.dart", 94, 12, "withinAppHistory");
      return this[_nextEventLoop](dart.fn(() => {
        this[_currentEntryIndex] = dart.notNull(this[_currentEntryIndex]) - 1;
        if (dart.test(this.withinAppHistory)) {
          this[_firePopStateEvent]();
        }
        if (false) {
          core.print(dart.str(this[$runtimeType]) + ".back() -> " + dart.str(this));
        }
      }, VoidToNull()));
    }
    onPopState(fn) {
      this.listeners[$add](fn);
      return dart.fn(() => {
        async.scheduleMicrotask(dart.fn(() => this.listeners[$remove](fn), VoidTobool()));
      }, VoidToNull());
    }
    [_nextEventLoop](callback) {
      return FutureOfvoid().delayed(core.Duration.zero).then(dart.void, dart.fn(_ => callback(), voidTovoid()));
    }
    [_firePopStateEvent]() {
      if (!dart.test(this.withinAppHistory)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/test_embedding.dart", 131, 12, "withinAppHistory");
      let event = html.PopStateEvent.new("popstate", new (IdentityMapOfString$dynamic()).from(["state", this.currentEntry.state]));
      for (let i = 0; i < dart.notNull(this.listeners[$length]); i = i + 1) {
        this.listeners[$_get](i)(event);
      }
      if (false) {
        core.print(dart.str(this[$runtimeType]) + ": fired popstate event " + dart.str(event));
      }
    }
    prepareExternalUrl(internalUrl) {
      return internalUrl;
    }
    toString() {
      let lines = ListOfString().new(this.history[$length]);
      for (let i = 0; i < dart.notNull(this.history[$length]); i = i + 1) {
        let entry = this.history[$_get](i);
        lines[$_set](i, this[_currentEntryIndex] === i ? "* " + dart.str(entry) : "  " + dart.str(entry));
      }
      return dart.str(this[$runtimeType]) + ": [\n" + dart.str(lines[$join]("\n")) + "\n]";
    }
  };
  (engine.TestLocationStrategy.new = function(defaultRouteName) {
    if (defaultRouteName === void 0) defaultRouteName = "";
    this[listeners] = JSArrayOfEventTodynamic().of([]);
    this[_currentEntryIndex] = 0;
    this[history] = JSArrayOf_HistoryEntry().of([new engine._HistoryEntry.new(null, null, defaultRouteName)]);
    engine.TestLocationStrategy.__proto__.new.call(this);
    ;
  }).prototype = engine.TestLocationStrategy.prototype;
  dart.addTypeTests(engine.TestLocationStrategy);
  const history = TestLocationStrategy_history;
  const listeners = TestLocationStrategy_listeners;
  dart.setMethodSignature(engine.TestLocationStrategy, () => ({
    __proto__: dart.getMethods(engine.TestLocationStrategy.__proto__),
    pushState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    replaceState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    simulateUserTypingUrl: dart.fnType(async.Future$(dart.void), [core.String]),
    back: dart.fnType(async.Future$(dart.void), []),
    onPopState: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.dynamic, [html.Event])]),
    [_nextEventLoop]: dart.fnType(async.Future$(dart.void), [dart.fnType(dart.void, [])]),
    [_firePopStateEvent]: dart.fnType(dart.void, []),
    prepareExternalUrl: dart.fnType(core.String, [core.String])
  }));
  dart.setGetterSignature(engine.TestLocationStrategy, () => ({
    __proto__: dart.getGetters(engine.TestLocationStrategy.__proto__),
    path: core.String,
    currentEntry: engine._HistoryEntry,
    withinAppHistory: core.bool
  }));
  dart.setSetterSignature(engine.TestLocationStrategy, () => ({
    __proto__: dart.getSetters(engine.TestLocationStrategy.__proto__),
    currentEntry: engine._HistoryEntry
  }));
  dart.setLibraryUri(engine.TestLocationStrategy, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.TestLocationStrategy, () => ({
    __proto__: dart.getFields(engine.TestLocationStrategy.__proto__),
    [_currentEntryIndex]: dart.fieldType(core.int),
    history: dart.finalFieldType(core.List$(engine._HistoryEntry)),
    listeners: dart.finalFieldType(core.List$(dart.fnType(dart.dynamic, [html.Event])))
  }));
  dart.defineExtensionMethods(engine.TestLocationStrategy, ['toString']);
  const _assetFontManager = dart.privateName(engine, "_assetFontManager");
  const _testFontManager = dart.privateName(engine, "_testFontManager");
  let C103;
  engine.FontCollection = class FontCollection extends core.Object {
    registerFonts(assetManager) {
      return async.async(dart.void, (function* registerFonts() {
        let byteData = null;
        try {
          byteData = (yield assetManager.load("FontManifest.json"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (engine.AssetManagerException.is(e)) {
            if (e.httpStatus === 404) {
              html.window[$console].warn("Font manifest does not exist at `" + dart.str(e.url) + "` – ignoring.");
              return;
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
        if (byteData == null) {
          dart.throw(new core.AssertionError.new("There was a problem trying to load FontManifest.json"));
        }
        let fontManifest = core.List._check(convert.json.decode(convert.utf8.decode(byteData[$buffer][$asUint8List]())));
        if (fontManifest == null) {
          dart.throw(new core.AssertionError.new("There was a problem trying to load FontManifest.json"));
        }
        if (dart.test(engine.supportsFontLoadingApi)) {
          this[_assetFontManager] = engine._FontManager.new();
        } else {
          this[_assetFontManager] = new engine._PolyfillFontManager.new();
        }
        if (!dart.equals(engine.browserEngine, engine.BrowserEngine.blink)) {
          this[_assetFontManager].registerAsset("Roboto", "url(" + dart.str(engine._robotoFontUrl) + ")", new (IdentityMapOfString$String()).new());
        }
        for (let t6 of fontManifest) {
          let fontFamily = MapOfString$dynamic()._check(t6);
          let family = core.String._check(fontFamily[$_get]("family"));
          let fontAssets = core.List._check(fontFamily[$_get]("fonts"));
          for (let fontAssetItem of fontAssets) {
            let fontAsset = MapOfString$dynamic()._check(fontAssetItem);
            let asset = core.String._check(fontAsset[$_get]("asset"));
            let descriptors = new (IdentityMapOfString$String()).new();
            for (let descriptor of fontAsset[$keys]) {
              if (descriptor !== "asset") {
                descriptors[$_set](descriptor, dart.str(fontAsset[$_get](descriptor)));
              }
            }
            this[_assetFontManager].registerAsset(family, "url(" + dart.str(assetManager.getAssetUrl(asset)) + ")", descriptors);
          }
        }
      }).bind(this));
    }
    debugRegisterTestFonts() {
      this[_testFontManager] = engine._FontManager.new();
      this[_testFontManager].registerAsset("Ahem", "url(" + dart.str(engine._testFontUrl) + ")", C103 || CT.C103);
    }
    ensureFontsLoaded() {
      return async.async(dart.void, (function* ensureFontsLoaded() {
        let t7, t7$;
        yield (t7 = this[_assetFontManager], t7 == null ? null : t7.ensureFontsLoaded());
        yield (t7$ = this[_testFontManager], t7$ == null ? null : t7$.ensureFontsLoaded());
      }).bind(this));
    }
    clear() {
      this[_assetFontManager] = null;
      this[_testFontManager] = null;
      if (dart.test(engine.supportsFontLoadingApi)) {
        html.document.fonts.clear();
      }
    }
  };
  (engine.FontCollection.new = function() {
    this[_assetFontManager] = null;
    this[_testFontManager] = null;
    ;
  }).prototype = engine.FontCollection.prototype;
  dart.addTypeTests(engine.FontCollection);
  dart.setMethodSignature(engine.FontCollection, () => ({
    __proto__: dart.getMethods(engine.FontCollection.__proto__),
    registerFonts: dart.fnType(async.Future$(dart.void), [engine.AssetManager]),
    debugRegisterTestFonts: dart.fnType(dart.void, []),
    ensureFontsLoaded: dart.fnType(async.Future$(dart.void), []),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(engine.FontCollection, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.FontCollection, () => ({
    __proto__: dart.getFields(engine.FontCollection.__proto__),
    [_assetFontManager]: dart.fieldType(engine._FontManager),
    [_testFontManager]: dart.fieldType(engine._FontManager)
  }));
  engine._FontManager = class _FontManager extends core.Object {
    static new() {
      if (dart.test(engine.supportsFontLoadingApi)) {
        return new engine._FontManager.__();
      } else {
        return new engine._PolyfillFontManager.new();
      }
    }
    registerAsset(family, asset, descriptors) {
      if (dart.equals(engine.browserEngine, engine.BrowserEngine.webkit)) {
        family = "'" + dart.str(family) + "'";
      }
      try {
        let fontFace = html.FontFace.new(family, asset, descriptors);
        this[_fontLoadingFutures][$add](fontFace[$load]().then(dart.void, dart.fn(_ => html.document.fonts.add(fontFace), FontFaceToFontFaceSet()), {onError: dart.fn(e => {
            html.window[$console].warn("Error while trying to load font family \"" + dart.str(family) + "\":\n" + dart.str(e));
            return null;
          }, dynamicToNull())}));
      } catch (e$) {
        let e = dart.getThrown(e$);
        html.window[$console].warn("Error while loading font family \"" + dart.str(family) + "\":\n" + dart.str(e));
      }
    }
    ensureFontsLoaded() {
      return async.Future.wait(dart.void, this[_fontLoadingFutures]);
    }
  };
  (engine._FontManager.__ = function() {
    this[_fontLoadingFutures] = JSArrayOfFutureOfvoid().of([]);
    ;
  }).prototype = engine._FontManager.prototype;
  dart.addTypeTests(engine._FontManager);
  dart.setMethodSignature(engine._FontManager, () => ({
    __proto__: dart.getMethods(engine._FontManager.__proto__),
    registerAsset: dart.fnType(dart.void, [core.String, core.String, core.Map$(core.String, core.String)]),
    ensureFontsLoaded: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(engine._FontManager, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._FontManager, () => ({
    __proto__: dart.getFields(engine._FontManager.__proto__),
    [_fontLoadingFutures]: dart.finalFieldType(core.List$(async.Future$(dart.void)))
  }));
  let C104;
  let C105;
  engine._PolyfillFontManager = class _PolyfillFontManager extends engine._FontManager {
    registerAsset(family, asset, descriptors) {
      let paragraph = html.ParagraphElement.new();
      paragraph.style[$position] = "absolute";
      paragraph.style[$visibility] = "hidden";
      paragraph.style[$fontSize] = "72px";
      paragraph.style[$fontFamily] = "sans-serif";
      if (descriptors[$_get]("style") != null) {
        paragraph.style[$fontStyle] = descriptors[$_get]("style");
      }
      if (descriptors[$_get]("weight") != null) {
        paragraph.style[$fontWeight] = descriptors[$_get]("weight");
      }
      paragraph[$text] = "giItT1WQy@!-/#";
      html.document.body[$append](paragraph);
      let sansSerifWidth = paragraph[$offsetWidth];
      paragraph.style[$fontFamily] = "'" + dart.str(family) + "', sans-serif";
      let completer = CompleterOfvoid().new();
      let _fontLoadStart = null;
      function _watchWidth() {
        if (paragraph[$offsetWidth] != sansSerifWidth) {
          paragraph[$remove]();
          completer.complete();
        } else {
          if (dart.test(new core.DateTime.now().difference(_fontLoadStart)['>'](engine._PolyfillFontManager._fontLoadTimeout))) {
            completer.completeError(core.Exception.new("Timed out trying to load font: " + dart.str(family)));
          } else {
            async.Timer.new(engine._PolyfillFontManager._fontLoadRetryDuration, _watchWidth);
          }
        }
      }
      dart.fn(_watchWidth, VoidTovoid());
      let fontStyleMap = new (IdentityMapOfString$String()).new();
      fontStyleMap[$_set]("font-family", "'" + dart.str(family) + "'");
      fontStyleMap[$_set]("src", asset);
      if (descriptors[$_get]("style") != null) {
        fontStyleMap[$_set]("font-style", descriptors[$_get]("style"));
      }
      if (descriptors[$_get]("weight") != null) {
        fontStyleMap[$_set]("font-weight", descriptors[$_get]("weight"));
      }
      let fontFaceDeclaration = fontStyleMap[$keys][$map](core.String, dart.fn(name => dart.str(name) + ": " + dart.str(fontStyleMap[$_get](name)) + ";", StringToString()))[$join](" ");
      let fontLoadStyle = html.StyleElement.new();
      fontLoadStyle.type = "text/css";
      fontLoadStyle[$innerHtml] = "@font-face { " + dart.str(fontFaceDeclaration) + " }";
      html.document[$head][$append](fontLoadStyle);
      if (family[$toLowerCase]()[$contains]("icon")) {
        paragraph[$remove]();
        return;
      }
      _fontLoadStart = new core.DateTime.now();
      _watchWidth();
      this[_fontLoadingFutures][$add](completer.future);
    }
  };
  (engine._PolyfillFontManager.new = function() {
    engine._PolyfillFontManager.__proto__.__.call(this);
    ;
  }).prototype = engine._PolyfillFontManager.prototype;
  dart.addTypeTests(engine._PolyfillFontManager);
  dart.setLibraryUri(engine._PolyfillFontManager, "package:flutter_web_ui/src/engine.dart");
  dart.defineLazy(engine._PolyfillFontManager, {
    /*engine._PolyfillFontManager._testString*/get _testString() {
      return "giItT1WQy@!-/#";
    },
    /*engine._PolyfillFontManager._fontLoadTimeout*/get _fontLoadTimeout() {
      return C104 || CT.C104;
    },
    /*engine._PolyfillFontManager._fontLoadRetryDuration*/get _fontLoadRetryDuration() {
      return C105 || CT.C105;
    }
  });
  let C106;
  let C107;
  let C108;
  let C109;
  engine.LineBreakType = class LineBreakType extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.LineBreakType.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.LineBreakType.prototype;
  dart.addTypeTests(engine.LineBreakType);
  dart.setLibraryUri(engine.LineBreakType, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.LineBreakType, () => ({
    __proto__: dart.getFields(engine.LineBreakType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.LineBreakType, ['toString']);
  engine.LineBreakType.opportunity = C106 || CT.C106;
  engine.LineBreakType.mandatory = C107 || CT.C107;
  engine.LineBreakType.endOfText = C108 || CT.C108;
  engine.LineBreakType.values = C109 || CT.C109;
  engine.CharCode = class CharCode extends core.Object {};
  (engine.CharCode.new = function() {
    ;
  }).prototype = engine.CharCode.prototype;
  dart.addTypeTests(engine.CharCode);
  dart.setLibraryUri(engine.CharCode, "package:flutter_web_ui/src/engine.dart");
  dart.defineLazy(engine.CharCode, {
    /*engine.CharCode.lf*/get lf() {
      return 10;
    },
    /*engine.CharCode.bk1*/get bk1() {
      return 11;
    },
    /*engine.CharCode.bk2*/get bk2() {
      return 12;
    },
    /*engine.CharCode.cr*/get cr() {
      return 13;
    },
    /*engine.CharCode.nl*/get nl() {
      return 133;
    },
    /*engine.CharCode.tab*/get tab() {
      return 9;
    },
    /*engine.CharCode.space*/get space() {
      return 32;
    },
    /*engine.CharCode.hyphen*/get hyphen() {
      return 45;
    }
  });
  const LineBreakResult_index = dart.privateName(engine, "LineBreakResult.index");
  const LineBreakResult_type = dart.privateName(engine, "LineBreakResult.type");
  engine.LineBreakResult = class LineBreakResult extends core.Object {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get type() {
      return this[type$0];
    }
    set type(value) {
      super.type = value;
    }
  };
  (engine.LineBreakResult.new = function(index, type) {
    this[index$] = index;
    this[type$0] = type;
    ;
  }).prototype = engine.LineBreakResult.prototype;
  dart.addTypeTests(engine.LineBreakResult);
  const index$ = LineBreakResult_index;
  const type$0 = LineBreakResult_type;
  dart.setLibraryUri(engine.LineBreakResult, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.LineBreakResult, () => ({
    __proto__: dart.getFields(engine.LineBreakResult.__proto__),
    index: dart.finalFieldType(core.int),
    type: dart.finalFieldType(engine.LineBreakType)
  }));
  const _rulerHost = dart.privateName(engine, "_rulerHost");
  const _rulers = dart.privateName(engine, "_rulers");
  const _rulerCacheCleanupScheduled = dart.privateName(engine, "_rulerCacheCleanupScheduled");
  const _scheduleRulerCacheCleanup = dart.privateName(engine, "_scheduleRulerCacheCleanup");
  const _evictAllRulers = dart.privateName(engine, "_evictAllRulers");
  const RulerManager_rulerCacheCapacity = dart.privateName(engine, "RulerManager.rulerCacheCapacity");
  engine.RulerManager = class RulerManager extends core.Object {
    get rulerCacheCapacity() {
      return this[rulerCacheCapacity$];
    }
    set rulerCacheCapacity(value) {
      super.rulerCacheCapacity = value;
    }
    get rulers() {
      return this[_rulers];
    }
    [_scheduleRulerCacheCleanup]() {
      if (!dart.test(this[_rulerCacheCleanupScheduled])) {
        this[_rulerCacheCleanupScheduled] = true;
        async.scheduleMicrotask(dart.fn(() => {
          this[_rulerCacheCleanupScheduled] = false;
          this.cleanUpRulerCache();
        }, VoidToNull()));
      }
    }
    dispose() {
      let t8;
      t8 = this[_rulerHost];
      t8 == null ? null : t8[$remove]();
    }
    [_evictAllRulers]() {
      this[_rulers][$forEach](dart.fn((style, ruler) => {
        ruler.dispose();
      }, ParagraphGeometricStyleAndParagraphRulerToNull()));
      this[_rulers] = new (LinkedMapOfParagraphGeometricStyle$ParagraphRuler()).new();
    }
    cleanUpRulerCache() {
      if (dart.test(engine.window.physicalSize.isEmpty)) {
        this[_evictAllRulers]();
        return;
      }
      if (dart.notNull(this[_rulers][$length]) > dart.notNull(this.rulerCacheCapacity)) {
        let sortedByUsage = this[_rulers][$values][$toList]();
        sortedByUsage[$sort](dart.fn((a, b) => dart.notNull(b.hitCount) - dart.notNull(a.hitCount), ParagraphRulerAndParagraphRulerToint()));
        this[_rulers] = new (LinkedMapOfParagraphGeometricStyle$ParagraphRuler()).new();
        for (let i = 0; i < dart.notNull(sortedByUsage[$length]); i = i + 1) {
          let ruler = sortedByUsage[$_get](i);
          ruler.resetHitCount();
          if (i < dart.notNull(this.rulerCacheCapacity)) {
            this[_rulers][$_set](ruler.style, ruler);
          } else {
            ruler.dispose();
          }
        }
      }
    }
    addHostElement(element) {
      this[_rulerHost][$append](element);
    }
    findOrCreateRuler(style) {
      let t10, t9, t8;
      let ruler = this[_rulers][$_get](style);
      if (ruler == null) {
        if (dart.test(engine.assertionsEnabled)) {
          engine.domRenderer.debugRulerCacheMiss();
        }
        ruler = (t8 = this[_rulers], t9 = style, t10 = new engine.ParagraphRuler.new(style, this), t8[$_set](t9, t10), t10);
        this[_scheduleRulerCacheCleanup]();
      } else {
        if (dart.test(engine.assertionsEnabled)) {
          engine.domRenderer.debugRulerCacheHit();
        }
      }
      ruler.hit();
      return ruler;
    }
  };
  (engine.RulerManager.new = function(opts) {
    let t8;
    let rulerCacheCapacity = opts && 'rulerCacheCapacity' in opts ? opts.rulerCacheCapacity : null;
    this[_rulerHost] = html.Element.tag("flt-ruler-host");
    this[_rulers] = new (LinkedMapOfParagraphGeometricStyle$ParagraphRuler()).new();
    this[_rulerCacheCleanupScheduled] = false;
    this[rulerCacheCapacity$] = rulerCacheCapacity;
    t8 = this[_rulerHost].style;
    t8[$position] = "fixed";
    t8[$visibility] = "hidden";
    t8[$overflow] = "hidden";
    t8[$top] = "0";
    t8[$left] = "0";
    t8[$width] = "0";
    t8[$height] = "0";
    t8;
    html.document.body[$append](this[_rulerHost]);
    engine.registerHotRestartListener(dart.bind(this, 'dispose'));
  }).prototype = engine.RulerManager.prototype;
  dart.addTypeTests(engine.RulerManager);
  const rulerCacheCapacity$ = RulerManager_rulerCacheCapacity;
  dart.setMethodSignature(engine.RulerManager, () => ({
    __proto__: dart.getMethods(engine.RulerManager.__proto__),
    [_scheduleRulerCacheCleanup]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, []),
    [_evictAllRulers]: dart.fnType(dart.void, []),
    cleanUpRulerCache: dart.fnType(dart.void, []),
    addHostElement: dart.fnType(dart.void, [html.DivElement]),
    findOrCreateRuler: dart.fnType(engine.ParagraphRuler, [engine.ParagraphGeometricStyle])
  }));
  dart.setGetterSignature(engine.RulerManager, () => ({
    __proto__: dart.getGetters(engine.RulerManager.__proto__),
    rulers: core.Map$(engine.ParagraphGeometricStyle, engine.ParagraphRuler)
  }));
  dart.setLibraryUri(engine.RulerManager, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.RulerManager, () => ({
    __proto__: dart.getFields(engine.RulerManager.__proto__),
    rulerCacheCapacity: dart.finalFieldType(core.int),
    [_rulerHost]: dart.finalFieldType(html.Element),
    [_rulers]: dart.fieldType(core.Map$(engine.ParagraphGeometricStyle, engine.ParagraphRuler)),
    [_rulerCacheCleanupScheduled]: dart.fieldType(core.bool)
  }));
  const _doMeasure = dart.privateName(engine, "_doMeasure");
  engine.TextMeasurementService = class TextMeasurementService extends core.Object {
    static initialize(opts) {
      let rulerCacheCapacity = opts && 'rulerCacheCapacity' in opts ? opts.rulerCacheCapacity : null;
      engine.TextMeasurementService.clearCache();
      engine.TextMeasurementService.rulerManager = new engine.RulerManager.new({rulerCacheCapacity: rulerCacheCapacity});
    }
    static get domInstance() {
      return engine.DomTextMeasurementService.instance;
    }
    static get canvasInstance() {
      return engine.CanvasTextMeasurementService.instance;
    }
    static forParagraph(paragraph) {
      if (!dart.test(engine.window.physicalSize.isEmpty) && dart.test(engine.TextMeasurementService.enableExperimentalCanvasImplementation) && dart.test(engine.TextMeasurementService._canUseCanvasMeasurement(engine.EngineParagraph._check(paragraph)))) {
        return engine.TextMeasurementService.canvasInstance;
      }
      return engine.TextMeasurementService.domInstance;
    }
    static clearCache() {
      let t8;
      t8 = engine.TextMeasurementService.rulerManager;
      t8 == null ? null : t8.dispose();
      engine.TextMeasurementService.rulerManager = null;
    }
    static _canUseCanvasMeasurement(paragraph) {
      let style = paragraph[_geometricStyle];
      return paragraph[_plainText] != null && style.decoration == null && style.wordSpacing == null;
    }
    measure(paragraph, constraints) {
      if (!(engine.TextMeasurementService.rulerManager != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 231, 12, "rulerManager != null");
      let style = paragraph[_geometricStyle];
      let ruler = engine.TextMeasurementService.rulerManager.findOrCreateRuler(style);
      if (dart.test(engine.assertionsEnabled)) {
        if (paragraph[_plainText] == null) {
          engine.domRenderer.debugRichTextLayout();
        } else {
          engine.domRenderer.debugPlainTextLayout();
        }
      }
      let result = ruler.cacheLookup(paragraph, constraints);
      if (result != null) {
        return result;
      }
      result = this[_doMeasure](paragraph, constraints, ruler);
      ruler.cacheMeasurement(paragraph, result);
      return result;
    }
    measureBoxesForRange(paragraph, constraints, opts) {
      let start = opts && 'start' in opts ? opts.start : null;
      let end = opts && 'end' in opts ? opts.end : null;
      let alignOffset = opts && 'alignOffset' in opts ? opts.alignOffset : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let style = paragraph[_geometricStyle];
      let ruler = engine.TextMeasurementService.rulerManager.findOrCreateRuler(style);
      return ruler.measureBoxesForRange(paragraph[_plainText], constraints, {start: start, end: end, alignOffset: alignOffset, textDirection: textDirection});
    }
  };
  (engine.TextMeasurementService.new = function() {
    ;
  }).prototype = engine.TextMeasurementService.prototype;
  dart.addTypeTests(engine.TextMeasurementService);
  dart.setMethodSignature(engine.TextMeasurementService, () => ({
    __proto__: dart.getMethods(engine.TextMeasurementService.__proto__),
    measure: dart.fnType(engine.MeasurementResult, [engine.EngineParagraph, ui.ParagraphConstraints]),
    measureBoxesForRange: dart.fnType(core.List$(ui.TextBox), [engine.EngineParagraph, ui.ParagraphConstraints], {alignOffset: core.double, end: core.int, start: core.int, textDirection: ui.TextDirection})
  }));
  dart.setLibraryUri(engine.TextMeasurementService, "package:flutter_web_ui/src/engine.dart");
  dart.defineLazy(engine.TextMeasurementService, {
    /*engine.TextMeasurementService.rulerManager*/get rulerManager() {
      return null;
    },
    set rulerManager(_) {},
    /*engine.TextMeasurementService.enableExperimentalCanvasImplementation*/get enableExperimentalCanvasImplementation() {
      return false;
    },
    set enableExperimentalCanvasImplementation(_) {}
  });
  const _measureSingleLineParagraph = dart.privateName(engine, "_measureSingleLineParagraph");
  const _measureMultiLineParagraph = dart.privateName(engine, "_measureMultiLineParagraph");
  const _cloneWithText = dart.privateName(engine, "_cloneWithText");
  engine.DomTextMeasurementService = class DomTextMeasurementService extends engine.TextMeasurementService {
    static get instance() {
      let t8;
      t8 = engine.DomTextMeasurementService._instance;
      return t8 == null ? engine.DomTextMeasurementService._instance = new engine.DomTextMeasurementService.new() : t8;
    }
    [_doMeasure](paragraph, constraints, ruler) {
      let t8, t8$;
      ruler.willMeasure(paragraph);
      let plainText = paragraph[_plainText];
      ruler.measureAll(constraints);
      let result = null;
      let hasNewline = (t8$ = (t8 = plainText, t8 == null ? null : t8[$contains]("\n")), t8$ == null ? false : t8$);
      if (!dart.test(hasNewline) && dart.notNull(ruler.singleLineDimensions.width) <= dart.notNull(constraints.width)) {
        result = this[_measureSingleLineParagraph](ruler, paragraph, constraints);
      } else {
        if (!(dart.test(hasNewline) || constraints.width !== 1 / 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 340, 14, "hasNewline || constraints.width != double.infinity");
        result = this[_measureMultiLineParagraph](ruler, paragraph, constraints);
      }
      ruler.didMeasure();
      return result;
    }
    measureSubstringWidth(paragraph, start, end) {
      if (!(paragraph[_plainText] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 349, 12, "paragraph._plainText != null");
      let style = paragraph[_geometricStyle];
      let ruler = engine.TextMeasurementService.rulerManager.findOrCreateRuler(style);
      let text = paragraph[_plainText][$substring](start, end);
      let substringParagraph = paragraph[_cloneWithText](text);
      ruler.willMeasure(engine.EngineParagraph._check(substringParagraph));
      ruler.measureAsSingleLine();
      let dimensions = ruler.singleLineDimensions;
      ruler.didMeasure();
      return dimensions.width;
    }
    getTextPositionForOffset(paragraph, constraints, offset) {
      if (!(paragraph[_plainText] == null)) dart.assertFailed("should only be called for multispan", "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 367, 12, "paragraph._plainText == null");
      let style = paragraph[_geometricStyle];
      let ruler = engine.TextMeasurementService.rulerManager.findOrCreateRuler(style);
      ruler.willMeasure(paragraph);
      let position = ruler.hitTest(constraints, offset);
      ruler.didMeasure();
      return new ui.TextPosition.new({offset: position});
    }
    [_measureSingleLineParagraph](ruler, paragraph, constraints) {
      let width = constraints.width;
      let minIntrinsicWidth = ruler.minIntrinsicDimensions.width;
      let maxIntrinsicWidth = ruler.singleLineDimensions.width;
      let alphabeticBaseline = ruler.alphabeticBaseline;
      let height = ruler.singleLineDimensions.height;
      maxIntrinsicWidth = engine.DomTextMeasurementService._applySubPixelRoundingHack(minIntrinsicWidth, maxIntrinsicWidth);
      let ideographicBaseline = dart.notNull(alphabeticBaseline) * 1.1662499904632568;
      return new engine.MeasurementResult.new(constraints.width, {isSingleLine: true, width: width, height: height, naturalHeight: height, lineHeight: height, minIntrinsicWidth: minIntrinsicWidth, maxIntrinsicWidth: maxIntrinsicWidth, alphabeticBaseline: alphabeticBaseline, ideographicBaseline: ideographicBaseline, lines: null});
    }
    [_measureMultiLineParagraph](ruler, paragraph, constraints) {
      let width = constraints.width;
      let minIntrinsicWidth = ruler.minIntrinsicDimensions.width;
      let maxIntrinsicWidth = ruler.singleLineDimensions.width;
      let alphabeticBaseline = ruler.alphabeticBaseline;
      let naturalHeight = ruler.constrainedDimensions.height;
      let height = null;
      let lineHeight = null;
      let maxLines = paragraph[_geometricStyle].maxLines;
      if (maxLines == null) {
        height = naturalHeight;
      } else {
        lineHeight = ruler.lineHeightDimensions.height;
        height = math.min(core.double, naturalHeight, dart.notNull(maxLines) * dart.notNull(lineHeight));
      }
      maxIntrinsicWidth = engine.DomTextMeasurementService._applySubPixelRoundingHack(minIntrinsicWidth, maxIntrinsicWidth);
      if (!(dart.notNull(minIntrinsicWidth) <= dart.notNull(maxIntrinsicWidth))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 448, 12, "minIntrinsicWidth <= maxIntrinsicWidth");
      let ideographicBaseline = dart.notNull(alphabeticBaseline) * 1.1662499904632568;
      return new engine.MeasurementResult.new(constraints.width, {isSingleLine: false, width: width, height: height, lineHeight: lineHeight, naturalHeight: naturalHeight, minIntrinsicWidth: minIntrinsicWidth, maxIntrinsicWidth: maxIntrinsicWidth, alphabeticBaseline: alphabeticBaseline, ideographicBaseline: ideographicBaseline, lines: null});
    }
    static _applySubPixelRoundingHack(minIntrinsicWidth, maxIntrinsicWidth) {
      if (dart.notNull(minIntrinsicWidth) <= dart.notNull(maxIntrinsicWidth)) {
        return maxIntrinsicWidth;
      }
      if (dart.notNull(minIntrinsicWidth) - dart.notNull(maxIntrinsicWidth) < 2.0) {
        return minIntrinsicWidth;
      }
      dart.throw(core.Exception.new("minIntrinsicWidth (" + dart.str(minIntrinsicWidth) + ") is greater than " + "maxIntrinsicWidth (" + dart.str(maxIntrinsicWidth) + ")."));
    }
  };
  (engine.DomTextMeasurementService.new = function() {
    ;
  }).prototype = engine.DomTextMeasurementService.prototype;
  dart.addTypeTests(engine.DomTextMeasurementService);
  dart.setMethodSignature(engine.DomTextMeasurementService, () => ({
    __proto__: dart.getMethods(engine.DomTextMeasurementService.__proto__),
    [_doMeasure]: dart.fnType(engine.MeasurementResult, [engine.EngineParagraph, ui.ParagraphConstraints, engine.ParagraphRuler]),
    measureSubstringWidth: dart.fnType(core.double, [engine.EngineParagraph, core.int, core.int]),
    getTextPositionForOffset: dart.fnType(ui.TextPosition, [engine.EngineParagraph, ui.ParagraphConstraints, ui.Offset]),
    [_measureSingleLineParagraph]: dart.fnType(engine.MeasurementResult, [engine.ParagraphRuler, ui.Paragraph, ui.ParagraphConstraints]),
    [_measureMultiLineParagraph]: dart.fnType(engine.MeasurementResult, [engine.ParagraphRuler, engine.EngineParagraph, ui.ParagraphConstraints])
  }));
  dart.setLibraryUri(engine.DomTextMeasurementService, "package:flutter_web_ui/src/engine.dart");
  dart.defineLazy(engine.DomTextMeasurementService, {
    /*engine.DomTextMeasurementService._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  const _canvasContext$ = dart.privateName(engine, "_canvasContext");
  let C111;
  const TextPosition_affinity = dart.privateName(ui, "TextPosition.affinity");
  const TextPosition_offset = dart.privateName(ui, "TextPosition.offset");
  let C110;
  engine.CanvasTextMeasurementService = class CanvasTextMeasurementService extends engine.TextMeasurementService {
    static get instance() {
      let t8;
      t8 = engine.CanvasTextMeasurementService._instance;
      return t8 == null ? engine.CanvasTextMeasurementService._instance = new engine.CanvasTextMeasurementService.new() : t8;
    }
    [_doMeasure](paragraph, constraints, ruler) {
      let text = paragraph[_plainText];
      let style = paragraph[_geometricStyle];
      if (!(text != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 512, 12, "text != null");
      this[_canvasContext$].font = style.cssFontString;
      let linesCalculator = new engine.LinesCalculator.new(this[_canvasContext$], text, style, constraints.width);
      let minIntrinsicCalculator = new engine.MinIntrinsicCalculator.new(this[_canvasContext$], text, style);
      let maxIntrinsicCalculator = new engine.MaxIntrinsicCalculator.new(this[_canvasContext$], text, style);
      let reachedEndOfText = false;
      let i = 0;
      while (!reachedEndOfText) {
        let brk = engine.nextLineBreak(text, i);
        linesCalculator.update(brk);
        minIntrinsicCalculator.update(brk);
        maxIntrinsicCalculator.update(brk);
        i = brk.index;
        if (dart.equals(brk.type, engine.LineBreakType.endOfText)) {
          reachedEndOfText = true;
        }
      }
      let lineCount = linesCalculator.lines[$length];
      let lineHeight = ruler.lineHeightDimensions.height;
      let naturalHeight = dart.notNull(lineCount) * dart.notNull(lineHeight);
      let height = style.maxLines == null ? naturalHeight : math.min(core.int, lineCount, style.maxLines) * dart.notNull(lineHeight);
      let result = new engine.MeasurementResult.new(constraints.width, {isSingleLine: lineCount === 1, alphabeticBaseline: ruler.alphabeticBaseline, ideographicBaseline: dart.notNull(ruler.alphabeticBaseline) * 1.1662499904632568, height: height, naturalHeight: naturalHeight, lineHeight: lineHeight, minIntrinsicWidth: minIntrinsicCalculator.value, maxIntrinsicWidth: maxIntrinsicCalculator.value, width: constraints.width, lines: linesCalculator.lines});
      return result;
    }
    measureSubstringWidth(paragraph, start, end) {
      if (!(paragraph[_plainText] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 574, 12, "paragraph._plainText != null");
      let text = paragraph[_plainText];
      let style = paragraph[_geometricStyle];
      this[_canvasContext$].font = style.cssFontString;
      return engine._measureSubstring(this[_canvasContext$], paragraph[_geometricStyle], text, start, end);
    }
    getTextPositionForOffset(paragraph, constraints, offset) {
      return C110 || CT.C110;
    }
  };
  (engine.CanvasTextMeasurementService.new = function() {
    this[_canvasContext$] = html.CanvasElement.new()[$context2D];
    ;
  }).prototype = engine.CanvasTextMeasurementService.prototype;
  dart.addTypeTests(engine.CanvasTextMeasurementService);
  dart.setMethodSignature(engine.CanvasTextMeasurementService, () => ({
    __proto__: dart.getMethods(engine.CanvasTextMeasurementService.__proto__),
    [_doMeasure]: dart.fnType(engine.MeasurementResult, [engine.EngineParagraph, ui.ParagraphConstraints, engine.ParagraphRuler]),
    measureSubstringWidth: dart.fnType(core.double, [engine.EngineParagraph, core.int, core.int]),
    getTextPositionForOffset: dart.fnType(ui.TextPosition, [engine.EngineParagraph, ui.ParagraphConstraints, ui.Offset])
  }));
  dart.setLibraryUri(engine.CanvasTextMeasurementService, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.CanvasTextMeasurementService, () => ({
    __proto__: dart.getFields(engine.CanvasTextMeasurementService.__proto__),
    [_canvasContext$]: dart.finalFieldType(html.CanvasRenderingContext2D)
  }));
  dart.defineLazy(engine.CanvasTextMeasurementService, {
    /*engine.CanvasTextMeasurementService._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  const _lineStart = dart.privateName(engine, "_lineStart");
  const _chunkStart = dart.privateName(engine, "_chunkStart");
  const _reachedMaxLines = dart.privateName(engine, "_reachedMaxLines");
  const _cachedEllipsisWidth = dart.privateName(engine, "_cachedEllipsisWidth");
  const _text$ = dart.privateName(engine, "_text");
  const _style$ = dart.privateName(engine, "_style");
  const _maxWidth$ = dart.privateName(engine, "_maxWidth");
  const _ellipsisWidth = dart.privateName(engine, "_ellipsisWidth");
  let C112;
  const _forceBreak = dart.privateName(engine, "_forceBreak");
  const _addLineBreak = dart.privateName(engine, "_addLineBreak");
  let C113;
  const LinesCalculator_lines = dart.privateName(engine, "LinesCalculator.lines");
  engine.LinesCalculator = class LinesCalculator extends core.Object {
    get lines() {
      return this[lines];
    }
    set lines(value) {
      this[lines] = value;
    }
    get [_ellipsisWidth]() {
      let t8;
      t8 = this[_cachedEllipsisWidth];
      return t8 == null ? this[_cachedEllipsisWidth] = engine._roundWidth(this[_canvasContext$].measureText(this[_style$].ellipsis).width) : t8;
    }
    get hasEllipsis() {
      return this[_style$].ellipsis != null;
    }
    get unlimitedLines() {
      return this[_style$].maxLines == null;
    }
    update(brk) {
      let isHardBreak = dart.equals(brk.type, engine.LineBreakType.mandatory) || dart.equals(brk.type, engine.LineBreakType.endOfText);
      let chunkEnd = brk.index;
      let chunkEndWithoutSpace = engine._excludeTrailing(this[_text$], this[_chunkStart], chunkEnd, C112 || CT.C112);
      while (!dart.test(this[_reachedMaxLines])) {
        let lineWidth = engine._measureSubstring(this[_canvasContext$], this[_style$], this[_text$], this[_lineStart], chunkEndWithoutSpace);
        if (dart.notNull(lineWidth) <= dart.notNull(this[_maxWidth$])) {
          break;
        }
        let isChunkTooLong = this[_chunkStart] == this[_lineStart];
        let isLastLine = this[_reachedMaxLines] = dart.test(this.hasEllipsis) && dart.test(this.unlimitedLines) || dart.notNull(this.lines[$length]) + 1 === this[_style$].maxLines;
        if (isLastLine && dart.test(this.hasEllipsis)) {
          let availableWidth = dart.notNull(this[_maxWidth$]) - dart.notNull(this[_ellipsisWidth]);
          let breakingPoint = this[_forceBreak](availableWidth, this[_text$], this[_lineStart], chunkEndWithoutSpace);
          this.lines[$add](this[_text$][$substring](this[_lineStart], breakingPoint) + dart.notNull(this[_style$].ellipsis));
        } else if (isChunkTooLong) {
          let breakingPoint = this[_forceBreak](this[_maxWidth$], this[_text$], this[_lineStart], chunkEndWithoutSpace);
          if (breakingPoint == chunkEndWithoutSpace) {
            break;
          }
          this[_addLineBreak]({lineEnd: breakingPoint});
          this[_chunkStart] = breakingPoint;
        } else {
          this[_addLineBreak]({lineEnd: this[_chunkStart]});
        }
      }
      if (dart.test(this[_reachedMaxLines])) {
        return;
      }
      if (isHardBreak) {
        this[_addLineBreak]({lineEnd: chunkEnd});
      }
      this[_chunkStart] = chunkEnd;
    }
    [_addLineBreak](opts) {
      let lineEnd = opts && 'lineEnd' in opts ? opts.lineEnd : null;
      let indexWithoutNewlines = engine._excludeTrailing(this[_text$], this[_lineStart], lineEnd, C113 || CT.C113);
      this.lines[$add](this[_text$][$substring](this[_lineStart], indexWithoutNewlines));
      this[_lineStart] = lineEnd;
      if (this.lines[$length] == this[_style$].maxLines) {
        this[_reachedMaxLines] = true;
      }
    }
    [_forceBreak](maxWidth, text, start, end) {
      if (!(0 <= dart.notNull(start) && dart.notNull(start) < dart.notNull(end) && dart.notNull(end) <= text.length)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 791, 12, "(0 <= start && start < end && end <= text.lengt");
      let low = dart.test(this.hasEllipsis) ? start : dart.notNull(start) + 1;
      let high = end;
      do {
        let mid = ((dart.notNull(low) + dart.notNull(high)) / 2)[$truncate]();
        let width = engine._measureSubstring(this[_canvasContext$], this[_style$], text, start, mid);
        if (dart.notNull(width) < dart.notNull(maxWidth)) {
          low = mid;
        } else if (dart.notNull(width) > dart.notNull(maxWidth)) {
          high = mid;
        } else {
          low = high = mid;
        }
      } while (dart.notNull(high) - dart.notNull(low) > 1);
      return low;
    }
  };
  (engine.LinesCalculator.new = function(_canvasContext, _text, _style, _maxWidth) {
    this[lines] = JSArrayOfString().of([]);
    this[_lineStart] = 0;
    this[_chunkStart] = 0;
    this[_reachedMaxLines] = false;
    this[_cachedEllipsisWidth] = null;
    this[_canvasContext$] = _canvasContext;
    this[_text$] = _text;
    this[_style$] = _style;
    this[_maxWidth$] = _maxWidth;
    ;
  }).prototype = engine.LinesCalculator.prototype;
  dart.addTypeTests(engine.LinesCalculator);
  const lines = LinesCalculator_lines;
  dart.setMethodSignature(engine.LinesCalculator, () => ({
    __proto__: dart.getMethods(engine.LinesCalculator.__proto__),
    update: dart.fnType(dart.void, [engine.LineBreakResult]),
    [_addLineBreak]: dart.fnType(dart.void, [], {lineEnd: core.int}),
    [_forceBreak]: dart.fnType(core.int, [core.double, core.String, core.int, core.int])
  }));
  dart.setGetterSignature(engine.LinesCalculator, () => ({
    __proto__: dart.getGetters(engine.LinesCalculator.__proto__),
    [_ellipsisWidth]: core.double,
    hasEllipsis: core.bool,
    unlimitedLines: core.bool
  }));
  dart.setLibraryUri(engine.LinesCalculator, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.LinesCalculator, () => ({
    __proto__: dart.getFields(engine.LinesCalculator.__proto__),
    [_canvasContext$]: dart.finalFieldType(html.CanvasRenderingContext2D),
    [_text$]: dart.finalFieldType(core.String),
    [_style$]: dart.finalFieldType(engine.ParagraphGeometricStyle),
    [_maxWidth$]: dart.finalFieldType(core.double),
    lines: dart.fieldType(core.List$(core.String)),
    [_lineStart]: dart.fieldType(core.int),
    [_chunkStart]: dart.fieldType(core.int),
    [_reachedMaxLines]: dart.fieldType(core.bool),
    [_cachedEllipsisWidth]: dart.fieldType(core.double)
  }));
  const _lastChunkEnd = dart.privateName(engine, "_lastChunkEnd");
  const MinIntrinsicCalculator_value = dart.privateName(engine, "MinIntrinsicCalculator.value");
  engine.MinIntrinsicCalculator = class MinIntrinsicCalculator extends core.Object {
    get value() {
      return this[value$0];
    }
    set value(value) {
      this[value$0] = value;
    }
    update(brk) {
      let chunkEnd = brk.index;
      let chunkEndWithoutSpace = engine._excludeTrailing(this[_text$], this[_lastChunkEnd], chunkEnd, C112 || CT.C112);
      let width = engine._measureSubstring(this[_canvasContext$], this[_style$], this[_text$], this[_lastChunkEnd], chunkEndWithoutSpace);
      if (dart.notNull(width) > dart.notNull(this.value)) {
        this.value = width;
      }
      this[_lastChunkEnd] = chunkEnd;
    }
  };
  (engine.MinIntrinsicCalculator.new = function(_canvasContext, _text, _style) {
    this[value$0] = 0.0;
    this[_lastChunkEnd] = 0;
    this[_canvasContext$] = _canvasContext;
    this[_text$] = _text;
    this[_style$] = _style;
    ;
  }).prototype = engine.MinIntrinsicCalculator.prototype;
  dart.addTypeTests(engine.MinIntrinsicCalculator);
  const value$0 = MinIntrinsicCalculator_value;
  dart.setMethodSignature(engine.MinIntrinsicCalculator, () => ({
    __proto__: dart.getMethods(engine.MinIntrinsicCalculator.__proto__),
    update: dart.fnType(dart.void, [engine.LineBreakResult])
  }));
  dart.setLibraryUri(engine.MinIntrinsicCalculator, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.MinIntrinsicCalculator, () => ({
    __proto__: dart.getFields(engine.MinIntrinsicCalculator.__proto__),
    [_canvasContext$]: dart.finalFieldType(html.CanvasRenderingContext2D),
    [_text$]: dart.finalFieldType(core.String),
    [_style$]: dart.finalFieldType(engine.ParagraphGeometricStyle),
    value: dart.fieldType(core.double),
    [_lastChunkEnd]: dart.fieldType(core.int)
  }));
  const _lastHardLineEnd = dart.privateName(engine, "_lastHardLineEnd");
  const MaxIntrinsicCalculator_value = dart.privateName(engine, "MaxIntrinsicCalculator.value");
  engine.MaxIntrinsicCalculator = class MaxIntrinsicCalculator extends core.Object {
    get value() {
      return this[value$1];
    }
    set value(value) {
      this[value$1] = value;
    }
    update(brk) {
      if (dart.equals(brk.type, engine.LineBreakType.opportunity)) {
        return;
      }
      let hardLineEnd = brk.index;
      let hardLineEndWithoutNewlines = engine._excludeTrailing(this[_text$], this[_lastHardLineEnd], hardLineEnd, C113 || CT.C113);
      let lineWidth = engine._measureSubstring(this[_canvasContext$], this[_style$], this[_text$], this[_lastHardLineEnd], hardLineEndWithoutNewlines);
      if (dart.notNull(lineWidth) > dart.notNull(this.value)) {
        this.value = lineWidth;
      }
      this[_lastHardLineEnd] = hardLineEnd;
    }
  };
  (engine.MaxIntrinsicCalculator.new = function(_canvasContext, _text, _style) {
    this[value$1] = 0.0;
    this[_lastHardLineEnd] = 0;
    this[_canvasContext$] = _canvasContext;
    this[_text$] = _text;
    this[_style$] = _style;
    ;
  }).prototype = engine.MaxIntrinsicCalculator.prototype;
  dart.addTypeTests(engine.MaxIntrinsicCalculator);
  const value$1 = MaxIntrinsicCalculator_value;
  dart.setMethodSignature(engine.MaxIntrinsicCalculator, () => ({
    __proto__: dart.getMethods(engine.MaxIntrinsicCalculator.__proto__),
    update: dart.fnType(dart.void, [engine.LineBreakResult])
  }));
  dart.setLibraryUri(engine.MaxIntrinsicCalculator, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.MaxIntrinsicCalculator, () => ({
    __proto__: dart.getFields(engine.MaxIntrinsicCalculator.__proto__),
    [_canvasContext$]: dart.finalFieldType(html.CanvasRenderingContext2D),
    [_text$]: dart.finalFieldType(core.String),
    [_style$]: dart.finalFieldType(engine.ParagraphGeometricStyle),
    value: dart.fieldType(core.double),
    [_lastHardLineEnd]: dart.fieldType(core.int)
  }));
  const _measurementResult = dart.privateName(engine, "_measurementResult");
  const _didExceedMaxLines = dart.privateName(engine, "_didExceedMaxLines");
  const _lastUsedConstraints = dart.privateName(engine, "_lastUsedConstraints");
  const _paragraphElement = dart.privateName(engine, "_paragraphElement");
  const _textAlign = dart.privateName(engine, "_textAlign");
  const _measurementService = dart.privateName(engine, "_measurementService");
  const _naturalHeight = dart.privateName(engine, "_naturalHeight");
  let C114;
  let C115;
  let C116;
  let C117;
  let C118;
  const _debugHasSameRootStyle = dart.privateName(engine, "_debugHasSameRootStyle");
  let C119;
  let C120;
  engine.EngineParagraph = class EngineParagraph extends core.Object {
    get plainText() {
      return this[_plainText];
    }
    get paragraphElement() {
      return this[_paragraphElement];
    }
    get geometricStyle() {
      return this[_geometricStyle];
    }
    get [_measurementService]() {
      return engine.TextMeasurementService.forParagraph(this);
    }
    get width() {
      let t8, t8$;
      t8$ = (t8 = this[_measurementResult], t8 == null ? null : t8.width);
      return t8$ == null ? -1.0 : t8$;
    }
    get height() {
      let t8, t8$;
      t8$ = (t8 = this[_measurementResult], t8 == null ? null : t8.height);
      return t8$ == null ? 0.0 : t8$;
    }
    get [_naturalHeight]() {
      let t8, t8$;
      t8$ = (t8 = this[_measurementResult], t8 == null ? null : t8.naturalHeight);
      return t8$ == null ? 0.0 : t8$;
    }
    get [_lineHeight]() {
      let t8, t8$;
      t8$ = (t8 = this[_measurementResult], t8 == null ? null : t8.lineHeight);
      return t8$ == null ? 0.0 : t8$;
    }
    get longestLine() {
      return 0.0;
    }
    get minIntrinsicWidth() {
      let t8, t8$;
      t8$ = (t8 = this[_measurementResult], t8 == null ? null : t8.minIntrinsicWidth);
      return t8$ == null ? 0.0 : t8$;
    }
    get maxIntrinsicWidth() {
      let t8, t8$;
      t8$ = (t8 = this[_measurementResult], t8 == null ? null : t8.maxIntrinsicWidth);
      return t8$ == null ? 0.0 : t8$;
    }
    get alphabeticBaseline() {
      let t8, t8$;
      t8$ = (t8 = this[_measurementResult], t8 == null ? null : t8.alphabeticBaseline);
      return t8$ == null ? -1.0 : t8$;
    }
    get ideographicBaseline() {
      let t8, t8$;
      t8$ = (t8 = this[_measurementResult], t8 == null ? null : t8.ideographicBaseline);
      return t8$ == null ? -1.0 : t8$;
    }
    get didExceedMaxLines() {
      return this[_didExceedMaxLines];
    }
    get [_lines]() {
      let t8;
      t8 = this[_measurementResult];
      return t8 == null ? null : t8.lines;
    }
    layout(constraints) {
      if (dart.equals(constraints, this[_lastUsedConstraints])) {
        return;
      }
      this[_measurementResult] = this[_measurementService].measure(this, constraints);
      this[_lastUsedConstraints] = constraints;
      if (this[_geometricStyle].maxLines != null) {
        this[_didExceedMaxLines] = dart.notNull(this[_naturalHeight]) > dart.notNull(this.height);
      } else {
        this[_didExceedMaxLines] = false;
      }
      if (dart.test(this[_measurementResult].isSingleLine) && constraints != null) {
        switch (this[_textAlign]) {
          case C114 || CT.C114:
          {
            this[_alignOffset] = (dart.notNull(constraints.width) - dart.notNull(this.maxIntrinsicWidth)) / 2.0;
            break;
          }
          case C115 || CT.C115:
          {
            this[_alignOffset] = dart.notNull(constraints.width) - dart.notNull(this.maxIntrinsicWidth);
            break;
          }
          case C116 || CT.C116:
          {
            this[_alignOffset] = dart.equals(this[_textDirection], ui.TextDirection.rtl) ? dart.notNull(constraints.width) - dart.notNull(this.maxIntrinsicWidth) : 0.0;
            break;
          }
          case C117 || CT.C117:
          {
            this[_alignOffset] = dart.equals(this[_textDirection], ui.TextDirection.ltr) ? dart.notNull(constraints.width) - dart.notNull(this.maxIntrinsicWidth) : 0.0;
            break;
          }
          default:
          {
            this[_alignOffset] = 0.0;
            break;
          }
        }
      }
    }
    getBoxesForPlaceholders() {
      return C118 || CT.C118;
    }
    get [_drawOnCanvas]() {
      let canDrawTextOnCanvas = null;
      if (dart.test(engine.TextMeasurementService.enableExperimentalCanvasImplementation)) {
        canDrawTextOnCanvas = this[_lines] != null;
      } else {
        canDrawTextOnCanvas = dart.test(this[_measurementResult].isSingleLine) && this[_plainText] != null && this[_geometricStyle].ellipsis == null;
      }
      return dart.test(canDrawTextOnCanvas) && this[_geometricStyle].decoration == null && this[_geometricStyle].wordSpacing == null;
    }
    get [_isLaidOut]() {
      return this[_measurementResult] != null;
    }
    [_debugHasSameRootStyle](style) {
      if (!dart.test(dart.fn(() => {
        if (!dart.equals(style, this[_geometricStyle])) {
          dart.throw(core.Exception.new("Attempted to measure a paragraph whose style is " + "different from the style of the ruler used to measure it."));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 185, 12, "() {\r\n      if (style != _geometricStyle) {\r\n        throw Exception('Attempted to measure a paragraph whose style is '\r\n            'different from the style of the ruler used to measure it.');\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    getBoxesForRange(start, end, opts) {
      let boxHeightStyle = opts && 'boxHeightStyle' in opts ? opts.boxHeightStyle : C119 || CT.C119;
      let boxWidthStyle = opts && 'boxWidthStyle' in opts ? opts.boxWidthStyle : C120 || CT.C120;
      if (!(boxHeightStyle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 202, 12, "boxHeightStyle != null");
      if (!(boxWidthStyle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 203, 12, "boxWidthStyle != null");
      if (this[_plainText] == null) {
        return JSArrayOfTextBox().of([]);
      }
      let length = this[_plainText].length;
      if (dart.notNull(start) < 0 || dart.notNull(end) < 0 || dart.notNull(start) > length || dart.notNull(end) > length) {
        return JSArrayOfTextBox().of([]);
      }
      return this[_measurementService].measureBoxesForRange(this, this[_lastUsedConstraints], {start: start, end: end, alignOffset: this[_alignOffset], textDirection: this[_textDirection]});
    }
    [_cloneWithText](plainText) {
      return new engine.EngineParagraph.new({plainText: plainText, paragraphElement: html.HtmlElement._check(this[_paragraphElement][$clone](true)), geometricStyle: this[_geometricStyle], paint: this[_paint], textAlign: this[_textAlign], textDirection: this[_textDirection], background: this[_background]});
    }
    getPositionForOffset(offset) {
      if (this[_plainText] == null) {
        return this.getPositionForMultiSpanOffset(offset);
      }
      let dx = dart.notNull(offset.dx) - dart.notNull(this[_alignOffset]);
      let instance = this[_measurementService];
      let low = 0;
      let high = this[_plainText].length;
      do {
        let current = ((low + high) / 2)[$truncate]();
        let width = instance.measureSubstringWidth(this, 0, current);
        if (dart.notNull(width) < dx) {
          low = current;
        } else if (dart.notNull(width) > dx) {
          high = current;
        } else {
          low = high = current;
        }
      } while (high - low > 1);
      if (low === high) {
        return new ui.TextPosition.new({offset: high, affinity: ui.TextAffinity.upstream});
      }
      let lowWidth = instance.measureSubstringWidth(this, 0, low);
      let highWidth = instance.measureSubstringWidth(this, 0, high);
      if (dx - dart.notNull(lowWidth) < dart.notNull(highWidth) - dx) {
        return new ui.TextPosition.new({offset: low, affinity: ui.TextAffinity.downstream});
      } else {
        return new ui.TextPosition.new({offset: high, affinity: ui.TextAffinity.upstream});
      }
    }
    getPositionForMultiSpanOffset(offset) {
      if (!(this[_lastUsedConstraints] != null)) dart.assertFailed("missing call to paragraph layout before reading text position", "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 276, 12, "_lastUsedConstraints != null");
      let instance = this[_measurementService];
      return instance.getTextPositionForOffset(this, this[_lastUsedConstraints], offset);
    }
    getWordBoundary(offset) {
      if (this[_plainText] == null) {
        return JSArrayOfint().of([offset, offset]);
      }
      let start = engine.WordBreaker.prevBreakIndex(this[_plainText], offset);
      let end = engine.WordBreaker.nextBreakIndex(this[_plainText], offset);
      return JSArrayOfint().of([start, end]);
    }
  };
  (engine.EngineParagraph.new = function(opts) {
    let paragraphElement = opts && 'paragraphElement' in opts ? opts.paragraphElement : null;
    let geometricStyle = opts && 'geometricStyle' in opts ? opts.geometricStyle : null;
    let plainText = opts && 'plainText' in opts ? opts.plainText : null;
    let paint = opts && 'paint' in opts ? opts.paint : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let background = opts && 'background' in opts ? opts.background : null;
    this[_measurementResult] = null;
    this[_didExceedMaxLines] = false;
    this[_lastUsedConstraints] = null;
    this[_alignOffset] = 0.0;
    if (!(plainText == null && paint == null || plainText != null && paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 21, 16, "(plainText == null && paint == null) ||\r\n            (plainText != null && paint != null)");
    this[_paragraphElement] = paragraphElement;
    this[_geometricStyle] = geometricStyle;
    this[_plainText] = plainText;
    this[_textAlign] = textAlign;
    this[_textDirection] = textDirection;
    this[_paint] = paint;
    this[_background] = background;
    ;
  }).prototype = engine.EngineParagraph.prototype;
  dart.addTypeTests(engine.EngineParagraph);
  engine.EngineParagraph[dart.implements] = () => [ui.Paragraph];
  dart.setMethodSignature(engine.EngineParagraph, () => ({
    __proto__: dart.getMethods(engine.EngineParagraph.__proto__),
    layout: dart.fnType(dart.void, [ui.ParagraphConstraints]),
    getBoxesForPlaceholders: dart.fnType(core.List$(ui.TextBox), []),
    [_debugHasSameRootStyle]: dart.fnType(core.bool, [engine.ParagraphGeometricStyle]),
    getBoxesForRange: dart.fnType(core.List$(ui.TextBox), [core.int, core.int], {boxHeightStyle: ui.BoxHeightStyle, boxWidthStyle: ui.BoxWidthStyle}),
    [_cloneWithText]: dart.fnType(ui.Paragraph, [core.String]),
    getPositionForOffset: dart.fnType(ui.TextPosition, [ui.Offset]),
    getPositionForMultiSpanOffset: dart.fnType(ui.TextPosition, [ui.Offset]),
    getWordBoundary: dart.fnType(core.List$(core.int), [core.int])
  }));
  dart.setGetterSignature(engine.EngineParagraph, () => ({
    __proto__: dart.getGetters(engine.EngineParagraph.__proto__),
    plainText: core.String,
    paragraphElement: html.HtmlElement,
    geometricStyle: engine.ParagraphGeometricStyle,
    [_measurementService]: engine.TextMeasurementService,
    width: core.double,
    height: core.double,
    [_naturalHeight]: core.double,
    [_lineHeight]: core.double,
    longestLine: core.double,
    minIntrinsicWidth: core.double,
    maxIntrinsicWidth: core.double,
    alphabeticBaseline: core.double,
    ideographicBaseline: core.double,
    didExceedMaxLines: core.bool,
    [_lines]: core.List$(core.String),
    [_drawOnCanvas]: core.bool,
    [_isLaidOut]: core.bool
  }));
  dart.setLibraryUri(engine.EngineParagraph, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.EngineParagraph, () => ({
    __proto__: dart.getFields(engine.EngineParagraph.__proto__),
    [_paragraphElement]: dart.finalFieldType(html.HtmlElement),
    [_geometricStyle]: dart.finalFieldType(engine.ParagraphGeometricStyle),
    [_plainText]: dart.finalFieldType(core.String),
    [_paint]: dart.finalFieldType(ui.Paint),
    [_textAlign]: dart.finalFieldType(ui.TextAlign),
    [_textDirection]: dart.finalFieldType(ui.TextDirection),
    [_background]: dart.finalFieldType(ui.Paint),
    [_measurementResult]: dart.fieldType(engine.MeasurementResult),
    [_didExceedMaxLines]: dart.fieldType(core.bool),
    [_lastUsedConstraints]: dart.fieldType(ui.ParagraphConstraints),
    [_alignOffset]: dart.fieldType(core.double)
  }));
  const _fontWeight = dart.privateName(engine, "_fontWeight");
  const _fontStyle = dart.privateName(engine, "_fontStyle");
  const _maxLines = dart.privateName(engine, "_maxLines");
  const _fontFamily = dart.privateName(engine, "_fontFamily");
  const _fontSize = dart.privateName(engine, "_fontSize");
  const _height = dart.privateName(engine, "_height");
  const _strutStyle = dart.privateName(engine, "_strutStyle");
  const _ellipsis = dart.privateName(engine, "_ellipsis");
  const _locale = dart.privateName(engine, "_locale");
  const _effectiveFontFamily = dart.privateName(engine, "_effectiveFontFamily");
  const _forceStrutHeight = dart.privateName(engine, "_forceStrutHeight");
  engine.EngineParagraphStyle = class EngineParagraphStyle extends core.Object {
    get [_effectiveFontFamily]() {
      if (dart.test(engine.assertionsEnabled)) {
        if (dart.test(ui.debugEmulateFlutterTesterEnvironment)) {
          return "Ahem";
        }
      }
      if (this[_fontFamily] == null || this[_fontFamily][$isEmpty]) {
        return "sans-serif";
      }
      return this[_fontFamily];
    }
    get [_lineHeight]() {
      let t8;
      if (this[_strutStyle] == null || this[_strutStyle][_height] == null) {
        return this[_height];
      }
      if (dart.equals(this[_strutStyle][_forceStrutHeight], true)) {
        return this[_strutStyle][_height];
      }
      return math.max(core.double, this[_strutStyle][_height], (t8 = this[_height], t8 == null ? 0.0 : t8));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = engine.EngineParagraphStyle._check(other);
      return dart.equals(this[_textAlign], typedOther[_textAlign]) || dart.equals(this[_textDirection], typedOther[_textDirection]) || dart.equals(this[_fontWeight], typedOther[_fontWeight]) || dart.equals(this[_fontStyle], typedOther[_fontStyle]) || this[_maxLines] == typedOther[_maxLines] || this[_fontFamily] == typedOther[_fontFamily] || this[_fontSize] == typedOther[_fontSize] || this[_height] == typedOther[_height] || this[_ellipsis] == typedOther[_ellipsis] || dart.equals(this[_locale], typedOther[_locale]);
    }
    get hashCode() {
      return ui.hashValues(this[_fontFamily], this[_fontSize], this[_height], this[_ellipsis], this[_locale]);
    }
    toString() {
      let t8, t8$, t8$0, t8$1, t8$2, t8$3, t8$4;
      if (dart.test(engine.assertionsEnabled)) {
        return "ParagraphStyle(" + "textAlign: " + dart.str((t8 = this[_textAlign], t8 == null ? "unspecified" : t8)) + ", " + "textDirection: " + dart.str((t8$ = this[_textDirection], t8$ == null ? "unspecified" : t8$)) + ", " + "fontWeight: " + dart.str((t8$0 = this[_fontWeight], t8$0 == null ? "unspecified" : t8$0)) + ", " + "fontStyle: " + dart.str((t8$1 = this[_fontStyle], t8$1 == null ? "unspecified" : t8$1)) + ", " + "maxLines: " + dart.str((t8$2 = this[_maxLines], t8$2 == null ? "unspecified" : t8$2)) + ", " + "fontFamily: " + dart.str((t8$3 = this[_fontFamily], t8$3 == null ? "unspecified" : t8$3)) + ", " + "fontSize: " + (this[_fontSize] != null ? this[_fontSize][$toStringAsFixed](1) : "unspecified") + ", " + "height: " + (this[_height] != null ? this[_height][$toStringAsFixed](1) + "x" : "unspecified") + ", " + "ellipsis: " + (this[_ellipsis] != null ? "\"" + dart.str(this[_ellipsis]) + "\"" : "unspecified") + ", " + "locale: " + dart.str((t8$4 = this[_locale], t8$4 == null ? "unspecified" : t8$4)) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.EngineParagraphStyle.new = function(opts) {
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    this[_textAlign] = textAlign;
    this[_textDirection] = textDirection;
    this[_fontWeight] = fontWeight;
    this[_fontStyle] = fontStyle;
    this[_maxLines] = maxLines;
    this[_fontFamily] = fontFamily;
    this[_fontSize] = fontSize;
    this[_height] = height;
    this[_strutStyle] = engine.EngineStrutStyle._check(strutStyle);
    this[_ellipsis] = ellipsis;
    this[_locale] = locale;
    ;
  }).prototype = engine.EngineParagraphStyle.prototype;
  dart.addTypeTests(engine.EngineParagraphStyle);
  engine.EngineParagraphStyle[dart.implements] = () => [ui.ParagraphStyle];
  dart.setGetterSignature(engine.EngineParagraphStyle, () => ({
    __proto__: dart.getGetters(engine.EngineParagraphStyle.__proto__),
    [_effectiveFontFamily]: core.String,
    [_lineHeight]: core.double
  }));
  dart.setLibraryUri(engine.EngineParagraphStyle, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.EngineParagraphStyle, () => ({
    __proto__: dart.getFields(engine.EngineParagraphStyle.__proto__),
    [_textAlign]: dart.finalFieldType(ui.TextAlign),
    [_textDirection]: dart.finalFieldType(ui.TextDirection),
    [_fontWeight]: dart.finalFieldType(ui.FontWeight),
    [_fontStyle]: dart.finalFieldType(ui.FontStyle),
    [_maxLines]: dart.finalFieldType(core.int),
    [_fontFamily]: dart.finalFieldType(core.String),
    [_fontSize]: dart.finalFieldType(core.double),
    [_height]: dart.finalFieldType(core.double),
    [_strutStyle]: dart.finalFieldType(engine.EngineStrutStyle),
    [_ellipsis]: dart.finalFieldType(core.String),
    [_locale]: dart.finalFieldType(ui.Locale)
  }));
  dart.defineExtensionMethods(engine.EngineParagraphStyle, ['_equals', 'toString']);
  dart.defineExtensionAccessors(engine.EngineParagraphStyle, ['hashCode']);
  const _decoration = dart.privateName(engine, "_decoration");
  const _decorationColor = dart.privateName(engine, "_decorationColor");
  const _decorationStyle = dart.privateName(engine, "_decorationStyle");
  const _textBaseline = dart.privateName(engine, "_textBaseline");
  const _isFontFamilyProvided = dart.privateName(engine, "_isFontFamilyProvided");
  const _fontFamilyFallback = dart.privateName(engine, "_fontFamilyFallback");
  const _letterSpacing = dart.privateName(engine, "_letterSpacing");
  const _wordSpacing = dart.privateName(engine, "_wordSpacing");
  const _foreground = dart.privateName(engine, "_foreground");
  const _shadows = dart.privateName(engine, "_shadows");
  engine.EngineTextStyle = class EngineTextStyle extends core.Object {
    get [_effectiveFontFamily]() {
      if (dart.test(engine.assertionsEnabled)) {
        if (dart.test(ui.debugEmulateFlutterTesterEnvironment)) {
          return "Ahem";
        }
      }
      if (this[_fontFamily] == null || this[_fontFamily][$isEmpty]) {
        return "sans-serif";
      }
      return this[_fontFamily];
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = engine.EngineTextStyle._check(other);
      return dart.equals(this[_color$], typedOther[_color$]) && dart.equals(this[_decoration], typedOther[_decoration]) && dart.equals(this[_decorationColor], typedOther[_decorationColor]) && dart.equals(this[_decorationStyle], typedOther[_decorationStyle]) && dart.equals(this[_fontWeight], typedOther[_fontWeight]) && dart.equals(this[_fontStyle], typedOther[_fontStyle]) && dart.equals(this[_textBaseline], typedOther[_textBaseline]) && this[_fontFamily] == typedOther[_fontFamily] && this[_fontSize] == typedOther[_fontSize] && this[_letterSpacing] == typedOther[_letterSpacing] && this[_wordSpacing] == typedOther[_wordSpacing] && this[_height] == typedOther[_height] && dart.equals(this[_locale], typedOther[_locale]) && dart.equals(this[_background], typedOther[_background]) && dart.equals(this[_foreground], typedOther[_foreground]) && dart.test(engine._listEquals(ui.Shadow, this[_shadows], typedOther[_shadows])) && dart.test(engine._listEquals(core.String, this[_fontFamilyFallback], typedOther[_fontFamilyFallback]));
    }
    get hashCode() {
      return ui.hashValues(this[_color$], this[_decoration], this[_decorationColor], this[_decorationStyle], this[_fontWeight], this[_fontStyle], this[_textBaseline], this[_fontFamily], this[_fontFamilyFallback], this[_fontSize], this[_letterSpacing], this[_wordSpacing], this[_height], this[_locale], this[_background], this[_foreground], this[_shadows]);
    }
    toString() {
      let t8, t8$, t8$0, t8$1, t8$2, t8$3, t8$4, t8$5, t8$6, t8$7;
      if (dart.test(engine.assertionsEnabled)) {
        return "TextStyle(" + "color: " + dart.str(this[_color$] != null ? this[_color$] : "unspecified") + ", " + "decoration: " + dart.str((t8 = this[_decoration], t8 == null ? "unspecified" : t8)) + ", " + "decorationColor: " + dart.str((t8$ = this[_decorationColor], t8$ == null ? "unspecified" : t8$)) + ", " + "decorationStyle: " + dart.str((t8$0 = this[_decorationStyle], t8$0 == null ? "unspecified" : t8$0)) + ", " + "fontWeight: " + dart.str((t8$1 = this[_fontWeight], t8$1 == null ? "unspecified" : t8$1)) + ", " + "fontStyle: " + dart.str((t8$2 = this[_fontStyle], t8$2 == null ? "unspecified" : t8$2)) + ", " + "textBaseline: " + dart.str((t8$3 = this[_textBaseline], t8$3 == null ? "unspecified" : t8$3)) + ", " + "fontFamily: " + dart.str(dart.test(this[_isFontFamilyProvided]) && this[_fontFamily] != null ? this[_fontFamily] : "unspecified") + ", " + "fontFamilyFallback: " + dart.str(dart.test(this[_isFontFamilyProvided]) && this[_fontFamilyFallback] != null && dart.test(this[_fontFamilyFallback][$isNotEmpty]) ? this[_fontFamilyFallback] : "unspecified") + ", " + "fontSize: " + (this[_fontSize] != null ? this[_fontSize][$toStringAsFixed](1) : "unspecified") + ", " + "letterSpacing: " + (this[_letterSpacing] != null ? dart.str(this[_letterSpacing]) + "x" : "unspecified") + ", " + "wordSpacing: " + (this[_wordSpacing] != null ? dart.str(this[_wordSpacing]) + "x" : "unspecified") + ", " + "height: " + (this[_height] != null ? this[_height][$toStringAsFixed](1) + "x" : "unspecified") + ", " + "locale: " + dart.str((t8$4 = this[_locale], t8$4 == null ? "unspecified" : t8$4)) + ", " + "background: " + dart.str((t8$5 = this[_background], t8$5 == null ? "unspecified" : t8$5)) + ", " + "foreground: " + dart.str((t8$6 = this[_foreground], t8$6 == null ? "unspecified" : t8$6)) + ", " + "shadows: " + dart.str((t8$7 = this[_shadows], t8$7 == null ? "unspecified" : t8$7)) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.EngineTextStyle.new = function(opts) {
    let t8;
    let color = opts && 'color' in opts ? opts.color : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let foreground = opts && 'foreground' in opts ? opts.foreground : null;
    let shadows = opts && 'shadows' in opts ? opts.shadows : null;
    let fontFeatures = opts && 'fontFeatures' in opts ? opts.fontFeatures : null;
    if (!(color == null || foreground == null)) dart.assertFailed("Cannot provide both a color and a foreground\n" + "The color argument is just a shorthand for \"foreground: new Paint()..color = color\".", "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 432, 13, "color == null || foreground == null");
    this[_color$] = color;
    this[_decoration] = decoration;
    this[_decorationColor] = decorationColor;
    this[_decorationStyle] = decorationStyle;
    this[_fontWeight] = fontWeight;
    this[_fontStyle] = fontStyle;
    this[_textBaseline] = textBaseline;
    this[_isFontFamilyProvided] = fontFamily != null;
    this[_fontFamily] = (t8 = fontFamily, t8 == null ? "" : t8);
    this[_fontFamilyFallback] = fontFamilyFallback;
    this[_fontSize] = fontSize;
    this[_letterSpacing] = letterSpacing;
    this[_wordSpacing] = wordSpacing;
    this[_height] = height;
    this[_locale] = locale;
    this[_background] = background;
    this[_foreground] = foreground;
    this[_shadows] = shadows;
    ;
  }).prototype = engine.EngineTextStyle.prototype;
  dart.addTypeTests(engine.EngineTextStyle);
  engine.EngineTextStyle[dart.implements] = () => [ui.TextStyle];
  dart.setGetterSignature(engine.EngineTextStyle, () => ({
    __proto__: dart.getGetters(engine.EngineTextStyle.__proto__),
    [_effectiveFontFamily]: core.String
  }));
  dart.setLibraryUri(engine.EngineTextStyle, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.EngineTextStyle, () => ({
    __proto__: dart.getFields(engine.EngineTextStyle.__proto__),
    [_color$]: dart.finalFieldType(ui.Color),
    [_decoration]: dart.finalFieldType(ui.TextDecoration),
    [_decorationColor]: dart.finalFieldType(ui.Color),
    [_decorationStyle]: dart.finalFieldType(ui.TextDecorationStyle),
    [_fontWeight]: dart.finalFieldType(ui.FontWeight),
    [_fontStyle]: dart.finalFieldType(ui.FontStyle),
    [_textBaseline]: dart.finalFieldType(ui.TextBaseline),
    [_isFontFamilyProvided]: dart.finalFieldType(core.bool),
    [_fontFamily]: dart.finalFieldType(core.String),
    [_fontFamilyFallback]: dart.finalFieldType(core.List$(core.String)),
    [_fontSize]: dart.finalFieldType(core.double),
    [_letterSpacing]: dart.finalFieldType(core.double),
    [_wordSpacing]: dart.finalFieldType(core.double),
    [_height]: dart.finalFieldType(core.double),
    [_locale]: dart.finalFieldType(ui.Locale),
    [_background]: dart.finalFieldType(ui.Paint),
    [_foreground]: dart.finalFieldType(ui.Paint),
    [_shadows]: dart.finalFieldType(core.List$(ui.Shadow))
  }));
  dart.defineExtensionMethods(engine.EngineTextStyle, ['_equals', 'toString']);
  dart.defineExtensionAccessors(engine.EngineTextStyle, ['hashCode']);
  const _leading = dart.privateName(engine, "_leading");
  engine.EngineStrutStyle = class EngineStrutStyle extends core.Object {
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = engine.EngineStrutStyle._check(other);
      return this[_fontFamily] == typedOther[_fontFamily] && this[_fontSize] == typedOther[_fontSize] && this[_height] == typedOther[_height] && this[_leading] == typedOther[_leading] && dart.equals(this[_fontWeight], typedOther[_fontWeight]) && dart.equals(this[_fontStyle], typedOther[_fontStyle]) && dart.equals(this[_forceStrutHeight], typedOther[_forceStrutHeight]) && dart.test(engine._listEquals(core.String, this[_fontFamilyFallback], typedOther[_fontFamilyFallback]));
    }
    get hashCode() {
      return ui.hashValues(this[_fontFamily], this[_fontFamilyFallback], this[_fontSize], this[_height], this[_leading], this[_fontWeight], this[_fontStyle], this[_forceStrutHeight]);
    }
  };
  (engine.EngineStrutStyle.new = function(opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
    this[_fontFamily] = fontFamily;
    this[_fontFamilyFallback] = fontFamilyFallback;
    this[_fontSize] = fontSize;
    this[_height] = height;
    this[_leading] = leading;
    this[_fontWeight] = fontWeight;
    this[_fontStyle] = fontStyle;
    this[_forceStrutHeight] = forceStrutHeight;
    ;
  }).prototype = engine.EngineStrutStyle.prototype;
  dart.addTypeTests(engine.EngineStrutStyle);
  engine.EngineStrutStyle[dart.implements] = () => [ui.StrutStyle];
  dart.setLibraryUri(engine.EngineStrutStyle, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.EngineStrutStyle, () => ({
    __proto__: dart.getFields(engine.EngineStrutStyle.__proto__),
    [_fontFamily]: dart.finalFieldType(core.String),
    [_fontFamilyFallback]: dart.finalFieldType(core.List$(core.String)),
    [_fontSize]: dart.finalFieldType(core.double),
    [_height]: dart.finalFieldType(core.double),
    [_leading]: dart.finalFieldType(core.double),
    [_fontWeight]: dart.finalFieldType(ui.FontWeight),
    [_fontStyle]: dart.finalFieldType(ui.FontStyle),
    [_forceStrutHeight]: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(engine.EngineStrutStyle, ['_equals']);
  dart.defineExtensionAccessors(engine.EngineStrutStyle, ['hashCode']);
  const _ops = dart.privateName(engine, "_ops");
  const _placeholderCount = dart.privateName(engine, "_placeholderCount");
  const _placeholderScales = dart.privateName(engine, "_placeholderScales");
  const _paragraphStyle = dart.privateName(engine, "_paragraphStyle");
  const _tryBuildPlainText = dart.privateName(engine, "_tryBuildPlainText");
  const _buildRichText = dart.privateName(engine, "_buildRichText");
  engine.EngineParagraphBuilder = class EngineParagraphBuilder extends core.Object {
    pushStyle(style) {
      this[_ops][$add](style);
    }
    get placeholderCount() {
      return this[_placeholderCount];
    }
    get placeholderScales() {
      return this[_placeholderScales];
    }
    addPlaceholder(width, height, alignment, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let baselineOffset = opts && 'baselineOffset' in opts ? opts.baselineOffset : null;
      let baseline = opts && 'baseline' in opts ? opts.baseline : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pop() {
      this[_ops][$add](engine.EngineParagraphBuilder._paragraphBuilderPop);
    }
    addText(text) {
      this[_ops][$add](text);
    }
    build() {
      let t8;
      t8 = this[_tryBuildPlainText]();
      return t8 == null ? this[_buildRichText]() : t8;
    }
    [_tryBuildPlainText]() {
      let color = null;
      let decoration = null;
      let decorationColor = null;
      let decorationStyle = null;
      let fontWeight = this[_paragraphStyle][_fontWeight];
      let fontStyle = this[_paragraphStyle][_fontStyle];
      let textBaseline = null;
      let fontFamily = this[_paragraphStyle][_fontFamily];
      let fontSize = this[_paragraphStyle][_fontSize];
      let textAlign = this[_paragraphStyle][_textAlign];
      let textDirection = this[_paragraphStyle][_textDirection];
      let letterSpacing = null;
      let wordSpacing = null;
      let height = null;
      let locale = this[_paragraphStyle][_locale];
      let background = null;
      let foreground = null;
      let i = 0;
      while (i < dart.notNull(this[_ops][$length]) && engine.EngineTextStyle.is(this[_ops][$_get](i))) {
        let style = engine.EngineTextStyle._check(this[_ops][$_get](i));
        if (style[_color$] != null) {
          color = style[_color$];
        }
        if (style[_decoration] != null) {
          decoration = style[_decoration];
        }
        if (style[_decorationColor] != null) {
          decorationColor = style[_decorationColor];
        }
        if (style[_decorationStyle] != null) {
          decorationStyle = style[_decorationStyle];
        }
        if (style[_fontWeight] != null) {
          fontWeight = style[_fontWeight];
        }
        if (style[_fontStyle] != null) {
          fontStyle = style[_fontStyle];
        }
        if (style[_textBaseline] != null) {
          textBaseline = style[_textBaseline];
        }
        if (style[_fontFamily] != null) {
          fontFamily = style[_fontFamily];
        }
        if (style[_fontSize] != null) {
          fontSize = style[_fontSize];
        }
        if (style[_letterSpacing] != null) {
          letterSpacing = style[_letterSpacing];
        }
        if (style[_wordSpacing] != null) {
          wordSpacing = style[_wordSpacing];
        }
        if (style[_height] != null) {
          height = style[_height];
        }
        if (style[_locale] != null) {
          locale = style[_locale];
        }
        if (style[_background] != null) {
          background = style[_background];
        }
        if (style[_foreground] != null) {
          foreground = style[_foreground];
        }
        i = i + 1;
      }
      let cumulativeStyle = new engine.EngineTextStyle.new({color: color, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, fontWeight: fontWeight, fontStyle: fontStyle, textBaseline: textBaseline, fontFamily: fontFamily, fontSize: fontSize, letterSpacing: letterSpacing, wordSpacing: wordSpacing, height: height, locale: locale, background: background, foreground: foreground});
      let paint = null;
      if (foreground != null) {
        paint = foreground;
      } else {
        paint = new ui.Paint.new();
        if (color != null) {
          paint.color = color;
        }
      }
      if (i >= dart.notNull(this[_ops][$length])) {
        engine._applyTextStyleToElement({element: this[_paragraphElement], style: cumulativeStyle});
        return new engine.EngineParagraph.new({paragraphElement: this[_paragraphElement], geometricStyle: new engine.ParagraphGeometricStyle.new({fontFamily: fontFamily, fontWeight: fontWeight, fontStyle: fontStyle, fontSize: fontSize, lineHeight: height, maxLines: this[_paragraphStyle][_maxLines], letterSpacing: letterSpacing, wordSpacing: wordSpacing, decoration: engine._textDecorationToCssString(decoration, decorationStyle), ellipsis: this[_paragraphStyle][_ellipsis]}), plainText: "", paint: paint, textAlign: textAlign, textDirection: textDirection, background: cumulativeStyle[_background]});
      }
      if (!(typeof this[_ops][$_get](i) == 'string')) {
        return null;
      }
      let plainTextBuffer = new core.StringBuffer.new();
      while (i < dart.notNull(this[_ops][$length]) && typeof this[_ops][$_get](i) == 'string') {
        plainTextBuffer.write(this[_ops][$_get](i));
        i = i + 1;
      }
      for (; i < dart.notNull(this[_ops][$length]); i = i + 1) {
        if (!dart.equals(this[_ops][$_get](i), engine.EngineParagraphBuilder._paragraphBuilderPop)) {
          return null;
        }
      }
      let plainText = plainTextBuffer.toString();
      engine.domRenderer.appendText(this[_paragraphElement], plainText);
      engine._applyTextStyleToElement({element: this[_paragraphElement], style: cumulativeStyle});
      if (cumulativeStyle[_background] != null) {
        engine._applyTextBackgroundToElement({element: this[_paragraphElement], style: cumulativeStyle});
      }
      return new engine.EngineParagraph.new({paragraphElement: this[_paragraphElement], geometricStyle: new engine.ParagraphGeometricStyle.new({fontFamily: fontFamily, fontWeight: fontWeight, fontStyle: fontStyle, fontSize: fontSize, lineHeight: height, maxLines: this[_paragraphStyle][_maxLines], letterSpacing: letterSpacing, wordSpacing: wordSpacing, decoration: engine._textDecorationToCssString(decoration, decorationStyle), ellipsis: this[_paragraphStyle][_ellipsis]}), plainText: plainText, paint: paint, textAlign: textAlign, textDirection: textDirection, background: cumulativeStyle[_background]});
    }
    [_buildRichText]() {
      let elementStack = [];
      const currentElement = () => {
        return dart.test(elementStack[$isNotEmpty]) ? elementStack[$last] : this[_paragraphElement];
      };
      dart.fn(currentElement, VoidTodynamic());
      for (let i = 0; i < dart.notNull(this[_ops][$length]); i = i + 1) {
        let op = this[_ops][$_get](i);
        if (engine.EngineTextStyle.is(op)) {
          let span = html.SpanElement._check(engine.domRenderer.createElement("span"));
          engine._applyTextStyleToElement({element: span, style: op, isSpan: true});
          if (op[_background] != null) {
            engine._applyTextBackgroundToElement({element: span, style: op});
          }
          engine.domRenderer.append(html.Element._check(currentElement()), span);
          elementStack[$add](span);
        } else if (typeof op == 'string') {
          engine.domRenderer.appendText(html.Element._check(currentElement()), op);
        } else if (core.identical(op, engine.EngineParagraphBuilder._paragraphBuilderPop)) {
          elementStack[$removeLast]();
        } else {
          dart.throw(new core.UnsupportedError.new("Unsupported ParagraphBuilder operation: " + dart.str(op)));
        }
      }
      return new engine.EngineParagraph.new({paragraphElement: this[_paragraphElement], geometricStyle: new engine.ParagraphGeometricStyle.new({fontFamily: this[_paragraphStyle][_fontFamily], fontWeight: this[_paragraphStyle][_fontWeight], fontStyle: this[_paragraphStyle][_fontStyle], fontSize: this[_paragraphStyle][_fontSize], lineHeight: this[_paragraphStyle][_height], maxLines: this[_paragraphStyle][_maxLines], ellipsis: this[_paragraphStyle][_ellipsis]}), plainText: null, paint: null, textAlign: this[_paragraphStyle][_textAlign], textDirection: this[_paragraphStyle][_textDirection], background: null});
    }
  };
  (engine.EngineParagraphBuilder.new = function(style) {
    this[_paragraphElement] = html.HtmlElement._check(engine.domRenderer.createElement("p"));
    this[_ops] = [];
    this[_placeholderCount] = null;
    this[_placeholderScales] = JSArrayOfdouble().of([]);
    this[_paragraphStyle] = style;
    let strutFontFamilies = null;
    if (style[_strutStyle] != null) {
      strutFontFamilies = JSArrayOfString().of([]);
      if (style[_strutStyle][_fontFamily] != null) {
        strutFontFamilies[$add](style[_strutStyle][_fontFamily]);
      }
      if (style[_strutStyle][_fontFamilyFallback] != null) {
        strutFontFamilies[$addAll](style[_strutStyle][_fontFamilyFallback]);
      }
    }
    engine._applyParagraphStyleToElement({element: this[_paragraphElement], style: this[_paragraphStyle]});
  }).prototype = engine.EngineParagraphBuilder.prototype;
  dart.addTypeTests(engine.EngineParagraphBuilder);
  engine.EngineParagraphBuilder[dart.implements] = () => [ui.ParagraphBuilder];
  dart.setMethodSignature(engine.EngineParagraphBuilder, () => ({
    __proto__: dart.getMethods(engine.EngineParagraphBuilder.__proto__),
    pushStyle: dart.fnType(dart.void, [ui.TextStyle]),
    addPlaceholder: dart.fnType(dart.void, [core.double, core.double, ui.PlaceholderAlignment], {baseline: ui.TextBaseline, baselineOffset: core.double, scale: core.double}),
    pop: dart.fnType(dart.void, []),
    addText: dart.fnType(dart.void, [core.String]),
    build: dart.fnType(engine.EngineParagraph, []),
    [_tryBuildPlainText]: dart.fnType(engine.EngineParagraph, []),
    [_buildRichText]: dart.fnType(engine.EngineParagraph, [])
  }));
  dart.setGetterSignature(engine.EngineParagraphBuilder, () => ({
    __proto__: dart.getGetters(engine.EngineParagraphBuilder.__proto__),
    placeholderCount: core.int,
    placeholderScales: core.List$(core.double)
  }));
  dart.setLibraryUri(engine.EngineParagraphBuilder, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.EngineParagraphBuilder, () => ({
    __proto__: dart.getFields(engine.EngineParagraphBuilder.__proto__),
    [_paragraphElement]: dart.finalFieldType(html.HtmlElement),
    [_paragraphStyle]: dart.finalFieldType(engine.EngineParagraphStyle),
    [_ops]: dart.finalFieldType(core.List),
    [_placeholderCount]: dart.fieldType(core.int),
    [_placeholderScales]: dart.fieldType(core.List$(core.double))
  }));
  dart.defineLazy(engine.EngineParagraphBuilder, {
    /*engine.EngineParagraphBuilder._paragraphBuilderPop*/get _paragraphBuilderPop() {
      return new core.Object.new();
    }
  });
  const _cachedHashCode = dart.privateName(engine, "_cachedHashCode");
  const _cssFontString = dart.privateName(engine, "_cssFontString");
  const _buildCssFontString = dart.privateName(engine, "_buildCssFontString");
  const ParagraphGeometricStyle_fontWeight = dart.privateName(engine, "ParagraphGeometricStyle.fontWeight");
  const ParagraphGeometricStyle_fontStyle = dart.privateName(engine, "ParagraphGeometricStyle.fontStyle");
  const ParagraphGeometricStyle_fontFamily = dart.privateName(engine, "ParagraphGeometricStyle.fontFamily");
  const ParagraphGeometricStyle_fontSize = dart.privateName(engine, "ParagraphGeometricStyle.fontSize");
  const ParagraphGeometricStyle_lineHeight = dart.privateName(engine, "ParagraphGeometricStyle.lineHeight");
  const ParagraphGeometricStyle_maxLines = dart.privateName(engine, "ParagraphGeometricStyle.maxLines");
  const ParagraphGeometricStyle_letterSpacing = dart.privateName(engine, "ParagraphGeometricStyle.letterSpacing");
  const ParagraphGeometricStyle_wordSpacing = dart.privateName(engine, "ParagraphGeometricStyle.wordSpacing");
  const ParagraphGeometricStyle_decoration = dart.privateName(engine, "ParagraphGeometricStyle.decoration");
  const ParagraphGeometricStyle_ellipsis = dart.privateName(engine, "ParagraphGeometricStyle.ellipsis");
  engine.ParagraphGeometricStyle = class ParagraphGeometricStyle extends core.Object {
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get lineHeight() {
      return this[lineHeight$];
    }
    set lineHeight(value) {
      super.lineHeight = value;
    }
    get maxLines() {
      return this[maxLines$];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get decoration() {
      return this[decoration$];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get ellipsis() {
      return this[ellipsis$];
    }
    set ellipsis(value) {
      super.ellipsis = value;
    }
    get effectiveFontFamily() {
      if (dart.test(engine.assertionsEnabled)) {
        if (dart.test(ui.debugEmulateFlutterTesterEnvironment)) {
          return "Ahem";
        }
      }
      if (this.fontFamily == null || this.fontFamily[$isEmpty]) {
        return "sans-serif";
      }
      return this.fontFamily;
    }
    get cssFontString() {
      let t8;
      t8 = this[_cssFontString];
      return t8 == null ? this[_cssFontString] = this[_buildCssFontString]() : t8;
    }
    [_buildCssFontString]() {
      let result = new core.StringBuffer.new();
      if (this.fontStyle != null) {
        result.write(dart.equals(this.fontStyle, ui.FontStyle.normal) ? "normal" : "italic");
      } else {
        result.write("normal");
      }
      result.write(" ");
      if (this.fontWeight != null) {
        result.write(engine.fontWeightToCss(this.fontWeight));
      } else {
        result.write("normal");
      }
      result.write(" ");
      if (this.fontSize != null) {
        result.write(this.fontSize[$floor]());
        result.write("px");
      } else {
        result.write("14px");
      }
      result.write(" ");
      result.write(engine._quoteFontUnlessGeneric(this.effectiveFontFamily));
      return result.toString();
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = engine.ParagraphGeometricStyle._check(other);
      return dart.equals(this.fontWeight, typedOther.fontWeight) && dart.equals(this.fontStyle, typedOther.fontStyle) && this.fontFamily == typedOther.fontFamily && this.fontSize == typedOther.fontSize && this.lineHeight == typedOther.lineHeight && this.maxLines == typedOther.maxLines && this.letterSpacing == typedOther.letterSpacing && this.wordSpacing == typedOther.wordSpacing && this.decoration == typedOther.decoration && this.ellipsis == typedOther.ellipsis;
    }
    get hashCode() {
      let t8;
      t8 = this[_cachedHashCode];
      return t8 == null ? this[_cachedHashCode] = ui.hashValues(this.fontWeight, this.fontStyle, this.fontFamily, this.fontSize, this.lineHeight, this.maxLines, this.letterSpacing, this.wordSpacing, this.decoration, this.ellipsis) : t8;
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return dart.str(this[$runtimeType]) + "(fontWeight: " + dart.str(this.fontWeight) + ", fontStyle: " + dart.str(this.fontStyle) + "," + " fontFamily: " + dart.str(this.fontFamily) + ", fontSize: " + dart.str(this.fontSize) + "," + " lineHeight: " + dart.str(this.lineHeight) + "," + " maxLines: " + dart.str(this.maxLines) + "," + " letterSpacing: " + dart.str(this.letterSpacing) + "," + " wordSpacing: " + dart.str(this.wordSpacing) + "," + " decoration: " + dart.str(this.decoration) + "," + " ellipsis: " + dart.str(this.ellipsis) + "," + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (engine.ParagraphGeometricStyle.new = function(opts) {
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
    this[_cachedHashCode] = null;
    this[_cssFontString] = null;
    this[fontWeight$] = fontWeight;
    this[fontStyle$] = fontStyle;
    this[fontFamily$] = fontFamily;
    this[fontSize$] = fontSize;
    this[lineHeight$] = lineHeight;
    this[maxLines$] = maxLines;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[decoration$] = decoration;
    this[ellipsis$] = ellipsis;
    ;
  }).prototype = engine.ParagraphGeometricStyle.prototype;
  dart.addTypeTests(engine.ParagraphGeometricStyle);
  const fontWeight$ = ParagraphGeometricStyle_fontWeight;
  const fontStyle$ = ParagraphGeometricStyle_fontStyle;
  const fontFamily$ = ParagraphGeometricStyle_fontFamily;
  const fontSize$ = ParagraphGeometricStyle_fontSize;
  const lineHeight$ = ParagraphGeometricStyle_lineHeight;
  const maxLines$ = ParagraphGeometricStyle_maxLines;
  const letterSpacing$ = ParagraphGeometricStyle_letterSpacing;
  const wordSpacing$ = ParagraphGeometricStyle_wordSpacing;
  const decoration$ = ParagraphGeometricStyle_decoration;
  const ellipsis$ = ParagraphGeometricStyle_ellipsis;
  dart.setMethodSignature(engine.ParagraphGeometricStyle, () => ({
    __proto__: dart.getMethods(engine.ParagraphGeometricStyle.__proto__),
    [_buildCssFontString]: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(engine.ParagraphGeometricStyle, () => ({
    __proto__: dart.getGetters(engine.ParagraphGeometricStyle.__proto__),
    effectiveFontFamily: core.String,
    cssFontString: core.String
  }));
  dart.setLibraryUri(engine.ParagraphGeometricStyle, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ParagraphGeometricStyle, () => ({
    __proto__: dart.getFields(engine.ParagraphGeometricStyle.__proto__),
    fontWeight: dart.finalFieldType(ui.FontWeight),
    fontStyle: dart.finalFieldType(ui.FontStyle),
    fontFamily: dart.finalFieldType(core.String),
    fontSize: dart.finalFieldType(core.double),
    lineHeight: dart.finalFieldType(core.double),
    maxLines: dart.finalFieldType(core.int),
    letterSpacing: dart.finalFieldType(core.double),
    wordSpacing: dart.finalFieldType(core.double),
    decoration: dart.finalFieldType(core.String),
    ellipsis: dart.finalFieldType(core.String),
    [_cachedHashCode]: dart.fieldType(core.int),
    [_cssFontString]: dart.fieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.ParagraphGeometricStyle, ['_equals', 'toString']);
  dart.defineExtensionAccessors(engine.ParagraphGeometricStyle, ['hashCode']);
  const _cachedBoundingClientRect = dart.privateName(engine, "_cachedBoundingClientRect");
  const _invalidateBoundsCache = dart.privateName(engine, "_invalidateBoundsCache");
  const _readAndCacheMetrics = dart.privateName(engine, "_readAndCacheMetrics");
  engine.TextDimensions = class TextDimensions extends core.Object {
    updateText(from, style) {
      if (!(from != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 170, 12, "from != null");
      if (!(this[_element$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 171, 12, "_element != null");
      if (!dart.test(from[_debugHasSameRootStyle](style))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 172, 12, "from._debugHasSameRootStyle(style)");
      if (!dart.test(dart.fn(() => {
        let wasEmptyOrPlainText = dart.test(this[_element$].childNodes[$isEmpty]) || this[_element$].childNodes[$length] === 1 && html.Text.is(this[_element$].childNodes[$first]);
        if (!wasEmptyOrPlainText) {
          dart.throw(core.Exception.new("Failed to copy text into the paragraph measuring element. The " + "element already contains rich text \"" + dart.str(this[_element$][$innerHtml]) + "\". It is " + "likely that a previous measurement did not clean up after " + "itself."));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 173, 12, "() {\r\n      final bool wasEmptyOrPlainText = _element.childNodes.isEmpty ||\r\n          (_element.childNodes.length == 1 &&\r\n              _element.childNodes.first is html.Text);\r\n      if (!wasEmptyOrPlainText) {\r\n        throw Exception(\r\n            'Failed to copy text into the paragraph measuring element. The '\r\n            'element already contains rich text \"${_element.innerHtml}\". It is '\r\n            'likely that a previous measurement did not clean up after '\r\n            'itself.');\r\n      }\r\n      return true;\r\n    }()");
      this[_invalidateBoundsCache]();
      let plainText = from[_plainText];
      if (plainText != null) {
        if (plainText[$endsWith]("\n")) {
          this[_element$][$text] = dart.str(plainText) + "\n";
        } else {
          this[_element$][$text] = plainText;
        }
      } else {
        let copy = html.Element._check(from[_paragraphElement][$clone](true));
        this[_element$][$children][$addAll](copy[$children]);
      }
    }
    updateWidth(cssWidth) {
      this[_invalidateBoundsCache]();
      this[_element$].style[$width] = cssWidth;
    }
    [_invalidateBoundsCache]() {
      this[_cachedBoundingClientRect] = null;
    }
    updateTextToSpace() {
      this[_invalidateBoundsCache]();
      this[_element$][$text] = " ";
    }
    applyStyle(style) {
      let t8;
      t8 = this[_element$].style;
      t8[$fontSize] = style.fontSize != null ? dart.str(style.fontSize[$floor]()) + "px" : null;
      t8[$fontFamily] = engine._quoteFontUnlessGeneric(style.effectiveFontFamily);
      t8[$fontWeight] = style.fontWeight != null ? engine.fontWeightToCss(style.fontWeight) : null;
      t8[$fontStyle] = style.fontStyle != null ? dart.equals(style.fontStyle, ui.FontStyle.normal) ? "normal" : "italic" : null;
      t8[$letterSpacing] = style.letterSpacing != null ? dart.str(style.letterSpacing) + "px" : null;
      t8[$wordSpacing] = style.wordSpacing != null ? dart.str(style.wordSpacing) + "px" : null;
      t8[$textDecoration] = style.decoration;
      t8;
      if (style.lineHeight != null) {
        this[_element$].style[$lineHeight] = dart.toString(style.lineHeight);
      }
      this[_invalidateBoundsCache]();
    }
    appendToHost(hostElement) {
      hostElement[$append](this[_element$]);
      this[_invalidateBoundsCache]();
    }
    [_readAndCacheMetrics]() {
      let t8;
      t8 = this[_cachedBoundingClientRect];
      return t8 == null ? this[_cachedBoundingClientRect] = this[_element$].getBoundingClientRect() : t8;
    }
    get width() {
      return this[_readAndCacheMetrics]()[$width];
    }
    get height() {
      return this[_readAndCacheMetrics]()[$height];
    }
  };
  (engine.TextDimensions.new = function(_element) {
    this[_cachedBoundingClientRect] = null;
    this[_element$] = _element;
    ;
  }).prototype = engine.TextDimensions.prototype;
  dart.addTypeTests(engine.TextDimensions);
  dart.setMethodSignature(engine.TextDimensions, () => ({
    __proto__: dart.getMethods(engine.TextDimensions.__proto__),
    updateText: dart.fnType(dart.void, [engine.EngineParagraph, engine.ParagraphGeometricStyle]),
    updateWidth: dart.fnType(dart.void, [core.String]),
    [_invalidateBoundsCache]: dart.fnType(dart.void, []),
    updateTextToSpace: dart.fnType(dart.void, []),
    applyStyle: dart.fnType(dart.void, [engine.ParagraphGeometricStyle]),
    appendToHost: dart.fnType(dart.void, [html.HtmlElement]),
    [_readAndCacheMetrics]: dart.fnType(math.Rectangle$(core.num), [])
  }));
  dart.setGetterSignature(engine.TextDimensions, () => ({
    __proto__: dart.getGetters(engine.TextDimensions.__proto__),
    width: core.double,
    height: core.double
  }));
  dart.setLibraryUri(engine.TextDimensions, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.TextDimensions, () => ({
    __proto__: dart.getFields(engine.TextDimensions.__proto__),
    [_element$]: dart.finalFieldType(html.HtmlElement),
    [_cachedBoundingClientRect]: dart.fieldType(math.Rectangle$(core.num))
  }));
  const _probe = dart.privateName(engine, "_probe");
  const _cachedAlphabeticBaseline = dart.privateName(engine, "_cachedAlphabeticBaseline");
  const _singleLineHost = dart.privateName(engine, "_singleLineHost");
  const _minIntrinsicHost = dart.privateName(engine, "_minIntrinsicHost");
  const _constrainedHost = dart.privateName(engine, "_constrainedHost");
  const _lineHeightHost = dart.privateName(engine, "_lineHeightHost");
  const _lineHeightDimensions = dart.privateName(engine, "_lineHeightDimensions");
  const _hitCount = dart.privateName(engine, "_hitCount");
  const _debugIsDisposed = dart.privateName(engine, "_debugIsDisposed");
  const _paragraph = dart.privateName(engine, "_paragraph");
  const _measurementCache = dart.privateName(engine, "_measurementCache");
  const _mruList = dart.privateName(engine, "_mruList");
  const _configureSingleLineHostElements = dart.privateName(engine, "_configureSingleLineHostElements");
  const _configureMinIntrinsicHostElements = dart.privateName(engine, "_configureMinIntrinsicHostElements");
  const _configureConstrainedHostElements = dart.privateName(engine, "_configureConstrainedHostElements");
  const _configureLineHeightHostElements = dart.privateName(engine, "_configureLineHeightHostElements");
  const _collectTextNodes = dart.privateName(engine, "_collectTextNodes");
  const ParagraphRuler_style = dart.privateName(engine, "ParagraphRuler.style");
  const ParagraphRuler_rulerManager = dart.privateName(engine, "ParagraphRuler.rulerManager");
  const ParagraphRuler_singleLineDimensions = dart.privateName(engine, "ParagraphRuler.singleLineDimensions");
  const ParagraphRuler_minIntrinsicDimensions = dart.privateName(engine, "ParagraphRuler.minIntrinsicDimensions");
  const ParagraphRuler_constrainedDimensions = dart.privateName(engine, "ParagraphRuler.constrainedDimensions");
  engine.ParagraphRuler = class ParagraphRuler extends core.Object {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get rulerManager() {
      return this[rulerManager$];
    }
    set rulerManager(value) {
      super.rulerManager = value;
    }
    get singleLineDimensions() {
      return this[singleLineDimensions];
    }
    set singleLineDimensions(value) {
      super.singleLineDimensions = value;
    }
    get minIntrinsicDimensions() {
      return this[minIntrinsicDimensions];
    }
    set minIntrinsicDimensions(value) {
      this[minIntrinsicDimensions] = value;
    }
    get constrainedDimensions() {
      return this[constrainedDimensions];
    }
    set constrainedDimensions(value) {
      this[constrainedDimensions] = value;
    }
    get alphabeticBaseline() {
      let t8;
      t8 = this[_cachedAlphabeticBaseline];
      return t8 == null ? this[_cachedAlphabeticBaseline] = this[_probe].getBoundingClientRect()[$bottom] : t8;
    }
    get lineHeightDimensions() {
      if (this[_lineHeightDimensions] == null) {
        this[_lineHeightHost] = html.DivElement.new();
        this[_lineHeightDimensions] = new engine.TextDimensions.new(html.ParagraphElement.new());
        this[_configureLineHeightHostElements]();
        this[_lineHeightHost][$append](this[_probe]);
      }
      return this[_lineHeightDimensions];
    }
    get hitCount() {
      return this[_hitCount];
    }
    hit() {
      this[_hitCount] = dart.notNull(this[_hitCount]) + 1;
    }
    resetHitCount() {
      this[_hitCount] = 0;
    }
    get debugIsDisposed() {
      return this[_debugIsDisposed];
    }
    [_configureSingleLineHostElements]() {
      let t8;
      t8 = this[_singleLineHost].style;
      t8[$visibility] = "hidden";
      t8[$position] = "absolute";
      t8[$top] = "0";
      t8[$left] = "0";
      t8[$display] = "flex";
      t8[$flexDirection] = "row";
      t8[$alignItems] = "baseline";
      t8[$margin] = "0";
      t8[$border] = "0";
      t8[$padding] = "0";
      t8;
      this.singleLineDimensions.applyStyle(this.style);
      this.singleLineDimensions[_element$].style[$whiteSpace] = "pre";
      this.singleLineDimensions.appendToHost(this[_singleLineHost]);
      this.rulerManager.addHostElement(this[_singleLineHost]);
    }
    [_configureMinIntrinsicHostElements]() {
      let t8, t8$;
      t8 = this[_minIntrinsicHost].style;
      t8[$visibility] = "hidden";
      t8[$position] = "absolute";
      t8[$top] = "0";
      t8[$left] = "0";
      t8[$display] = "flex";
      t8[$flexDirection] = "row";
      t8[$margin] = "0";
      t8[$border] = "0";
      t8[$padding] = "0";
      t8;
      this.minIntrinsicDimensions.applyStyle(this.style);
      t8$ = this.minIntrinsicDimensions[_element$].style;
      t8$[$flex] = "0";
      t8$[$display] = "inline";
      t8$[$whiteSpace] = "pre-line";
      t8$;
      this[_minIntrinsicHost][$append](this.minIntrinsicDimensions[_element$]);
      this.rulerManager.addHostElement(this[_minIntrinsicHost]);
    }
    [_configureConstrainedHostElements]() {
      let t8, t8$, t8$0;
      t8 = this[_constrainedHost].style;
      t8[$visibility] = "hidden";
      t8[$position] = "absolute";
      t8[$top] = "0";
      t8[$left] = "0";
      t8[$display] = "flex";
      t8[$flexDirection] = "row";
      t8[$alignItems] = "baseline";
      t8[$margin] = "0";
      t8[$border] = "0";
      t8[$padding] = "0";
      t8;
      this.constrainedDimensions.applyStyle(this.style);
      let elementStyle = this.constrainedDimensions[_element$].style;
      t8$ = elementStyle;
      t8$[$display] = "block";
      t8$[$overflowWrap] = "break-word";
      t8$;
      if (this.style.ellipsis == null) {
        elementStyle[$whiteSpace] = "pre-wrap";
      } else {
        t8$0 = elementStyle;
        t8$0[$whiteSpace] = "pre";
        t8$0[$overflow] = "hidden";
        t8$0[$textOverflow] = "ellipsis";
        t8$0;
      }
      this.constrainedDimensions.appendToHost(this[_constrainedHost]);
      this.rulerManager.addHostElement(this[_constrainedHost]);
    }
    [_configureLineHeightHostElements]() {
      let t8;
      t8 = this[_lineHeightHost].style;
      t8[$visibility] = "hidden";
      t8[$position] = "absolute";
      t8[$top] = "0";
      t8[$left] = "0";
      t8[$display] = "flex";
      t8[$flexDirection] = "row";
      t8[$alignItems] = "baseline";
      t8[$margin] = "0";
      t8[$border] = "0";
      t8[$padding] = "0";
      t8;
      this.lineHeightDimensions.applyStyle(this.style);
      this.lineHeightDimensions[_element$].style[$whiteSpace] = "pre";
      this.lineHeightDimensions.updateTextToSpace();
      this.lineHeightDimensions.appendToHost(this[_lineHeightHost]);
      this.rulerManager.addHostElement(this[_lineHeightHost]);
    }
    willMeasure(paragraph) {
      if (!(paragraph != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 515, 12, "paragraph != null");
      if (!dart.test(dart.fn(() => {
        if (this[_paragraph] != null) {
          dart.throw(core.Exception.new("Attempted to reuse a " + dart.str(dart.wrapType(engine.ParagraphRuler)) + " but it is currently " + "measuring another paragraph (" + dart.str(this[_paragraph]) + "). It is possible that "));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 516, 12, "() {\r\n      if (_paragraph != null) {\r\n        throw Exception(\r\n            'Attempted to reuse a $ParagraphRuler but it is currently '\r\n            'measuring another paragraph ($_paragraph). It is possible that ');\r\n      }\r\n      return true;\r\n    }()");
      if (!dart.test(paragraph[_debugHasSameRootStyle](this.style))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 524, 12, "paragraph._debugHasSameRootStyle(style)");
      this[_paragraph] = paragraph;
    }
    measureAll(constraints) {
      this.measureAsSingleLine();
      this.measureMinIntrinsicWidth();
      this.measureWithConstraints(constraints);
    }
    measureAsSingleLine() {
      if (!!dart.test(this[_debugIsDisposed])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 543, 12, "!_debugIsDisposed");
      if (!(this[_paragraph] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 544, 12, "_paragraph != null");
      if (this[_paragraph][_plainText] === "") {
        this.singleLineDimensions.updateTextToSpace();
      } else {
        this.singleLineDimensions.updateText(this[_paragraph], this.style);
      }
    }
    measureMinIntrinsicWidth() {
      if (!!dart.test(this[_debugIsDisposed])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 562, 12, "!_debugIsDisposed");
      if (!(this[_paragraph] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 563, 12, "_paragraph != null");
      this.minIntrinsicDimensions.updateText(this[_paragraph], this.style);
    }
    measureWithConstraints(constraints) {
      if (!!dart.test(this[_debugIsDisposed])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 572, 12, "!_debugIsDisposed");
      if (!(this[_paragraph] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 573, 12, "_paragraph != null");
      this.constrainedDimensions.updateText(this[_paragraph], this.style);
      this.constrainedDimensions.updateWidth(dart.str(dart.notNull(constraints.width) + 0.5) + "px");
    }
    hitTest(constraints, offset) {
      this.measureWithConstraints(constraints);
      let el = this.constrainedDimensions[_element$];
      let textNodes = JSArrayOfNode().of([]);
      this[_collectTextNodes](el.childNodes, textNodes);
      for (let i = dart.notNull(textNodes[$length]) - 1; i >= 0; i = i - 1) {
        let node = textNodes[$_get](i);
        let parent = html.Element._check(node.parentNode);
        let bounds = parent.getBoundingClientRect();
        let dx = offset.dx;
        let dy = offset.dy;
        if (dart.notNull(dx) >= dart.notNull(bounds[$left]) && dart.notNull(dy) < dart.notNull(bounds[$right]) && dart.notNull(dy) >= dart.notNull(bounds[$top]) && dart.notNull(dy) < dart.notNull(bounds[$bottom])) {
          let textPosition = 0;
          for (let nodeIndex = 0; nodeIndex < i; nodeIndex = nodeIndex + 1) {
            textPosition = textPosition + textNodes[$_get](nodeIndex)[$text].length;
          }
          return textPosition;
        }
      }
      return 0;
    }
    [_collectTextNodes](nodes, textNodes) {
      for (let node of nodes) {
        if (node.nodeType === 3) {
          textNodes[$add](node);
        }
        if (dart.test(node.hasChildNodes())) {
          this[_collectTextNodes](node.childNodes, textNodes);
        }
      }
    }
    didMeasure() {
      let t8;
      if (!(this[_paragraph] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 637, 12, "_paragraph != null");
      if (this[_paragraph][_plainText] == null) {
        t8 = engine.domRenderer;
        t8.clearDom(this.singleLineDimensions[_element$]);
        t8.clearDom(this.minIntrinsicDimensions[_element$]);
        t8.clearDom(this.constrainedDimensions[_element$]);
        t8;
      }
      this[_paragraph] = null;
    }
    measureBoxesForRange(plainText, constraints, opts) {
      let t8, t8$;
      let start = opts && 'start' in opts ? opts.start : null;
      let end = opts && 'end' in opts ? opts.end : null;
      let alignOffset = opts && 'alignOffset' in opts ? opts.alignOffset : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!!dart.test(this[_debugIsDisposed])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 669, 12, "!_debugIsDisposed");
      if (!(dart.notNull(start) >= 0 && dart.notNull(start) <= plainText.length)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 670, 12, "start >= 0 && start <= plainText.length");
      if (!(dart.notNull(end) >= 0 && dart.notNull(end) <= plainText.length)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 671, 12, "end >= 0 && end <= plainText.length");
      if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 672, 12, "start <= end");
      let before = plainText[$substring](0, start);
      let rangeText = plainText[$substring](start, end);
      let after = plainText[$substring](end);
      let rangeSpan = (t8 = html.SpanElement.new(), t8[$text] = rangeText, t8);
      engine.domRenderer.clearDom(this.constrainedDimensions[_element$]);
      t8$ = this.constrainedDimensions[_element$];
      t8$[$appendText](before);
      t8$[$append](rangeSpan);
      t8$[$appendText](after);
      t8$;
      this.constrainedDimensions.updateWidth(dart.str(constraints.width) + "px");
      let clientRects = rangeSpan[$getClientRects]();
      let boxes = JSArrayOfTextBox().of([]);
      for (let rect of clientRects) {
        boxes[$add](new ui.TextBox.fromLTRBD(dart.notNull(rect[$left]) + dart.notNull(alignOffset), rect[$top], dart.notNull(rect[$right]) + dart.notNull(alignOffset), rect[$bottom], textDirection));
      }
      engine.domRenderer.clearDom(this.constrainedDimensions[_element$]);
      return boxes;
    }
    dispose() {
      let t8;
      if (!dart.test(dart.fn(() => {
        if (this[_paragraph] != null) {
          dart.throw(core.Exception.new("Attempted to dispose of a ruler in the middle of " + "measurement. This is likely a bug in the framework."));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 712, 12, "() {\r\n      if (_paragraph != null) {\r\n        throw Exception('Attempted to dispose of a ruler in the middle of '\r\n            'measurement. This is likely a bug in the framework.');\r\n      }\r\n      return true;\r\n    }()");
      this[_singleLineHost][$remove]();
      this[_minIntrinsicHost][$remove]();
      this[_constrainedHost][$remove]();
      t8 = this[_lineHeightHost];
      t8 == null ? null : t8[$remove]();
      if (!dart.test(dart.fn(() => {
        this[_debugIsDisposed] = true;
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 723, 12, "() {\r\n      _debugIsDisposed = true;\r\n      return true;\r\n    }()");
    }
    cacheMeasurement(paragraph, item) {
      let t11, t10, t9, t8;
      let plainText = paragraph[_plainText];
      let constraintCache = (t8 = this[_measurementCache], t9 = plainText, t10 = t8[$_get](t9), t10 == null ? (t11 = JSArrayOfMeasurementResult().of([]), t8[$_set](t9, t11), t11) : t10);
      constraintCache[$add](item);
      if (dart.notNull(constraintCache[$length]) > 8) {
        constraintCache[$removeAt](0);
      }
      this[_mruList][$add](plainText);
      if (dart.notNull(this[_mruList][$length]) > 2400) {
        for (let i = 0; i < 100; i = i + 1) {
          this[_measurementCache][$remove](this[_mruList][$_get](i));
        }
        this[_mruList][$removeRange](0, 100);
      }
    }
    cacheLookup(paragraph, constraints) {
      let plainText = paragraph[_plainText];
      if (plainText == null) {
        return null;
      }
      let constraintCache = this[_measurementCache][$_get](plainText);
      if (constraintCache == null) {
        return null;
      }
      let len = constraintCache[$length];
      for (let i = 0; i < dart.notNull(len); i = i + 1) {
        let item = constraintCache[$_get](i);
        if (item.constraintWidth == constraints.width) {
          return item;
        }
      }
      return null;
    }
  };
  (engine.ParagraphRuler.new = function(style, rulerManager) {
    this[_probe] = html.DivElement.new();
    this[_cachedAlphabeticBaseline] = null;
    this[_singleLineHost] = html.DivElement.new();
    this[singleLineDimensions] = new engine.TextDimensions.new(html.ParagraphElement.new());
    this[_minIntrinsicHost] = html.DivElement.new();
    this[minIntrinsicDimensions] = new engine.TextDimensions.new(html.ParagraphElement.new());
    this[_constrainedHost] = html.DivElement.new();
    this[constrainedDimensions] = new engine.TextDimensions.new(html.ParagraphElement.new());
    this[_lineHeightHost] = null;
    this[_lineHeightDimensions] = null;
    this[_hitCount] = 0;
    this[_debugIsDisposed] = false;
    this[_paragraph] = null;
    this[_measurementCache] = new (IdentityMapOfString$ListOfMeasurementResult()).new();
    this[_mruList] = JSArrayOfString().of([]);
    this[style$] = style;
    this[rulerManager$] = rulerManager;
    this[_configureSingleLineHostElements]();
    this[_singleLineHost][$append](this[_probe]);
    this[_configureMinIntrinsicHostElements]();
    this[_configureConstrainedHostElements]();
  }).prototype = engine.ParagraphRuler.prototype;
  dart.addTypeTests(engine.ParagraphRuler);
  const style$ = ParagraphRuler_style;
  const rulerManager$ = ParagraphRuler_rulerManager;
  const singleLineDimensions = ParagraphRuler_singleLineDimensions;
  const minIntrinsicDimensions = ParagraphRuler_minIntrinsicDimensions;
  const constrainedDimensions = ParagraphRuler_constrainedDimensions;
  dart.setMethodSignature(engine.ParagraphRuler, () => ({
    __proto__: dart.getMethods(engine.ParagraphRuler.__proto__),
    hit: dart.fnType(dart.void, []),
    resetHitCount: dart.fnType(dart.void, []),
    [_configureSingleLineHostElements]: dart.fnType(dart.void, []),
    [_configureMinIntrinsicHostElements]: dart.fnType(dart.void, []),
    [_configureConstrainedHostElements]: dart.fnType(dart.void, []),
    [_configureLineHeightHostElements]: dart.fnType(dart.void, []),
    willMeasure: dart.fnType(dart.void, [engine.EngineParagraph]),
    measureAll: dart.fnType(dart.void, [ui.ParagraphConstraints]),
    measureAsSingleLine: dart.fnType(dart.void, []),
    measureMinIntrinsicWidth: dart.fnType(dart.void, []),
    measureWithConstraints: dart.fnType(dart.void, [ui.ParagraphConstraints]),
    hitTest: dart.fnType(core.int, [ui.ParagraphConstraints, ui.Offset]),
    [_collectTextNodes]: dart.fnType(dart.void, [core.Iterable$(html.Node), core.List$(html.Node)]),
    didMeasure: dart.fnType(dart.void, []),
    measureBoxesForRange: dart.fnType(core.List$(ui.TextBox), [core.String, ui.ParagraphConstraints], {alignOffset: core.double, end: core.int, start: core.int, textDirection: ui.TextDirection}),
    dispose: dart.fnType(dart.void, []),
    cacheMeasurement: dart.fnType(dart.void, [engine.EngineParagraph, engine.MeasurementResult]),
    cacheLookup: dart.fnType(engine.MeasurementResult, [engine.EngineParagraph, ui.ParagraphConstraints])
  }));
  dart.setGetterSignature(engine.ParagraphRuler, () => ({
    __proto__: dart.getGetters(engine.ParagraphRuler.__proto__),
    alphabeticBaseline: core.double,
    lineHeightDimensions: engine.TextDimensions,
    hitCount: core.int,
    debugIsDisposed: core.bool
  }));
  dart.setLibraryUri(engine.ParagraphRuler, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ParagraphRuler, () => ({
    __proto__: dart.getFields(engine.ParagraphRuler.__proto__),
    style: dart.finalFieldType(engine.ParagraphGeometricStyle),
    rulerManager: dart.finalFieldType(engine.RulerManager),
    [_probe]: dart.finalFieldType(html.HtmlElement),
    [_cachedAlphabeticBaseline]: dart.fieldType(core.double),
    [_singleLineHost]: dart.finalFieldType(html.DivElement),
    singleLineDimensions: dart.finalFieldType(engine.TextDimensions),
    [_minIntrinsicHost]: dart.finalFieldType(html.DivElement),
    minIntrinsicDimensions: dart.fieldType(engine.TextDimensions),
    [_constrainedHost]: dart.finalFieldType(html.DivElement),
    constrainedDimensions: dart.fieldType(engine.TextDimensions),
    [_lineHeightHost]: dart.fieldType(html.DivElement),
    [_lineHeightDimensions]: dart.fieldType(engine.TextDimensions),
    [_hitCount]: dart.fieldType(core.int),
    [_debugIsDisposed]: dart.fieldType(core.bool),
    [_paragraph]: dart.fieldType(engine.EngineParagraph),
    [_measurementCache]: dart.fieldType(core.Map$(core.String, core.List$(engine.MeasurementResult))),
    [_mruList]: dart.finalFieldType(core.List$(core.String))
  }));
  dart.defineLazy(engine.ParagraphRuler, {
    /*engine.ParagraphRuler._cacheLimit*/get _cacheLimit() {
      return 2400;
    },
    /*engine.ParagraphRuler._cacheBlockFactor*/get _cacheBlockFactor() {
      return 100;
    },
    /*engine.ParagraphRuler._constraintCacheSize*/get _constraintCacheSize() {
      return 8;
    }
  });
  const MeasurementResult_constraintWidth = dart.privateName(engine, "MeasurementResult.constraintWidth");
  const MeasurementResult_isSingleLine = dart.privateName(engine, "MeasurementResult.isSingleLine");
  const MeasurementResult_width = dart.privateName(engine, "MeasurementResult.width");
  const MeasurementResult_height = dart.privateName(engine, "MeasurementResult.height");
  const MeasurementResult_naturalHeight = dart.privateName(engine, "MeasurementResult.naturalHeight");
  const MeasurementResult_lineHeight = dart.privateName(engine, "MeasurementResult.lineHeight");
  const MeasurementResult_minIntrinsicWidth = dart.privateName(engine, "MeasurementResult.minIntrinsicWidth");
  const MeasurementResult_maxIntrinsicWidth = dart.privateName(engine, "MeasurementResult.maxIntrinsicWidth");
  const MeasurementResult_alphabeticBaseline = dart.privateName(engine, "MeasurementResult.alphabeticBaseline");
  const MeasurementResult_ideographicBaseline = dart.privateName(engine, "MeasurementResult.ideographicBaseline");
  const MeasurementResult_lines = dart.privateName(engine, "MeasurementResult.lines");
  engine.MeasurementResult = class MeasurementResult extends core.Object {
    get constraintWidth() {
      return this[constraintWidth$];
    }
    set constraintWidth(value) {
      super.constraintWidth = value;
    }
    get isSingleLine() {
      return this[isSingleLine$];
    }
    set isSingleLine(value) {
      super.isSingleLine = value;
    }
    get width() {
      return this[width$2];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$2];
    }
    set height(value) {
      super.height = value;
    }
    get naturalHeight() {
      return this[naturalHeight$];
    }
    set naturalHeight(value) {
      super.naturalHeight = value;
    }
    get lineHeight() {
      return this[lineHeight$0];
    }
    set lineHeight(value) {
      super.lineHeight = value;
    }
    get minIntrinsicWidth() {
      return this[minIntrinsicWidth$];
    }
    set minIntrinsicWidth(value) {
      super.minIntrinsicWidth = value;
    }
    get maxIntrinsicWidth() {
      return this[maxIntrinsicWidth$];
    }
    set maxIntrinsicWidth(value) {
      super.maxIntrinsicWidth = value;
    }
    get alphabeticBaseline() {
      return this[alphabeticBaseline$];
    }
    set alphabeticBaseline(value) {
      super.alphabeticBaseline = value;
    }
    get ideographicBaseline() {
      return this[ideographicBaseline$];
    }
    set ideographicBaseline(value) {
      super.ideographicBaseline = value;
    }
    get lines() {
      return this[lines$];
    }
    set lines(value) {
      super.lines = value;
    }
  };
  (engine.MeasurementResult.new = function(constraintWidth, opts) {
    let isSingleLine = opts && 'isSingleLine' in opts ? opts.isSingleLine : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let naturalHeight = opts && 'naturalHeight' in opts ? opts.naturalHeight : null;
    let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : null;
    let minIntrinsicWidth = opts && 'minIntrinsicWidth' in opts ? opts.minIntrinsicWidth : null;
    let maxIntrinsicWidth = opts && 'maxIntrinsicWidth' in opts ? opts.maxIntrinsicWidth : null;
    let alphabeticBaseline = opts && 'alphabeticBaseline' in opts ? opts.alphabeticBaseline : null;
    let ideographicBaseline = opts && 'ideographicBaseline' in opts ? opts.ideographicBaseline : null;
    let lines = opts && 'lines' in opts ? opts.lines : null;
    this[constraintWidth$] = constraintWidth;
    this[isSingleLine$] = isSingleLine;
    this[width$2] = width;
    this[height$2] = height;
    this[naturalHeight$] = naturalHeight;
    this[lineHeight$0] = lineHeight;
    this[minIntrinsicWidth$] = minIntrinsicWidth;
    this[maxIntrinsicWidth$] = maxIntrinsicWidth;
    this[alphabeticBaseline$] = alphabeticBaseline;
    this[ideographicBaseline$] = ideographicBaseline;
    this[lines$] = lines;
    if (!(constraintWidth != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 839, 16, "constraintWidth != null");
    if (!(isSingleLine != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 840, 16, "isSingleLine != null");
    if (!(width != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 841, 16, "width != null");
    if (!(height != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 842, 16, "height != null");
    if (!(naturalHeight != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 843, 16, "naturalHeight != null");
    if (!(minIntrinsicWidth != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 844, 16, "minIntrinsicWidth != null");
    if (!(maxIntrinsicWidth != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 845, 16, "maxIntrinsicWidth != null");
    if (!(alphabeticBaseline != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 846, 16, "alphabeticBaseline != null");
    if (!(ideographicBaseline != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart", 847, 16, "ideographicBaseline != null");
    ;
  }).prototype = engine.MeasurementResult.prototype;
  dart.addTypeTests(engine.MeasurementResult);
  const constraintWidth$ = MeasurementResult_constraintWidth;
  const isSingleLine$ = MeasurementResult_isSingleLine;
  const width$2 = MeasurementResult_width;
  const height$2 = MeasurementResult_height;
  const naturalHeight$ = MeasurementResult_naturalHeight;
  const lineHeight$0 = MeasurementResult_lineHeight;
  const minIntrinsicWidth$ = MeasurementResult_minIntrinsicWidth;
  const maxIntrinsicWidth$ = MeasurementResult_maxIntrinsicWidth;
  const alphabeticBaseline$ = MeasurementResult_alphabeticBaseline;
  const ideographicBaseline$ = MeasurementResult_ideographicBaseline;
  const lines$ = MeasurementResult_lines;
  dart.setLibraryUri(engine.MeasurementResult, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.MeasurementResult, () => ({
    __proto__: dart.getFields(engine.MeasurementResult.__proto__),
    constraintWidth: dart.finalFieldType(core.double),
    isSingleLine: dart.finalFieldType(core.bool),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    naturalHeight: dart.finalFieldType(core.double),
    lineHeight: dart.finalFieldType(core.double),
    minIntrinsicWidth: dart.finalFieldType(core.double),
    maxIntrinsicWidth: dart.finalFieldType(core.double),
    alphabeticBaseline: dart.finalFieldType(core.double),
    ideographicBaseline: dart.finalFieldType(core.double),
    lines: dart.finalFieldType(core.List$(core.String))
  }));
  let C121;
  let C122;
  let C123;
  let C124;
  engine._ComparisonResult = class _ComparisonResult extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine._ComparisonResult.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine._ComparisonResult.prototype;
  dart.addTypeTests(engine._ComparisonResult);
  dart.setLibraryUri(engine._ComparisonResult, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._ComparisonResult, () => ({
    __proto__: dart.getFields(engine._ComparisonResult.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine._ComparisonResult, ['toString']);
  engine._ComparisonResult.inside = C121 || CT.C121;
  engine._ComparisonResult.higher = C122 || CT.C122;
  engine._ComparisonResult.lower = C123 || CT.C123;
  engine._ComparisonResult.values = C124 || CT.C124;
  const _is_UnicodeRange_default = Symbol('_is_UnicodeRange_default');
  const UnicodeRange_start = dart.privateName(engine, "UnicodeRange.start");
  const UnicodeRange_end = dart.privateName(engine, "UnicodeRange.end");
  const UnicodeRange_property = dart.privateName(engine, "UnicodeRange.property");
  engine.UnicodeRange$ = dart.generic(P => {
    class UnicodeRange extends core.Object {
      get start() {
        return this[start$];
      }
      set start(value) {
        super.start = value;
      }
      get end() {
        return this[end$];
      }
      set end(value) {
        super.end = value;
      }
      get property() {
        return this[property$];
      }
      set property(value) {
        super.property = value;
      }
      compare(value) {
        if (dart.notNull(value) < dart.notNull(this.start)) {
          return engine._ComparisonResult.lower;
        }
        if (dart.notNull(value) > dart.notNull(this.end)) {
          return engine._ComparisonResult.higher;
        }
        return engine._ComparisonResult.inside;
      }
    }
    (UnicodeRange.new = function(start, end, property) {
      this[start$] = start;
      this[end$] = end;
      this[property$] = property;
      ;
    }).prototype = UnicodeRange.prototype;
    dart.addTypeTests(UnicodeRange);
    UnicodeRange.prototype[_is_UnicodeRange_default] = true;
    const start$ = UnicodeRange_start;
    const end$ = UnicodeRange_end;
    const property$ = UnicodeRange_property;
    dart.setMethodSignature(UnicodeRange, () => ({
      __proto__: dart.getMethods(UnicodeRange.__proto__),
      compare: dart.fnType(engine._ComparisonResult, [core.int])
    }));
    dart.setLibraryUri(UnicodeRange, "package:flutter_web_ui/src/engine.dart");
    dart.setFieldSignature(UnicodeRange, () => ({
      __proto__: dart.getFields(UnicodeRange.__proto__),
      start: dart.finalFieldType(core.int),
      end: dart.finalFieldType(core.int),
      property: dart.finalFieldType(P)
    }));
    return UnicodeRange;
  });
  engine.UnicodeRange = engine.UnicodeRange$();
  dart.addTypeTests(engine.UnicodeRange, _is_UnicodeRange_default);
  const _binarySearch = dart.privateName(engine, "_binarySearch");
  const _is_UnicodePropertyLookup_default = Symbol('_is_UnicodePropertyLookup_default');
  const UnicodePropertyLookup_ranges = dart.privateName(engine, "UnicodePropertyLookup.ranges");
  engine.UnicodePropertyLookup$ = dart.generic(P => {
    class UnicodePropertyLookup extends core.Object {
      get ranges() {
        return this[ranges$];
      }
      set ranges(value) {
        super.ranges = value;
      }
      find(value) {
        let index = this[_binarySearch](value);
        return index === -1 ? null : this.ranges[$_get](index).property;
      }
      [_binarySearch](value) {
        let min = 0;
        let max = this.ranges[$length];
        while (min < dart.notNull(max)) {
          let mid = min + (dart.notNull(max) - min)[$rightShift](1);
          let range = this.ranges[$_get](mid);
          switch (range.compare(value)) {
            case C122 || CT.C122:
            {
              min = mid + 1;
              break;
            }
            case C123 || CT.C123:
            {
              max = mid;
              break;
            }
            case C121 || CT.C121:
            {
              return mid;
            }
          }
        }
        return -1;
      }
    }
    (UnicodePropertyLookup.new = function(ranges) {
      this[ranges$] = ranges;
      ;
    }).prototype = UnicodePropertyLookup.prototype;
    dart.addTypeTests(UnicodePropertyLookup);
    UnicodePropertyLookup.prototype[_is_UnicodePropertyLookup_default] = true;
    const ranges$ = UnicodePropertyLookup_ranges;
    dart.setMethodSignature(UnicodePropertyLookup, () => ({
      __proto__: dart.getMethods(UnicodePropertyLookup.__proto__),
      find: dart.fnType(P, [core.int]),
      [_binarySearch]: dart.fnType(core.int, [core.int])
    }));
    dart.setLibraryUri(UnicodePropertyLookup, "package:flutter_web_ui/src/engine.dart");
    dart.setFieldSignature(UnicodePropertyLookup, () => ({
      __proto__: dart.getFields(UnicodePropertyLookup.__proto__),
      ranges: dart.finalFieldType(core.List$(engine.UnicodeRange$(P)))
    }));
    return UnicodePropertyLookup;
  });
  engine.UnicodePropertyLookup = engine.UnicodePropertyLookup$();
  dart.addTypeTests(engine.UnicodePropertyLookup, _is_UnicodePropertyLookup_default);
  let C125;
  let C126;
  let C127;
  let C128;
  let C129;
  let C130;
  let C131;
  let C132;
  let C133;
  let C134;
  let C135;
  let C136;
  let C137;
  let C138;
  let C139;
  let C140;
  let C141;
  let C142;
  let C143;
  engine.CharProperty = class CharProperty extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.CharProperty.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.CharProperty.prototype;
  dart.addTypeTests(engine.CharProperty);
  dart.setLibraryUri(engine.CharProperty, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.CharProperty, () => ({
    __proto__: dart.getFields(engine.CharProperty.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.CharProperty, ['toString']);
  engine.CharProperty.DoubleQuote = C125 || CT.C125;
  engine.CharProperty.SingleQuote = C126 || CT.C126;
  engine.CharProperty.HebrewLetter = C127 || CT.C127;
  engine.CharProperty.CR = C128 || CT.C128;
  engine.CharProperty.LF = C129 || CT.C129;
  engine.CharProperty.Newline = C130 || CT.C130;
  engine.CharProperty.Extend = C131 || CT.C131;
  engine.CharProperty.RegionalIndicator = C132 || CT.C132;
  engine.CharProperty.Format = C133 || CT.C133;
  engine.CharProperty.Katakana = C134 || CT.C134;
  engine.CharProperty.ALetter = C135 || CT.C135;
  engine.CharProperty.MidLetter = C136 || CT.C136;
  engine.CharProperty.MidNum = C137 || CT.C137;
  engine.CharProperty.MidNumLet = C138 || CT.C138;
  engine.CharProperty.Numeric = C139 || CT.C139;
  engine.CharProperty.ExtendNumLet = C140 || CT.C140;
  engine.CharProperty.ZWJ = C141 || CT.C141;
  engine.CharProperty.WSegSpace = C142 || CT.C142;
  engine.CharProperty.values = C143 || CT.C143;
  let C144;
  let C145;
  let C146;
  engine._FindBreakDirection = class _FindBreakDirection extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine._FindBreakDirection.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine._FindBreakDirection.prototype;
  dart.addTypeTests(engine._FindBreakDirection);
  dart.setLibraryUri(engine._FindBreakDirection, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._FindBreakDirection, () => ({
    __proto__: dart.getFields(engine._FindBreakDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine._FindBreakDirection, ['toString']);
  engine._FindBreakDirection.forward = C144 || CT.C144;
  engine._FindBreakDirection.backward = C145 || CT.C145;
  engine._FindBreakDirection.values = C146 || CT.C146;
  engine.WordBreaker = class WordBreaker extends core.Object {
    static nextBreakIndex(text, index) {
      return engine.WordBreaker._findBreakIndex(engine._FindBreakDirection.forward, text, index);
    }
    static prevBreakIndex(text, index) {
      return engine.WordBreaker._findBreakIndex(engine._FindBreakDirection.backward, text, index);
    }
    static _findBreakIndex(direction, text, index) {
      let step = null;
      let min = null;
      let max = null;
      if (dart.equals(direction, engine._FindBreakDirection.forward)) {
        step = 1;
        min = 0;
        max = text.length - 1;
      } else {
        step = -1;
        min = 1;
        max = text.length;
      }
      let i = index;
      while (dart.notNull(i) >= dart.notNull(min) && dart.notNull(i) <= dart.notNull(max)) {
        i = dart.notNull(i) + dart.notNull(step);
        if (dart.test(engine.WordBreaker._isBreak(text, i))) {
          break;
        }
      }
      return i;
    }
    static _isBreak(text, index) {
      if (dart.notNull(index) <= 0 || dart.notNull(index) >= text.length) {
        return true;
      }
      if (dart.test(engine.WordBreaker._isUtf16Surrogate(text[$codeUnitAt](dart.notNull(index) - 1)))) {
        return false;
      }
      let immediateRight = engine.getCharProperty(text, index);
      let immediateLeft = engine.getCharProperty(text, dart.notNull(index) - 1);
      if (dart.equals(immediateLeft, engine.CharProperty.CR) && dart.equals(immediateRight, engine.CharProperty.LF)) return false;
      if (dart.test(engine.WordBreaker._oneOf(immediateLeft, engine.CharProperty.Newline, engine.CharProperty.CR, engine.CharProperty.LF))) {
        return true;
      }
      if (dart.test(engine.WordBreaker._oneOf(immediateRight, engine.CharProperty.Newline, engine.CharProperty.CR, engine.CharProperty.LF))) {
        return true;
      }
      if (dart.equals(immediateLeft, engine.CharProperty.WSegSpace) && dart.equals(immediateRight, engine.CharProperty.WSegSpace)) {
        return false;
      }
      if (dart.test(engine.WordBreaker._oneOf(immediateRight, engine.CharProperty.Extend, engine.CharProperty.Format, engine.CharProperty.ZWJ))) {
        return false;
      }
      let l = 0;
      while (dart.test(engine.WordBreaker._oneOf(immediateLeft, engine.CharProperty.Extend, engine.CharProperty.Format, engine.CharProperty.ZWJ))) {
        l = l + 1;
        if (dart.notNull(index) - l - 1 < 0) {
          return true;
        }
        immediateLeft = engine.getCharProperty(text, dart.notNull(index) - l - 1);
      }
      if (dart.test(engine.WordBreaker._isAHLetter(immediateLeft)) && dart.test(engine.WordBreaker._isAHLetter(immediateRight))) {
        return false;
      }
      let r = 0;
      let nextRight = null;
      do {
        r = r + 1;
        nextRight = engine.getCharProperty(text, dart.notNull(index) + r);
      } while (dart.test(engine.WordBreaker._oneOf(nextRight, engine.CharProperty.Extend, engine.CharProperty.Format, engine.CharProperty.ZWJ)));
      let nextLeft = null;
      do {
        l = l + 1;
        nextLeft = engine.getCharProperty(text, dart.notNull(index) - l - 1);
      } while (dart.test(engine.WordBreaker._oneOf(nextLeft, engine.CharProperty.Extend, engine.CharProperty.Format, engine.CharProperty.ZWJ)));
      if (dart.test(engine.WordBreaker._isAHLetter(immediateLeft)) && dart.test(engine.WordBreaker._oneOf(immediateRight, engine.CharProperty.MidLetter, engine.CharProperty.MidNumLet, engine.CharProperty.SingleQuote)) && dart.test(engine.WordBreaker._isAHLetter(nextRight))) {
        return false;
      }
      if (dart.test(engine.WordBreaker._isAHLetter(nextLeft)) && dart.test(engine.WordBreaker._oneOf(immediateLeft, engine.CharProperty.MidLetter, engine.CharProperty.MidNumLet, engine.CharProperty.SingleQuote)) && dart.test(engine.WordBreaker._isAHLetter(immediateRight))) {
        return false;
      }
      if (dart.equals(immediateLeft, engine.CharProperty.HebrewLetter) && dart.equals(immediateRight, engine.CharProperty.SingleQuote)) {
        return false;
      }
      if (dart.equals(immediateLeft, engine.CharProperty.HebrewLetter) && dart.equals(immediateRight, engine.CharProperty.DoubleQuote) && dart.equals(nextRight, engine.CharProperty.HebrewLetter)) {
        return false;
      }
      if (dart.equals(nextLeft, engine.CharProperty.HebrewLetter) && dart.equals(immediateLeft, engine.CharProperty.DoubleQuote) && dart.equals(immediateRight, engine.CharProperty.HebrewLetter)) {
        return false;
      }
      if (dart.equals(immediateLeft, engine.CharProperty.Numeric) && dart.equals(immediateRight, engine.CharProperty.Numeric)) {
        return false;
      }
      if (dart.test(engine.WordBreaker._isAHLetter(immediateLeft)) && dart.equals(immediateRight, engine.CharProperty.Numeric)) return false;
      if (dart.equals(immediateLeft, engine.CharProperty.Numeric) && dart.test(engine.WordBreaker._isAHLetter(immediateRight))) return false;
      if (dart.equals(nextLeft, engine.CharProperty.Numeric) && dart.test(engine.WordBreaker._oneOf(immediateLeft, engine.CharProperty.MidNum, engine.CharProperty.MidNumLet, engine.CharProperty.SingleQuote)) && dart.equals(immediateRight, engine.CharProperty.Numeric)) {
        return false;
      }
      if (dart.equals(immediateLeft, engine.CharProperty.Numeric) && dart.test(engine.WordBreaker._oneOf(immediateRight, engine.CharProperty.MidNum, engine.CharProperty.MidNumLet, engine.CharProperty.SingleQuote)) && dart.equals(nextRight, engine.CharProperty.Numeric)) {
        return false;
      }
      if (dart.equals(immediateLeft, engine.CharProperty.Katakana) && dart.equals(immediateRight, engine.CharProperty.Katakana)) {
        return false;
      }
      if (dart.test(engine.WordBreaker._oneOf(immediateLeft, engine.CharProperty.ALetter, engine.CharProperty.HebrewLetter, engine.CharProperty.Numeric, engine.CharProperty.Katakana, engine.CharProperty.ExtendNumLet)) && dart.equals(immediateRight, engine.CharProperty.ExtendNumLet)) {
        return false;
      }
      if (dart.equals(immediateLeft, engine.CharProperty.ExtendNumLet) && dart.test(engine.WordBreaker._oneOf(immediateRight, engine.CharProperty.ALetter, engine.CharProperty.HebrewLetter, engine.CharProperty.Numeric, engine.CharProperty.Katakana))) {
        return false;
      }
      return true;
    }
    static _isUtf16Surrogate(value) {
      return (dart.notNull(value) & 63488) === 55296;
    }
    static _oneOf(value, choice1, choice2, choice3, choice4, choice5) {
      if (choice3 === void 0) choice3 = null;
      if (choice4 === void 0) choice4 = null;
      if (choice5 === void 0) choice5 = null;
      if (dart.equals(value, choice1)) {
        return true;
      }
      if (dart.equals(value, choice2)) {
        return true;
      }
      if (choice3 != null && dart.equals(value, choice3)) {
        return true;
      }
      if (choice4 != null && dart.equals(value, choice4)) {
        return true;
      }
      if (choice5 != null && dart.equals(value, choice5)) {
        return true;
      }
      return false;
    }
    static _isAHLetter(property) {
      return engine.WordBreaker._oneOf(property, engine.CharProperty.ALetter, engine.CharProperty.HebrewLetter);
    }
  };
  (engine.WordBreaker.new = function() {
    ;
  }).prototype = engine.WordBreaker.prototype;
  dart.addTypeTests(engine.WordBreaker);
  dart.setLibraryUri(engine.WordBreaker, "package:flutter_web_ui/src/engine.dart");
  const EditingState_text = dart.privateName(engine, "EditingState.text");
  const EditingState_baseOffset = dart.privateName(engine, "EditingState.baseOffset");
  const EditingState_extentOffset = dart.privateName(engine, "EditingState.extentOffset");
  engine.EditingState = class EditingState extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get baseOffset() {
      return this[baseOffset$];
    }
    set baseOffset(value) {
      super.baseOffset = value;
    }
    get extentOffset() {
      return this[extentOffset$];
    }
    set extentOffset(value) {
      super.extentOffset = value;
    }
    toFlutter() {
      return new (IdentityMapOfString$dynamic()).from(["text", this.text, "selectionBase", this.baseOffset, "selectionExtent", this.extentOffset]);
    }
    get isValid() {
      return dart.notNull(this.baseOffset) >= 0 && dart.notNull(this.extentOffset) >= 0;
    }
    get hashCode() {
      return ui.hashValues(this.text, this.baseOffset, this.extentOffset);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) {
        return false;
      }
      let typedOther = engine.EditingState._check(other);
      return this.text == typedOther.text && this.baseOffset == typedOther.baseOffset && this.extentOffset == typedOther.extentOffset;
    }
    toString() {
      return dart.test(engine.assertionsEnabled) ? "EditingState(\"" + dart.str(this.text) + "\", base:" + dart.str(this.baseOffset) + ", extent:" + dart.str(this.extentOffset) + ")" : super[$toString]();
    }
  };
  (engine.EditingState.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let baseOffset = opts && 'baseOffset' in opts ? opts.baseOffset : 0;
    let extentOffset = opts && 'extentOffset' in opts ? opts.extentOffset : 0;
    this[text$] = text;
    this[baseOffset$] = baseOffset;
    this[extentOffset$] = extentOffset;
    ;
  }).prototype = engine.EditingState.prototype;
  (engine.EditingState.fromFlutter = function(flutterEditingState) {
    this[text$] = core.String._check(flutterEditingState[$_get]("text"));
    this[baseOffset$] = core.int._check(flutterEditingState[$_get]("selectionBase"));
    this[extentOffset$] = core.int._check(flutterEditingState[$_get]("selectionExtent"));
    ;
  }).prototype = engine.EditingState.prototype;
  dart.addTypeTests(engine.EditingState);
  const text$ = EditingState_text;
  const baseOffset$ = EditingState_baseOffset;
  const extentOffset$ = EditingState_extentOffset;
  dart.setMethodSignature(engine.EditingState, () => ({
    __proto__: dart.getMethods(engine.EditingState.__proto__),
    toFlutter: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(engine.EditingState, () => ({
    __proto__: dart.getGetters(engine.EditingState.__proto__),
    isValid: core.bool
  }));
  dart.setLibraryUri(engine.EditingState, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.EditingState, () => ({
    __proto__: dart.getFields(engine.EditingState.__proto__),
    text: dart.finalFieldType(core.String),
    baseOffset: dart.finalFieldType(core.int),
    extentOffset: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(engine.EditingState, ['_equals', 'toString']);
  dart.defineExtensionAccessors(engine.EditingState, ['hashCode']);
  let C147;
  let C148;
  let C149;
  engine.InputType = class InputType extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.InputType.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.InputType.prototype;
  dart.addTypeTests(engine.InputType);
  dart.setLibraryUri(engine.InputType, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.InputType, () => ({
    __proto__: dart.getFields(engine.InputType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.InputType, ['toString']);
  engine.InputType.text = C147 || CT.C147;
  engine.InputType.multiline = C148 || CT.C148;
  engine.InputType.values = C149 || CT.C149;
  const InputConfiguration_inputType = dart.privateName(engine, "InputConfiguration.inputType");
  const InputConfiguration_obscureText = dart.privateName(engine, "InputConfiguration.obscureText");
  engine.InputConfiguration = class InputConfiguration extends core.Object {
    get inputType() {
      return this[inputType$];
    }
    set inputType(value) {
      super.inputType = value;
    }
    get obscureText() {
      return this[obscureText$];
    }
    set obscureText(value) {
      super.obscureText = value;
    }
  };
  (engine.InputConfiguration.new = function(opts) {
    let inputType = opts && 'inputType' in opts ? opts.inputType : null;
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    this[inputType$] = inputType;
    this[obscureText$] = obscureText;
    ;
  }).prototype = engine.InputConfiguration.prototype;
  (engine.InputConfiguration.fromFlutter = function(flutterInputConfiguration) {
    this[inputType$] = engine._getInputTypeFromString(core.String._check(dart.dsend(flutterInputConfiguration[$_get]("inputType"), '_get', ["name"])));
    this[obscureText$] = core.bool._check(flutterInputConfiguration[$_get]("obscureText"));
    ;
  }).prototype = engine.InputConfiguration.prototype;
  dart.addTypeTests(engine.InputConfiguration);
  const inputType$ = InputConfiguration_inputType;
  const obscureText$ = InputConfiguration_obscureText;
  dart.setLibraryUri(engine.InputConfiguration, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.InputConfiguration, () => ({
    __proto__: dart.getFields(engine.InputConfiguration.__proto__),
    inputType: dart.finalFieldType(engine.InputType),
    obscureText: dart.finalFieldType(core.bool)
  }));
  let C150;
  let C151;
  let C152;
  let C153;
  engine.ElementType = class ElementType extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (engine.ElementType.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = engine.ElementType.prototype;
  dart.addTypeTests(engine.ElementType);
  dart.setLibraryUri(engine.ElementType, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.ElementType, () => ({
    __proto__: dart.getFields(engine.ElementType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(engine.ElementType, ['toString']);
  engine.ElementType.input = C150 || CT.C150;
  engine.ElementType.textarea = C151 || CT.C151;
  engine.ElementType.contentEditable = C152 || CT.C152;
  engine.ElementType.values = C153 || CT.C153;
  const _enabled = dart.privateName(engine, "_enabled");
  const _lastEditingState = dart.privateName(engine, "_lastEditingState");
  const _onChange = dart.privateName(engine, "_onChange");
  const _subscriptions = dart.privateName(engine, "_subscriptions");
  const _elementType = dart.privateName(engine, "_elementType");
  const _initDomElement = dart.privateName(engine, "_initDomElement");
  const _refocus = dart.privateName(engine, "_refocus");
  const _handleChange = dart.privateName(engine, "_handleChange");
  const _removeDomElement = dart.privateName(engine, "_removeDomElement");
  const _createRange = dart.privateName(engine, "_createRange");
  const _swapDomElement = dart.privateName(engine, "_swapDomElement");
  const TextEditingElement_owner = dart.privateName(engine, "TextEditingElement.owner");
  const TextEditingElement_domElement = dart.privateName(engine, "TextEditingElement.domElement");
  engine.TextEditingElement = class TextEditingElement extends core.Object {
    get owner() {
      return this[owner$0];
    }
    set owner(value) {
      super.owner = value;
    }
    get domElement() {
      return this[domElement];
    }
    set domElement(value) {
      this[domElement] = value;
    }
    get [_elementType]() {
      let type = engine._getTypeFromElement(this.domElement);
      if (!(type != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 218, 12, "type != null");
      return type;
    }
    configureInputElementForIOS() {
      if (!dart.equals(engine.browserEngine, engine.BrowserEngine.webkit) || !dart.equals(engine.operatingSystem, engine.OperatingSystem.iOs)) {
        return;
      }
      if (this.domElement != null) {
        this.owner.setStyle(this.domElement);
      }
    }
    enable(inputConfig, opts) {
      let t8;
      let onChange = opts && 'onChange' in opts ? opts.onChange : null;
      if (!!dart.test(this[_enabled])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 254, 12, "!_enabled");
      this[_initDomElement](inputConfig);
      this[_enabled] = true;
      this[_onChange] = onChange;
      if (dart.equals(engine.browserEngine, engine.BrowserEngine.blink) || dart.equals(engine.browserEngine, engine.BrowserEngine.unknown)) {
        this[_subscriptions][$add](this.domElement[$onBlur].listen(dart.fn(_ => {
          if (dart.test(this[_enabled])) {
            this[_refocus]();
          }
        }, EventToNull())));
      }
      this.domElement.focus();
      if (this[_lastEditingState] != null) {
        this.setEditingState(this[_lastEditingState]);
      }
      t8 = this[_subscriptions];
      t8[$add](html.document[$onSelectionChange].listen(dart.bind(this, _handleChange)));
      t8[$add](this.domElement[$onInput].listen(dart.bind(this, _handleChange)));
      t8;
    }
    disable() {
      if (!dart.test(this[_enabled])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 293, 12, "_enabled");
      this[_enabled] = false;
      this[_lastEditingState] = null;
      for (let i = 0; i < dart.notNull(this[_subscriptions][$length]); i = i + 1) {
        this[_subscriptions][$_get](i).cancel();
      }
      this[_subscriptions][$clear]();
      this[_removeDomElement]();
    }
    [_initDomElement](inputConfig) {
      switch (inputConfig.inputType) {
        case C147 || CT.C147:
        {
          this.domElement = this.owner.createInputElement();
          break;
        }
        case C148 || CT.C148:
        {
          this.domElement = this.owner.createTextAreaElement();
          break;
        }
        default:
        {
          dart.throw(new core.UnsupportedError.new("Unsupported input type: " + dart.str(inputConfig.inputType)));
        }
      }
      html.document.body[$append](this.domElement);
    }
    [_removeDomElement]() {
      this.domElement[$remove]();
      this.domElement = null;
    }
    [_refocus]() {
      this.domElement.focus();
    }
    setEditingState(editingState) {
      let t8;
      this[_lastEditingState] = editingState;
      if (!dart.test(this[_enabled]) || !dart.test(editingState.isValid)) {
        return;
      }
      switch (this[_elementType]) {
        case C150 || CT.C150:
        {
          let input = html.InputElement._check(this.domElement);
          input.value = editingState.text;
          input.setSelectionRange(editingState.baseOffset, editingState.extentOffset);
          break;
        }
        case C151 || CT.C151:
        {
          let textarea = html.TextAreaElement._check(this.domElement);
          textarea.value = editingState.text;
          textarea.setSelectionRange(editingState.baseOffset, editingState.extentOffset);
          break;
        }
        case C152 || CT.C152:
        {
          engine.domRenderer.clearDom(this.domElement);
          this.domElement[$append](html.Text.new(editingState.text));
          t8 = html.window.getSelection();
          t8.removeAllRanges();
          t8.addRange(this[_createRange](editingState));
          t8;
          break;
        }
      }
      this.domElement.focus();
    }
    [_swapDomElement](newElementType) {
    }
    [_handleChange](event) {
      this[_lastEditingState] = this.calculateEditingState();
      this[_onChange](this[_lastEditingState]);
    }
    calculateEditingState() {
      if (!(this.domElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 391, 12, "domElement != null");
      let editingState = null;
      switch (this[_elementType]) {
        case C150 || CT.C150:
        {
          let inputElement = html.InputElement._check(this.domElement);
          editingState = new engine.EditingState.new({text: inputElement.value, baseOffset: inputElement.selectionStart, extentOffset: inputElement.selectionEnd});
          break;
        }
        case C151 || CT.C151:
        {
          let textAreaElement = html.TextAreaElement._check(this.domElement);
          editingState = new engine.EditingState.new({text: textAreaElement.value, baseOffset: textAreaElement.selectionStart, extentOffset: textAreaElement.selectionEnd});
          break;
        }
        case C152 || CT.C152:
        {
          let text = core.String._check(js_util.getProperty(this.domElement, "innerText"));
          if (dart.notNull(this.domElement.childNodes[$length]) > 1) {
            let prevSelectionEnd = math.max(core.int, this[_lastEditingState].baseOffset, this[_lastEditingState].extentOffset);
            let prevText = this[_lastEditingState].text;
            let offsetFromEnd = prevText.length - prevSelectionEnd;
            let newSelectionExtent = text.length - offsetFromEnd;
            editingState = new engine.EditingState.new({text: text, baseOffset: newSelectionExtent, extentOffset: newSelectionExtent});
          } else {
            let selection = html.window.getSelection();
            editingState = new engine.EditingState.new({text: text, baseOffset: selection.baseOffset, extentOffset: selection.extentOffset});
          }
        }
      }
      if (!(editingState != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 447, 12, "editingState != null");
      return editingState;
    }
    [_createRange](editingState) {
      let t8;
      let firstChild = this.domElement.firstChild;
      t8 = html.document.createRange();
      t8.setStart(firstChild, editingState.baseOffset);
      t8.setEnd(firstChild, editingState.extentOffset);
      return t8;
    }
  };
  (engine.TextEditingElement.new = function(owner) {
    this[_enabled] = false;
    this[domElement] = null;
    this[_lastEditingState] = null;
    this[_onChange] = null;
    this[_subscriptions] = JSArrayOfStreamSubscriptionOfEvent().of([]);
    this[owner$0] = owner;
    ;
  }).prototype = engine.TextEditingElement.prototype;
  dart.addTypeTests(engine.TextEditingElement);
  const owner$0 = TextEditingElement_owner;
  const domElement = TextEditingElement_domElement;
  dart.setMethodSignature(engine.TextEditingElement, () => ({
    __proto__: dart.getMethods(engine.TextEditingElement.__proto__),
    configureInputElementForIOS: dart.fnType(dart.void, []),
    enable: dart.fnType(dart.void, [engine.InputConfiguration], {onChange: dart.fnType(dart.void, [engine.EditingState])}),
    disable: dart.fnType(dart.void, []),
    [_initDomElement]: dart.fnType(dart.void, [engine.InputConfiguration]),
    [_removeDomElement]: dart.fnType(dart.void, []),
    [_refocus]: dart.fnType(dart.void, []),
    setEditingState: dart.fnType(dart.void, [engine.EditingState]),
    [_swapDomElement]: dart.fnType(dart.void, [engine.ElementType]),
    [_handleChange]: dart.fnType(dart.void, [html.Event]),
    calculateEditingState: dart.fnType(engine.EditingState, []),
    [_createRange]: dart.fnType(html.Range, [engine.EditingState])
  }));
  dart.setGetterSignature(engine.TextEditingElement, () => ({
    __proto__: dart.getGetters(engine.TextEditingElement.__proto__),
    [_elementType]: engine.ElementType
  }));
  dart.setLibraryUri(engine.TextEditingElement, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.TextEditingElement, () => ({
    __proto__: dart.getFields(engine.TextEditingElement.__proto__),
    owner: dart.finalFieldType(engine.HybridTextEditing),
    [_enabled]: dart.fieldType(core.bool),
    domElement: dart.fieldType(html.HtmlElement),
    [_lastEditingState]: dart.fieldType(engine.EditingState),
    [_onChange]: dart.fieldType(dart.fnType(dart.void, [engine.EditingState])),
    [_subscriptions]: dart.finalFieldType(core.List$(async.StreamSubscription$(html.Event)))
  }));
  const _onDomElementSwap = dart.privateName(engine, "_onDomElementSwap");
  engine.PersistentTextEditingElement = class PersistentTextEditingElement extends engine.TextEditingElement {
    [_initDomElement](inputConfig) {
      if (!(this.domElement != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 494, 12, "domElement != null");
      if (!dart.test(html.document.body.contains(this.domElement))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 495, 12, "html.document.body.contains(domElement)");
    }
    [_removeDomElement]() {
      this.domElement.blur();
    }
    [_refocus]() {
    }
    [_swapDomElement](newElementType) {
      super[_swapDomElement](newElementType);
      this[_onDomElementSwap]();
    }
  };
  (engine.PersistentTextEditingElement.new = function(owner, domElement, opts) {
    let onDomElementSwap = opts && 'onDomElementSwap' in opts ? opts.onDomElementSwap : null;
    this[_onDomElementSwap] = onDomElementSwap;
    engine.PersistentTextEditingElement.__proto__.new.call(this, owner);
    if (!(engine._getTypeFromElement(domElement) != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 484, 12, "_getTypeFromElement(domElement) != null");
    this.domElement = domElement;
  }).prototype = engine.PersistentTextEditingElement.prototype;
  dart.addTypeTests(engine.PersistentTextEditingElement);
  dart.setLibraryUri(engine.PersistentTextEditingElement, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.PersistentTextEditingElement, () => ({
    __proto__: dart.getFields(engine.PersistentTextEditingElement.__proto__),
    [_onDomElementSwap]: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  const _defaultEditingElement = dart.privateName(engine, "_defaultEditingElement");
  const _customEditingElement = dart.privateName(engine, "_customEditingElement");
  const _clientId = dart.privateName(engine, "_clientId");
  const _isEditing = dart.privateName(engine, "_isEditing");
  const _configuration = dart.privateName(engine, "_configuration");
  const _editingStyle = dart.privateName(engine, "_editingStyle");
  const _editingLocationAndSize = dart.privateName(engine, "_editingLocationAndSize");
  const _startEditing = dart.privateName(engine, "_startEditing");
  const _setLocation = dart.privateName(engine, "_setLocation");
  const _setFontStyle = dart.privateName(engine, "_setFontStyle");
  const _syncEditingStateToFlutter = dart.privateName(engine, "_syncEditingStateToFlutter");
  const _setDynamicStyleAttributes = dart.privateName(engine, "_setDynamicStyleAttributes");
  let C154;
  engine.HybridTextEditing = class HybridTextEditing extends core.Object {
    get editingElement() {
      if (this[_customEditingElement] != null) {
        return this[_customEditingElement];
      }
      return this[_defaultEditingElement];
    }
    useCustomEditableElement(customEditingElement) {
      if (dart.test(this[_isEditing]) && !dart.equals(customEditingElement, this[_customEditingElement])) {
        this.stopEditing();
      }
      this[_customEditingElement] = customEditingElement;
    }
    stopUsingCustomEditableElement() {
      this.useCustomEditableElement(null);
    }
    get needsKeyboard() {
      return this[_isEditing];
    }
    handleTextInput(data) {
      let call = (C53 || CT.C53).decodeMethodCall(data);
      switch (call.method) {
        case "TextInput.setClient":
        {
          let clientIdChanged = this[_clientId] != null && !core.identical(this[_clientId], dart.dsend(call.arguments, '_get', [0]));
          if (clientIdChanged && dart.test(this[_isEditing])) {
            this.stopEditing();
          }
          this[_clientId] = core.int._check(dart.dsend(call.arguments, '_get', [0]));
          this[_configuration] = MapOfString$dynamic()._check(dart.dsend(call.arguments, '_get', [1]));
          break;
        }
        case "TextInput.setEditingState":
        {
          this.editingElement.setEditingState(new engine.EditingState.fromFlutter(MapOfString$dynamic()._check(call.arguments)));
          break;
        }
        case "TextInput.show":
        {
          if (!dart.test(this[_isEditing])) {
            this[_startEditing]();
          }
          break;
        }
        case "TextInput.setEditableSizeAndTransform":
        {
          this[_setLocation](MapOfString$dynamic()._check(call.arguments));
          break;
        }
        case "TextInput.setStyle":
        {
          this[_setFontStyle](MapOfString$dynamic()._check(call.arguments));
          break;
        }
        case "TextInput.clearClient":
        case "TextInput.hide":
        {
          if (dart.test(this[_isEditing])) {
            this.stopEditing();
          }
          break;
        }
      }
    }
    [_startEditing]() {
      if (!!dart.test(this[_isEditing])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 634, 12, "!_isEditing");
      this[_isEditing] = true;
      this.editingElement.enable(new engine.InputConfiguration.fromFlutter(this[_configuration]), {onChange: dart.bind(this, _syncEditingStateToFlutter)});
    }
    stopEditing() {
      if (!dart.test(this[_isEditing])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 643, 12, "_isEditing");
      this[_isEditing] = false;
      this.editingElement.disable();
    }
    get editingStyle() {
      return this[_editingStyle];
    }
    font() {
      if (!(this[_editingStyle] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 653, 12, "_editingStyle != null");
      return dart.str(this[_editingStyle].fontWeight) + " " + dart.str(this[_editingStyle].fontSize) + "px " + dart.str(this[_editingStyle].fontFamily);
    }
    [_setFontStyle](style) {
      if (!dart.test(style[$containsKey]("fontSize"))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 658, 12, "style.containsKey('fontSize')");
      if (!dart.test(style[$containsKey]("fontFamily"))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 659, 12, "style.containsKey('fontFamily')");
      if (!dart.test(style[$containsKey]("textAlignIndex"))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 660, 12, "style.containsKey('textAlignIndex')");
      if (!dart.test(style[$containsKey]("textDirectionIndex"))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 661, 12, "style.containsKey('textDirectionIndex')");
      let textAlignIndex = core.int._check(style[$_get]("textAlignIndex"));
      let textDirectionIndex = core.int._check(style[$_get]("textDirectionIndex"));
      this[_editingStyle] = new engine._EditingStyle.new({textDirection: ui.TextDirection.values[$_get](textDirectionIndex), fontSize: core.double._check(style[$_get]("fontSize")), textAlign: ui.TextAlign.values[$_get](textAlignIndex), fontFamily: core.String._check(style[$_get]("fontFamily")), fontWeight: engine.fontWeightIndexToCss({fontWeightIndex: core.int._check(style[$_get]("fontWeightIndex"))})});
    }
    get editingLocationAndSize() {
      return this[_editingLocationAndSize];
    }
    [_setLocation](editingLocationAndSize) {
      if (!dart.test(editingLocationAndSize[$containsKey]("width"))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 685, 12, "editingLocationAndSize.containsKey('width')");
      if (!dart.test(editingLocationAndSize[$containsKey]("height"))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 686, 12, "editingLocationAndSize.containsKey('height')");
      if (!dart.test(editingLocationAndSize[$containsKey]("transform"))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart", 687, 12, "editingLocationAndSize.containsKey('transform')");
      let transformList = ListOfdouble().from(core.Iterable._check(editingLocationAndSize[$_get]("transform")));
      this[_editingLocationAndSize] = new engine._EditableSizeAndTransform.new({width: core.double._check(editingLocationAndSize[$_get]("width")), height: core.double._check(editingLocationAndSize[$_get]("height")), transform: _native_typed_data.NativeFloat64List.fromList(transformList)});
      if (this.editingElement.domElement != null) {
        this[_setDynamicStyleAttributes](this.editingElement.domElement);
      }
    }
    [_syncEditingStateToFlutter](editingState) {
      ui.window.onPlatformMessage("flutter/textinput", (C53 || CT.C53).encodeMethodCall(new engine.MethodCall.new("TextInputClient.updateEditingState", [this[_clientId], editingState.toFlutter()])), C154 || CT.C154);
    }
    [_setDynamicStyleAttributes](domElement) {
      if (this[_editingLocationAndSize] != null && !(dart.equals(engine.browserEngine, engine.BrowserEngine.webkit) && dart.equals(engine.operatingSystem, engine.OperatingSystem.iOs))) {
        this.setStyle(domElement);
      }
    }
    setStyle(domElement) {
      let t8;
      let transformCss = engine.float64ListToCssTransform(this[_editingLocationAndSize].transform);
      t8 = domElement.style;
      t8[$width] = dart.str(this[_editingLocationAndSize].width) + "px";
      t8[$height] = dart.str(this[_editingLocationAndSize].height) + "px";
      t8[$textAlign] = this[_editingStyle].align;
      t8[$font] = this.font();
      t8[$transform] = transformCss;
      t8;
    }
    createInputElement() {
      let input = html.InputElement.new();
      engine._setStaticStyleAttributes(input);
      this[_setDynamicStyleAttributes](input);
      return input;
    }
    createTextAreaElement() {
      let textarea = html.TextAreaElement.new();
      engine._setStaticStyleAttributes(textarea);
      this[_setDynamicStyleAttributes](textarea);
      return textarea;
    }
  };
  (engine.HybridTextEditing.new = function() {
    this[_defaultEditingElement] = null;
    this[_customEditingElement] = null;
    this[_clientId] = null;
    this[_isEditing] = false;
    this[_configuration] = null;
    this[_editingStyle] = null;
    this[_editingLocationAndSize] = null;
    this[_defaultEditingElement] = new engine.TextEditingElement.new(this);
  }).prototype = engine.HybridTextEditing.prototype;
  dart.addTypeTests(engine.HybridTextEditing);
  dart.setMethodSignature(engine.HybridTextEditing, () => ({
    __proto__: dart.getMethods(engine.HybridTextEditing.__proto__),
    useCustomEditableElement: dart.fnType(dart.void, [engine.TextEditingElement]),
    stopUsingCustomEditableElement: dart.fnType(dart.void, []),
    handleTextInput: dart.fnType(dart.void, [typed_data.ByteData]),
    [_startEditing]: dart.fnType(dart.void, []),
    stopEditing: dart.fnType(dart.void, []),
    font: dart.fnType(core.String, []),
    [_setFontStyle]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setLocation]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_syncEditingStateToFlutter]: dart.fnType(dart.void, [engine.EditingState]),
    [_setDynamicStyleAttributes]: dart.fnType(dart.void, [html.HtmlElement]),
    setStyle: dart.fnType(dart.void, [html.HtmlElement]),
    createInputElement: dart.fnType(html.InputElement, []),
    createTextAreaElement: dart.fnType(html.TextAreaElement, [])
  }));
  dart.setGetterSignature(engine.HybridTextEditing, () => ({
    __proto__: dart.getGetters(engine.HybridTextEditing.__proto__),
    editingElement: engine.TextEditingElement,
    needsKeyboard: core.bool,
    editingStyle: engine._EditingStyle,
    editingLocationAndSize: engine._EditableSizeAndTransform
  }));
  dart.setLibraryUri(engine.HybridTextEditing, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.HybridTextEditing, () => ({
    __proto__: dart.getFields(engine.HybridTextEditing.__proto__),
    [_defaultEditingElement]: dart.fieldType(engine.TextEditingElement),
    [_customEditingElement]: dart.fieldType(engine.TextEditingElement),
    [_clientId]: dart.fieldType(core.int),
    [_isEditing]: dart.fieldType(core.bool),
    [_configuration]: dart.fieldType(core.Map$(core.String, dart.dynamic)),
    [_editingStyle]: dart.fieldType(engine._EditingStyle),
    [_editingLocationAndSize]: dart.fieldType(engine._EditableSizeAndTransform)
  }));
  engine._EditingStyle = class _EditingStyle extends core.Object {
    get align() {
      return engine.textAlignToCssValue(this.textAlign, this.textDirection);
    }
  };
  (engine._EditingStyle.new = function(opts) {
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    this.textDirection = textDirection;
    this.fontSize = fontSize;
    this.textAlign = textAlign;
    this.fontFamily = fontFamily;
    this.fontWeight = fontWeight;
    ;
  }).prototype = engine._EditingStyle.prototype;
  dart.addTypeTests(engine._EditingStyle);
  dart.setGetterSignature(engine._EditingStyle, () => ({
    __proto__: dart.getGetters(engine._EditingStyle.__proto__),
    align: core.String
  }));
  dart.setLibraryUri(engine._EditingStyle, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._EditingStyle, () => ({
    __proto__: dart.getFields(engine._EditingStyle.__proto__),
    fontSize: dart.finalFieldType(core.double),
    fontWeight: dart.finalFieldType(core.String),
    fontFamily: dart.finalFieldType(core.String),
    textAlign: dart.finalFieldType(ui.TextAlign),
    textDirection: dart.finalFieldType(ui.TextDirection)
  }));
  engine._EditableSizeAndTransform = class _EditableSizeAndTransform extends core.Object {};
  (engine._EditableSizeAndTransform.new = function(opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this.width = width;
    this.height = height;
    this.transform = transform;
    ;
  }).prototype = engine._EditableSizeAndTransform.prototype;
  dart.addTypeTests(engine._EditableSizeAndTransform);
  dart.setLibraryUri(engine._EditableSizeAndTransform, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine._EditableSizeAndTransform, () => ({
    __proto__: dart.getFields(engine._EditableSizeAndTransform.__proto__),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    transform: dart.finalFieldType(typed_data.Float64List)
  }));
  const _m4storage$ = dart.privateName(engine, "_m4storage");
  const _v3storage$ = dart.privateName(engine, "_v3storage");
  engine.Matrix4 = class Matrix4 extends core.Object {
    get storage() {
      return this[_m4storage$];
    }
    static tryInvert(other) {
      let r = new engine.Matrix4.zero();
      let determinant = r.copyInverse(other);
      if (determinant === 0.0) {
        return null;
      }
      return r;
    }
    index(row, col) {
      return dart.notNull(col) * 4 + dart.notNull(row);
    }
    entry(row, col) {
      if (!(dart.notNull(row) >= 0 && dart.notNull(row) < dart.notNull(this.dimension))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/vector_math.dart", 29, 12, "(row >= 0) && (row < dimension)");
      if (!(dart.notNull(col) >= 0 && dart.notNull(col) < dart.notNull(this.dimension))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/vector_math.dart", 30, 12, "(col >= 0) && (col < dimension)");
      return this[_m4storage$][$_get](this.index(row, col));
    }
    setEntry(row, col, v) {
      if (!(dart.notNull(row) >= 0 && dart.notNull(row) < dart.notNull(this.dimension))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/vector_math.dart", 37, 12, "(row >= 0) && (row < dimension)");
      if (!(dart.notNull(col) >= 0 && dart.notNull(col) < dart.notNull(this.dimension))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/vector_math.dart", 38, 12, "(col >= 0) && (col < dimension)");
      this[_m4storage$][$_set](this.index(row, col), v);
    }
    static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8.setValues(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
      return t8;
    }
    static fromList(values) {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8.setValues(values[$_get](0), values[$_get](1), values[$_get](2), values[$_get](3), values[$_get](4), values[$_get](5), values[$_get](6), values[$_get](7), values[$_get](8), values[$_get](9), values[$_get](10), values[$_get](11), values[$_get](12), values[$_get](13), values[$_get](14), values[$_get](15));
      return t8;
    }
    static identity() {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8.setIdentity();
      return t8;
    }
    static copy(other) {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8.setFrom(other);
      return t8;
    }
    static inverted(other) {
      let r = new engine.Matrix4.zero();
      let determinant = r.copyInverse(other);
      if (determinant === 0.0) {
        dart.throw(new core.ArgumentError.value(other, "other", "Matrix cannot be inverted"));
      }
      return r;
    }
    static rotationX(radians) {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8[_m4storage$][$_set](15, 1.0);
      t8.setRotationX(radians);
      return t8;
    }
    static rotationY(radians) {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8[_m4storage$][$_set](15, 1.0);
      t8.setRotationY(radians);
      return t8;
    }
    static rotationZ(radians) {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8[_m4storage$][$_set](15, 1.0);
      t8.setRotationZ(radians);
      return t8;
    }
    static translation(translation) {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8.setIdentity();
      t8.setTranslation(translation);
      return t8;
    }
    static translationValues(x, y, z) {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8.setIdentity();
      t8.setTranslationRaw(x, y, z);
      return t8;
    }
    static diagonal3Values(x, y, z) {
      let t8;
      t8 = new engine.Matrix4.zero();
      t8[_m4storage$][$_set](15, 1.0);
      t8[_m4storage$][$_set](10, z);
      t8[_m4storage$][$_set](5, y);
      t8[_m4storage$][$_set](0, x);
      return t8;
    }
    setValues(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) {
      this[_m4storage$][$_set](15, arg15);
      this[_m4storage$][$_set](14, arg14);
      this[_m4storage$][$_set](13, arg13);
      this[_m4storage$][$_set](12, arg12);
      this[_m4storage$][$_set](11, arg11);
      this[_m4storage$][$_set](10, arg10);
      this[_m4storage$][$_set](9, arg9);
      this[_m4storage$][$_set](8, arg8);
      this[_m4storage$][$_set](7, arg7);
      this[_m4storage$][$_set](6, arg6);
      this[_m4storage$][$_set](5, arg5);
      this[_m4storage$][$_set](4, arg4);
      this[_m4storage$][$_set](3, arg3);
      this[_m4storage$][$_set](2, arg2);
      this[_m4storage$][$_set](1, arg1);
      this[_m4storage$][$_set](0, arg0);
    }
    setFrom(arg) {
      let argStorage = arg[_m4storage$];
      this[_m4storage$][$_set](15, argStorage[$_get](15));
      this[_m4storage$][$_set](14, argStorage[$_get](14));
      this[_m4storage$][$_set](13, argStorage[$_get](13));
      this[_m4storage$][$_set](12, argStorage[$_get](12));
      this[_m4storage$][$_set](11, argStorage[$_get](11));
      this[_m4storage$][$_set](10, argStorage[$_get](10));
      this[_m4storage$][$_set](9, argStorage[$_get](9));
      this[_m4storage$][$_set](8, argStorage[$_get](8));
      this[_m4storage$][$_set](7, argStorage[$_get](7));
      this[_m4storage$][$_set](6, argStorage[$_get](6));
      this[_m4storage$][$_set](5, argStorage[$_get](5));
      this[_m4storage$][$_set](4, argStorage[$_get](4));
      this[_m4storage$][$_set](3, argStorage[$_get](3));
      this[_m4storage$][$_set](2, argStorage[$_get](2));
      this[_m4storage$][$_set](1, argStorage[$_get](1));
      this[_m4storage$][$_set](0, argStorage[$_get](0));
    }
    get dimension() {
      return 4;
    }
    _get(i) {
      return this[_m4storage$][$_get](i);
    }
    _set(i, v$) {
      let v = v$;
      this[_m4storage$][$_set](i, v);
      return v$;
    }
    clone() {
      return engine.Matrix4.copy(this);
    }
    copyInto(arg) {
      let argStorage = arg[_m4storage$];
      argStorage[$_set](0, this[_m4storage$][$_get](0));
      argStorage[$_set](1, this[_m4storage$][$_get](1));
      argStorage[$_set](2, this[_m4storage$][$_get](2));
      argStorage[$_set](3, this[_m4storage$][$_get](3));
      argStorage[$_set](4, this[_m4storage$][$_get](4));
      argStorage[$_set](5, this[_m4storage$][$_get](5));
      argStorage[$_set](6, this[_m4storage$][$_get](6));
      argStorage[$_set](7, this[_m4storage$][$_get](7));
      argStorage[$_set](8, this[_m4storage$][$_get](8));
      argStorage[$_set](9, this[_m4storage$][$_get](9));
      argStorage[$_set](10, this[_m4storage$][$_get](10));
      argStorage[$_set](11, this[_m4storage$][$_get](11));
      argStorage[$_set](12, this[_m4storage$][$_get](12));
      argStorage[$_set](13, this[_m4storage$][$_get](13));
      argStorage[$_set](14, this[_m4storage$][$_get](14));
      argStorage[$_set](15, this[_m4storage$][$_get](15));
      return arg;
    }
    translate(x, y, z) {
      if (y === void 0) y = 0;
      if (z === void 0) z = 0;
      let tx = null;
      let ty = null;
      let tz = null;
      if (engine.Vector3.is(x)) {
        tx = x.x;
        ty = x.y;
        tz = x.z;
      } else if (typeof x == 'number') {
        tx = x;
        ty = y;
        tz = z;
      }
      let t1 = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(tx) + dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(ty) + dart.notNull(this[_m4storage$][$_get](8)) * dart.notNull(tz) + dart.notNull(this[_m4storage$][$_get](12)) * 1;
      let t2 = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(tx) + dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(ty) + dart.notNull(this[_m4storage$][$_get](9)) * dart.notNull(tz) + dart.notNull(this[_m4storage$][$_get](13)) * 1;
      let t3 = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(tx) + dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(ty) + dart.notNull(this[_m4storage$][$_get](10)) * dart.notNull(tz) + dart.notNull(this[_m4storage$][$_get](14)) * 1;
      let t4 = dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(tx) + dart.notNull(this[_m4storage$][$_get](7)) * dart.notNull(ty) + dart.notNull(this[_m4storage$][$_get](11)) * dart.notNull(tz) + dart.notNull(this[_m4storage$][$_get](15)) * 1;
      this[_m4storage$][$_set](12, t1);
      this[_m4storage$][$_set](13, t2);
      this[_m4storage$][$_set](14, t3);
      this[_m4storage$][$_set](15, t4);
    }
    scale(x, y, z) {
      let t8, t8$, t9, t8$0, t9$, t8$1, t9$0, t8$2, t9$1, t8$3, t9$2, t8$4, t9$3, t8$5, t9$4, t8$6, t9$5, t8$7, t9$6, t8$8, t9$7, t8$9, t9$8, t8$10, t9$9, t8$11, t9$10, t8$12, t9$11, t8$13, t9$12, t8$14, t9$13, t8$15;
      if (y === void 0) y = null;
      if (z === void 0) z = null;
      let sx = null;
      let sy = null;
      let sz = null;
      if (engine.Vector3.is(x)) {
        sx = x.x;
        sy = x.y;
        sz = x.z;
      } else if (typeof x == 'number') {
        sx = x;
        sy = (t8 = y, t8 == null ? x : t8);
        sz = (t8$ = z, t8$ == null ? x : t8$);
      }
      t8$0 = this[_m4storage$];
      t9 = 0;
      t8$0[$_set](t9, dart.notNull(t8$0[$_get](t9)) * dart.notNull(sx));
      t8$1 = this[_m4storage$];
      t9$ = 1;
      t8$1[$_set](t9$, dart.notNull(t8$1[$_get](t9$)) * dart.notNull(sx));
      t8$2 = this[_m4storage$];
      t9$0 = 2;
      t8$2[$_set](t9$0, dart.notNull(t8$2[$_get](t9$0)) * dart.notNull(sx));
      t8$3 = this[_m4storage$];
      t9$1 = 3;
      t8$3[$_set](t9$1, dart.notNull(t8$3[$_get](t9$1)) * dart.notNull(sx));
      t8$4 = this[_m4storage$];
      t9$2 = 4;
      t8$4[$_set](t9$2, dart.notNull(t8$4[$_get](t9$2)) * dart.notNull(sy));
      t8$5 = this[_m4storage$];
      t9$3 = 5;
      t8$5[$_set](t9$3, dart.notNull(t8$5[$_get](t9$3)) * dart.notNull(sy));
      t8$6 = this[_m4storage$];
      t9$4 = 6;
      t8$6[$_set](t9$4, dart.notNull(t8$6[$_get](t9$4)) * dart.notNull(sy));
      t8$7 = this[_m4storage$];
      t9$5 = 7;
      t8$7[$_set](t9$5, dart.notNull(t8$7[$_get](t9$5)) * dart.notNull(sy));
      t8$8 = this[_m4storage$];
      t9$6 = 8;
      t8$8[$_set](t9$6, dart.notNull(t8$8[$_get](t9$6)) * dart.notNull(sz));
      t8$9 = this[_m4storage$];
      t9$7 = 9;
      t8$9[$_set](t9$7, dart.notNull(t8$9[$_get](t9$7)) * dart.notNull(sz));
      t8$10 = this[_m4storage$];
      t9$8 = 10;
      t8$10[$_set](t9$8, dart.notNull(t8$10[$_get](t9$8)) * dart.notNull(sz));
      t8$11 = this[_m4storage$];
      t9$9 = 11;
      t8$11[$_set](t9$9, dart.notNull(t8$11[$_get](t9$9)) * dart.notNull(sz));
      t8$12 = this[_m4storage$];
      t9$10 = 12;
      t8$12[$_set](t9$10, dart.notNull(t8$12[$_get](t9$10)) * 1);
      t8$13 = this[_m4storage$];
      t9$11 = 13;
      t8$13[$_set](t9$11, dart.notNull(t8$13[$_get](t9$11)) * 1);
      t8$14 = this[_m4storage$];
      t9$12 = 14;
      t8$14[$_set](t9$12, dart.notNull(t8$14[$_get](t9$12)) * 1);
      t8$15 = this[_m4storage$];
      t9$13 = 15;
      t8$15[$_set](t9$13, dart.notNull(t8$15[$_get](t9$13)) * 1);
    }
    scaled(x, y, z) {
      let t8;
      if (y === void 0) y = null;
      if (z === void 0) z = null;
      t8 = this.clone();
      t8.scale(x, y, z);
      return t8;
    }
    setZero() {
      this[_m4storage$][$_set](0, 0.0);
      this[_m4storage$][$_set](1, 0.0);
      this[_m4storage$][$_set](2, 0.0);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](4, 0.0);
      this[_m4storage$][$_set](5, 0.0);
      this[_m4storage$][$_set](6, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](8, 0.0);
      this[_m4storage$][$_set](9, 0.0);
      this[_m4storage$][$_set](10, 0.0);
      this[_m4storage$][$_set](11, 0.0);
      this[_m4storage$][$_set](12, 0.0);
      this[_m4storage$][$_set](13, 0.0);
      this[_m4storage$][$_set](14, 0.0);
      this[_m4storage$][$_set](15, 0.0);
    }
    setIdentity() {
      this[_m4storage$][$_set](0, 1.0);
      this[_m4storage$][$_set](1, 0.0);
      this[_m4storage$][$_set](2, 0.0);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](4, 0.0);
      this[_m4storage$][$_set](5, 1.0);
      this[_m4storage$][$_set](6, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](8, 0.0);
      this[_m4storage$][$_set](9, 0.0);
      this[_m4storage$][$_set](10, 1.0);
      this[_m4storage$][$_set](11, 0.0);
      this[_m4storage$][$_set](12, 0.0);
      this[_m4storage$][$_set](13, 0.0);
      this[_m4storage$][$_set](14, 0.0);
      this[_m4storage$][$_set](15, 1.0);
    }
    transposed() {
      let t8;
      t8 = this.clone();
      t8.transpose();
      return t8;
    }
    transpose() {
      let temp = null;
      temp = this[_m4storage$][$_get](4);
      this[_m4storage$][$_set](4, this[_m4storage$][$_get](1));
      this[_m4storage$][$_set](1, temp);
      temp = this[_m4storage$][$_get](8);
      this[_m4storage$][$_set](8, this[_m4storage$][$_get](2));
      this[_m4storage$][$_set](2, temp);
      temp = this[_m4storage$][$_get](12);
      this[_m4storage$][$_set](12, this[_m4storage$][$_get](3));
      this[_m4storage$][$_set](3, temp);
      temp = this[_m4storage$][$_get](9);
      this[_m4storage$][$_set](9, this[_m4storage$][$_get](6));
      this[_m4storage$][$_set](6, temp);
      temp = this[_m4storage$][$_get](13);
      this[_m4storage$][$_set](13, this[_m4storage$][$_get](7));
      this[_m4storage$][$_set](7, temp);
      temp = this[_m4storage$][$_get](14);
      this[_m4storage$][$_set](14, this[_m4storage$][$_get](11));
      this[_m4storage$][$_set](11, temp);
    }
    determinant() {
      let det2_01_01 = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](5)) - dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](4));
      let det2_01_02 = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](6)) - dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](4));
      let det2_01_03 = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](7)) - dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(this[_m4storage$][$_get](4));
      let det2_01_12 = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](6)) - dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](5));
      let det2_01_13 = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](7)) - dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(this[_m4storage$][$_get](5));
      let det2_01_23 = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](7)) - dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(this[_m4storage$][$_get](6));
      let det3_201_012 = dart.notNull(this[_m4storage$][$_get](8)) * det2_01_12 - dart.notNull(this[_m4storage$][$_get](9)) * det2_01_02 + dart.notNull(this[_m4storage$][$_get](10)) * det2_01_01;
      let det3_201_013 = dart.notNull(this[_m4storage$][$_get](8)) * det2_01_13 - dart.notNull(this[_m4storage$][$_get](9)) * det2_01_03 + dart.notNull(this[_m4storage$][$_get](11)) * det2_01_01;
      let det3_201_023 = dart.notNull(this[_m4storage$][$_get](8)) * det2_01_23 - dart.notNull(this[_m4storage$][$_get](10)) * det2_01_03 + dart.notNull(this[_m4storage$][$_get](11)) * det2_01_02;
      let det3_201_123 = dart.notNull(this[_m4storage$][$_get](9)) * det2_01_23 - dart.notNull(this[_m4storage$][$_get](10)) * det2_01_13 + dart.notNull(this[_m4storage$][$_get](11)) * det2_01_12;
      return -det3_201_123 * dart.notNull(this[_m4storage$][$_get](12)) + det3_201_023 * dart.notNull(this[_m4storage$][$_get](13)) - det3_201_013 * dart.notNull(this[_m4storage$][$_get](14)) + det3_201_012 * dart.notNull(this[_m4storage$][$_get](15));
    }
    ['*'](arg) {
      if (typeof arg == 'number') {
        return this.scaled(arg);
      }
      if (engine.Vector3.is(arg)) {
        return this.transformed3(arg);
      }
      if (engine.Matrix4.is(arg)) {
        return this.multiplied(arg);
      }
      dart.throw(new core.ArgumentError.new(arg));
    }
    perspectiveTransform(arg) {
      let argStorage = arg[_v3storage$];
      let x = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](8)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](12));
      let y = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](9)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](13));
      let z = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](10)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](14));
      let w = 1.0 / (dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](7)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](11)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](15)));
      argStorage[$_set](0, x * w);
      argStorage[$_set](1, y * w);
      argStorage[$_set](2, z * w);
      return arg;
    }
    isIdentity() {
      return this[_m4storage$][$_get](0) === 1.0 && this[_m4storage$][$_get](1) === 0.0 && this[_m4storage$][$_get](2) === 0.0 && this[_m4storage$][$_get](3) === 0.0 && this[_m4storage$][$_get](4) === 0.0 && this[_m4storage$][$_get](5) === 1.0 && this[_m4storage$][$_get](6) === 0.0 && this[_m4storage$][$_get](7) === 0.0 && this[_m4storage$][$_get](8) === 0.0 && this[_m4storage$][$_get](9) === 0.0 && this[_m4storage$][$_get](10) === 1.0 && this[_m4storage$][$_get](11) === 0.0 && this[_m4storage$][$_get](12) === 0.0 && this[_m4storage$][$_get](13) === 0.0 && this[_m4storage$][$_get](14) === 0.0 && this[_m4storage$][$_get](15) === 1.0;
    }
    getTranslation() {
      let z = this[_m4storage$][$_get](14);
      let y = this[_m4storage$][$_get](13);
      let x = this[_m4storage$][$_get](12);
      return engine.Vector3.new(x, y, z);
    }
    rotate(axis, angle) {
      let len = axis.length;
      let axisStorage = axis[_v3storage$];
      let x = dart.notNull(axisStorage[$_get](0)) / dart.notNull(len);
      let y = dart.notNull(axisStorage[$_get](1)) / dart.notNull(len);
      let z = dart.notNull(axisStorage[$_get](2)) / dart.notNull(len);
      let c = math.cos(angle);
      let s = math.sin(angle);
      let C = 1.0 - c;
      let m11 = x * x * C + c;
      let m12 = x * y * C - z * s;
      let m13 = x * z * C + y * s;
      let m21 = y * x * C + z * s;
      let m22 = y * y * C + c;
      let m23 = y * z * C - x * s;
      let m31 = z * x * C - y * s;
      let m32 = z * y * C + x * s;
      let m33 = z * z * C + c;
      let t1 = dart.notNull(this[_m4storage$][$_get](0)) * m11 + dart.notNull(this[_m4storage$][$_get](4)) * m21 + dart.notNull(this[_m4storage$][$_get](8)) * m31;
      let t2 = dart.notNull(this[_m4storage$][$_get](1)) * m11 + dart.notNull(this[_m4storage$][$_get](5)) * m21 + dart.notNull(this[_m4storage$][$_get](9)) * m31;
      let t3 = dart.notNull(this[_m4storage$][$_get](2)) * m11 + dart.notNull(this[_m4storage$][$_get](6)) * m21 + dart.notNull(this[_m4storage$][$_get](10)) * m31;
      let t4 = dart.notNull(this[_m4storage$][$_get](3)) * m11 + dart.notNull(this[_m4storage$][$_get](7)) * m21 + dart.notNull(this[_m4storage$][$_get](11)) * m31;
      let t5 = dart.notNull(this[_m4storage$][$_get](0)) * m12 + dart.notNull(this[_m4storage$][$_get](4)) * m22 + dart.notNull(this[_m4storage$][$_get](8)) * m32;
      let t6 = dart.notNull(this[_m4storage$][$_get](1)) * m12 + dart.notNull(this[_m4storage$][$_get](5)) * m22 + dart.notNull(this[_m4storage$][$_get](9)) * m32;
      let t7 = dart.notNull(this[_m4storage$][$_get](2)) * m12 + dart.notNull(this[_m4storage$][$_get](6)) * m22 + dart.notNull(this[_m4storage$][$_get](10)) * m32;
      let t8 = dart.notNull(this[_m4storage$][$_get](3)) * m12 + dart.notNull(this[_m4storage$][$_get](7)) * m22 + dart.notNull(this[_m4storage$][$_get](11)) * m32;
      let t9 = dart.notNull(this[_m4storage$][$_get](0)) * m13 + dart.notNull(this[_m4storage$][$_get](4)) * m23 + dart.notNull(this[_m4storage$][$_get](8)) * m33;
      let t10 = dart.notNull(this[_m4storage$][$_get](1)) * m13 + dart.notNull(this[_m4storage$][$_get](5)) * m23 + dart.notNull(this[_m4storage$][$_get](9)) * m33;
      let t11 = dart.notNull(this[_m4storage$][$_get](2)) * m13 + dart.notNull(this[_m4storage$][$_get](6)) * m23 + dart.notNull(this[_m4storage$][$_get](10)) * m33;
      let t12 = dart.notNull(this[_m4storage$][$_get](3)) * m13 + dart.notNull(this[_m4storage$][$_get](7)) * m23 + dart.notNull(this[_m4storage$][$_get](11)) * m33;
      this[_m4storage$][$_set](0, t1);
      this[_m4storage$][$_set](1, t2);
      this[_m4storage$][$_set](2, t3);
      this[_m4storage$][$_set](3, t4);
      this[_m4storage$][$_set](4, t5);
      this[_m4storage$][$_set](5, t6);
      this[_m4storage$][$_set](6, t7);
      this[_m4storage$][$_set](7, t8);
      this[_m4storage$][$_set](8, t9);
      this[_m4storage$][$_set](9, t10);
      this[_m4storage$][$_set](10, t11);
      this[_m4storage$][$_set](11, t12);
    }
    rotateZ(angle) {
      let cosAngle = math.cos(angle);
      let sinAngle = math.sin(angle);
      let t1 = dart.notNull(this[_m4storage$][$_get](0)) * cosAngle + dart.notNull(this[_m4storage$][$_get](4)) * sinAngle;
      let t2 = dart.notNull(this[_m4storage$][$_get](1)) * cosAngle + dart.notNull(this[_m4storage$][$_get](5)) * sinAngle;
      let t3 = dart.notNull(this[_m4storage$][$_get](2)) * cosAngle + dart.notNull(this[_m4storage$][$_get](6)) * sinAngle;
      let t4 = dart.notNull(this[_m4storage$][$_get](3)) * cosAngle + dart.notNull(this[_m4storage$][$_get](7)) * sinAngle;
      let t5 = dart.notNull(this[_m4storage$][$_get](0)) * -sinAngle + dart.notNull(this[_m4storage$][$_get](4)) * cosAngle;
      let t6 = dart.notNull(this[_m4storage$][$_get](1)) * -sinAngle + dart.notNull(this[_m4storage$][$_get](5)) * cosAngle;
      let t7 = dart.notNull(this[_m4storage$][$_get](2)) * -sinAngle + dart.notNull(this[_m4storage$][$_get](6)) * cosAngle;
      let t8 = dart.notNull(this[_m4storage$][$_get](3)) * -sinAngle + dart.notNull(this[_m4storage$][$_get](7)) * cosAngle;
      this[_m4storage$][$_set](0, t1);
      this[_m4storage$][$_set](1, t2);
      this[_m4storage$][$_set](2, t3);
      this[_m4storage$][$_set](3, t4);
      this[_m4storage$][$_set](4, t5);
      this[_m4storage$][$_set](5, t6);
      this[_m4storage$][$_set](6, t7);
      this[_m4storage$][$_set](7, t8);
    }
    setTranslation(t) {
      let tStorage = t[_v3storage$];
      let z = tStorage[$_get](2);
      let y = tStorage[$_get](1);
      let x = tStorage[$_get](0);
      this[_m4storage$][$_set](14, z);
      this[_m4storage$][$_set](13, y);
      this[_m4storage$][$_set](12, x);
    }
    setTranslationRaw(x, y, z) {
      this[_m4storage$][$_set](14, z);
      this[_m4storage$][$_set](13, y);
      this[_m4storage$][$_set](12, x);
    }
    transposeRotation() {
      let temp = null;
      temp = this[_m4storage$][$_get](1);
      this[_m4storage$][$_set](1, this[_m4storage$][$_get](4));
      this[_m4storage$][$_set](4, temp);
      temp = this[_m4storage$][$_get](2);
      this[_m4storage$][$_set](2, this[_m4storage$][$_get](8));
      this[_m4storage$][$_set](8, temp);
      temp = this[_m4storage$][$_get](4);
      this[_m4storage$][$_set](4, this[_m4storage$][$_get](1));
      this[_m4storage$][$_set](1, temp);
      temp = this[_m4storage$][$_get](6);
      this[_m4storage$][$_set](6, this[_m4storage$][$_get](9));
      this[_m4storage$][$_set](9, temp);
      temp = this[_m4storage$][$_get](8);
      this[_m4storage$][$_set](8, this[_m4storage$][$_get](2));
      this[_m4storage$][$_set](2, temp);
      temp = this[_m4storage$][$_get](9);
      this[_m4storage$][$_set](9, this[_m4storage$][$_get](6));
      this[_m4storage$][$_set](6, temp);
    }
    invert() {
      return this.copyInverse(this);
    }
    copyInverse(arg) {
      let argStorage = arg[_m4storage$];
      let a00 = argStorage[$_get](0);
      let a01 = argStorage[$_get](1);
      let a02 = argStorage[$_get](2);
      let a03 = argStorage[$_get](3);
      let a10 = argStorage[$_get](4);
      let a11 = argStorage[$_get](5);
      let a12 = argStorage[$_get](6);
      let a13 = argStorage[$_get](7);
      let a20 = argStorage[$_get](8);
      let a21 = argStorage[$_get](9);
      let a22 = argStorage[$_get](10);
      let a23 = argStorage[$_get](11);
      let a30 = argStorage[$_get](12);
      let a31 = argStorage[$_get](13);
      let a32 = argStorage[$_get](14);
      let a33 = argStorage[$_get](15);
      let b00 = dart.notNull(a00) * dart.notNull(a11) - dart.notNull(a01) * dart.notNull(a10);
      let b01 = dart.notNull(a00) * dart.notNull(a12) - dart.notNull(a02) * dart.notNull(a10);
      let b02 = dart.notNull(a00) * dart.notNull(a13) - dart.notNull(a03) * dart.notNull(a10);
      let b03 = dart.notNull(a01) * dart.notNull(a12) - dart.notNull(a02) * dart.notNull(a11);
      let b04 = dart.notNull(a01) * dart.notNull(a13) - dart.notNull(a03) * dart.notNull(a11);
      let b05 = dart.notNull(a02) * dart.notNull(a13) - dart.notNull(a03) * dart.notNull(a12);
      let b06 = dart.notNull(a20) * dart.notNull(a31) - dart.notNull(a21) * dart.notNull(a30);
      let b07 = dart.notNull(a20) * dart.notNull(a32) - dart.notNull(a22) * dart.notNull(a30);
      let b08 = dart.notNull(a20) * dart.notNull(a33) - dart.notNull(a23) * dart.notNull(a30);
      let b09 = dart.notNull(a21) * dart.notNull(a32) - dart.notNull(a22) * dart.notNull(a31);
      let b10 = dart.notNull(a21) * dart.notNull(a33) - dart.notNull(a23) * dart.notNull(a31);
      let b11 = dart.notNull(a22) * dart.notNull(a33) - dart.notNull(a23) * dart.notNull(a32);
      let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (det === 0.0) {
        this.setFrom(arg);
        return 0.0;
      }
      let invDet = 1.0 / det;
      this[_m4storage$][$_set](0, (dart.notNull(a11) * b11 - dart.notNull(a12) * b10 + dart.notNull(a13) * b09) * invDet);
      this[_m4storage$][$_set](1, (-dart.notNull(a01) * b11 + dart.notNull(a02) * b10 - dart.notNull(a03) * b09) * invDet);
      this[_m4storage$][$_set](2, (dart.notNull(a31) * b05 - dart.notNull(a32) * b04 + dart.notNull(a33) * b03) * invDet);
      this[_m4storage$][$_set](3, (-dart.notNull(a21) * b05 + dart.notNull(a22) * b04 - dart.notNull(a23) * b03) * invDet);
      this[_m4storage$][$_set](4, (-dart.notNull(a10) * b11 + dart.notNull(a12) * b08 - dart.notNull(a13) * b07) * invDet);
      this[_m4storage$][$_set](5, (dart.notNull(a00) * b11 - dart.notNull(a02) * b08 + dart.notNull(a03) * b07) * invDet);
      this[_m4storage$][$_set](6, (-dart.notNull(a30) * b05 + dart.notNull(a32) * b02 - dart.notNull(a33) * b01) * invDet);
      this[_m4storage$][$_set](7, (dart.notNull(a20) * b05 - dart.notNull(a22) * b02 + dart.notNull(a23) * b01) * invDet);
      this[_m4storage$][$_set](8, (dart.notNull(a10) * b10 - dart.notNull(a11) * b08 + dart.notNull(a13) * b06) * invDet);
      this[_m4storage$][$_set](9, (-dart.notNull(a00) * b10 + dart.notNull(a01) * b08 - dart.notNull(a03) * b06) * invDet);
      this[_m4storage$][$_set](10, (dart.notNull(a30) * b04 - dart.notNull(a31) * b02 + dart.notNull(a33) * b00) * invDet);
      this[_m4storage$][$_set](11, (-dart.notNull(a20) * b04 + dart.notNull(a21) * b02 - dart.notNull(a23) * b00) * invDet);
      this[_m4storage$][$_set](12, (-dart.notNull(a10) * b09 + dart.notNull(a11) * b07 - dart.notNull(a12) * b06) * invDet);
      this[_m4storage$][$_set](13, (dart.notNull(a00) * b09 - dart.notNull(a01) * b07 + dart.notNull(a02) * b06) * invDet);
      this[_m4storage$][$_set](14, (-dart.notNull(a30) * b03 + dart.notNull(a31) * b01 - dart.notNull(a32) * b00) * invDet);
      this[_m4storage$][$_set](15, (dart.notNull(a20) * b03 - dart.notNull(a21) * b01 + dart.notNull(a22) * b00) * invDet);
      return det;
    }
    invertRotation() {
      let det = this.determinant();
      if (det === 0.0) {
        return 0.0;
      }
      let invDet = 1.0 / dart.notNull(det);
      let ix = null;
      let iy = null;
      let iz = null;
      let jx = null;
      let jy = null;
      let jz = null;
      let kx = null;
      let ky = null;
      let kz = null;
      ix = invDet * (dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(this[_m4storage$][$_get](10)) - dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(this[_m4storage$][$_get](9)));
      iy = invDet * (dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](9)) - dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](10)));
      iz = invDet * (dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](6)) - dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](5)));
      jx = invDet * (dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(this[_m4storage$][$_get](8)) - dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(this[_m4storage$][$_get](10)));
      jy = invDet * (dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](10)) - dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](8)));
      jz = invDet * (dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](4)) - dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](6)));
      kx = invDet * (dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(this[_m4storage$][$_get](9)) - dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(this[_m4storage$][$_get](8)));
      ky = invDet * (dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](8)) - dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](9)));
      kz = invDet * (dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](5)) - dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](4)));
      this[_m4storage$][$_set](0, ix);
      this[_m4storage$][$_set](1, iy);
      this[_m4storage$][$_set](2, iz);
      this[_m4storage$][$_set](4, jx);
      this[_m4storage$][$_set](5, jy);
      this[_m4storage$][$_set](6, jz);
      this[_m4storage$][$_set](8, kx);
      this[_m4storage$][$_set](9, ky);
      this[_m4storage$][$_set](10, kz);
      return det;
    }
    setRotationX(radians) {
      let c = math.cos(radians);
      let s = math.sin(radians);
      this[_m4storage$][$_set](0, 1.0);
      this[_m4storage$][$_set](1, 0.0);
      this[_m4storage$][$_set](2, 0.0);
      this[_m4storage$][$_set](4, 0.0);
      this[_m4storage$][$_set](5, c);
      this[_m4storage$][$_set](6, s);
      this[_m4storage$][$_set](8, 0.0);
      this[_m4storage$][$_set](9, -s);
      this[_m4storage$][$_set](10, c);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](11, 0.0);
    }
    setRotationY(radians) {
      let c = math.cos(radians);
      let s = math.sin(radians);
      this[_m4storage$][$_set](0, c);
      this[_m4storage$][$_set](1, 0.0);
      this[_m4storage$][$_set](2, -s);
      this[_m4storage$][$_set](4, 0.0);
      this[_m4storage$][$_set](5, 1.0);
      this[_m4storage$][$_set](6, 0.0);
      this[_m4storage$][$_set](8, s);
      this[_m4storage$][$_set](9, 0.0);
      this[_m4storage$][$_set](10, c);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](11, 0.0);
    }
    setRotationZ(radians) {
      let c = math.cos(radians);
      let s = math.sin(radians);
      this[_m4storage$][$_set](0, c);
      this[_m4storage$][$_set](1, s);
      this[_m4storage$][$_set](2, 0.0);
      this[_m4storage$][$_set](4, -s);
      this[_m4storage$][$_set](5, c);
      this[_m4storage$][$_set](6, 0.0);
      this[_m4storage$][$_set](8, 0.0);
      this[_m4storage$][$_set](9, 0.0);
      this[_m4storage$][$_set](10, 1.0);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](11, 0.0);
    }
    multiply(arg) {
      let m00 = this[_m4storage$][$_get](0);
      let m01 = this[_m4storage$][$_get](4);
      let m02 = this[_m4storage$][$_get](8);
      let m03 = this[_m4storage$][$_get](12);
      let m10 = this[_m4storage$][$_get](1);
      let m11 = this[_m4storage$][$_get](5);
      let m12 = this[_m4storage$][$_get](9);
      let m13 = this[_m4storage$][$_get](13);
      let m20 = this[_m4storage$][$_get](2);
      let m21 = this[_m4storage$][$_get](6);
      let m22 = this[_m4storage$][$_get](10);
      let m23 = this[_m4storage$][$_get](14);
      let m30 = this[_m4storage$][$_get](3);
      let m31 = this[_m4storage$][$_get](7);
      let m32 = this[_m4storage$][$_get](11);
      let m33 = this[_m4storage$][$_get](15);
      let argStorage = arg[_m4storage$];
      let n00 = argStorage[$_get](0);
      let n01 = argStorage[$_get](4);
      let n02 = argStorage[$_get](8);
      let n03 = argStorage[$_get](12);
      let n10 = argStorage[$_get](1);
      let n11 = argStorage[$_get](5);
      let n12 = argStorage[$_get](9);
      let n13 = argStorage[$_get](13);
      let n20 = argStorage[$_get](2);
      let n21 = argStorage[$_get](6);
      let n22 = argStorage[$_get](10);
      let n23 = argStorage[$_get](14);
      let n30 = argStorage[$_get](3);
      let n31 = argStorage[$_get](7);
      let n32 = argStorage[$_get](11);
      let n33 = argStorage[$_get](15);
      this[_m4storage$][$_set](0, dart.notNull(m00) * dart.notNull(n00) + dart.notNull(m01) * dart.notNull(n10) + dart.notNull(m02) * dart.notNull(n20) + dart.notNull(m03) * dart.notNull(n30));
      this[_m4storage$][$_set](4, dart.notNull(m00) * dart.notNull(n01) + dart.notNull(m01) * dart.notNull(n11) + dart.notNull(m02) * dart.notNull(n21) + dart.notNull(m03) * dart.notNull(n31));
      this[_m4storage$][$_set](8, dart.notNull(m00) * dart.notNull(n02) + dart.notNull(m01) * dart.notNull(n12) + dart.notNull(m02) * dart.notNull(n22) + dart.notNull(m03) * dart.notNull(n32));
      this[_m4storage$][$_set](12, dart.notNull(m00) * dart.notNull(n03) + dart.notNull(m01) * dart.notNull(n13) + dart.notNull(m02) * dart.notNull(n23) + dart.notNull(m03) * dart.notNull(n33));
      this[_m4storage$][$_set](1, dart.notNull(m10) * dart.notNull(n00) + dart.notNull(m11) * dart.notNull(n10) + dart.notNull(m12) * dart.notNull(n20) + dart.notNull(m13) * dart.notNull(n30));
      this[_m4storage$][$_set](5, dart.notNull(m10) * dart.notNull(n01) + dart.notNull(m11) * dart.notNull(n11) + dart.notNull(m12) * dart.notNull(n21) + dart.notNull(m13) * dart.notNull(n31));
      this[_m4storage$][$_set](9, dart.notNull(m10) * dart.notNull(n02) + dart.notNull(m11) * dart.notNull(n12) + dart.notNull(m12) * dart.notNull(n22) + dart.notNull(m13) * dart.notNull(n32));
      this[_m4storage$][$_set](13, dart.notNull(m10) * dart.notNull(n03) + dart.notNull(m11) * dart.notNull(n13) + dart.notNull(m12) * dart.notNull(n23) + dart.notNull(m13) * dart.notNull(n33));
      this[_m4storage$][$_set](2, dart.notNull(m20) * dart.notNull(n00) + dart.notNull(m21) * dart.notNull(n10) + dart.notNull(m22) * dart.notNull(n20) + dart.notNull(m23) * dart.notNull(n30));
      this[_m4storage$][$_set](6, dart.notNull(m20) * dart.notNull(n01) + dart.notNull(m21) * dart.notNull(n11) + dart.notNull(m22) * dart.notNull(n21) + dart.notNull(m23) * dart.notNull(n31));
      this[_m4storage$][$_set](10, dart.notNull(m20) * dart.notNull(n02) + dart.notNull(m21) * dart.notNull(n12) + dart.notNull(m22) * dart.notNull(n22) + dart.notNull(m23) * dart.notNull(n32));
      this[_m4storage$][$_set](14, dart.notNull(m20) * dart.notNull(n03) + dart.notNull(m21) * dart.notNull(n13) + dart.notNull(m22) * dart.notNull(n23) + dart.notNull(m23) * dart.notNull(n33));
      this[_m4storage$][$_set](3, dart.notNull(m30) * dart.notNull(n00) + dart.notNull(m31) * dart.notNull(n10) + dart.notNull(m32) * dart.notNull(n20) + dart.notNull(m33) * dart.notNull(n30));
      this[_m4storage$][$_set](7, dart.notNull(m30) * dart.notNull(n01) + dart.notNull(m31) * dart.notNull(n11) + dart.notNull(m32) * dart.notNull(n21) + dart.notNull(m33) * dart.notNull(n31));
      this[_m4storage$][$_set](11, dart.notNull(m30) * dart.notNull(n02) + dart.notNull(m31) * dart.notNull(n12) + dart.notNull(m32) * dart.notNull(n22) + dart.notNull(m33) * dart.notNull(n32));
      this[_m4storage$][$_set](15, dart.notNull(m30) * dart.notNull(n03) + dart.notNull(m31) * dart.notNull(n13) + dart.notNull(m32) * dart.notNull(n23) + dart.notNull(m33) * dart.notNull(n33));
    }
    multiplied(arg) {
      let t8;
      t8 = this.clone();
      t8.multiply(arg);
      return t8;
    }
    transposeMultiply(arg) {
      let m00 = this[_m4storage$][$_get](0);
      let m01 = this[_m4storage$][$_get](1);
      let m02 = this[_m4storage$][$_get](2);
      let m03 = this[_m4storage$][$_get](3);
      let m10 = this[_m4storage$][$_get](4);
      let m11 = this[_m4storage$][$_get](5);
      let m12 = this[_m4storage$][$_get](6);
      let m13 = this[_m4storage$][$_get](7);
      let m20 = this[_m4storage$][$_get](8);
      let m21 = this[_m4storage$][$_get](9);
      let m22 = this[_m4storage$][$_get](10);
      let m23 = this[_m4storage$][$_get](11);
      let m30 = this[_m4storage$][$_get](12);
      let m31 = this[_m4storage$][$_get](13);
      let m32 = this[_m4storage$][$_get](14);
      let m33 = this[_m4storage$][$_get](15);
      let argStorage = arg[_m4storage$];
      this[_m4storage$][$_set](0, dart.notNull(m00) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](3)));
      this[_m4storage$][$_set](4, dart.notNull(m00) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](7)));
      this[_m4storage$][$_set](8, dart.notNull(m00) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](11)));
      this[_m4storage$][$_set](12, dart.notNull(m00) * dart.notNull(argStorage[$_get](12)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](13)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](14)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](1, dart.notNull(m10) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](3)));
      this[_m4storage$][$_set](5, dart.notNull(m10) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](7)));
      this[_m4storage$][$_set](9, dart.notNull(m10) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](11)));
      this[_m4storage$][$_set](13, dart.notNull(m10) * dart.notNull(argStorage[$_get](12)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](13)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](14)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](2, dart.notNull(m20) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](3)));
      this[_m4storage$][$_set](6, dart.notNull(m20) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](7)));
      this[_m4storage$][$_set](10, dart.notNull(m20) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](11)));
      this[_m4storage$][$_set](14, dart.notNull(m20) * dart.notNull(argStorage[$_get](12)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](13)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](14)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](3, dart.notNull(m30) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](3)));
      this[_m4storage$][$_set](7, dart.notNull(m30) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](7)));
      this[_m4storage$][$_set](11, dart.notNull(m30) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](11)));
      this[_m4storage$][$_set](15, dart.notNull(m30) * dart.notNull(argStorage[$_get](12)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](13)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](14)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](15)));
    }
    multiplyTranspose(arg) {
      let m00 = this[_m4storage$][$_get](0);
      let m01 = this[_m4storage$][$_get](4);
      let m02 = this[_m4storage$][$_get](8);
      let m03 = this[_m4storage$][$_get](12);
      let m10 = this[_m4storage$][$_get](1);
      let m11 = this[_m4storage$][$_get](5);
      let m12 = this[_m4storage$][$_get](9);
      let m13 = this[_m4storage$][$_get](13);
      let m20 = this[_m4storage$][$_get](2);
      let m21 = this[_m4storage$][$_get](6);
      let m22 = this[_m4storage$][$_get](10);
      let m23 = this[_m4storage$][$_get](14);
      let m30 = this[_m4storage$][$_get](3);
      let m31 = this[_m4storage$][$_get](7);
      let m32 = this[_m4storage$][$_get](11);
      let m33 = this[_m4storage$][$_get](15);
      let argStorage = arg[_m4storage$];
      this[_m4storage$][$_set](0, dart.notNull(m00) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](12)));
      this[_m4storage$][$_set](4, dart.notNull(m00) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](13)));
      this[_m4storage$][$_set](8, dart.notNull(m00) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](14)));
      this[_m4storage$][$_set](12, dart.notNull(m00) * dart.notNull(argStorage[$_get](3)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](7)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](11)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](1, dart.notNull(m10) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](12)));
      this[_m4storage$][$_set](5, dart.notNull(m10) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](13)));
      this[_m4storage$][$_set](9, dart.notNull(m10) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](14)));
      this[_m4storage$][$_set](13, dart.notNull(m10) * dart.notNull(argStorage[$_get](3)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](7)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](11)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](2, dart.notNull(m20) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](12)));
      this[_m4storage$][$_set](6, dart.notNull(m20) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](13)));
      this[_m4storage$][$_set](10, dart.notNull(m20) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](14)));
      this[_m4storage$][$_set](14, dart.notNull(m20) * dart.notNull(argStorage[$_get](3)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](7)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](11)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](3, dart.notNull(m30) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](12)));
      this[_m4storage$][$_set](7, dart.notNull(m30) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](13)));
      this[_m4storage$][$_set](11, dart.notNull(m30) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](14)));
      this[_m4storage$][$_set](15, dart.notNull(m30) * dart.notNull(argStorage[$_get](3)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](7)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](11)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](15)));
    }
    rotate3(arg) {
      let argStorage = arg[_v3storage$];
      let x = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](8)) * dart.notNull(argStorage[$_get](2));
      let y = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](9)) * dart.notNull(argStorage[$_get](2));
      let z = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](10)) * dart.notNull(argStorage[$_get](2));
      argStorage[$_set](0, x);
      argStorage[$_set](1, y);
      argStorage[$_set](2, z);
      return arg;
    }
    rotated3(arg, out) {
      if (out === void 0) out = null;
      if (out == null) {
        out = engine.Vector3.copy(arg);
      } else {
        out.setFrom(arg);
      }
      return this.rotate3(out);
    }
    transform3(arg) {
      let argStorage = arg[_v3storage$];
      let x = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](8)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](12));
      let y = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](9)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](13));
      let z = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](10)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](14));
      argStorage[$_set](0, x);
      argStorage[$_set](1, y);
      argStorage[$_set](2, z);
      return arg;
    }
    transformed3(arg, out) {
      if (out === void 0) out = null;
      if (out == null) {
        out = engine.Vector3.copy(arg);
      } else {
        out.setFrom(arg);
      }
      return this.transform3(out);
    }
    copyIntoArray(array, offset) {
      if (offset === void 0) offset = 0;
      let i = offset;
      array[$_set](dart.notNull(i) + 15, this[_m4storage$][$_get](15));
      array[$_set](dart.notNull(i) + 14, this[_m4storage$][$_get](14));
      array[$_set](dart.notNull(i) + 13, this[_m4storage$][$_get](13));
      array[$_set](dart.notNull(i) + 12, this[_m4storage$][$_get](12));
      array[$_set](dart.notNull(i) + 11, this[_m4storage$][$_get](11));
      array[$_set](dart.notNull(i) + 10, this[_m4storage$][$_get](10));
      array[$_set](dart.notNull(i) + 9, this[_m4storage$][$_get](9));
      array[$_set](dart.notNull(i) + 8, this[_m4storage$][$_get](8));
      array[$_set](dart.notNull(i) + 7, this[_m4storage$][$_get](7));
      array[$_set](dart.notNull(i) + 6, this[_m4storage$][$_get](6));
      array[$_set](dart.notNull(i) + 5, this[_m4storage$][$_get](5));
      array[$_set](dart.notNull(i) + 4, this[_m4storage$][$_get](4));
      array[$_set](dart.notNull(i) + 3, this[_m4storage$][$_get](3));
      array[$_set](dart.notNull(i) + 2, this[_m4storage$][$_get](2));
      array[$_set](dart.notNull(i) + 1, this[_m4storage$][$_get](1));
      array[$_set](dart.notNull(i) + 0, this[_m4storage$][$_get](0));
    }
    copyFromArray(array, offset) {
      if (offset === void 0) offset = 0;
      let i = offset;
      this[_m4storage$][$_set](15, array[$_get](dart.notNull(i) + 15));
      this[_m4storage$][$_set](14, array[$_get](dart.notNull(i) + 14));
      this[_m4storage$][$_set](13, array[$_get](dart.notNull(i) + 13));
      this[_m4storage$][$_set](12, array[$_get](dart.notNull(i) + 12));
      this[_m4storage$][$_set](11, array[$_get](dart.notNull(i) + 11));
      this[_m4storage$][$_set](10, array[$_get](dart.notNull(i) + 10));
      this[_m4storage$][$_set](9, array[$_get](dart.notNull(i) + 9));
      this[_m4storage$][$_set](8, array[$_get](dart.notNull(i) + 8));
      this[_m4storage$][$_set](7, array[$_get](dart.notNull(i) + 7));
      this[_m4storage$][$_set](6, array[$_get](dart.notNull(i) + 6));
      this[_m4storage$][$_set](5, array[$_get](dart.notNull(i) + 5));
      this[_m4storage$][$_set](4, array[$_get](dart.notNull(i) + 4));
      this[_m4storage$][$_set](3, array[$_get](dart.notNull(i) + 3));
      this[_m4storage$][$_set](2, array[$_get](dart.notNull(i) + 2));
      this[_m4storage$][$_set](1, array[$_get](dart.notNull(i) + 1));
      this[_m4storage$][$_set](0, array[$_get](dart.notNull(i) + 0));
    }
  };
  (engine.Matrix4.zero = function() {
    this[_m4storage$] = _native_typed_data.NativeFloat64List.new(16);
    ;
  }).prototype = engine.Matrix4.prototype;
  (engine.Matrix4.fromFloat64List = function(_m4storage) {
    this[_m4storage$] = _m4storage;
    ;
  }).prototype = engine.Matrix4.prototype;
  (engine.Matrix4.fromBuffer = function(buffer, offset) {
    this[_m4storage$] = typed_data.Float64List.view(buffer, offset, 16);
    ;
  }).prototype = engine.Matrix4.prototype;
  dart.addTypeTests(engine.Matrix4);
  dart.setMethodSignature(engine.Matrix4, () => ({
    __proto__: dart.getMethods(engine.Matrix4.__proto__),
    index: dart.fnType(core.int, [core.int, core.int]),
    entry: dart.fnType(core.double, [core.int, core.int]),
    setEntry: dart.fnType(dart.void, [core.int, core.int, core.double]),
    setValues: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double]),
    setFrom: dart.fnType(dart.void, [engine.Matrix4]),
    _get: dart.fnType(core.double, [core.int]),
    _set: dart.fnType(dart.void, [core.int, core.double]),
    clone: dart.fnType(engine.Matrix4, []),
    copyInto: dart.fnType(engine.Matrix4, [engine.Matrix4]),
    translate: dart.fnType(dart.void, [dart.dynamic], [core.double, core.double]),
    scale: dart.fnType(dart.void, [dart.dynamic], [core.double, core.double]),
    scaled: dart.fnType(engine.Matrix4, [dart.dynamic], [core.double, core.double]),
    setZero: dart.fnType(dart.void, []),
    setIdentity: dart.fnType(dart.void, []),
    transposed: dart.fnType(engine.Matrix4, []),
    transpose: dart.fnType(dart.void, []),
    determinant: dart.fnType(core.double, []),
    '*': dart.fnType(dart.dynamic, [dart.dynamic]),
    perspectiveTransform: dart.fnType(engine.Vector3, [engine.Vector3]),
    isIdentity: dart.fnType(core.bool, []),
    getTranslation: dart.fnType(engine.Vector3, []),
    rotate: dart.fnType(dart.void, [engine.Vector3, core.double]),
    rotateZ: dart.fnType(dart.void, [core.double]),
    setTranslation: dart.fnType(dart.void, [engine.Vector3]),
    setTranslationRaw: dart.fnType(dart.void, [core.double, core.double, core.double]),
    transposeRotation: dart.fnType(dart.void, []),
    invert: dart.fnType(core.double, []),
    copyInverse: dart.fnType(core.double, [engine.Matrix4]),
    invertRotation: dart.fnType(core.double, []),
    setRotationX: dart.fnType(dart.void, [core.double]),
    setRotationY: dart.fnType(dart.void, [core.double]),
    setRotationZ: dart.fnType(dart.void, [core.double]),
    multiply: dart.fnType(dart.void, [engine.Matrix4]),
    multiplied: dart.fnType(engine.Matrix4, [engine.Matrix4]),
    transposeMultiply: dart.fnType(dart.void, [engine.Matrix4]),
    multiplyTranspose: dart.fnType(dart.void, [engine.Matrix4]),
    rotate3: dart.fnType(engine.Vector3, [engine.Vector3]),
    rotated3: dart.fnType(engine.Vector3, [engine.Vector3], [engine.Vector3]),
    transform3: dart.fnType(engine.Vector3, [engine.Vector3]),
    transformed3: dart.fnType(engine.Vector3, [engine.Vector3], [engine.Vector3]),
    copyIntoArray: dart.fnType(dart.void, [core.List$(core.num)], [core.int]),
    copyFromArray: dart.fnType(dart.void, [core.List$(core.double)], [core.int])
  }));
  dart.setGetterSignature(engine.Matrix4, () => ({
    __proto__: dart.getGetters(engine.Matrix4.__proto__),
    storage: typed_data.Float64List,
    dimension: core.int
  }));
  dart.setLibraryUri(engine.Matrix4, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Matrix4, () => ({
    __proto__: dart.getFields(engine.Matrix4.__proto__),
    [_m4storage$]: dart.finalFieldType(typed_data.Float64List)
  }));
  engine.Vector3 = class Vector3 extends core.Object {
    get storage() {
      return this[_v3storage$];
    }
    static min(a, b, result) {
      let t8;
      t8 = result;
      t8.x = math.min(core.double, a.x, b.x);
      t8.y = math.min(core.double, a.y, b.y);
      t8.z = math.min(core.double, a.z, b.z);
      t8;
    }
    static max(a, b, result) {
      let t8;
      t8 = result;
      t8.x = math.max(core.double, a.x, b.x);
      t8.y = math.max(core.double, a.y, b.y);
      t8.z = math.max(core.double, a.z, b.z);
      t8;
    }
    static mix(min, max, a, result) {
      let t8;
      t8 = result;
      t8.x = dart.notNull(min.x) + dart.notNull(a) * (dart.notNull(max.x) - dart.notNull(min.x));
      t8.y = dart.notNull(min.y) + dart.notNull(a) * (dart.notNull(max.y) - dart.notNull(min.y));
      t8.z = dart.notNull(min.z) + dart.notNull(a) * (dart.notNull(max.z) - dart.notNull(min.z));
      t8;
    }
    static new(x, y, z) {
      let t8;
      t8 = new engine.Vector3.zero();
      t8.setValues(x, y, z);
      return t8;
    }
    static all(value) {
      let t8;
      t8 = new engine.Vector3.zero();
      t8.splat(value);
      return t8;
    }
    static copy(other) {
      let t8;
      t8 = new engine.Vector3.zero();
      t8.setFrom(other);
      return t8;
    }
    static random(rng) {
      if (rng === void 0) rng = null;
      rng == null ? rng = math.Random.new() : null;
      return engine.Vector3.new(rng.nextDouble(), rng.nextDouble(), rng.nextDouble());
    }
    setValues(x, y, z) {
      this[_v3storage$][$_set](0, x);
      this[_v3storage$][$_set](1, y);
      this[_v3storage$][$_set](2, z);
    }
    setZero() {
      this[_v3storage$][$_set](2, 0.0);
      this[_v3storage$][$_set](1, 0.0);
      this[_v3storage$][$_set](0, 0.0);
    }
    setFrom(other) {
      let otherStorage = other[_v3storage$];
      this[_v3storage$][$_set](0, otherStorage[$_get](0));
      this[_v3storage$][$_set](1, otherStorage[$_get](1));
      this[_v3storage$][$_set](2, otherStorage[$_get](2));
    }
    splat(arg) {
      this[_v3storage$][$_set](2, arg);
      this[_v3storage$][$_set](1, arg);
      this[_v3storage$][$_set](0, arg);
    }
    _get(i) {
      return this[_v3storage$][$_get](i);
    }
    _set(i, v$) {
      let v = v$;
      this[_v3storage$][$_set](i, v);
      return v$;
    }
    set length(value) {
      let t9, t8, t9$, t8$, t9$0, t8$0;
      if (value === 0.0) {
        this.setZero();
      } else {
        let l = this.length;
        if (l === 0.0) {
          return;
        }
        l = dart.notNull(value) / dart.notNull(l);
        t8 = this[_v3storage$];
        t9 = 0;
        t8[$_set](t9, dart.notNull(t8[$_get](t9)) * dart.notNull(l));
        t8$ = this[_v3storage$];
        t9$ = 1;
        t8$[$_set](t9$, dart.notNull(t8$[$_get](t9$)) * dart.notNull(l));
        t8$0 = this[_v3storage$];
        t9$0 = 2;
        t8$0[$_set](t9$0, dart.notNull(t8$0[$_get](t9$0)) * dart.notNull(l));
      }
    }
    get length() {
      return math.sqrt(this.length2);
    }
    get length2() {
      let sum = null;
      sum = dart.notNull(this[_v3storage$][$_get](0)) * dart.notNull(this[_v3storage$][$_get](0));
      sum = dart.notNull(sum) + dart.notNull(this[_v3storage$][$_get](1)) * dart.notNull(this[_v3storage$][$_get](1));
      sum = dart.notNull(sum) + dart.notNull(this[_v3storage$][$_get](2)) * dart.notNull(this[_v3storage$][$_get](2));
      return sum;
    }
    normalize() {
      let t9, t8, t9$, t8$, t9$0, t8$0;
      let l = this.length;
      if (l === 0.0) {
        return 0.0;
      }
      let d = 1.0 / dart.notNull(l);
      t8 = this[_v3storage$];
      t9 = 0;
      t8[$_set](t9, dart.notNull(t8[$_get](t9)) * d);
      t8$ = this[_v3storage$];
      t9$ = 1;
      t8$[$_set](t9$, dart.notNull(t8$[$_get](t9$)) * d);
      t8$0 = this[_v3storage$];
      t9$0 = 2;
      t8$0[$_set](t9$0, dart.notNull(t8$0[$_get](t9$0)) * d);
      return l;
    }
    normalized() {
      let t8;
      t8 = engine.Vector3.copy(this);
      t8.normalize();
      return t8;
    }
    normalizeInto(out) {
      let t8;
      t8 = out;
      t8.setFrom(this);
      t8.normalize();
      t8;
      return out;
    }
    distanceTo(arg) {
      return math.sqrt(this.distanceToSquared(arg));
    }
    distanceToSquared(arg) {
      let argStorage = arg[_v3storage$];
      let dx = dart.notNull(this[_v3storage$][$_get](0)) - dart.notNull(argStorage[$_get](0));
      let dy = dart.notNull(this[_v3storage$][$_get](1)) - dart.notNull(argStorage[$_get](1));
      let dz = dart.notNull(this[_v3storage$][$_get](2)) - dart.notNull(argStorage[$_get](2));
      return dx * dx + dy * dy + dz * dz;
    }
    angleTo(other) {
      let otherStorage = other[_v3storage$];
      if (this[_v3storage$][$_get](0) == otherStorage[$_get](0) && this[_v3storage$][$_get](1) == otherStorage[$_get](1) && this[_v3storage$][$_get](2) == otherStorage[$_get](2)) {
        return 0.0;
      }
      let d = dart.notNull(this.dot(other)) / (dart.notNull(this.length) * dart.notNull(other.length));
      return math.acos(d[$clamp](-1.0, 1.0));
    }
    dot(other) {
      let otherStorage = other[_v3storage$];
      let sum = null;
      sum = dart.notNull(this[_v3storage$][$_get](0)) * dart.notNull(otherStorage[$_get](0));
      sum = dart.notNull(sum) + dart.notNull(this[_v3storage$][$_get](1)) * dart.notNull(otherStorage[$_get](1));
      sum = dart.notNull(sum) + dart.notNull(this[_v3storage$][$_get](2)) * dart.notNull(otherStorage[$_get](2));
      return sum;
    }
    applyProjection(arg) {
      let argStorage = arg.storage;
      let x = this[_v3storage$][$_get](0);
      let y = this[_v3storage$][$_get](1);
      let z = this[_v3storage$][$_get](2);
      let d = 1.0 / (dart.notNull(argStorage[$_get](3)) * dart.notNull(x) + dart.notNull(argStorage[$_get](7)) * dart.notNull(y) + dart.notNull(argStorage[$_get](11)) * dart.notNull(z) + dart.notNull(argStorage[$_get](15)));
      this[_v3storage$][$_set](0, (dart.notNull(argStorage[$_get](0)) * dart.notNull(x) + dart.notNull(argStorage[$_get](4)) * dart.notNull(y) + dart.notNull(argStorage[$_get](8)) * dart.notNull(z) + dart.notNull(argStorage[$_get](12))) * d);
      this[_v3storage$][$_set](1, (dart.notNull(argStorage[$_get](1)) * dart.notNull(x) + dart.notNull(argStorage[$_get](5)) * dart.notNull(y) + dart.notNull(argStorage[$_get](9)) * dart.notNull(z) + dart.notNull(argStorage[$_get](13))) * d);
      this[_v3storage$][$_set](2, (dart.notNull(argStorage[$_get](2)) * dart.notNull(x) + dart.notNull(argStorage[$_get](6)) * dart.notNull(y) + dart.notNull(argStorage[$_get](10)) * dart.notNull(z) + dart.notNull(argStorage[$_get](14))) * d);
    }
    get isInfinite() {
      let isInfinite = false;
      isInfinite = isInfinite || this[_v3storage$][$_get](0)[$isInfinite];
      isInfinite = isInfinite || this[_v3storage$][$_get](1)[$isInfinite];
      isInfinite = isInfinite || this[_v3storage$][$_get](2)[$isInfinite];
      return isInfinite;
    }
    get isNaN() {
      let isNan = false;
      isNan = isNan || this[_v3storage$][$_get](0)[$isNaN];
      isNan = isNan || this[_v3storage$][$_get](1)[$isNaN];
      isNan = isNan || this[_v3storage$][$_get](2)[$isNaN];
      return isNan;
    }
    add(arg) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) + dart.notNull(argStorage[$_get](0)));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) + dart.notNull(argStorage[$_get](1)));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) + dart.notNull(argStorage[$_get](2)));
    }
    addScaled(arg, factor) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) + dart.notNull(argStorage[$_get](0)) * dart.notNull(factor));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) + dart.notNull(argStorage[$_get](1)) * dart.notNull(factor));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) + dart.notNull(argStorage[$_get](2)) * dart.notNull(factor));
    }
    sub(arg) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) - dart.notNull(argStorage[$_get](0)));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) - dart.notNull(argStorage[$_get](1)));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) - dart.notNull(argStorage[$_get](2)));
    }
    multiply(arg) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) * dart.notNull(argStorage[$_get](0)));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) * dart.notNull(argStorage[$_get](1)));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) * dart.notNull(argStorage[$_get](2)));
    }
    divide(arg) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) / dart.notNull(argStorage[$_get](0)));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) / dart.notNull(argStorage[$_get](1)));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) / dart.notNull(argStorage[$_get](2)));
    }
    scale(arg) {
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) * dart.notNull(arg));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) * dart.notNull(arg));
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) * dart.notNull(arg));
    }
    scaled(arg) {
      let t8;
      t8 = this.clone();
      t8.scale(arg);
      return t8;
    }
    clone() {
      return engine.Vector3.copy(this);
    }
    copyInto(arg) {
      let argStorage = arg[_v3storage$];
      argStorage[$_set](0, this[_v3storage$][$_get](0));
      argStorage[$_set](1, this[_v3storage$][$_get](1));
      argStorage[$_set](2, this[_v3storage$][$_get](2));
      return arg;
    }
    copyIntoArray(array, offset) {
      if (offset === void 0) offset = 0;
      array[$_set](dart.notNull(offset) + 2, this[_v3storage$][$_get](2));
      array[$_set](dart.notNull(offset) + 1, this[_v3storage$][$_get](1));
      array[$_set](dart.notNull(offset) + 0, this[_v3storage$][$_get](0));
    }
    set x(arg) {
      let t10, t9, t8;
      t8 = this[_v3storage$];
      t9 = 0;
      t10 = arg;
      t8[$_set](t9, t10);
      return t10;
    }
    set y(arg) {
      let t10, t9, t8;
      t8 = this[_v3storage$];
      t9 = 1;
      t10 = arg;
      t8[$_set](t9, t10);
      return t10;
    }
    set z(arg) {
      let t10, t9, t8;
      t8 = this[_v3storage$];
      t9 = 2;
      t10 = arg;
      t8[$_set](t9, t10);
      return t10;
    }
    get x() {
      return this[_v3storage$][$_get](0);
    }
    get y() {
      return this[_v3storage$][$_get](1);
    }
    get z() {
      return this[_v3storage$][$_get](2);
    }
  };
  (engine.Vector3.zero = function() {
    this[_v3storage$] = _native_typed_data.NativeFloat64List.new(3);
    ;
  }).prototype = engine.Vector3.prototype;
  (engine.Vector3.fromFloat64List = function(_v3storage) {
    this[_v3storage$] = _v3storage;
    ;
  }).prototype = engine.Vector3.prototype;
  (engine.Vector3.fromBuffer = function(buffer, offset) {
    this[_v3storage$] = typed_data.Float64List.view(buffer, offset, 3);
    ;
  }).prototype = engine.Vector3.prototype;
  dart.addTypeTests(engine.Vector3);
  dart.setMethodSignature(engine.Vector3, () => ({
    __proto__: dart.getMethods(engine.Vector3.__proto__),
    setValues: dart.fnType(dart.void, [core.double, core.double, core.double]),
    setZero: dart.fnType(dart.void, []),
    setFrom: dart.fnType(dart.void, [engine.Vector3]),
    splat: dart.fnType(dart.void, [core.double]),
    _get: dart.fnType(core.double, [core.int]),
    _set: dart.fnType(dart.void, [core.int, core.double]),
    normalize: dart.fnType(core.double, []),
    normalized: dart.fnType(engine.Vector3, []),
    normalizeInto: dart.fnType(engine.Vector3, [engine.Vector3]),
    distanceTo: dart.fnType(core.double, [engine.Vector3]),
    distanceToSquared: dart.fnType(core.double, [engine.Vector3]),
    angleTo: dart.fnType(core.double, [engine.Vector3]),
    dot: dart.fnType(core.double, [engine.Vector3]),
    applyProjection: dart.fnType(dart.void, [engine.Matrix4]),
    add: dart.fnType(dart.void, [engine.Vector3]),
    addScaled: dart.fnType(dart.void, [engine.Vector3, core.double]),
    sub: dart.fnType(dart.void, [engine.Vector3]),
    multiply: dart.fnType(dart.void, [engine.Vector3]),
    divide: dart.fnType(dart.void, [engine.Vector3]),
    scale: dart.fnType(dart.void, [core.double]),
    scaled: dart.fnType(engine.Vector3, [core.double]),
    clone: dart.fnType(engine.Vector3, []),
    copyInto: dart.fnType(engine.Vector3, [engine.Vector3]),
    copyIntoArray: dart.fnType(dart.void, [core.List$(core.double)], [core.int])
  }));
  dart.setGetterSignature(engine.Vector3, () => ({
    __proto__: dart.getGetters(engine.Vector3.__proto__),
    storage: typed_data.Float64List,
    length: core.double,
    length2: core.double,
    isInfinite: core.bool,
    isNaN: core.bool,
    x: core.double,
    y: core.double,
    z: core.double
  }));
  dart.setSetterSignature(engine.Vector3, () => ({
    __proto__: dart.getSetters(engine.Vector3.__proto__),
    length: core.double,
    x: core.double,
    y: core.double,
    z: core.double
  }));
  dart.setLibraryUri(engine.Vector3, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.Vector3, () => ({
    __proto__: dart.getFields(engine.Vector3.__proto__),
    [_v3storage$]: dart.finalFieldType(typed_data.Float64List)
  }));
  const _physicalSize = dart.privateName(engine, "_physicalSize");
  const _lastKnownWindowInnerWidth = dart.privateName(engine, "_lastKnownWindowInnerWidth");
  const _lastKnownWindowInnerHeight = dart.privateName(engine, "_lastKnownWindowInnerHeight");
  const _browserHistory = dart.privateName(engine, "_browserHistory");
  const _replyToPlatformMessage = dart.privateName(engine, "_replyToPlatformMessage");
  const _getHapticFeedbackDuration = dart.privateName(engine, "_getHapticFeedbackDuration");
  const _textScaleFactor = dart.privateName(ui, "_textScaleFactor");
  const _alwaysUse24HourFormat = dart.privateName(ui, "_alwaysUse24HourFormat");
  const _onTextScaleFactorChanged = dart.privateName(ui, "_onTextScaleFactorChanged");
  const _platformBrightness = dart.privateName(ui, "_platformBrightness");
  const _onPlatformBrightnessChanged = dart.privateName(ui, "_onPlatformBrightnessChanged");
  const _onMetricsChanged = dart.privateName(ui, "_onMetricsChanged");
  const _locales = dart.privateName(ui, "_locales");
  const Locale__countryCode = dart.privateName(ui, "Locale._countryCode");
  const Locale_scriptCode = dart.privateName(ui, "Locale.scriptCode");
  const Locale__languageCode = dart.privateName(ui, "Locale._languageCode");
  let C156;
  let C155;
  const _onLocaleChanged = dart.privateName(ui, "_onLocaleChanged");
  const _onBeginFrame = dart.privateName(ui, "_onBeginFrame");
  const _onReportTimings = dart.privateName(ui, "_onReportTimings");
  const _onDrawFrame = dart.privateName(ui, "_onDrawFrame");
  const _onPointerDataPacket = dart.privateName(ui, "_onPointerDataPacket");
  const _onSemanticsEnabledChanged = dart.privateName(ui, "_onSemanticsEnabledChanged");
  const _onSemanticsAction = dart.privateName(ui, "_onSemanticsAction");
  const _onAccessibilityFeaturesChanged = dart.privateName(ui, "_onAccessibilityFeaturesChanged");
  const _onPlatformMessage = dart.privateName(ui, "_onPlatformMessage");
  const _accessibilityFeatures = dart.privateName(ui, "_accessibilityFeatures");
  const AccessibilityFeatures__index = dart.privateName(ui, "AccessibilityFeatures._index");
  let C157;
  const _rasterizer = dart.privateName(ui, "_rasterizer");
  const _initialLifecycleState = dart.privateName(ui, "_initialLifecycleState");
  ui.Window = class Window extends core.Object {
    get viewInsets() {
      return ui.WindowPadding.zero;
    }
    get viewPadding() {
      return ui.WindowPadding.zero;
    }
    get padding() {
      return ui.WindowPadding.zero;
    }
    get textScaleFactor() {
      return this[_textScaleFactor];
    }
    get alwaysUse24HourFormat() {
      return this[_alwaysUse24HourFormat];
    }
    get onTextScaleFactorChanged() {
      return this[_onTextScaleFactorChanged];
    }
    set onTextScaleFactorChanged(callback) {
      this[_onTextScaleFactorChanged] = callback;
    }
    get platformBrightness() {
      return this[_platformBrightness];
    }
    get onPlatformBrightnessChanged() {
      return this[_onPlatformBrightnessChanged];
    }
    set onPlatformBrightnessChanged(callback) {
      this[_onPlatformBrightnessChanged] = callback;
    }
    get onMetricsChanged() {
      return this[_onMetricsChanged];
    }
    set onMetricsChanged(callback) {
      this[_onMetricsChanged] = callback;
    }
    get locale() {
      if (this[_locales] != null && dart.test(this[_locales][$isNotEmpty])) {
        return this[_locales][$first];
      }
      return null;
    }
    get locales() {
      return this[_locales];
    }
    get onLocaleChanged() {
      return this[_onLocaleChanged];
    }
    set onLocaleChanged(callback) {
      this[_onLocaleChanged] = callback;
    }
    scheduleFrame() {
      if (ui.webOnlyScheduleFrameCallback == null) {
        dart.throw(core.Exception.new("webOnlyScheduleFrameCallback must be initialized first."));
      }
      ui.webOnlyScheduleFrameCallback();
    }
    get onBeginFrame() {
      return this[_onBeginFrame];
    }
    set onBeginFrame(callback) {
      this[_onBeginFrame] = callback;
    }
    get onReportTimings() {
      return this[_onReportTimings];
    }
    set onReportTimings(callback) {
      this[_onReportTimings] = callback;
    }
    get onDrawFrame() {
      return this[_onDrawFrame];
    }
    set onDrawFrame(callback) {
      this[_onDrawFrame] = callback;
    }
    get onPointerDataPacket() {
      return this[_onPointerDataPacket];
    }
    set onPointerDataPacket(callback) {
      this[_onPointerDataPacket] = callback;
    }
    get semanticsEnabled() {
      return engine.EngineSemanticsOwner.instance.semanticsEnabled;
    }
    get onSemanticsEnabledChanged() {
      return this[_onSemanticsEnabledChanged];
    }
    set onSemanticsEnabledChanged(callback) {
      this[_onSemanticsEnabledChanged] = callback;
    }
    get onSemanticsAction() {
      return this[_onSemanticsAction];
    }
    set onSemanticsAction(callback) {
      this[_onSemanticsAction] = callback;
    }
    get onAccessibilityFeaturesChanged() {
      return this[_onAccessibilityFeaturesChanged];
    }
    set onAccessibilityFeaturesChanged(callback) {
      this[_onAccessibilityFeaturesChanged] = callback;
    }
    get onPlatformMessage() {
      return this[_onPlatformMessage];
    }
    set onPlatformMessage(callback) {
      this[_onPlatformMessage] = callback;
    }
    updateSemantics(update) {
      engine.EngineSemanticsOwner.instance.updateSemantics(update);
    }
    get accessibilityFeatures() {
      return this[_accessibilityFeatures];
    }
    render(scene) {
      if (false) {
        let layerScene = engine.LayerScene._check(scene);
        this[_rasterizer].draw(layerScene.layerTree);
      } else {
        engine.domRenderer.renderScene(scene.webOnlyRootElement);
      }
    }
    get initialLifecycleState() {
      return this[_initialLifecycleState];
    }
    setIsolateDebugName(name) {
    }
  };
  (ui.Window.new = function() {
    this[_textScaleFactor] = 1.0;
    this[_alwaysUse24HourFormat] = false;
    this[_onTextScaleFactorChanged] = null;
    this[_platformBrightness] = ui.Brightness.light;
    this[_onPlatformBrightnessChanged] = null;
    this[_onMetricsChanged] = null;
    this[_locales] = C155 || CT.C155;
    this[_onLocaleChanged] = null;
    this[_onBeginFrame] = null;
    this[_onReportTimings] = null;
    this[_onDrawFrame] = null;
    this[_onPointerDataPacket] = null;
    this[_onSemanticsEnabledChanged] = null;
    this[_onSemanticsAction] = null;
    this[_onAccessibilityFeaturesChanged] = null;
    this[_onPlatformMessage] = null;
    this[_accessibilityFeatures] = C157 || CT.C157;
    this[_rasterizer] = false ? new engine.Rasterizer.new(new engine.Surface.new(dart.fn(canvas => {
      engine.domRenderer.renderScene(canvas.htmlCanvas);
      canvas.skSurface.callMethod("flush");
    }, SkCanvasToNull()))) : null;
    this[_initialLifecycleState] = null;
    ;
  }).prototype = ui.Window.prototype;
  dart.addTypeTests(ui.Window);
  dart.setMethodSignature(ui.Window, () => ({
    __proto__: dart.getMethods(ui.Window.__proto__),
    scheduleFrame: dart.fnType(dart.void, []),
    updateSemantics: dart.fnType(dart.void, [ui.SemanticsUpdate]),
    render: dart.fnType(dart.void, [ui.Scene]),
    setIsolateDebugName: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(ui.Window, () => ({
    __proto__: dart.getGetters(ui.Window.__proto__),
    viewInsets: ui.WindowPadding,
    viewPadding: ui.WindowPadding,
    padding: ui.WindowPadding,
    textScaleFactor: core.double,
    alwaysUse24HourFormat: core.bool,
    onTextScaleFactorChanged: dart.fnType(dart.void, []),
    platformBrightness: ui.Brightness,
    onPlatformBrightnessChanged: dart.fnType(dart.void, []),
    onMetricsChanged: dart.fnType(dart.void, []),
    locale: ui.Locale,
    locales: core.List$(ui.Locale),
    onLocaleChanged: dart.fnType(dart.void, []),
    onBeginFrame: dart.fnType(dart.void, [core.Duration]),
    onReportTimings: dart.fnType(dart.void, [core.List$(ui.FrameTiming)]),
    onDrawFrame: dart.fnType(dart.void, []),
    onPointerDataPacket: dart.fnType(dart.void, [ui.PointerDataPacket]),
    semanticsEnabled: core.bool,
    onSemanticsEnabledChanged: dart.fnType(dart.void, []),
    onSemanticsAction: dart.fnType(dart.void, [core.int, ui.SemanticsAction, typed_data.ByteData]),
    onAccessibilityFeaturesChanged: dart.fnType(dart.void, []),
    onPlatformMessage: dart.fnType(dart.void, [core.String, typed_data.ByteData, dart.fnType(dart.void, [typed_data.ByteData])]),
    accessibilityFeatures: ui.AccessibilityFeatures,
    initialLifecycleState: core.String
  }));
  dart.setSetterSignature(ui.Window, () => ({
    __proto__: dart.getSetters(ui.Window.__proto__),
    onTextScaleFactorChanged: dart.fnType(dart.void, []),
    onPlatformBrightnessChanged: dart.fnType(dart.void, []),
    onMetricsChanged: dart.fnType(dart.void, []),
    onLocaleChanged: dart.fnType(dart.void, []),
    onBeginFrame: dart.fnType(dart.void, [core.Duration]),
    onReportTimings: dart.fnType(dart.void, [core.List$(ui.FrameTiming)]),
    onDrawFrame: dart.fnType(dart.void, []),
    onPointerDataPacket: dart.fnType(dart.void, [ui.PointerDataPacket]),
    onSemanticsEnabledChanged: dart.fnType(dart.void, []),
    onSemanticsAction: dart.fnType(dart.void, [core.int, ui.SemanticsAction, typed_data.ByteData]),
    onAccessibilityFeaturesChanged: dart.fnType(dart.void, []),
    onPlatformMessage: dart.fnType(dart.void, [core.String, typed_data.ByteData, dart.fnType(dart.void, [typed_data.ByteData])])
  }));
  dart.setLibraryUri(ui.Window, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Window, () => ({
    __proto__: dart.getFields(ui.Window.__proto__),
    [_textScaleFactor]: dart.fieldType(core.double),
    [_alwaysUse24HourFormat]: dart.fieldType(core.bool),
    [_onTextScaleFactorChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_platformBrightness]: dart.fieldType(ui.Brightness),
    [_onPlatformBrightnessChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_onMetricsChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_locales]: dart.fieldType(core.List$(ui.Locale)),
    [_onLocaleChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_onBeginFrame]: dart.fieldType(dart.fnType(dart.void, [core.Duration])),
    [_onReportTimings]: dart.fieldType(dart.fnType(dart.void, [core.List$(ui.FrameTiming)])),
    [_onDrawFrame]: dart.fieldType(dart.fnType(dart.void, [])),
    [_onPointerDataPacket]: dart.fieldType(dart.fnType(dart.void, [ui.PointerDataPacket])),
    [_onSemanticsEnabledChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_onSemanticsAction]: dart.fieldType(dart.fnType(dart.void, [core.int, ui.SemanticsAction, typed_data.ByteData])),
    [_onAccessibilityFeaturesChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_onPlatformMessage]: dart.fieldType(dart.fnType(dart.void, [core.String, typed_data.ByteData, dart.fnType(dart.void, [typed_data.ByteData])])),
    [_accessibilityFeatures]: dart.fieldType(ui.AccessibilityFeatures),
    [_rasterizer]: dart.finalFieldType(engine.Rasterizer),
    [_initialLifecycleState]: dart.fieldType(core.String)
  }));
  dart.defineLazy(ui.Window, {
    /*ui.Window._enUS*/get _enUS() {
      return C156 || CT.C156;
    }
  });
  const EngineWindow_webOnlyDebugPhysicalSizeOverride = dart.privateName(engine, "EngineWindow.webOnlyDebugPhysicalSizeOverride");
  engine.EngineWindow = class EngineWindow extends ui.Window {
    get webOnlyDebugPhysicalSizeOverride() {
      return this[webOnlyDebugPhysicalSizeOverride];
    }
    set webOnlyDebugPhysicalSizeOverride(value) {
      this[webOnlyDebugPhysicalSizeOverride] = value;
    }
    get devicePixelRatio() {
      return this[_devicePixelRatio];
    }
    debugOverrideDevicePixelRatio(value) {
      if (!dart.test(dart.fn(() => {
        this[_devicePixelRatio] = value;
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/window.dart", 19, 12, "() {\r\n      _devicePixelRatio = value;\r\n      return true;\r\n    }()");
    }
    get physicalSize() {
      let override = false;
      if (!dart.test(dart.fn(() => {
        if (this.webOnlyDebugPhysicalSizeOverride != null) {
          this[_physicalSize] = this.webOnlyDebugPhysicalSizeOverride;
          override = true;
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/window.dart", 31, 12, "() {\r\n      if (webOnlyDebugPhysicalSizeOverride != null) {\r\n        _physicalSize = webOnlyDebugPhysicalSizeOverride;\r\n        override = true;\r\n      }\r\n      return true;\r\n    }()");
      if (!override) {
        let windowInnerWidth = html.window.innerWidth;
        let windowInnerHeight = html.window.innerHeight;
        if (windowInnerWidth != this[_lastKnownWindowInnerWidth] || windowInnerHeight != this[_lastKnownWindowInnerHeight]) {
          this[_lastKnownWindowInnerWidth] = windowInnerWidth;
          this[_lastKnownWindowInnerHeight] = windowInnerHeight;
          this[_physicalSize] = new ui.Size.new(windowInnerWidth[$toDouble](), windowInnerHeight[$toDouble]());
        }
      }
      return this[_physicalSize];
    }
    webOnlyBack() {
      return this[_browserHistory].back();
    }
    get defaultRouteName() {
      return this[_browserHistory].currentPath;
    }
    set webOnlyLocationStrategy(strategy) {
      this[_browserHistory].locationStrategy = strategy;
    }
    set webOnlyRouteName(routeName) {
      this[_browserHistory].setRouteName(routeName);
    }
    sendPlatformMessage(name, data, callback) {
      if (dart.test(engine.assertionsEnabled) && dart.test(ui.debugEmulateFlutterTesterEnvironment)) {
        return;
      }
      if (false) {
        core.print("Sent platform message on channel: \"" + dart.str(name) + "\"");
      }
      switch (name) {
        case "flutter/assets":
        {
          if (!(ui.webOnlyAssetManager != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/window.dart", 102, 16, "ui.webOnlyAssetManager != null");
          let url = convert.utf8.decode(data[$buffer][$asUint8List]());
          ui.webOnlyAssetManager.load(url).then(core.Null, dart.fn(assetData => {
            this[_replyToPlatformMessage](callback, assetData);
          }, ByteDataToNull()), {onError: dart.fn(error => {
              html.window[$console].warn("Error while trying to load an asset: " + dart.str(error));
              this[_replyToPlatformMessage](callback, null);
            }, dynamicToNull())});
          return;
        }
        case "flutter/platform":
        {
          let codec = C53 || CT.C53;
          let decoded = codec.decodeMethodCall(data);
          switch (decoded.method) {
            case "SystemNavigator.pop":
            {
              this[_browserHistory].exit().then(core.Null, dart.fn(_ => {
                this[_replyToPlatformMessage](callback, codec.encodeSuccessEnvelope(true));
              }, voidToNull()));
              return;
            }
            case "HapticFeedback.vibrate":
            {
              let type = core.String._check(decoded.arguments);
              engine.domRenderer.vibrate(this[_getHapticFeedbackDuration](type));
              return;
            }
            case "SystemChrome.setApplicationSwitcherDescription":
            {
              let $arguments = MapOfString$dynamic()._check(decoded.arguments);
              engine.domRenderer.setTitle(core.String._check($arguments[$_get]("label")));
              engine.domRenderer.setThemeColor(new ui.Color.new(core.int._check($arguments[$_get]("primaryColor"))));
              return;
            }
          }
          break;
        }
        case "flutter/textinput":
        {
          engine.textEditing.handleTextInput(data);
          return;
        }
        case "flutter/platform_views":
        {
          engine.handlePlatformViewCall(data, callback);
          return;
        }
        case "flutter/accessibility":
        {
          engine.accessibilityAnnouncements.handleMessage(data);
          break;
        }
      }
    }
    [_getHapticFeedbackDuration](type) {
      switch (type) {
        case "HapticFeedbackType.lightImpact":
        {
          return 10;
        }
        case "HapticFeedbackType.mediumImpact":
        {
          return 20;
        }
        case "HapticFeedbackType.heavyImpact":
        {
          return 30;
        }
        case "HapticFeedbackType.selectionClick":
        {
          return 10;
        }
        default:
        {
          return 50;
        }
      }
    }
    [_replyToPlatformMessage](callback, data) {
      FutureOfvoid().delayed(core.Duration.zero).then(core.Null, dart.fn(_ => {
        callback(data);
      }, voidToNull()));
    }
  };
  (engine.EngineWindow.new = function() {
    this[_devicePixelRatio] = 1.0;
    this[_physicalSize] = ui.Size.zero;
    this[_lastKnownWindowInnerWidth] = -1;
    this[_lastKnownWindowInnerHeight] = -1;
    this[webOnlyDebugPhysicalSizeOverride] = null;
    this[_browserHistory] = new engine.BrowserHistory.new();
    engine.EngineWindow.__proto__.new.call(this);
    ;
  }).prototype = engine.EngineWindow.prototype;
  dart.addTypeTests(engine.EngineWindow);
  const webOnlyDebugPhysicalSizeOverride = EngineWindow_webOnlyDebugPhysicalSizeOverride;
  dart.setMethodSignature(engine.EngineWindow, () => ({
    __proto__: dart.getMethods(engine.EngineWindow.__proto__),
    debugOverrideDevicePixelRatio: dart.fnType(dart.void, [core.double]),
    webOnlyBack: dart.fnType(async.Future$(dart.void), []),
    sendPlatformMessage: dart.fnType(dart.void, [core.String, typed_data.ByteData, dart.fnType(dart.void, [typed_data.ByteData])]),
    [_getHapticFeedbackDuration]: dart.fnType(core.int, [core.String]),
    [_replyToPlatformMessage]: dart.fnType(dart.void, [dart.fnType(dart.void, [typed_data.ByteData]), typed_data.ByteData])
  }));
  dart.setGetterSignature(engine.EngineWindow, () => ({
    __proto__: dart.getGetters(engine.EngineWindow.__proto__),
    devicePixelRatio: core.double,
    physicalSize: ui.Size,
    defaultRouteName: core.String
  }));
  dart.setSetterSignature(engine.EngineWindow, () => ({
    __proto__: dart.getSetters(engine.EngineWindow.__proto__),
    webOnlyLocationStrategy: engine.LocationStrategy,
    webOnlyRouteName: core.String
  }));
  dart.setLibraryUri(engine.EngineWindow, "package:flutter_web_ui/src/engine.dart");
  dart.setFieldSignature(engine.EngineWindow, () => ({
    __proto__: dart.getFields(engine.EngineWindow.__proto__),
    [_devicePixelRatio]: dart.fieldType(core.double),
    [_physicalSize]: dart.fieldType(ui.Size),
    [_lastKnownWindowInnerWidth]: dart.fieldType(core.int),
    [_lastKnownWindowInnerHeight]: dart.fieldType(core.int),
    webOnlyDebugPhysicalSizeOverride: dart.fieldType(ui.Size),
    [_browserHistory]: dart.finalFieldType(engine.BrowserHistory)
  }));
  let C158;
  let C159;
  let C160;
  let C161;
  let C162;
  let C163;
  let C164;
  let C165;
  let C166;
  let C167;
  let C168;
  let C169;
  let C170;
  let C171;
  let C172;
  let C173;
  let C174;
  let C175;
  let C176;
  let C177;
  let C178;
  let C179;
  let C180;
  let C181;
  let C182;
  let C183;
  let C184;
  let C185;
  let C186;
  let C187;
  let C188;
  let C189;
  let C190;
  let C191;
  let C192;
  let C193;
  let C194;
  let C195;
  let C196;
  let C197;
  let C198;
  let C199;
  let C200;
  let C201;
  let C202;
  let C203;
  let C204;
  let C205;
  let C206;
  let C207;
  let C208;
  engine.registerHotRestartListener = function registerHotRestartListener(listener) {
    engine._hotRestartListeners[$add](listener);
  };
  engine.webOnlyInitializeEngine = function webOnlyInitializeEngine() {
    if (dart.test(engine._engineInitialized)) {
      return;
    }
    developer.registerExtension("ext.flutter.disassemble", dart.fn((_, __) => {
      for (let listener of engine._hotRestartListeners) {
        listener();
      }
      return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result("OK"));
    }, StringAndMapOfString$StringToFutureOfServiceExtensionResponse()));
    engine._engineInitialized = true;
    engine.domRenderer;
    let waitingForAnimation = false;
    ui.webOnlyScheduleFrameCallback = dart.fn(() => {
      if (!waitingForAnimation) {
        waitingForAnimation = true;
        html.window[$requestAnimationFrame](dart.fn(highResTime => {
          waitingForAnimation = false;
          let highResTimeMicroseconds = (1000 * dart.notNull(highResTime))[$toInt]();
          if (ui.window.onBeginFrame != null) {
            ui.window.onBeginFrame(new core.Duration.new({microseconds: highResTimeMicroseconds}));
          }
          if (ui.window.onDrawFrame != null) {
            ui.window.onDrawFrame();
          }
        }, numToNull()));
      }
    }, VoidToNull());
    engine.Keyboard.initialize();
  };
  engine._stringForBlendMode = function _stringForBlendMode(blendMode) {
    if (blendMode == null) {
      return null;
    }
    switch (blendMode) {
      case C158 || CT.C158:
      {
        return "source-over";
      }
      case C159 || CT.C159:
      {
        return "source-in";
      }
      case C160 || CT.C160:
      {
        return "source-out";
      }
      case C161 || CT.C161:
      {
        return "source-atop";
      }
      case C162 || CT.C162:
      {
        return "destination-over";
      }
      case C163 || CT.C163:
      {
        return "destination-in";
      }
      case C164 || CT.C164:
      {
        return "destination-out";
      }
      case C165 || CT.C165:
      {
        return "destination-atop";
      }
      case C166 || CT.C166:
      {
        return "lighten";
      }
      case C167 || CT.C167:
      {
        return "copy";
      }
      case C168 || CT.C168:
      {
        return "xor";
      }
      case C169 || CT.C169:
      case C170 || CT.C170:
      {
        return "multiply";
      }
      case C171 || CT.C171:
      {
        return "screen";
      }
      case C172 || CT.C172:
      {
        return "overlay";
      }
      case C173 || CT.C173:
      {
        return "darken";
      }
      case C174 || CT.C174:
      {
        return "lighten";
      }
      case C175 || CT.C175:
      {
        return "color-dodge";
      }
      case C176 || CT.C176:
      {
        return "color-burn";
      }
      case C177 || CT.C177:
      {
        return "hard-light";
      }
      case C178 || CT.C178:
      {
        return "soft-light";
      }
      case C179 || CT.C179:
      {
        return "difference";
      }
      case C180 || CT.C180:
      {
        return "exclusion";
      }
      case C181 || CT.C181:
      {
        return "hue";
      }
      case C182 || CT.C182:
      {
        return "saturation";
      }
      case C183 || CT.C183:
      {
        return "color";
      }
      case C184 || CT.C184:
      {
        return "luminosity";
      }
      default:
      {
        dart.throw(new core.UnimplementedError.new("Flutter Web does not support the blend mode: " + dart.str(blendMode)));
      }
    }
  };
  engine._stringForStrokeCap = function _stringForStrokeCap(strokeCap) {
    if (strokeCap == null) {
      return null;
    }
    switch (strokeCap) {
      case C185 || CT.C185:
      {
        return "butt";
      }
      case C186 || CT.C186:
      {
        return "round";
      }
      case C187 || CT.C187:
      default:
      {
        return "square";
      }
    }
  };
  engine._stringForStrokeJoin = function _stringForStrokeJoin(strokeJoin) {
    if (!(strokeJoin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/bitmap_canvas.dart", 991, 10, "strokeJoin != null");
    switch (strokeJoin) {
      case C188 || CT.C188:
      {
        return "round";
      }
      case C189 || CT.C189:
      {
        return "bevel";
      }
      case C190 || CT.C190:
      default:
      {
        return "miter";
      }
    }
  };
  engine._clipContent = function _clipContent(clipStack, content, offset, currentTransform) {
    let t8, t8$, t8$0, t8$1, t9, t8$2, t8$3, t8$4;
    let root = null;
    let curElement = null;
    let clipDefs = JSArrayOfElement().of([]);
    let len = clipStack[$length];
    for (let clipIndex = 0; clipIndex < dart.notNull(len); clipIndex = clipIndex + 1) {
      let entry = clipStack[$_get](clipIndex);
      let newElement = html.DivElement.new();
      if (root == null) {
        root = newElement;
      } else {
        engine.domRenderer.append(curElement, newElement);
      }
      curElement = newElement;
      let rect = entry.rect;
      let newClipTransform = entry.currentTransform;
      if (rect != null) {
        let clipOffsetX = rect.left;
        let clipOffsetY = rect.top;
        newClipTransform = (t8 = newClipTransform.clone(), t8.translate(clipOffsetX, clipOffsetY), t8);
        t8$ = curElement.style;
        t8$[$overflow] = "hidden";
        t8$[$transform] = engine.matrix4ToCssTransform(newClipTransform);
        t8$[$transformOrigin] = "0 0 0";
        t8$[$width] = dart.str(dart.notNull(rect.right) - dart.notNull(clipOffsetX)) + "px";
        t8$[$height] = dart.str(dart.notNull(rect.bottom) - dart.notNull(clipOffsetY)) + "px";
        t8$;
      } else if (entry.rrect != null) {
        let roundRect = entry.rrect;
        let borderRadius = dart.str(roundRect.tlRadiusX) + "px " + dart.str(roundRect.trRadiusX) + "px " + dart.str(roundRect.brRadiusX) + "px " + dart.str(roundRect.blRadiusX) + "px";
        let clipOffsetX = roundRect.left;
        let clipOffsetY = roundRect.top;
        newClipTransform = (t8$0 = newClipTransform.clone(), t8$0.translate(clipOffsetX, clipOffsetY), t8$0);
        t8$1 = curElement.style;
        t8$1[$borderRadius] = borderRadius;
        t8$1[$overflow] = "hidden";
        t8$1[$transform] = engine.matrix4ToCssTransform(newClipTransform);
        t8$1[$transformOrigin] = "0 0 0";
        t8$1[$width] = dart.str(dart.notNull(roundRect.right) - dart.notNull(clipOffsetX)) + "px";
        t8$1[$height] = dart.str(dart.notNull(roundRect.bottom) - dart.notNull(clipOffsetY)) + "px";
        t8$1;
      } else if (entry.path != null) {
        curElement.style[$transform] = engine.matrix4ToCssTransform(newClipTransform);
        let svgClipPath = engine._pathToSvgClipPath(entry.path);
        let clipElement = html.Element.html(svgClipPath, {treeSanitizer: new engine._NullTreeSanitizer.new()});
        engine.domRenderer.setElementStyle(curElement, "clip-path", "url(#svgClip" + dart.str(engine._clipIdCounter) + ")");
        engine.domRenderer.setElementStyle(curElement, "-webkit-clip-path", "url(#svgClip" + dart.str(engine._clipIdCounter) + ")");
        clipDefs[$add](clipElement);
      }
      let reverseTransformDiv = html.DivElement.new();
      t8$2 = reverseTransformDiv.style;
      t8$2[$transform] = engine._cssTransformAtOffset((t9 = newClipTransform.clone(), t9.invert(), t9), 0.0, 0.0);
      t8$2[$transformOrigin] = "0 0 0";
      t8$2;
      curElement[$append](reverseTransformDiv);
      curElement = reverseTransformDiv;
    }
    root.style[$position] = "absolute";
    engine.domRenderer.append(curElement, content);
    t8$3 = content.style;
    t8$3[$transformOrigin] = "0 0 0";
    t8$3[$transform] = engine._cssTransformAtOffset(currentTransform, offset.dx, offset.dy);
    t8$3;
    t8$4 = JSArrayOfElement().of([root]);
    t8$4[$addAll](clipDefs);
    return t8$4;
  };
  engine._cssTransformAtOffset = function _cssTransformAtOffset(transform, offsetX, offsetY) {
    return engine.matrix4ToCssTransform(engine.transformWithOffset(transform, new ui.Offset.new(offsetX, offsetY)));
  };
  engine._detectBrowserEngine = function _detectBrowserEngine() {
    let vendor = html.window.navigator.vendor;
    if (vendor === "Google Inc.") {
      return engine.BrowserEngine.blink;
    } else if (vendor === "Apple Computer, Inc.") {
      return engine.BrowserEngine.webkit;
    } else if (vendor === "") {
      return engine.BrowserEngine.firefox;
    }
    core.print("WARNING: failed to detect current browser engine.");
    return engine.BrowserEngine.unknown;
  };
  engine._detectOperatingSystem = function _detectOperatingSystem() {
    let platform = html.window.navigator.platform;
    if (platform[$startsWith]("Mac")) {
      return engine.OperatingSystem.macOs;
    } else if (platform[$toLowerCase]()[$contains]("iphone") || platform[$toLowerCase]()[$contains]("ipad") || platform[$toLowerCase]()[$contains]("ipod")) {
      return engine.OperatingSystem.iOs;
    } else if (platform[$toLowerCase]()[$contains]("android")) {
      return engine.OperatingSystem.android;
    } else if (platform[$startsWith]("Linux")) {
      return engine.OperatingSystem.linux;
    } else if (platform[$startsWith]("Win")) {
      return engine.OperatingSystem.windows;
    } else {
      return engine.OperatingSystem.unknown;
    }
  };
  engine.ensureLeading = function ensureLeading(str, leading, opts) {
    let applyWhenEmpty = opts && 'applyWhenEmpty' in opts ? opts.applyWhenEmpty : true;
    if (str[$isEmpty] && !dart.test(applyWhenEmpty)) {
      return str;
    }
    return str[$startsWith](leading) ? str : dart.str(leading) + dart.str(str);
  };
  engine.skiaInstantiateImageCodec = function skiaInstantiateImageCodec(list, callback, width, height, format, rowBytes) {
    if (width === void 0) width = null;
    if (height === void 0) height = null;
    if (format === void 0) format = null;
    if (rowBytes === void 0) rowBytes = null;
    let skImage = js.JsObject._check(engine.canvasKit.callMethod("MakeImageFromEncoded", JSArrayOfUint8List().of([list])));
    let image = new engine.SkImage.new(skImage);
    let codec = new engine.SkImageCodec.new(image);
    callback(codec);
  };
  engine.initializeSkia = function initializeSkia() {
    let canvasKitCompleter = CompleterOfvoid().new();
    let loadSubscription = null;
    loadSubscription = engine.domRenderer.canvasKitScript[$onLoad].listen(dart.fn(_ => {
      loadSubscription.cancel();
      let canvasKitInitArgs = js.JsObject.jsify(new (IdentityMapOfString$dynamic()).from(["locateFile", dart.fn((file, unusedBase) => dart.notNull(engine.canvasKitBaseUrl) + dart.notNull(file), StringAndStringToString())]));
      let canvasKitInit = js.JsObject.new(js.JsFunction._check(js.context._get("CanvasKitInit")), [canvasKitInitArgs]);
      let canvasKitInitPromise = js.JsObject._check(canvasKitInit.callMethod("ready"));
      canvasKitInitPromise.callMethod("then", [dart.fn(ck => {
          engine.canvasKit = ck;
          canvasKitCompleter.complete();
        }, JsObjectToNull())]);
    }, EventToNull()));
    return canvasKitCompleter.future;
  };
  engine.makeSkRect = function makeSkRect(rect) {
    return js.JsObject.new(js.JsFunction._check(engine.canvasKit._get("LTRBRect")), JSArrayOfdouble().of([rect.left, rect.top, rect.right, rect.bottom]));
  };
  engine.makeSkPoint = function makeSkPoint(point) {
    let skPoint = new (JsArrayOfdouble()).new();
    skPoint.length = 2;
    skPoint._set(0, point.dx);
    skPoint._set(1, point.dy);
    return skPoint;
  };
  engine.makeSkPaint = function makeSkPaint(paint) {
    let skPaint = js.JsObject.new(js.JsFunction._check(engine.canvasKit._get("SkPaint")));
    if (paint.shader != null) {
      let engineShader = engine.EngineGradient._check(paint.shader);
      dart.dsend(skPaint, 'callMethod', ["setShader", JSArrayOfJsObject().of([engineShader.createSkiaShader()])]);
    }
    if (paint.color != null) {
      dart.dsend(skPaint, 'callMethod', ["setColor", JSArrayOfint().of([paint.color.value])]);
    }
    let skPaintStyle = null;
    switch (paint.style) {
      case C0 || CT.C0:
      {
        skPaintStyle = js.JsObject._check(dart.dsend(engine.canvasKit._get("PaintStyle"), '_get', ["Stroke"]));
        break;
      }
      case C1 || CT.C1:
      {
        skPaintStyle = js.JsObject._check(dart.dsend(engine.canvasKit._get("PaintStyle"), '_get', ["Fill"]));
        break;
      }
    }
    dart.dsend(skPaint, 'callMethod', ["setStyle", JSArrayOfJsObject().of([skPaintStyle])]);
    let skBlendMode = null;
    switch (paint.blendMode) {
      case C191 || CT.C191:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Clear"]));
        break;
      }
      case C167 || CT.C167:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Src"]));
        break;
      }
      case C192 || CT.C192:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Dst"]));
        break;
      }
      case C158 || CT.C158:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["SrcOver"]));
        break;
      }
      case C162 || CT.C162:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["DstOver"]));
        break;
      }
      case C159 || CT.C159:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["SrcIn"]));
        break;
      }
      case C163 || CT.C163:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["DstIn"]));
        break;
      }
      case C160 || CT.C160:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["SrcOut"]));
        break;
      }
      case C164 || CT.C164:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["DstOut"]));
        break;
      }
      case C161 || CT.C161:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["SrcATop"]));
        break;
      }
      case C165 || CT.C165:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["DstATop"]));
        break;
      }
      case C168 || CT.C168:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Xor"]));
        break;
      }
      case C166 || CT.C166:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Plus"]));
        break;
      }
      case C170 || CT.C170:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Modulate"]));
        break;
      }
      case C171 || CT.C171:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Screen"]));
        break;
      }
      case C172 || CT.C172:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Overlay"]));
        break;
      }
      case C173 || CT.C173:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Darken"]));
        break;
      }
      case C174 || CT.C174:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Lighten"]));
        break;
      }
      case C175 || CT.C175:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["ColorDodge"]));
        break;
      }
      case C176 || CT.C176:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["ColorBurn"]));
        break;
      }
      case C177 || CT.C177:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["HardLight"]));
        break;
      }
      case C178 || CT.C178:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["SoftLight"]));
        break;
      }
      case C179 || CT.C179:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Difference"]));
        break;
      }
      case C180 || CT.C180:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Exclusion"]));
        break;
      }
      case C169 || CT.C169:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Multiply"]));
        break;
      }
      case C181 || CT.C181:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Hue"]));
        break;
      }
      case C182 || CT.C182:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Saturation"]));
        break;
      }
      case C183 || CT.C183:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Color"]));
        break;
      }
      case C184 || CT.C184:
      {
        skBlendMode = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlendMode"), '_get', ["Luminosity"]));
        break;
      }
    }
    if (skBlendMode != null) {
      dart.dsend(skPaint, 'callMethod', ["setBlendMode", JSArrayOfJsObject().of([skBlendMode])]);
    }
    dart.dsend(skPaint, 'callMethod', ["setAntiAlias", JSArrayOfbool().of([paint.isAntiAlias])]);
    if (paint.strokeWidth !== 0.0) {
      dart.dsend(skPaint, 'callMethod', ["setStrokeWidth", JSArrayOfdouble().of([paint.strokeWidth])]);
    }
    if (paint.maskFilter != null) {
      let blurStyle = paint.maskFilter.webOnlyBlurStyle;
      let sigma = paint.maskFilter.webOnlySigma;
      let skBlurStyle = null;
      switch (blurStyle) {
        case C193 || CT.C193:
        {
          skBlurStyle = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlurStyle"), '_get', ["Normal"]));
          break;
        }
        case C194 || CT.C194:
        {
          skBlurStyle = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlurStyle"), '_get', ["Solid"]));
          break;
        }
        case C195 || CT.C195:
        {
          skBlurStyle = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlurStyle"), '_get', ["Outer"]));
          break;
        }
        case C196 || CT.C196:
        {
          skBlurStyle = js.JsObject._check(dart.dsend(engine.canvasKit._get("BlurStyle"), '_get', ["Inner"]));
          break;
        }
      }
      let skMaskFilter = js.JsObject._check(engine.canvasKit.callMethod("MakeBlurMaskFilter", [skBlurStyle, sigma, true]));
      dart.dsend(skPaint, 'callMethod', ["setMaskFilter", JSArrayOfJsObject().of([skMaskFilter])]);
    }
    return js.JsObject._check(skPaint);
  };
  engine.makeSkMatrix = function makeSkMatrix(matrix4) {
    let skMatrix = new (JsArrayOfdouble()).new();
    skMatrix.length = 9;
    for (let i = 0; i < 9; i = i + 1) {
      let matrix4Index = engine._skMatrixIndexToMatrix4Index[$_get](i);
      if (dart.notNull(matrix4Index) < dart.notNull(matrix4[$length]))
        skMatrix._set(i, matrix4[$_get](matrix4Index));
      else
        skMatrix._set(i, 0.0);
    }
    return skMatrix;
  };
  engine.drawSkShadow = function drawSkShadow(skCanvas, path, color, elevation, transparentOccluder) {
    let flags = dart.test(transparentOccluder) ? 1 : 0;
    let bounds = path.getBounds();
    let shadowX = (dart.notNull(bounds.left) + dart.notNull(bounds.right)) / 2.0;
    let shadowY = dart.notNull(bounds.top) - 600.0;
    let ambientColor = new ui.Color.fromARGB((dart.notNull(color.alpha) * 0.039)[$round](), 0, 0, 0);
    let minSpot = math.min(core.int, color.red, math.min(core.int, color.green, color.blue));
    let maxSpot = math.max(core.int, color.red, math.max(core.int, color.green, color.blue));
    let luminance = 0.5 * (maxSpot + minSpot) / 255.0;
    let originalAlpha = dart.notNull(color.alpha) * 0.25 / 255.0;
    let alphaAdjust = (2.6 + (-2.66667 + 1.06667 * originalAlpha) * originalAlpha) * originalAlpha;
    let colorAlpha = (3.544762 + (-4.891428 + 2.3466 * luminance) * luminance) * luminance;
    colorAlpha = (colorAlpha * alphaAdjust)[$clamp](0.0, 1.0);
    let greyscaleAlpha = (originalAlpha * (1.0 - 0.4 * luminance))[$clamp](0.0, 1.0);
    let colorScale = colorAlpha * (1.0 - greyscaleAlpha);
    let tonalAlpha = colorScale + greyscaleAlpha;
    let unPremulScale = colorScale / tonalAlpha;
    let spotColor = new ui.Color.fromARGB((tonalAlpha * 255.999)[$round](), (unPremulScale * dart.notNull(color.red))[$round](), (unPremulScale * dart.notNull(color.green))[$round](), (unPremulScale * dart.notNull(color.blue))[$round]());
    skCanvas.callMethod("drawShadow", [path[_skPath], new (JsArrayOfdouble()).from(JSArrayOfdouble().of([0.0, 0.0, elevation])), new (JsArrayOfdouble()).from(JSArrayOfdouble().of([shadowX, shadowY, 600.0])), 800, ambientColor.value, spotColor.value, flags]);
  };
  engine.transformWithOffset = function transformWithOffset(transform, offset) {
    if (dart.equals(offset, ui.Offset.zero)) {
      return transform;
    }
    let effectiveTransform = transform.clone();
    effectiveTransform.translate(offset.dx, offset.dy, 0.0);
    return effectiveTransform;
  };
  engine._drawParagraphElement = function _drawParagraphElement(paragraph, offset, opts) {
    let t8, t8$, t8$0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    if (!dart.test(paragraph[_isLaidOut])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/engine_canvas.dart", 244, 10, "paragraph._isLaidOut");
    let paragraphElement = html.Element._check(paragraph[_paragraphElement][$clone](true));
    let paragraphStyle = paragraphElement.style;
    t8 = paragraphStyle;
    t8[$position] = "absolute";
    t8[$whiteSpace] = "pre-wrap";
    t8[$overflowWrap] = "break-word";
    t8[$overflow] = "hidden";
    t8[$height] = dart.str(paragraph.height) + "px";
    t8[$width] = dart.str(paragraph.width) + "px";
    t8;
    if (transform != null) {
      t8$ = paragraphStyle;
      t8$[$transformOrigin] = "0 0 0";
      t8$[$transform] = engine.matrix4ToCssTransform(engine.transformWithOffset(transform, offset));
      t8$;
    }
    let style = paragraph[_geometricStyle];
    if (style.ellipsis != null && (style.maxLines == null || style.maxLines === 1)) {
      t8$0 = paragraphStyle;
      t8$0[$whiteSpace] = "pre";
      t8$0[$textOverflow] = "ellipsis";
      t8$0;
    }
    return paragraphElement;
  };
  engine._isOriginEntry = function _isOriginEntry(state) {
    return core.Map.is(state) && dart.equals(state[$_get]("origin"), true);
  };
  engine._isFlutterEntry = function _isFlutterEntry(state) {
    return core.Map.is(state) && dart.equals(state[$_get]("flutter"), true);
  };
  engine._noopCallback = function _noopCallback(data) {
  };
  engine.printOnScreen = function printOnScreen(object) {
    let t8;
    if (engine._logElement == null) {
      engine._initialize();
    }
    let message = dart.str(object);
    if (dart.test(engine._logBuffer[$isNotEmpty]) && engine._logBuffer[$last].message === message) {
      t8 = engine._logBuffer[$last];
      t8.duplicateCount = dart.notNull(t8.duplicateCount) + 1;
    } else {
      engine._logBuffer[$add](new engine._LogMessage.new(message));
    }
    if (dart.notNull(engine._logBuffer[$length]) > 80) {
      engine._logBuffer = engine._logBuffer[$sublist](dart.notNull(engine._logBuffer[$length]) - 50);
    }
    engine._logContainer[$text] = engine._logBuffer[$join]("\n");
    core.print(message);
  };
  engine._initialize = function _initialize() {
    let t8, t8$;
    engine._logElement = html.Element.tag("flt-onscreen-log");
    engine._logElement[$setAttribute]("aria-hidden", "true");
    t8 = engine._logElement.style;
    t8[$position] = "fixed";
    t8[$left] = "0";
    t8[$right] = "0";
    t8[$bottom] = "0";
    t8[$height] = "25%";
    t8[$backgroundColor] = "rgba(0, 0, 0, 0.85)";
    t8[$color] = "white";
    t8[$fontSize] = "8px";
    t8[$whiteSpace] = "pre-wrap";
    t8[$overflow] = "hidden";
    t8[$zIndex] = "1000";
    t8;
    engine._logContainer = html.Element.tag("flt-log-container");
    engine._logContainer[$setAttribute]("aria-hidden", "true");
    t8$ = engine._logContainer.style;
    t8$[$position] = "absolute";
    t8$[$bottom] = "0";
    t8$;
    engine._logElement[$append](engine._logContainer);
    html.document.body[$append](engine._logElement);
  };
  engine.debugPrintStack = function debugPrintStack(opts) {
    let label = opts && 'label' in opts ? opts.label : null;
    let maxFrames = opts && 'maxFrames' in opts ? opts.maxFrames : null;
    if (label != null) {
      core.print(label);
    }
    let lines = dart.toString(core.StackTrace.current)[$trimRight]()[$split]("\n");
    if (maxFrames != null) {
      lines = lines[$take](maxFrames);
    }
    core.print(engine.defaultStackFilter(lines)[$join]("\n"));
  };
  engine.defaultStackFilter = function defaultStackFilter(frames) {
    let t8;
    let filteredPackages = C197 || CT.C197;
    let stackParser = core.RegExp.new("^#[0-9]+ +([^.]+).* \\(([^/\\\\]*)[/\\\\].+:[0-9]+(?::[0-9]+)?\\)$");
    let packageParser = core.RegExp.new("^([^:]+):(.+)$");
    let result = JSArrayOfString().of([]);
    let skipped = JSArrayOfString().of([]);
    for (let line of frames) {
      let match = stackParser.firstMatch(line);
      if (match != null) {
        if (!(match.groupCount === 2)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/onscreen_logging.dart", 121, 14, "match.groupCount == 2");
        if (dart.test(filteredPackages[$contains](match.group(2)))) {
          let packageMatch = packageParser.firstMatch(match.group(2));
          if (packageMatch != null && packageMatch.group(1) === "package") {
            skipped[$add]("package " + dart.str(packageMatch.group(2)));
          } else {
            skipped[$add]("package " + dart.str(match.group(2)));
          }
          continue;
        }
      }
      result[$add](line);
    }
    if (skipped[$length] === 1) {
      result[$add]("(elided one frame from " + dart.str(skipped[$single]) + ")");
    } else if (dart.notNull(skipped[$length]) > 1) {
      let where = (t8 = LinkedHashSetOfString().from(skipped)[$toList](), t8[$sort](), t8);
      if (dart.notNull(where[$length]) > 1) {
        where[$_set](dart.notNull(where[$length]) - 1, "and " + dart.str(where[$last]));
      }
      if (dart.notNull(where[$length]) > 2) {
        result[$add]("(elided " + dart.str(skipped[$length]) + " frames from " + dart.str(where[$join](", ")) + ")");
      } else {
        result[$add]("(elided " + dart.str(skipped[$length]) + " frames from " + dart.str(where[$join](" ")) + ")");
      }
    }
    return result;
  };
  engine.debugIdentify = function debugIdentify(object) {
    return dart.str(dart.runtimeType(object)) + "(@" + dart.str(dart.hashCode(object)) + ")";
  };
  engine.pathToSvg = function pathToSvg(path, sb, opts) {
    let offsetX = opts && 'offsetX' in opts ? opts.offsetX : 0;
    let offsetY = opts && 'offsetY' in opts ? opts.offsetY : 0;
    for (let subPath of path.subpaths) {
      for (let command of subPath.commands) {
        switch (command.type) {
          case 0:
          {
            let moveTo = engine.MoveTo._check(command);
            sb.write("M " + dart.str(dart.notNull(moveTo.x) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(moveTo.y) + dart.notNull(offsetY)));
            break;
          }
          case 1:
          {
            let lineTo = engine.LineTo._check(command);
            sb.write("L " + dart.str(dart.notNull(lineTo.x) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(lineTo.y) + dart.notNull(offsetY)));
            break;
          }
          case 5:
          {
            let curve = engine.BezierCurveTo._check(command);
            sb.write("C " + dart.str(dart.notNull(curve.x1) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(curve.y1) + dart.notNull(offsetY)) + " " + dart.str(dart.notNull(curve.x2) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(curve.y2) + dart.notNull(offsetY)) + " " + dart.str(dart.notNull(curve.x3) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(curve.y3) + dart.notNull(offsetY)));
            break;
          }
          case 4:
          {
            let quadraticCurveTo = engine.QuadraticCurveTo._check(command);
            sb.write("Q " + dart.str(dart.notNull(quadraticCurveTo.x1) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(quadraticCurveTo.y1) + dart.notNull(offsetY)) + " " + dart.str(dart.notNull(quadraticCurveTo.x2) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(quadraticCurveTo.y2) + dart.notNull(offsetY)));
            break;
          }
          case 3:
          {
            sb.write("Z");
            break;
          }
          case 2:
          {
            let ellipse = engine.Ellipse._check(command);
            if ((dart.notNull(ellipse.endAngle) - dart.notNull(ellipse.startAngle))[$modulo](2 * 3.141592653589793) === 0.0) {
              engine._writeEllipse(sb, dart.notNull(ellipse.x) + dart.notNull(offsetX), dart.notNull(ellipse.y) + dart.notNull(offsetY), ellipse.radiusX, ellipse.radiusY, ellipse.rotation, -3.141592653589793, 0.0, ellipse.anticlockwise, {moveToStartPoint: true});
              engine._writeEllipse(sb, dart.notNull(ellipse.x) + dart.notNull(offsetX), dart.notNull(ellipse.y) + dart.notNull(offsetY), ellipse.radiusX, ellipse.radiusY, ellipse.rotation, 0.0, 3.141592653589793, ellipse.anticlockwise);
            } else {
              engine._writeEllipse(sb, dart.notNull(ellipse.x) + dart.notNull(offsetX), dart.notNull(ellipse.y) + dart.notNull(offsetY), ellipse.radiusX, ellipse.radiusY, ellipse.rotation, ellipse.startAngle, ellipse.endAngle, ellipse.anticlockwise);
            }
            break;
          }
          case 7:
          {
            let rrectCommand = engine.RRectCommand._check(command);
            let rrect = rrectCommand.rrect;
            let left = dart.notNull(rrect.left) + dart.notNull(offsetX);
            let right = dart.notNull(rrect.right) + dart.notNull(offsetX);
            let top = dart.notNull(rrect.top) + dart.notNull(offsetY);
            let bottom = dart.notNull(rrect.bottom) + dart.notNull(offsetY);
            if (left > right) {
              left = right;
              right = dart.notNull(rrect.left) + dart.notNull(offsetX);
            }
            if (top > bottom) {
              top = bottom;
              bottom = dart.notNull(rrect.top) + dart.notNull(offsetY);
            }
            let trRadiusX = rrect.trRadiusX[$abs]();
            let tlRadiusX = rrect.tlRadiusX[$abs]();
            let trRadiusY = rrect.trRadiusY[$abs]();
            let tlRadiusY = rrect.tlRadiusY[$abs]();
            let blRadiusX = rrect.blRadiusX[$abs]();
            let brRadiusX = rrect.brRadiusX[$abs]();
            let blRadiusY = rrect.blRadiusY[$abs]();
            let brRadiusY = rrect.brRadiusY[$abs]();
            sb.write("L " + dart.str(left + trRadiusX) + " " + dart.str(top) + " ");
            sb.write("M " + dart.str(right - trRadiusX) + " " + dart.str(top) + " ");
            engine._writeEllipse(sb, right - trRadiusX, top + trRadiusY, trRadiusX, trRadiusY, 0.0, 1.5 * 3.141592653589793, 2.0 * 3.141592653589793, false);
            sb.write("L " + dart.str(right) + " " + dart.str(bottom - brRadiusY) + " ");
            engine._writeEllipse(sb, right - brRadiusX, bottom - brRadiusY, brRadiusX, brRadiusY, 0.0, 0.0, 0.5 * 3.141592653589793, false);
            sb.write("L " + dart.str(left + blRadiusX) + " " + dart.str(bottom) + " ");
            engine._writeEllipse(sb, left + blRadiusX, bottom - blRadiusY, blRadiusX, blRadiusY, 0.0, 0.5 * 3.141592653589793, 3.141592653589793, false);
            sb.write("L " + dart.str(left) + " " + dart.str(top + tlRadiusY) + " ");
            engine._writeEllipse(sb, left + tlRadiusX, top + tlRadiusY, tlRadiusX, tlRadiusY, 0.0, 3.141592653589793, 1.5 * 3.141592653589793, false);
            break;
          }
          case 6:
          {
            let rectCommand = engine.RectCommand._check(command);
            let horizontalSwap = dart.notNull(rectCommand.width) < 0;
            let left = dart.notNull(offsetX) + dart.notNull(horizontalSwap ? dart.notNull(rectCommand.x) - dart.notNull(rectCommand.width) : rectCommand.x);
            let width = horizontalSwap ? -dart.notNull(rectCommand.width) : rectCommand.width;
            let verticalSwap = dart.notNull(rectCommand.height) < 0;
            let top = dart.notNull(offsetY) + dart.notNull(verticalSwap ? dart.notNull(rectCommand.y) - dart.notNull(rectCommand.height) : rectCommand.y);
            let height = verticalSwap ? -dart.notNull(rectCommand.height) : rectCommand.height;
            sb.write("M " + dart.str(left) + " " + dart.str(top) + " ");
            sb.write("L " + dart.str(left + dart.notNull(width)) + " " + dart.str(top) + " ");
            sb.write("L " + dart.str(left + dart.notNull(width)) + " " + dart.str(top + dart.notNull(height)) + " ");
            sb.write("L " + dart.str(left) + " " + dart.str(top + dart.notNull(height)) + " ");
            sb.write("L " + dart.str(left) + " " + dart.str(top) + " ");
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unknown path command " + dart.str(command)));
          }
        }
      }
    }
  };
  engine._writeEllipse = function _writeEllipse(sb, cx, cy, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise, opts) {
    let moveToStartPoint = opts && 'moveToStartPoint' in opts ? opts.moveToStartPoint : false;
    let cosRotation = math.cos(rotation);
    let sinRotation = math.sin(rotation);
    let x = math.cos(startAngle) * dart.notNull(radiusX);
    let y = math.sin(startAngle) * dart.notNull(radiusY);
    let startPx = dart.notNull(cx) + (cosRotation * x - sinRotation * y);
    let startPy = dart.notNull(cy) + (sinRotation * x + cosRotation * y);
    let xe = math.cos(endAngle) * dart.notNull(radiusX);
    let ye = math.sin(endAngle) * dart.notNull(radiusY);
    let endPx = dart.notNull(cx) + (cosRotation * xe - sinRotation * ye);
    let endPy = dart.notNull(cy) + (sinRotation * xe + cosRotation * ye);
    let delta = dart.notNull(endAngle) - dart.notNull(startAngle);
    let largeArc = delta[$abs]() > 3.141592653589793;
    let rotationDeg = dart.notNull(rotation) / 3.141592653589793 * 180.0;
    if (dart.test(moveToStartPoint)) {
      sb.write("M " + dart.str(startPx) + " " + dart.str(startPy) + " ");
    }
    sb.write("A " + dart.str(radiusX) + " " + dart.str(radiusY) + " " + dart.str(rotationDeg) + " " + dart.str(largeArc ? 1 : 0) + " " + dart.str(dart.test(antiClockwise) ? 0 : 1) + " " + dart.str(endPx) + " " + dart.str(endPy));
  };
  engine.handlePlatformViewCall = function handlePlatformViewCall(data, callback) {
    let codec = C198 || CT.C198;
    let decoded = codec.decodeMethodCall(data);
    switch (decoded.method) {
      case "create":
      {
        engine._createPlatformView(decoded, callback);
        return;
      }
    }
    callback(null);
  };
  engine._createPlatformView = function _createPlatformView(methodCall, callback) {
    let args = core.Map._check(methodCall.arguments);
    let id = core.int._check(args[$_get]("id"));
    let viewType = core.String._check(args[$_get]("viewType"));
    let codec = C198 || CT.C198;
    if (!dart.test(engine.platformViewRegistry[_registeredFactories][$containsKey](viewType))) {
      callback(codec.encodeErrorEnvelope({code: "Unregistered factory", message: "No factory registered for viewtype '" + dart.str(viewType) + "'"}));
      return;
    }
    let element = engine.platformViewRegistry[_registeredFactories][$_get](viewType)(id);
    engine.platformViewRegistry[_createdViews][$_set](id, element);
    callback(codec.encodeSuccessEnvelope(null));
  };
  engine._pointerButtonFromHtmlEvent = function _pointerButtonFromHtmlEvent(event) {
    if (html.PointerEvent.is(event)) {
      let pointerEvent = event;
      return pointerEvent.button === 2 ? 2 : 1;
    } else if (html.MouseEvent.is(event)) {
      let mouseEvent = event;
      return mouseEvent.button === 2 ? 2 : 1;
    }
    return 1;
  };
  engine._eventTimeStampToDuration = function _eventTimeStampToDuration(milliseconds) {
    let ms = milliseconds[$toInt]();
    let micro = ((dart.notNull(milliseconds) - ms) * 1000)[$toInt]();
    return new core.Duration.new({milliseconds: ms, microseconds: micro});
  };
  engine._ensureMouseDeviceAdded = function _ensureMouseDeviceAdded(data, clientX, clientY, buttons, timeStamp, deviceId) {
    if (dart.test(engine.PointerBinding.instance[_activePointerIds].contains(deviceId))) {
      return;
    }
    engine.PointerBinding.instance[_activePointerIds].add(deviceId);
    data[$insert](0, new ui.PointerData.new({change: ui.PointerChange.add, timeStamp: engine._eventTimeStampToDuration(timeStamp), kind: ui.PointerDeviceKind.mouse, signalKind: ui.PointerSignalKind.none, device: deviceId, physicalX: clientX, physicalY: clientY, buttons: buttons, pressure: 1.0, pressureMin: 0.0, pressureMax: 1.0, scrollDeltaX: 0.0, scrollDeltaY: 0.0}));
  };
  engine._convertWheelEventToPointerData = function _convertWheelEventToPointerData(event) {
    let deltaX = event[$deltaX];
    let deltaY = event[$deltaY];
    switch (event[$deltaMode]) {
      case 1:
      {
        deltaX = dart.notNull(deltaX) * 32.0;
        deltaY = dart.notNull(deltaY) * 32.0;
        break;
      }
      case 2:
      {
        deltaX = dart.notNull(deltaX) * dart.notNull(ui.window.physicalSize.width);
        deltaY = dart.notNull(deltaY) * dart.notNull(ui.window.physicalSize.height);
        break;
      }
      case 0:
      default:
      {
        break;
      }
    }
    let data = JSArrayOfPointerData().of([]);
    engine._ensureMouseDeviceAdded(data, event[$client].x, event[$client].y, event.buttons, event.timeStamp, -1);
    data[$add](new ui.PointerData.new({change: ui.PointerChange.hover, timeStamp: engine._eventTimeStampToDuration(event.timeStamp), kind: ui.PointerDeviceKind.mouse, signalKind: ui.PointerSignalKind.scroll, device: -1, physicalX: event[$client].x, physicalY: event[$client].y, buttons: event.buttons, pressure: 1.0, pressureMin: 0.0, pressureMax: 1.0, scrollDeltaX: deltaX, scrollDeltaY: deltaY}));
    return data;
  };
  engine._addWheelEventListener = function _addWheelEventListener(listener) {
    let eventOptions = js_util.newObject();
    js_util.setProperty(eventOptions, "passive", false);
    js_util.callMethod(engine.PointerBinding.instance.domRenderer.glassPaneElement, "addEventListener", ["wheel", js.allowInterop(WheelEventTovoid(), dart.fn(event => listener(event), WheelEventTovoid())), eventOptions]);
  };
  engine._serializePaintToCssPaint = function _serializePaintToCssPaint(paint) {
    let t8, t8$, t8$0, t8$1, t8$2, t8$3, t8$4;
    let engineShader = engine.EngineGradient._check(paint.shader);
    return [(t8 = paint.blendMode, t8 == null ? null : t8.index), (t8$ = paint.style, t8$ == null ? null : t8$.index), paint.strokeWidth, (t8$0 = paint.strokeCap, t8$0 == null ? null : t8$0.index), paint.isAntiAlias, paint.color.toCssString(), (t8$1 = engineShader, t8$1 == null ? null : t8$1.webOnlySerializeToCssPaint()), (t8$2 = paint.maskFilter, t8$2 == null ? null : t8$2.webOnlySerializeToCssPaint()), (t8$3 = paint.filterQuality, t8$3 == null ? null : t8$3.index), (t8$4 = paint.colorFilter, t8$4 == null ? null : t8$4.webOnlySerializeToCssPaint())];
  };
  engine._serializeRectToCssPaint = function _serializeRectToCssPaint(rect) {
    return [rect.left, rect.top, rect.right, rect.bottom];
  };
  engine._serializeRRectToCssPaint = function _serializeRRectToCssPaint(rrect) {
    return [rrect.left, rrect.top, rrect.right, rrect.bottom, rrect.tlRadiusX, rrect.tlRadiusY, rrect.trRadiusX, rrect.trRadiusY, rrect.brRadiusX, rrect.brRadiusY, rrect.blRadiusX, rrect.blRadiusY];
  };
  engine.longestIncreasingSubsequence = function longestIncreasingSubsequence(list) {
    let len = list[$length];
    let predecessors = JSArrayOfint().of([]);
    let mins = JSArrayOfint().of([0]);
    let longest = 0;
    for (let i = 0; i < dart.notNull(len); i = i + 1) {
      let elem = list[$_get](i);
      let lo = 1;
      let hi = longest;
      while (lo <= hi) {
        let mid = ((lo + hi) / 2)[$truncate]();
        if (dart.notNull(list[$_get](mins[$_get](mid))) < dart.notNull(elem)) {
          lo = mid + 1;
        } else {
          hi = mid - 1;
        }
      }
      let expansionIndex = lo;
      predecessors[$add](mins[$_get](expansionIndex - 1));
      if (expansionIndex >= dart.notNull(mins[$length])) {
        mins[$add](i);
      } else {
        mins[$_set](expansionIndex, i);
      }
      if (expansionIndex > longest) {
        longest = expansionIndex;
      }
    }
    let seq = ListOfint().new(longest);
    let k = mins[$_get](longest);
    for (let i = longest - 1; i >= 0; i = i - 1) {
      seq[$_set](i, k);
      k = predecessors[$_get](k);
    }
    return seq;
  };
  engine._offsetIsValid = function _offsetIsValid(offset) {
    if (!(offset != null)) dart.assertFailed("Offset argument was null.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 8, 10, "offset != null");
    if (!(!offset.dx[$isNaN] && !offset.dy[$isNaN])) dart.assertFailed("Offset argument contained a NaN value.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 9, 10, "!offset.dx.isNaN && !offset.dy.isNaN");
    return true;
  };
  engine._matrix4IsValid = function _matrix4IsValid(matrix4) {
    if (!(matrix4 != null)) dart.assertFailed("Matrix4 argument was null.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 15, 10, "matrix4 != null");
    if (!(matrix4[$length] === 16)) dart.assertFailed("Matrix4 must have 16 entries.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/shader.dart", 16, 10, "matrix4.length == 16");
    return true;
  };
  engine._validateColorStops = function _validateColorStops(colors, colorStops) {
    if (colorStops == null) {
      if (colors[$length] !== 2) dart.throw(new core.ArgumentError.new("\"colors\" must have length 2 if \"colorStops\" is omitted."));
    } else {
      if (colors[$length] != colorStops[$length]) dart.throw(new core.ArgumentError.new("\"colors\" and \"colorStops\" arguments must have equal length."));
    }
  };
  engine._createContainer = function _createContainer() {
    let t8;
    let container = html.DivElement.new();
    t8 = container.style;
    t8[$position] = "fixed";
    t8[$top] = "0";
    t8[$right] = "0";
    t8[$padding] = "6px";
    t8[$color] = "#fff";
    t8[$backgroundColor] = "#000";
    t8[$opacity] = "0.8";
    t8;
    return container;
  };
  engine._recycleCanvas = function _recycleCanvas(canvas) {
    let t8;
    if (engine.BitmapCanvas.is(canvas) && dart.test(canvas.isReusable())) {
      engine._recycledCanvases[$add](canvas);
      if (dart.notNull(engine._recycledCanvases[$length]) > 30) {
        let removedCanvas = engine._recycledCanvases[$removeAt](0);
        removedCanvas.dispose();
        if (false) {
          t8 = engine.DebugCanvasReuseOverlay.instance;
          t8.disposedCount = dart.notNull(t8.disposedCount) + 1;
        }
      }
      if (false) {
        engine.DebugCanvasReuseOverlay.instance.inRecycleCount = engine._recycledCanvases[$length];
      }
    }
  };
  engine.standardPictureFactory = function standardPictureFactory(dx, dy, picture, hints) {
    return new engine.PersistedStandardPicture.new(dx, dy, picture, hints);
  };
  engine.houdiniPictureFactory = function houdiniPictureFactory(dx, dy, picture, hints) {
    return new engine.PersistedHoudiniPicture.new(dx, dy, picture, hints);
  };
  engine.commitScene = function commitScene(scene) {
    if (dart.test(engine._paintQueue[$isNotEmpty])) {
      if (dart.notNull(engine._paintQueue[$length]) > 1) {
        engine._paintQueue[$sort](dart.fn((a, b) => {
          let aSize = dart.notNull(a.canvasSize.height) * dart.notNull(a.canvasSize.width);
          let bSize = dart.notNull(b.canvasSize.height) * dart.notNull(b.canvasSize.width);
          return bSize[$compareTo](aSize);
        }, _PaintRequestAnd_PaintRequestToint()));
      }
      for (let request of engine._paintQueue) {
        request.paintCallback();
      }
      engine._paintQueue = JSArrayOf_PaintRequest().of([]);
    }
    if (dart.test(engine._retainedSurfaces[$isNotEmpty])) {
      for (let i = 0; i < dart.notNull(engine._retainedSurfaces[$length]); i = i + 1) {
        let retainedSurface = engine._retainedSurfaces[$_get](i);
        if (!dart.test(retainedSurface.isPendingRetention)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 80, 14, "retainedSurface.isPendingRetention");
        retainedSurface.state = engine.PersistedSurfaceState.active;
      }
      engine._retainedSurfaces = JSArrayOfPersistedSurface().of([]);
    }
    if (false) {
      engine._debugPrintSurfaceStats(scene, engine._debugFrameNumber);
      engine._debugRepaintSurfaceStatsOverlay(scene);
    }
    if (!dart.test(dart.fn(() => {
      let validationErrors = JSArrayOfString().of([]);
      scene.debugValidate(validationErrors);
      if (dart.test(validationErrors[$isNotEmpty])) {
        core.print("ENGINE LAYER TREE INCONSISTENT:\n" + dart.str(validationErrors[$map](core.String, dart.fn(e => "  - " + dart.str(e) + "\n", StringToString()))[$join]()));
      }
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 89, 10, "() {\r\n    final List<String> validationErrors = <String>[];\r\n    scene.debugValidate(validationErrors);\r\n    if (validationErrors.isNotEmpty) {\r\n      print('ENGINE LAYER TREE INCONSISTENT:\\n'\r\n          '${validationErrors.map((String e) => '  - $e\\n').join()}');\r\n    }\r\n    return true;\r\n  }()");
    for (let i = 0; i < dart.notNull(engine._frameReferences[$length]); i = i + 1) {
      engine._frameReferences[$_get](i).value = null;
    }
    engine._frameReferences = JSArrayOfFrameReference().of([]);
    if (false) {
      engine._surfaceStats = new (LinkedMapOfPersistedSurface$_DebugSurfaceStats()).new();
    }
    if (!dart.test(dart.fn(() => {
      engine._debugFrameNumber = dart.notNull(engine._debugFrameNumber) + 1;
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 107, 10, "() {\r\n    _debugFrameNumber++;\r\n    return true;\r\n  }()");
  };
  engine.debugForgetFrameScene = function debugForgetFrameScene() {
    engine._clipIdCounter = 0;
    engine._recycledCanvases[$clear]();
  };
  engine._surfaceStatsFor = function _surfaceStatsFor(surface) {
    if (!false) {
      dart.throw(core.Exception.new("_surfaceStatsFor is only available when _debugExplainSurfaceStats is set to true."));
    }
    return engine._surfaceStats[$putIfAbsent](surface, dart.fn(() => new engine._DebugSurfaceStats.new(surface), VoidTo_DebugSurfaceStats()));
  };
  engine._debugRepaintSurfaceStatsOverlay = function _debugRepaintSurfaceStatsOverlay(scene) {
    let t8, t8$, t8$0, t8$1, t8$2, t8$3, t8$4, t8$5;
    let overlayWidth = html.window.innerWidth;
    engine._surfaceStatsTimeline[$add](engine._surfaceStats);
    while (dart.notNull(engine._surfaceStatsTimeline[$length]) > dart.notNull(overlayWidth) / 2) {
      engine._surfaceStatsTimeline[$removeAt](0);
    }
    if (engine._debugSurfaceStatsOverlayCtx == null) {
      let _debugSurfaceStatsOverlay = html.CanvasElement.new({width: overlayWidth, height: 120});
      t8 = _debugSurfaceStatsOverlay.style;
      t8[$position] = "fixed";
      t8[$left] = "0";
      t8[$top] = "0";
      t8[$zIndex] = "1000";
      t8[$opacity] = "0.8";
      t8;
      engine._debugSurfaceStatsOverlayCtx = _debugSurfaceStatsOverlay[$context2D];
      html.document.body[$append](_debugSurfaceStatsOverlay);
    }
    t8$ = engine._debugSurfaceStatsOverlayCtx;
    t8$.fillStyle = "black";
    t8$.beginPath();
    t8$.rect(0, 0, overlayWidth, 120);
    t8$.fill();
    t8$;
    let physicalScreenWidth = dart.notNull(html.window.innerWidth) * dart.notNull(html.window.devicePixelRatio);
    let physicalScreenHeight = dart.notNull(html.window.innerHeight) * dart.notNull(html.window.devicePixelRatio);
    let physicsScreenPixelCount = physicalScreenWidth * physicalScreenHeight;
    let totalDomNodeCount = scene.rootElement[$querySelectorAll](html.Element, "*")[$length];
    for (let i = 0; i < dart.notNull(engine._surfaceStatsTimeline[$length]); i = i + 1) {
      let statsMap = engine._surfaceStatsTimeline[$_get](i);
      let totals = new engine._DebugSurfaceStats.new(null);
      let pixelCount = 0;
      for (let oneSurfaceStats of statsMap[$values]) {
        totals.aggregate(oneSurfaceStats);
        if (engine.PersistedPicture.is(oneSurfaceStats.surface)) {
          let picture = engine.PersistedPicture._check(oneSurfaceStats.surface);
          pixelCount = pixelCount + dart.notNull(picture.bitmapPixelCount);
        }
      }
      let repaintRate = dart.notNull(totals.paintPixelCount) / pixelCount;
      let domAllocationRate = dart.notNull(totals.allocatedDomNodeCount) / dart.notNull(totalDomNodeCount);
      let bitmapAllocationRate = dart.notNull(totals.allocatedBitmapSizeInPixels) / physicsScreenPixelCount;
      let surfaceRetainRate = dart.notNull(totals.retainSurfaceCount) / dart.notNull(engine._surfaceStatsTimeline[$_get](i)[$length]);
      t8$0 = engine._debugSurfaceStatsOverlayCtx;
      t8$0.lineWidth = 2;
      t8$0.strokeStyle = "red";
      t8$0.beginPath();
      t8$0.moveTo(2 * i, 30);
      t8$0.lineTo(2 * i, 30 * (1 - repaintRate));
      t8$0.stroke();
      t8$0;
      t8$1 = engine._debugSurfaceStatsOverlayCtx;
      t8$1.lineWidth = 2;
      t8$1.strokeStyle = "red";
      t8$1.beginPath();
      t8$1.moveTo(2 * i, 2 * 30);
      t8$1.lineTo(2 * i, 30 * (2 - domAllocationRate));
      t8$1.stroke();
      t8$1;
      t8$2 = engine._debugSurfaceStatsOverlayCtx;
      t8$2.lineWidth = 2;
      t8$2.strokeStyle = "red";
      t8$2.beginPath();
      t8$2.moveTo(2 * i, 3 * 30);
      t8$2.lineTo(2 * i, 30 * (3 - bitmapAllocationRate));
      t8$2.stroke();
      t8$2;
      t8$3 = engine._debugSurfaceStatsOverlayCtx;
      t8$3.lineWidth = 2;
      t8$3.strokeStyle = "green";
      t8$3.beginPath();
      t8$3.moveTo(2 * i, 4 * 30);
      t8$3.lineTo(2 * i, 30 * (4 - surfaceRetainRate));
      t8$3.stroke();
      t8$3;
    }
    t8$4 = engine._debugSurfaceStatsOverlayCtx;
    t8$4.font = "normal normal 14px sans-serif";
    t8$4.fillStyle = "white";
    t8$4[$fillText]("Repaint rate", 5, 30 - 5);
    t8$4[$fillText]("DOM alloc rate", 5, 2 * 30 - 5);
    t8$4[$fillText]("Bitmap alloc rate", 5, 3 * 30 - 5);
    t8$4[$fillText]("Retain rate", 5, 4 * 30 - 5);
    t8$4;
    for (let i = 1; i <= 4; i = i + 1) {
      t8$5 = engine._debugSurfaceStatsOverlayCtx;
      t8$5.lineWidth = 1;
      t8$5.strokeStyle = "blue";
      t8$5.beginPath();
      t8$5.moveTo(0, 120 - 30 * i);
      t8$5.lineTo(overlayWidth, 120 - 30 * i);
      t8$5.stroke();
      t8$5;
    }
  };
  engine._debugPrintSurfaceStats = function _debugPrintSurfaceStats(scene, frameNumber) {
    let t8;
    let pictureCount = 0;
    let paintCount = 0;
    let bitmapCanvasCount = 0;
    let bitmapReuseCount = 0;
    let bitmapAllocationCount = 0;
    let bitmapPaintCount = 0;
    let bitmapPixelsAllocated = 0;
    let domCanvasCount = 0;
    let domPaintCount = 0;
    let surfaceRetainCount = 0;
    let elementReuseCount = 0;
    let totalAllocatedDomNodeCount = 0;
    function countReusesRecursively(surface) {
      let stats = engine._surfaceStatsFor(surface);
      if (!(stats != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/surface/surface.dart", 351, 12, "stats != null");
      surfaceRetainCount = surfaceRetainCount + dart.notNull(stats.retainSurfaceCount);
      elementReuseCount = elementReuseCount + dart.notNull(stats.reuseElementCount);
      totalAllocatedDomNodeCount = totalAllocatedDomNodeCount + dart.notNull(stats.allocatedDomNodeCount);
      if (engine.PersistedStandardPicture.is(surface)) {
        pictureCount = pictureCount + 1;
        paintCount = paintCount + dart.notNull(stats.paintCount);
        if (engine.DomCanvas.is(surface[_canvas])) {
          domCanvasCount = domCanvasCount + 1;
          domPaintCount = domPaintCount + dart.notNull(stats.paintCount);
        }
        if (engine.BitmapCanvas.is(surface[_canvas])) {
          bitmapCanvasCount = bitmapCanvasCount + 1;
          bitmapPaintCount = bitmapPaintCount + dart.notNull(stats.paintCount);
        }
        bitmapReuseCount = bitmapReuseCount + dart.notNull(stats.reuseCanvasCount);
        bitmapAllocationCount = bitmapAllocationCount + dart.notNull(stats.allocateBitmapCanvasCount);
        bitmapPixelsAllocated = bitmapPixelsAllocated + dart.notNull(stats.allocatedBitmapSizeInPixels);
      }
      surface.visitChildren(countReusesRecursively);
    }
    dart.fn(countReusesRecursively, PersistedSurfaceTovoid());
    scene.visitChildren(countReusesRecursively);
    let buf = new core.StringBuffer.new();
    t8 = buf;
    t8.writeln("---------------------- FRAME #" + dart.str(frameNumber) + " -------------------------");
    t8.writeln("Surfaces retained: " + dart.str(surfaceRetainCount));
    t8.writeln("Elements reused: " + dart.str(elementReuseCount));
    t8.writeln("Elements allocated: " + dart.str(totalAllocatedDomNodeCount));
    t8.writeln("Pictures: " + dart.str(pictureCount));
    t8.writeln("  Painted: " + dart.str(paintCount));
    t8.writeln("  Skipped painting: " + dart.str(pictureCount - paintCount));
    t8.writeln("DOM canvases:");
    t8.writeln("  Painted: " + dart.str(domPaintCount));
    t8.writeln("  Skipped painting: " + dart.str(domCanvasCount - domPaintCount));
    t8.writeln("Bitmap canvases: " + dart.str(bitmapCanvasCount));
    t8.writeln("  Painted: " + dart.str(bitmapPaintCount));
    t8.writeln("  Skipped painting: " + dart.str(bitmapCanvasCount - bitmapPaintCount));
    t8.writeln("  Reused: " + dart.str(bitmapReuseCount));
    t8.writeln("  Allocated: " + dart.str(bitmapAllocationCount));
    t8.writeln("  Allocated pixels: " + dart.str(bitmapPixelsAllocated));
    t8.writeln("  Available for reuse: " + dart.str(engine._recycledCanvases[$length]));
    t8;
    async.scheduleMicrotask(dart.fn(() => {
      let t8;
      let canvasElements = html.document[$querySelectorAll](html.Element, "canvas");
      let canvasInfo = new core.StringBuffer.new();
      let pixelCount = canvasElements[$cast](html.CanvasElement)[$map](core.int, dart.fn(e => {
        let pixels = dart.notNull(e.width) * dart.notNull(e.height);
        canvasInfo.writeln("    - " + dart.str(e.width) + " x " + dart.str(e.height) + " = " + dart.str(pixels) + " pixels");
        return pixels;
      }, CanvasElementToint()))[$fold](core.int, 0, dart.fn((total, pixels) => dart.notNull(total) + dart.notNull(pixels), intAndintToint()));
      let physicalScreenWidth = dart.notNull(html.window.innerWidth) * dart.notNull(html.window.devicePixelRatio);
      let physicalScreenHeight = dart.notNull(html.window.innerHeight) * dart.notNull(html.window.devicePixelRatio);
      let physicsScreenPixelCount = physicalScreenWidth * physicalScreenHeight;
      let screenPixelRatio = dart.notNull(pixelCount) / physicsScreenPixelCount;
      let screenDescription = "1 screen is " + dart.str(physicalScreenWidth) + " x " + dart.str(physicalScreenHeight) + " = " + dart.str(physicsScreenPixelCount) + " pixels";
      let canvasPixelDescription = dart.str(pixelCount) + " (" + screenPixelRatio[$toStringAsFixed](2) + " x screens";
      t8 = buf;
      t8.writeln("  Elements: " + dart.str(canvasElements[$length]));
      t8.writeln(canvasInfo);
      t8.writeln("  Pixels: " + canvasPixelDescription + "; " + screenDescription + ")");
      t8.writeln("-----------------------------------------------------------");
      t8;
      let screenPixelRatioTooHigh = screenPixelRatio > 6;
      if (screenPixelRatioTooHigh) {
        core.print("WARNING: pixel/screen ratio too high (" + screenPixelRatio[$toStringAsFixed](2) + "x)");
      }
      core.print(buf);
    }, VoidToNull()));
  };
  engine.nextLineBreak = function nextLineBreak(text, index) {
    let t8;
    while (dart.notNull((t8 = index, index = dart.notNull(t8) + 1, t8)) < text.length) {
      let curr = dart.notNull(index) < text.length ? text[$codeUnitAt](index) : null;
      let prev = dart.notNull(index) > 0 ? text[$codeUnitAt](dart.notNull(index) - 1) : null;
      if (prev === 11 || prev === 12) {
        return new engine.LineBreakResult.new(index, engine.LineBreakType.mandatory);
      }
      if (prev === 13 && curr === 10) {
        continue;
      }
      if (prev === 13 || prev === 10 || prev === 133) {
        return new engine.LineBreakResult.new(index, engine.LineBreakType.mandatory);
      }
      if (curr === 11 || curr === 12 || curr === 13 || curr === 10 || curr === 133) {
        continue;
      }
      if (dart.notNull(index) >= text.length) {
        return new engine.LineBreakResult.new(text.length, engine.LineBreakType.endOfText);
      }
      if (curr === 32 || curr === 9) {
        continue;
      }
      if (prev === 32 || prev === 9 || prev === 45) {
        return new engine.LineBreakResult.new(index, engine.LineBreakType.opportunity);
      }
    }
    return new engine.LineBreakResult.new(text.length, engine.LineBreakType.endOfText);
  };
  engine._whitespacePredicate = function _whitespacePredicate(char) {
    return char === 32 || char === 9 || dart.test(engine._newlinePredicate(char));
  };
  engine._newlinePredicate = function _newlinePredicate(char) {
    return char === 13 || char === 10 || char === 133;
  };
  engine._measureSubstring = function _measureSubstring(_canvasContext, style, text, start, end) {
    let t8;
    if (!(0 <= dart.notNull(start) && dart.notNull(start) <= dart.notNull(end) && dart.notNull(end) <= text.length)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 617, 10, "0 <= start && start <= end && end <= text.length");
    if (start == end) {
      return 0.0;
    }
    if (start == engine._lastStart && end == engine._lastEnd && text == engine._lastText && dart.equals(engine._lastStyle, style)) {
      return engine._lastWidth;
    }
    engine._lastStart = start;
    engine._lastEnd = end;
    engine._lastText = text;
    engine._lastStyle = style;
    let letterSpacing = (t8 = style.letterSpacing, t8 == null ? 0.0 : t8);
    let sub = start === 0 && end === text.length ? text : text[$substring](start, end);
    let width = dart.notNull(_canvasContext.measureText(sub).width) + dart.notNull(letterSpacing) * sub.length;
    return engine._lastWidth = engine._roundWidth(width);
  };
  engine._roundWidth = function _roundWidth(width) {
    return (dart.notNull(width) * 100)[$round]() / 100;
  };
  engine._excludeTrailing = function _excludeTrailing(text, start, end, predicate) {
    if (!(0 <= dart.notNull(start) && dart.notNull(start) <= dart.notNull(end) && dart.notNull(end) <= text.length)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart", 657, 10, "(0 <= start && start <= end && end <= text.lengt");
    while (dart.notNull(start) < dart.notNull(end) && dart.test(predicate(text[$codeUnitAt](dart.notNull(end) - 1)))) {
      end = dart.notNull(end) - 1;
    }
    return end;
  };
  engine.fontWeightToCss = function fontWeightToCss(fontWeight) {
    if (fontWeight == null) {
      return null;
    }
    return engine.fontWeightIndexToCss({fontWeightIndex: fontWeight.index});
  };
  engine.fontWeightIndexToCss = function fontWeightIndexToCss(opts) {
    let fontWeightIndex = opts && 'fontWeightIndex' in opts ? opts.fontWeightIndex : 3;
    switch (fontWeightIndex) {
      case 0:
      {
        return "100";
      }
      case 1:
      {
        return "200";
      }
      case 2:
      {
        return "300";
      }
      case 3:
      {
        return "normal";
      }
      case 4:
      {
        return "500";
      }
      case 5:
      {
        return "600";
      }
      case 6:
      {
        return "bold";
      }
      case 7:
      {
        return "800";
      }
      case 8:
      {
        return "900";
      }
    }
    if (!dart.dassert(dart.fn(() => {
      dart.throw(new core.AssertionError.new("Failed to convert font weight " + dart.str(fontWeightIndex) + " to CSS."));
    }, VoidToNull())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 1025, 10, "() {\r\n    throw AssertionError(\r\n      'Failed to convert font weight $fontWeightIndex to CSS.',\r\n    );\r\n  }()");
    return "";
  };
  engine._applyParagraphStyleToElement = function _applyParagraphStyleToElement(opts) {
    let t8, t8$;
    let element = opts && 'element' in opts ? opts.element : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let previousStyle = opts && 'previousStyle' in opts ? opts.previousStyle : null;
    if (!(element != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 1043, 10, "element != null");
    if (!(style != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 1044, 10, "style != null");
    let cssStyle = element.style;
    if (previousStyle == null) {
      if (style[_textAlign] != null) {
        cssStyle[$textAlign] = engine.textAlignToCssValue(style[_textAlign], (t8 = style[_textDirection], t8 == null ? ui.TextDirection.ltr : t8));
      }
      if (style[_lineHeight] != null) {
        cssStyle[$lineHeight] = dart.str(style[_lineHeight]);
      }
      if (style[_textDirection] != null) {
        cssStyle[$direction] = engine._textDirectionToCss(style[_textDirection]);
      }
      if (style[_fontSize] != null) {
        cssStyle[$fontSize] = dart.str(style[_fontSize][$floor]()) + "px";
      }
      if (style[_fontWeight] != null) {
        cssStyle[$fontWeight] = engine.fontWeightToCss(style[_fontWeight]);
      }
      if (style[_fontStyle] != null) {
        cssStyle[$fontStyle] = dart.equals(style[_fontStyle], ui.FontStyle.normal) ? "normal" : "italic";
      }
      if (style[_effectiveFontFamily] != null) {
        cssStyle[$fontFamily] = engine._quoteFontUnlessGeneric(style[_effectiveFontFamily]);
      }
    } else {
      if (!dart.equals(style[_textAlign], previousStyle[_textAlign])) {
        cssStyle[$textAlign] = engine.textAlignToCssValue(style[_textAlign], (t8$ = style[_textDirection], t8$ == null ? ui.TextDirection.ltr : t8$));
      }
      if (style[_lineHeight] != style[_lineHeight]) {
        cssStyle[$lineHeight] = dart.str(style[_lineHeight]);
      }
      if (!dart.equals(style[_textDirection], previousStyle[_textDirection])) {
        cssStyle[$direction] = engine._textDirectionToCss(style[_textDirection]);
      }
      if (style[_fontSize] != previousStyle[_fontSize]) {
        cssStyle[$fontSize] = style[_fontSize] != null ? dart.str(style[_fontSize][$floor]()) + "px" : null;
      }
      if (!dart.equals(style[_fontWeight], previousStyle[_fontWeight])) {
        cssStyle[$fontWeight] = engine.fontWeightToCss(style[_fontWeight]);
      }
      if (!dart.equals(style[_fontStyle], previousStyle[_fontStyle])) {
        cssStyle[$fontStyle] = style[_fontStyle] != null ? dart.equals(style[_fontStyle], ui.FontStyle.normal) ? "normal" : "italic" : null;
      }
      if (style[_fontFamily] != previousStyle[_fontFamily]) {
        cssStyle[$fontFamily] = engine._quoteFontUnlessGeneric(style[_fontFamily]);
      }
    }
  };
  engine._applyTextStyleToElement = function _applyTextStyleToElement(opts) {
    let t8, t8$, t8$0, t8$1, t8$2;
    let element = opts && 'element' in opts ? opts.element : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let previousStyle = opts && 'previousStyle' in opts ? opts.previousStyle : null;
    let isSpan = opts && 'isSpan' in opts ? opts.isSpan : false;
    if (!(element != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 1112, 10, "element != null");
    if (!(style != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 1113, 10, "style != null");
    let updateDecoration = false;
    let cssStyle = element.style;
    if (previousStyle == null) {
      let color = (t8$ = (t8 = style[_foreground], t8 == null ? null : t8.color), t8$ == null ? style[_color$] : t8$);
      if (color != null) {
        cssStyle[$color] = color.toCssString();
      }
      if (style[_fontSize] != null) {
        cssStyle[$fontSize] = dart.str(style[_fontSize][$floor]()) + "px";
      }
      if (style[_fontWeight] != null) {
        cssStyle[$fontWeight] = engine.fontWeightToCss(style[_fontWeight]);
      }
      if (style[_fontStyle] != null) {
        cssStyle[$fontStyle] = dart.equals(style[_fontStyle], ui.FontStyle.normal) ? "normal" : "italic";
      }
      if (dart.test(isSpan) && !dart.test(ui.debugEmulateFlutterTesterEnvironment)) {
        if (style[_fontFamily] != null) {
          cssStyle[$fontFamily] = engine._quoteFontUnlessGeneric(style[_fontFamily]);
        }
      } else {
        if (style[_effectiveFontFamily] != null) {
          cssStyle[$fontFamily] = engine._quoteFontUnlessGeneric(style[_effectiveFontFamily]);
        }
      }
      if (style[_letterSpacing] != null) {
        cssStyle[$letterSpacing] = dart.str(style[_letterSpacing]) + "px";
      }
      if (style[_wordSpacing] != null) {
        cssStyle[$wordSpacing] = dart.str(style[_wordSpacing]) + "px";
      }
      if (style[_decoration] != null) {
        updateDecoration = true;
      }
    } else {
      if (!dart.equals(style[_color$], previousStyle[_color$]) || !dart.equals(style[_foreground], previousStyle[_foreground])) {
        let color = (t8$1 = (t8$0 = style[_foreground], t8$0 == null ? null : t8$0.color), t8$1 == null ? style[_color$] : t8$1);
        cssStyle[$color] = (t8$2 = color, t8$2 == null ? null : t8$2.toCssString());
      }
      if (style[_fontSize] != previousStyle[_fontSize]) {
        cssStyle[$fontSize] = style[_fontSize] != null ? dart.str(style[_fontSize][$floor]()) + "px" : null;
      }
      if (!dart.equals(style[_fontWeight], previousStyle[_fontWeight])) {
        cssStyle[$fontWeight] = engine.fontWeightToCss(style[_fontWeight]);
      }
      if (!dart.equals(style[_fontStyle], previousStyle[_fontStyle])) {
        cssStyle[$fontStyle] = style[_fontStyle] != null ? dart.equals(style[_fontStyle], ui.FontStyle.normal) ? "normal" : "italic" : null;
      }
      if (style[_fontFamily] != previousStyle[_fontFamily]) {
        cssStyle[$fontFamily] = engine._quoteFontUnlessGeneric(style[_fontFamily]);
      }
      if (style[_letterSpacing] != previousStyle[_letterSpacing]) {
        cssStyle[$letterSpacing] = dart.str(style[_letterSpacing]) + "px";
      }
      if (style[_wordSpacing] != previousStyle[_wordSpacing]) {
        cssStyle[$wordSpacing] = dart.str(style[_wordSpacing]) + "px";
      }
      if (!dart.equals(style[_decoration], previousStyle[_decoration]) || !dart.equals(style[_decorationStyle], previousStyle[_decorationStyle]) || !dart.equals(style[_decorationColor], previousStyle[_decorationColor])) {
        updateDecoration = true;
      }
    }
    if (updateDecoration) {
      if (style[_decoration] != null) {
        let textDecoration = engine._textDecorationToCssString(style[_decoration], style[_decorationStyle]);
        if (textDecoration != null) {
          cssStyle[$textDecoration] = textDecoration;
          let decorationColor = style[_decorationColor];
          if (decorationColor != null) {
            cssStyle[$textDecorationColor] = decorationColor.toCssString();
          }
        }
      }
    }
  };
  engine._applyTextBackgroundToElement = function _applyTextBackgroundToElement(opts) {
    let t8;
    let element = opts && 'element' in opts ? opts.element : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let previousStyle = opts && 'previousStyle' in opts ? opts.previousStyle : null;
    let newBackground = style[_background];
    if (previousStyle == null) {
      if (newBackground != null) {
        engine.domRenderer.setElementStyle(element, "background-color", newBackground.color.toCssString());
      }
    } else {
      if (!dart.equals(newBackground, previousStyle[_background])) {
        engine.domRenderer.setElementStyle(element, "background-color", (t8 = newBackground.color, t8 == null ? null : t8.toCssString()));
      }
    }
  };
  engine._textDecorationToCssString = function _textDecorationToCssString(decoration, decorationStyle) {
    let decorations = new core.StringBuffer.new();
    if (decoration != null) {
      if (dart.test(decoration.contains(ui.TextDecoration.underline))) {
        decorations.write("underline ");
      }
      if (dart.test(decoration.contains(ui.TextDecoration.overline))) {
        decorations.write("overline ");
      }
      if (dart.test(decoration.contains(ui.TextDecoration.lineThrough))) {
        decorations.write("line-through ");
      }
    }
    if (decorationStyle != null) {
      decorations.write(engine._decorationStyleToCssString(decorationStyle));
    }
    return dart.test(decorations.isEmpty) ? null : decorations.toString();
  };
  engine._decorationStyleToCssString = function _decorationStyleToCssString(decorationStyle) {
    switch (decorationStyle) {
      case C199 || CT.C199:
      {
        return "dashed";
      }
      case C200 || CT.C200:
      {
        return "dotted";
      }
      case C201 || CT.C201:
      {
        return "double";
      }
      case C202 || CT.C202:
      {
        return "solid";
      }
      case C203 || CT.C203:
      {
        return "wavy";
      }
      default:
      {
        return null;
      }
    }
  };
  engine._textDirectionToCss = function _textDirectionToCss(textDirection) {
    if (textDirection == null) {
      return null;
    }
    return engine.textDirectionIndexToCss(textDirection.index);
  };
  engine.textDirectionIndexToCss = function textDirectionIndexToCss(textDirectionIndex) {
    switch (textDirectionIndex) {
      case 0:
      {
        return "rtl";
      }
      case 1:
      {
        return null;
      }
    }
    if (!dart.dassert(dart.fn(() => {
      dart.throw(new core.AssertionError.new("Failed to convert text direction " + dart.str(textDirectionIndex) + " to CSS"));
    }, VoidToNull())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/text/paragraph.dart", 1285, 10, "() {\r\n    throw AssertionError(\r\n      'Failed to convert text direction $textDirectionIndex to CSS',\r\n    );\r\n  }()");
    return null;
  };
  engine.textAlignToCssValue = function textAlignToCssValue(align, textDirection) {
    switch (align) {
      case C204 || CT.C204:
      {
        return "left";
      }
      case C115 || CT.C115:
      {
        return "right";
      }
      case C114 || CT.C114:
      {
        return "center";
      }
      case C205 || CT.C205:
      {
        return "justify";
      }
      case C116 || CT.C116:
      {
        switch (textDirection) {
          case C206 || CT.C206:
          {
            return null;
          }
          case C207 || CT.C207:
          {
            return "right";
          }
        }
        break;
      }
      case C117 || CT.C117:
      {
        switch (textDirection) {
          case C206 || CT.C206:
          {
            return "end";
          }
          case C207 || CT.C207:
          {
            return "left";
          }
        }
        break;
      }
    }
    dart.throw(new core.AssertionError.new("Unsupported TextAlign value " + dart.str(align)));
  };
  engine._listEquals = function _listEquals(T, a, b) {
    if (a == null) {
      return b == null;
    }
    if (b == null || a[$length] != b[$length]) {
      return false;
    }
    for (let index = 0; index < dart.notNull(a[$length]); index = index + 1) {
      if (!dart.equals(a[$_get](index), b[$_get](index))) {
        return false;
      }
    }
    return true;
  };
  engine.getCharProperty = function getCharProperty(text, index) {
    if (dart.notNull(index) < 0 || dart.notNull(index) >= text.length) {
      return null;
    }
    return engine.lookup.find(text[$codeUnitAt](index));
  };
  engine._emptyCallback = function _emptyCallback(_) {
  };
  engine._setStaticStyleAttributes = function _setStaticStyleAttributes(domElement) {
    let t8, t8$;
    let elementStyle = domElement.style;
    t8 = elementStyle;
    t8[$whiteSpace] = "pre";
    t8[$alignContent] = "center";
    t8[$position] = "absolute";
    t8[$top] = "0";
    t8[$left] = "0";
    t8[$padding] = "0";
    t8[$opacity] = "1";
    t8[$color] = "transparent";
    t8[$backgroundColor] = "transparent";
    t8[$background] = "transparent";
    t8[$outline] = "none";
    t8[$border] = "none";
    t8[$resize] = "none";
    t8[$textShadow] = "transparent";
    t8[$transformOrigin] = "0 0 0";
    t8;
    elementStyle[$setProperty]("caret-color", "transparent");
    if (false) {
      t8$ = elementStyle;
      t8$[$color] = "purple";
      t8$[$outline] = "1px solid purple";
      t8$;
    }
  };
  engine._getInputTypeFromString = function _getInputTypeFromString(inputType) {
    switch (inputType) {
      case "TextInputType.multiline":
      {
        return engine.InputType.multiline;
      }
      case "TextInputType.text":
      default:
      {
        return engine.InputType.text;
      }
    }
  };
  engine._getTypeFromElement = function _getTypeFromElement(domElement) {
    if (html.InputElement.is(domElement)) {
      return engine.ElementType.input;
    }
    if (html.TextAreaElement.is(domElement)) {
      return engine.ElementType.textarea;
    }
    let contentEditable = domElement.contentEditable;
    if (contentEditable != null && contentEditable[$isNotEmpty] && contentEditable !== "inherit") {
      return engine.ElementType.contentEditable;
    }
    return null;
  };
  engine.futurize = function futurize(T, callbacker) {
    let completer = async.Completer$(T).sync();
    let error = callbacker(dart.fn(t => {
      if (t == null) {
        completer.completeError(core.Exception.new("operation failed"));
      } else {
        completer.complete(t);
      }
    }, dart.fnType(core.Null, [T])));
    if (error != null) {
      dart.throw(core.Exception.new(error));
    }
    return completer.future;
  };
  engine.matrix4ToCssTransform = function matrix4ToCssTransform(matrix) {
    return engine.float64ListToCssTransform(matrix.storage);
  };
  engine.isIdentityFloat64ListTransform = function isIdentityFloat64ListTransform(matrix) {
    if (!(matrix[$length] === 16)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/util.dart", 59, 10, "matrix.length == 16");
    let m = matrix;
    return m[$_get](0) === 1.0 && m[$_get](1) === 0.0 && m[$_get](2) === 0.0 && m[$_get](3) === 0.0 && m[$_get](4) === 0.0 && m[$_get](5) === 1.0 && m[$_get](6) === 0.0 && m[$_get](7) === 0.0 && m[$_get](8) === 0.0 && m[$_get](9) === 0.0 && m[$_get](10) === 1.0 && m[$_get](11) === 0.0 && m[$_get](12) === 0.0 && m[$_get](13) === 0.0 && m[$_get](14) === 0.0 && m[$_get](15) === 1.0;
  };
  engine.float64ListToCssTransform = function float64ListToCssTransform(matrix) {
    if (!(matrix[$length] === 16)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/util.dart", 81, 10, "matrix.length == 16");
    let m = matrix;
    if (m[$_get](0) === 1.0 && m[$_get](1) === 0.0 && m[$_get](2) === 0.0 && m[$_get](3) === 0.0 && m[$_get](4) === 0.0 && m[$_get](5) === 1.0 && m[$_get](6) === 0.0 && m[$_get](7) === 0.0 && m[$_get](8) === 0.0 && m[$_get](9) === 0.0 && m[$_get](10) === 1.0 && m[$_get](11) === 0.0 && m[$_get](14) === 0.0 && m[$_get](15) === 1.0) {
      let tx = m[$_get](12);
      let ty = m[$_get](13);
      return "translate(" + dart.str(tx) + "px, " + dart.str(ty) + "px)";
    } else {
      return "matrix3d(" + dart.str(m[$_get](0)) + "," + dart.str(m[$_get](1)) + "," + dart.str(m[$_get](2)) + "," + dart.str(m[$_get](3)) + "," + dart.str(m[$_get](4)) + "," + dart.str(m[$_get](5)) + "," + dart.str(m[$_get](6)) + "," + dart.str(m[$_get](7)) + "," + dart.str(m[$_get](8)) + "," + dart.str(m[$_get](9)) + "," + dart.str(m[$_get](10)) + "," + dart.str(m[$_get](11)) + "," + dart.str(m[$_get](12)) + "," + dart.str(m[$_get](13)) + "," + dart.str(m[$_get](14)) + "," + dart.str(m[$_get](15)) + ")";
    }
  };
  engine.transformRect = function transformRect(transform, rect) {
    return engine.transformLTRB(transform, rect.left, rect.top, rect.right, rect.bottom);
  };
  engine.transformLTRB = function transformLTRB(transform, left, top, right, bottom) {
    if (!(left != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/util.dart", 128, 10, "left != null");
    if (!(top != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/util.dart", 129, 10, "top != null");
    if (!(right != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/util.dart", 130, 10, "right != null");
    if (!(bottom != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/util.dart", 131, 10, "bottom != null");
    let pointData = _native_typed_data.NativeFloat64List.new(16);
    pointData[$_set](0, left);
    pointData[$_set](4, top);
    pointData[$_set](12, 1.0);
    pointData[$_set](1, right);
    pointData[$_set](5, top);
    pointData[$_set](13, 1.0);
    pointData[$_set](2, left);
    pointData[$_set](6, bottom);
    pointData[$_set](14, 1.0);
    pointData[$_set](3, right);
    pointData[$_set](7, bottom);
    pointData[$_set](15, 1.0);
    let pointMatrix = new engine.Matrix4.fromFloat64List(pointData);
    pointMatrix.multiplyTranspose(transform);
    return new ui.Rect.fromLTRB(math.min(core.double, math.min(core.double, math.min(core.double, pointData[$_get](0), pointData[$_get](1)), pointData[$_get](2)), pointData[$_get](3)), math.min(core.double, math.min(core.double, math.min(core.double, pointData[$_get](4), pointData[$_get](5)), pointData[$_get](6)), pointData[$_get](7)), math.max(core.double, math.max(core.double, math.max(core.double, pointData[$_get](0), pointData[$_get](1)), pointData[$_get](2)), pointData[$_get](3)), math.max(core.double, math.max(core.double, math.max(core.double, pointData[$_get](4), pointData[$_get](5)), pointData[$_get](6)), pointData[$_get](7)));
  };
  engine.rectContainsOther = function rectContainsOther(rect, other) {
    return dart.notNull(rect.left) <= dart.notNull(other.left) && dart.notNull(rect.top) <= dart.notNull(other.top) && dart.notNull(rect.right) >= dart.notNull(other.right) && dart.notNull(rect.bottom) >= dart.notNull(other.bottom);
  };
  engine._pathToSvgClipPath = function _pathToSvgClipPath(path, opts) {
    let offsetX = opts && 'offsetX' in opts ? opts.offsetX : 0;
    let offsetY = opts && 'offsetY' in opts ? opts.offsetY : 0;
    engine._clipIdCounter = dart.notNull(engine._clipIdCounter) + 1;
    let bounds = path.getBounds();
    let sb = new core.StringBuffer.new();
    sb.write("<svg width=\"" + dart.str(bounds.right) + "\" height=\"" + dart.str(bounds.bottom) + "\" " + "style=\"position:absolute\">");
    sb.write("<defs>");
    let clipId = "svgClip" + dart.str(engine._clipIdCounter);
    sb.write("<clipPath id=" + clipId + ">");
    sb.write("<path fill=\"#FFFFFF\" d=\"");
    engine.pathToSvg(path, sb, {offsetX: offsetX, offsetY: offsetY});
    sb.write("\"></path></clipPath></defs></svg");
    return sb.toString();
  };
  engine._isNsErrorFailureException = function _isNsErrorFailureException(e) {
    return dart.equals(js_util.getProperty(e, "name"), "NS_ERROR_FAILURE");
  };
  engine._quoteFontUnlessGeneric = function _quoteFontUnlessGeneric(font) {
    let genericFamilies = C208 || CT.C208;
    if (dart.test(genericFamilies[$contains](font))) {
      return font;
    }
    return "\"" + dart.str(font) + "\"";
  };
  engine.rectIsValid = function rectIsValid(rect) {
    if (!(rect != null)) dart.assertFailed("Rect argument was null.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 8, 10, "rect != null");
    if (!!(rect.left[$isNaN] || rect.right[$isNaN] || rect.top[$isNaN] || rect.bottom[$isNaN])) dart.assertFailed("Rect argument contained a NaN value.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 10, 7, "!(rect.left.isNaN ||\r\n          rect.right.isNaN ||\r\n          rect.top.isNaN ||\r\n          rect.bottom.isNaN)");
    return true;
  };
  engine.rrectIsValid = function rrectIsValid(rrect) {
    if (!(rrect != null)) dart.assertFailed("RRect argument was null.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 19, 10, "rrect != null");
    if (!!(rrect.left[$isNaN] || rrect.right[$isNaN] || rrect.top[$isNaN] || rrect.bottom[$isNaN])) dart.assertFailed("RRect argument contained a NaN value.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 21, 7, "!(rrect.left.isNaN ||\r\n          rrect.right.isNaN ||\r\n          rrect.top.isNaN ||\r\n          rrect.bottom.isNaN)");
    return true;
  };
  engine.offsetIsValid = function offsetIsValid(offset) {
    if (!(offset != null)) dart.assertFailed("Offset argument was null.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 30, 10, "offset != null");
    if (!(!offset.dx[$isNaN] && !offset.dy[$isNaN])) dart.assertFailed("Offset argument contained a NaN value.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 31, 10, "!offset.dx.isNaN && !offset.dy.isNaN");
    return true;
  };
  engine.matrix4IsValid = function matrix4IsValid(matrix4) {
    if (!(matrix4 != null)) dart.assertFailed("Matrix4 argument was null.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 37, 10, "matrix4 != null");
    if (!(matrix4[$length] === 16)) dart.assertFailed("Matrix4 must have 16 entries.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 38, 10, "matrix4.length == 16");
    return true;
  };
  engine.radiusIsValid = function radiusIsValid(radius) {
    if (!(radius != null)) dart.assertFailed("Radius argument was null.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 43, 10, "radius != null");
    if (!(!radius.x[$isNaN] && !radius.y[$isNaN])) dart.assertFailed("Radius argument contained a NaN value.", "org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart", 44, 10, "!radius.x.isNaN && !radius.y.isNaN");
    return true;
  };
  dart.copyProperties(engine, {
    get browserEngine() {
      let t8;
      t8 = engine._browserEngine;
      return t8 == null ? engine._browserEngine = engine._detectBrowserEngine() : t8;
    },
    get operatingSystem() {
      let t8;
      t8 = engine._operatingSystem;
      return t8 == null ? engine._operatingSystem = engine._detectOperatingSystem() : t8;
    },
    get debugRetainedSurfaces() {
      return engine._retainedSurfaces;
    },
    get assertionsEnabled() {
      let k = false;
      if (!(k = true)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/engine/util.dart", 109, 10, "k = true");
      return k;
    }
  });
  let C209;
  let C210;
  let C211;
  let C214;
  let C215;
  let C216;
  let C217;
  let C218;
  let C219;
  let C220;
  let C221;
  let C222;
  let C223;
  let C224;
  let C225;
  let C226;
  let C227;
  let C228;
  let C229;
  let C230;
  let C231;
  let C232;
  let C233;
  let C234;
  let C235;
  let C236;
  let C237;
  let C238;
  let C239;
  let C240;
  let C241;
  let C242;
  let C243;
  let C244;
  let C245;
  let C246;
  let C247;
  let C248;
  let C249;
  let C250;
  let C251;
  let C252;
  let C253;
  let C254;
  let C255;
  let C256;
  let C257;
  let C258;
  let C259;
  let C260;
  let C261;
  let C262;
  let C263;
  let C264;
  let C265;
  let C266;
  let C267;
  let C268;
  let C269;
  let C270;
  let C271;
  let C272;
  let C273;
  let C274;
  let C275;
  let C276;
  let C277;
  let C278;
  let C279;
  let C280;
  let C281;
  let C282;
  let C283;
  let C284;
  let C285;
  let C286;
  let C287;
  let C288;
  let C289;
  let C290;
  let C291;
  let C292;
  let C293;
  let C294;
  let C295;
  let C296;
  let C297;
  let C298;
  let C299;
  let C300;
  let C301;
  let C302;
  let C303;
  let C304;
  let C305;
  let C306;
  let C307;
  let C308;
  let C309;
  let C310;
  let C311;
  let C312;
  let C313;
  let C314;
  let C315;
  let C316;
  let C317;
  let C318;
  let C319;
  let C320;
  let C321;
  let C322;
  let C323;
  let C324;
  let C325;
  let C326;
  let C327;
  let C328;
  let C329;
  let C330;
  let C331;
  let C332;
  let C333;
  let C334;
  let C335;
  let C336;
  let C337;
  let C338;
  let C339;
  let C340;
  let C341;
  let C342;
  let C343;
  let C344;
  let C345;
  let C346;
  let C347;
  let C348;
  let C349;
  let C350;
  let C351;
  let C352;
  let C353;
  let C354;
  let C355;
  let C356;
  let C357;
  let C358;
  let C359;
  let C360;
  let C361;
  let C362;
  let C363;
  let C364;
  let C365;
  let C366;
  let C367;
  let C368;
  let C369;
  let C370;
  let C371;
  let C372;
  let C373;
  let C374;
  let C375;
  let C376;
  let C377;
  let C378;
  let C379;
  let C380;
  let C381;
  let C382;
  let C383;
  let C384;
  let C385;
  let C386;
  let C387;
  let C388;
  let C389;
  let C390;
  let C391;
  let C392;
  let C393;
  let C394;
  let C395;
  let C396;
  let C397;
  let C398;
  let C399;
  let C400;
  let C401;
  let C402;
  let C403;
  let C404;
  let C405;
  let C406;
  let C407;
  let C408;
  let C409;
  let C410;
  let C411;
  let C412;
  let C413;
  let C414;
  let C415;
  let C416;
  let C417;
  let C418;
  let C419;
  let C420;
  let C421;
  let C422;
  let C423;
  let C424;
  let C425;
  let C426;
  let C427;
  let C428;
  let C429;
  let C430;
  let C431;
  let C432;
  let C433;
  let C434;
  let C435;
  let C436;
  let C437;
  let C438;
  let C439;
  let C440;
  let C441;
  let C442;
  let C443;
  let C444;
  let C445;
  let C446;
  let C447;
  let C448;
  let C449;
  let C450;
  let C451;
  let C452;
  let C453;
  let C454;
  let C455;
  let C456;
  let C457;
  let C458;
  let C459;
  let C460;
  let C461;
  let C462;
  let C463;
  let C464;
  let C465;
  let C466;
  let C467;
  let C468;
  let C469;
  let C470;
  let C471;
  let C472;
  let C473;
  let C474;
  let C475;
  let C476;
  let C477;
  let C478;
  let C479;
  let C480;
  let C481;
  let C482;
  let C483;
  let C484;
  let C485;
  let C486;
  let C487;
  let C488;
  let C489;
  let C490;
  let C491;
  let C492;
  let C493;
  let C494;
  let C495;
  let C496;
  let C497;
  let C498;
  let C499;
  let C500;
  let C501;
  let C502;
  let C503;
  let C504;
  let C505;
  let C506;
  let C507;
  let C508;
  let C509;
  let C510;
  let C511;
  let C512;
  let C513;
  let C514;
  let C515;
  let C516;
  let C517;
  let C518;
  let C519;
  let C520;
  let C521;
  let C522;
  let C523;
  let C524;
  let C525;
  let C526;
  let C527;
  let C528;
  let C529;
  let C530;
  let C531;
  let C532;
  let C533;
  let C534;
  let C535;
  let C536;
  let C537;
  let C538;
  let C539;
  let C540;
  let C541;
  let C542;
  let C543;
  let C544;
  let C545;
  let C546;
  let C547;
  let C548;
  let C549;
  let C550;
  let C551;
  let C552;
  let C553;
  let C554;
  let C555;
  let C556;
  let C557;
  let C558;
  let C559;
  let C560;
  let C561;
  let C562;
  let C563;
  let C564;
  let C565;
  let C566;
  let C567;
  let C568;
  let C569;
  let C570;
  let C571;
  let C572;
  let C573;
  let C574;
  let C575;
  let C576;
  let C577;
  let C578;
  let C579;
  let C580;
  let C581;
  let C582;
  let C583;
  let C584;
  let C585;
  let C586;
  let C587;
  let C588;
  let C589;
  let C590;
  let C591;
  let C592;
  let C593;
  let C594;
  let C595;
  let C596;
  let C597;
  let C598;
  let C599;
  let C600;
  let C601;
  let C602;
  let C603;
  let C604;
  let C605;
  let C606;
  let C607;
  let C608;
  let C609;
  let C610;
  let C611;
  let C612;
  let C613;
  let C614;
  let C615;
  let C616;
  let C617;
  let C618;
  let C619;
  let C620;
  let C621;
  let C622;
  let C623;
  let C624;
  let C625;
  let C626;
  let C627;
  let C628;
  let C629;
  let C630;
  let C631;
  let C632;
  let C633;
  let C634;
  let C635;
  let C636;
  let C637;
  let C638;
  let C639;
  let C640;
  let C641;
  let C642;
  let C643;
  let C644;
  let C645;
  let C646;
  let C647;
  let C648;
  let C649;
  let C650;
  let C651;
  let C652;
  let C653;
  let C654;
  let C655;
  let C656;
  let C657;
  let C658;
  let C659;
  let C660;
  let C661;
  let C662;
  let C663;
  let C664;
  let C665;
  let C666;
  let C667;
  let C668;
  let C669;
  let C670;
  let C671;
  let C672;
  let C673;
  let C674;
  let C675;
  let C676;
  let C677;
  let C678;
  let C679;
  let C680;
  let C681;
  let C682;
  let C683;
  let C684;
  let C685;
  let C686;
  let C687;
  let C688;
  let C689;
  let C690;
  let C691;
  let C692;
  let C693;
  let C694;
  let C695;
  let C696;
  let C697;
  let C698;
  let C699;
  let C700;
  let C701;
  let C702;
  let C703;
  let C704;
  let C705;
  let C706;
  let C707;
  let C708;
  let C709;
  let C710;
  let C711;
  let C712;
  let C713;
  let C714;
  let C715;
  let C716;
  let C717;
  let C718;
  let C719;
  let C720;
  let C721;
  let C722;
  let C723;
  let C724;
  let C725;
  let C726;
  let C727;
  let C728;
  let C729;
  let C730;
  let C731;
  let C732;
  let C733;
  let C734;
  let C735;
  let C736;
  let C737;
  let C738;
  let C739;
  let C740;
  let C741;
  let C742;
  let C743;
  let C744;
  let C745;
  let C746;
  let C747;
  let C748;
  let C749;
  let C750;
  let C751;
  let C752;
  let C753;
  let C754;
  let C755;
  let C756;
  let C757;
  let C758;
  let C759;
  let C760;
  let C761;
  let C762;
  let C763;
  let C764;
  let C765;
  let C766;
  let C767;
  let C768;
  let C769;
  let C770;
  let C771;
  let C772;
  let C773;
  let C774;
  let C775;
  let C776;
  let C777;
  let C778;
  let C779;
  let C780;
  let C781;
  let C782;
  let C783;
  let C784;
  let C785;
  let C786;
  let C787;
  let C788;
  let C789;
  let C790;
  let C791;
  let C792;
  let C793;
  let C794;
  let C795;
  let C796;
  let C797;
  let C798;
  let C799;
  let C800;
  let C801;
  let C802;
  let C803;
  let C804;
  let C805;
  let C806;
  let C807;
  let C808;
  let C809;
  let C810;
  let C811;
  let C812;
  let C813;
  let C814;
  let C815;
  let C816;
  let C817;
  let C818;
  let C819;
  let C820;
  let C821;
  let C822;
  let C823;
  let C824;
  let C825;
  let C826;
  let C827;
  let C828;
  let C829;
  let C830;
  let C831;
  let C832;
  let C833;
  let C834;
  let C835;
  let C836;
  let C837;
  let C838;
  let C839;
  let C840;
  let C841;
  let C842;
  let C843;
  let C844;
  let C845;
  let C846;
  let C847;
  let C848;
  let C849;
  let C850;
  let C851;
  let C852;
  let C853;
  let C854;
  let C855;
  let C856;
  let C857;
  let C858;
  let C859;
  let C860;
  let C861;
  let C862;
  let C863;
  let C864;
  let C865;
  let C866;
  let C867;
  let C868;
  let C869;
  let C870;
  let C871;
  let C872;
  let C873;
  let C874;
  let C875;
  let C876;
  let C877;
  let C878;
  let C879;
  let C880;
  let C881;
  let C882;
  let C883;
  let C884;
  let C885;
  let C886;
  let C887;
  let C888;
  let C889;
  let C890;
  let C891;
  let C892;
  let C893;
  let C894;
  let C895;
  let C896;
  let C897;
  let C898;
  let C899;
  let C900;
  let C901;
  let C902;
  let C903;
  let C904;
  let C905;
  let C906;
  let C907;
  let C908;
  let C909;
  let C910;
  let C911;
  let C912;
  let C913;
  let C914;
  let C915;
  let C916;
  let C917;
  let C918;
  let C919;
  let C920;
  let C921;
  let C922;
  let C923;
  let C924;
  let C925;
  let C926;
  let C927;
  let C928;
  let C929;
  let C930;
  let C931;
  let C932;
  let C933;
  let C934;
  let C935;
  let C936;
  let C937;
  let C938;
  let C939;
  let C940;
  let C941;
  let C942;
  let C943;
  let C944;
  let C945;
  let C946;
  let C947;
  let C948;
  let C949;
  let C950;
  let C951;
  let C952;
  let C953;
  let C954;
  let C955;
  let C956;
  let C957;
  let C958;
  let C959;
  let C960;
  let C961;
  let C962;
  let C963;
  let C964;
  let C965;
  let C966;
  let C967;
  let C968;
  let C969;
  let C970;
  let C971;
  let C972;
  let C973;
  let C974;
  let C975;
  let C976;
  let C977;
  let C978;
  let C979;
  let C980;
  let C981;
  let C982;
  let C983;
  let C984;
  let C985;
  let C986;
  let C987;
  let C988;
  let C989;
  let C990;
  let C991;
  let C992;
  let C993;
  let C994;
  let C995;
  let C996;
  let C997;
  let C998;
  let C999;
  let C1000;
  let C1001;
  let C1002;
  let C1003;
  let C1004;
  let C1005;
  let C1006;
  let C1007;
  let C1008;
  let C1009;
  let C1010;
  let C1011;
  let C1012;
  let C1013;
  let C1014;
  let C1015;
  let C1016;
  let C1017;
  let C1018;
  let C1019;
  let C1020;
  let C1021;
  let C1022;
  let C1023;
  let C1024;
  let C1025;
  let C1026;
  let C1027;
  let C1028;
  let C1029;
  let C1030;
  let C1031;
  let C1032;
  let C1033;
  let C1034;
  let C1035;
  let C1036;
  let C1037;
  let C1038;
  let C1039;
  let C1040;
  let C1041;
  let C1042;
  let C1043;
  let C1044;
  let C1045;
  let C1046;
  let C1047;
  let C1048;
  let C1049;
  let C1050;
  let C1051;
  let C1052;
  let C1053;
  let C1054;
  let C1055;
  let C1056;
  let C1057;
  let C1058;
  let C1059;
  let C1060;
  let C1061;
  let C1062;
  let C1063;
  let C1064;
  let C1065;
  let C1066;
  let C1067;
  let C1068;
  let C1069;
  let C1070;
  let C1071;
  let C1072;
  let C1073;
  let C1074;
  let C1075;
  let C1076;
  let C1077;
  let C1078;
  let C1079;
  let C1080;
  let C1081;
  let C1082;
  let C1083;
  let C1084;
  let C1085;
  let C1086;
  let C1087;
  let C1088;
  let C1089;
  let C1090;
  let C1091;
  let C1092;
  let C1093;
  let C1094;
  let C1095;
  let C1096;
  let C1097;
  let C1098;
  let C1099;
  let C1100;
  let C1101;
  let C1102;
  let C1103;
  let C1104;
  let C1105;
  let C1106;
  let C1107;
  let C1108;
  let C1109;
  let C1110;
  let C1111;
  let C1112;
  let C1113;
  let C1114;
  let C1115;
  let C1116;
  let C1117;
  let C1118;
  let C1119;
  let C1120;
  let C1121;
  let C1122;
  let C1123;
  let C1124;
  let C1125;
  let C1126;
  let C1127;
  let C1128;
  let C1129;
  let C1130;
  let C1131;
  let C1132;
  let C1133;
  let C1134;
  let C1135;
  let C1136;
  let C1137;
  let C1138;
  let C1139;
  let C1140;
  let C1141;
  let C1142;
  let C1143;
  let C1144;
  let C1145;
  let C1146;
  let C1147;
  let C1148;
  let C1149;
  let C1150;
  let C1151;
  let C1152;
  let C1153;
  let C1154;
  let C1155;
  let C1156;
  let C1157;
  let C1158;
  let C1159;
  let C1160;
  let C1161;
  let C1162;
  let C1163;
  let C1164;
  let C1165;
  let C1166;
  let C1167;
  let C1168;
  let C1169;
  let C1170;
  let C1171;
  let C1172;
  let C1173;
  let C1174;
  let C1175;
  let C1176;
  let C1177;
  let C1178;
  let C1179;
  let C1180;
  let C1181;
  let C1182;
  let C1183;
  let C213;
  let C212;
  dart.defineLazy(engine, {
    /*engine._engineInitialized*/get _engineInitialized() {
      return false;
    },
    set _engineInitialized(_) {},
    /*engine._hotRestartListeners*/get _hotRestartListeners() {
      return JSArrayOfVoidTovoid().of([]);
    },
    /*engine._browserEngine*/get _browserEngine() {
      return null;
    },
    set _browserEngine(_) {},
    /*engine._operatingSystem*/get _operatingSystem() {
      return null;
    },
    set _operatingSystem(_) {},
    /*engine.assetChannel*/get assetChannel() {
      return "flutter/assets";
    },
    /*engine.experimentalUseSkia*/get experimentalUseSkia() {
      return false;
    },
    /*engine.canvasKitBaseUrl*/get canvasKitBaseUrl() {
      return "https://unpkg.com/canvaskit-wasm@0.6.0/bin/";
    },
    /*engine.canvasKit*/get canvasKit() {
      return null;
    },
    set canvasKit(_) {},
    /*engine.skiaFontCollection*/get skiaFontCollection() {
      return null;
    },
    set skiaFontCollection(_) {},
    /*engine._skMatrixIndexToMatrix4Index*/get _skMatrixIndexToMatrix4Index() {
      return C209 || CT.C209;
    },
    /*engine.domRenderer*/get domRenderer() {
      return new engine.DomRenderer.new();
    },
    /*engine._popRouteMethodCall*/get _popRouteMethodCall() {
      return C210 || CT.C210;
    },
    /*engine._originState*/get _originState() {
      return new (IdentityMapOfString$bool()).from(["origin", true]);
    },
    set _originState(_) {},
    /*engine._flutterState*/get _flutterState() {
      return new (IdentityMapOfString$bool()).from(["flutter", true]);
    },
    set _flutterState(_) {},
    /*engine._supportsDecode*/get _supportsDecode() {
      return core.bool._check(js_util.hasProperty(js.JsObject.new(js.JsFunction._check(js.context._get("Image"))), "decode"));
    },
    /*engine._logElement*/get _logElement() {
      return null;
    },
    set _logElement(_) {},
    /*engine._logContainer*/get _logContainer() {
      return null;
    },
    set _logContainer(_) {},
    /*engine._logBuffer*/get _logBuffer() {
      return JSArrayOf_LogMessage().of([]);
    },
    set _logBuffer(_) {},
    /*engine.platformViewRegistry*/get platformViewRegistry() {
      return new engine.PlatformViewRegistry.__();
    },
    /*engine._debugLogPointerEvents*/get _debugLogPointerEvents() {
      return false;
    },
    /*engine._kPrimaryMouseButton*/get _kPrimaryMouseButton() {
      return 1;
    },
    /*engine._kSecondaryMouseButton*/get _kSecondaryMouseButton() {
      return 2;
    },
    /*engine._mouseDeviceId*/get _mouseDeviceId() {
      return -1;
    },
    /*engine._debugDumpPaintCommands*/get _debugDumpPaintCommands() {
      return false;
    },
    /*engine.accessibilityAnnouncements*/get accessibilityAnnouncements() {
      return engine.AccessibilityAnnouncements.instance;
    },
    /*engine._debugShowSemanticsNodes*/get _debugShowSemanticsNodes() {
      return false;
    },
    /*engine._roleFactories*/get _roleFactories() {
      return new (LinkedMapOfRole$SemanticsObjectToRoleManager()).from([engine.Role.incrementable, dart.fn(object => new engine.Incrementable.new(object), SemanticsObjectToIncrementable()), engine.Role.scrollable, dart.fn(object => new engine.Scrollable.new(object), SemanticsObjectToScrollable()), engine.Role.labelAndValue, dart.fn(object => new engine.LabelAndValue.new(object), SemanticsObjectToLabelAndValue()), engine.Role.tappable, dart.fn(object => new engine.Tappable.new(object), SemanticsObjectToTappable()), engine.Role.textField, dart.fn(object => new engine.TextField.new(object), SemanticsObjectToTextField()), engine.Role.checkable, dart.fn(object => new engine.Checkable.new(object), SemanticsObjectToCheckable()), engine.Role.image, dart.fn(object => new engine.ImageRoleManager.new(object), SemanticsObjectToImageRoleManager()), engine.Role.liveRegion, dart.fn(object => new engine.LiveRegion.new(object), SemanticsObjectToLiveRegion())]);
    },
    /*engine._kCanvasCacheSize*/get _kCanvasCacheSize() {
      return 30;
    },
    /*engine._recycledCanvases*/get _recycledCanvases() {
      return JSArrayOfBitmapCanvas().of([]);
    },
    /*engine._paintQueue*/get _paintQueue() {
      return JSArrayOf_PaintRequest().of([]);
    },
    set _paintQueue(_) {},
    /*engine.persistedPictureFactory*/get persistedPictureFactory() {
      return C211 || CT.C211;
    },
    set persistedPictureFactory(_) {},
    /*engine._debugExplainSurfaceStats*/get _debugExplainSurfaceStats() {
      return false;
    },
    /*engine._debugShowCanvasReuseStats*/get _debugShowCanvasReuseStats() {
      return false;
    },
    /*engine.debugShowClipLayers*/get debugShowClipLayers() {
      return false;
    },
    set debugShowClipLayers(_) {},
    /*engine._kScreenPixelRatioWarningThreshold*/get _kScreenPixelRatioWarningThreshold() {
      return 6;
    },
    /*engine._debugFrameNumber*/get _debugFrameNumber() {
      return 1;
    },
    set _debugFrameNumber(_) {},
    /*engine._frameReferences*/get _frameReferences() {
      return JSArrayOfFrameReference().of([]);
    },
    set _frameReferences(_) {},
    /*engine._retainedSurfaces*/get _retainedSurfaces() {
      return JSArrayOfPersistedSurface().of([]);
    },
    set _retainedSurfaces(_) {},
    /*engine._surfaceStats*/get _surfaceStats() {
      return new (LinkedMapOfPersistedSurface$_DebugSurfaceStats()).new();
    },
    set _surfaceStats(_) {},
    /*engine._surfaceStatsTimeline*/get _surfaceStatsTimeline() {
      return JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats().of([]);
    },
    set _surfaceStatsTimeline(_) {},
    /*engine._debugSurfaceStatsOverlayCtx*/get _debugSurfaceStatsOverlayCtx() {
      return null;
    },
    set _debugSurfaceStatsOverlayCtx(_) {},
    /*engine._debugLogHistoryActions*/get _debugLogHistoryActions() {
      return false;
    },
    /*engine._testFontFamily*/get _testFontFamily() {
      return "Ahem";
    },
    /*engine._testFontUrl*/get _testFontUrl() {
      return "packages/flutter_web_ui/assets/Ahem.ttf";
    },
    /*engine._robotoFontUrl*/get _robotoFontUrl() {
      return "packages/flutter_web_ui/assets/Roboto-Regular.ttf";
    },
    /*engine.supportsFontLoadingApi*/get supportsFontLoadingApi() {
      return html.document.fonts != null;
    },
    /*engine._baselineRatioHack*/get _baselineRatioHack() {
      return 1.1662499904632568;
    },
    /*engine._lastStart*/get _lastStart() {
      return -1;
    },
    set _lastStart(_) {},
    /*engine._lastEnd*/get _lastEnd() {
      return -1;
    },
    set _lastEnd(_) {},
    /*engine._lastText*/get _lastText() {
      return "";
    },
    set _lastText(_) {},
    /*engine._lastStyle*/get _lastStyle() {
      return null;
    },
    set _lastStyle(_) {},
    /*engine._lastWidth*/get _lastWidth() {
      return -1.0;
    },
    set _lastWidth(_) {},
    /*engine.lookup*/get lookup() {
      return C212 || CT.C212;
    },
    /*engine._debugVisibleTextEditing*/get _debugVisibleTextEditing() {
      return false;
    },
    /*engine.textEditing*/get textEditing() {
      return new engine.HybridTextEditing.new();
    },
    /*engine._clipIdCounter*/get _clipIdCounter() {
      return 0;
    },
    set _clipIdCounter(_) {},
    /*engine._debugPrintPlatformMessages*/get _debugPrintPlatformMessages() {
      return false;
    },
    /*engine.window*/get window() {
      return new engine.EngineWindow.new();
    }
  });
  let C1184;
  let C1185;
  let C1186;
  let C1187;
  ui.PointMode = class PointMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.PointMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.PointMode.prototype;
  dart.addTypeTests(ui.PointMode);
  dart.setLibraryUri(ui.PointMode, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PointMode, () => ({
    __proto__: dart.getFields(ui.PointMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PointMode, ['toString']);
  ui.PointMode.points = C1184 || CT.C1184;
  ui.PointMode.lines = C1185 || CT.C1185;
  ui.PointMode.polygon = C1186 || CT.C1186;
  ui.PointMode.values = C1187 || CT.C1187;
  let C1188;
  ui.ClipOp = class ClipOp extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.ClipOp.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.ClipOp.prototype;
  dart.addTypeTests(ui.ClipOp);
  dart.setLibraryUri(ui.ClipOp, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.ClipOp, () => ({
    __proto__: dart.getFields(ui.ClipOp.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.ClipOp, ['toString']);
  ui.ClipOp.difference = C51 || CT.C51;
  ui.ClipOp.intersect = C50 || CT.C50;
  ui.ClipOp.values = C1188 || CT.C1188;
  let C1189;
  let C1190;
  let C1191;
  let C1192;
  ui.VertexMode = class VertexMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.VertexMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.VertexMode.prototype;
  dart.addTypeTests(ui.VertexMode);
  dart.setLibraryUri(ui.VertexMode, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.VertexMode, () => ({
    __proto__: dart.getFields(ui.VertexMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.VertexMode, ['toString']);
  ui.VertexMode.triangles = C1189 || CT.C1189;
  ui.VertexMode.triangleStrip = C1190 || CT.C1190;
  ui.VertexMode.triangleFan = C1191 || CT.C1191;
  ui.VertexMode.values = C1192 || CT.C1192;
  ui.Vertices = class Vertices extends core.Object {};
  (ui.Vertices.new = function(mode, positions, opts) {
    let textureCoordinates = opts && 'textureCoordinates' in opts ? opts.textureCoordinates : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let indices = opts && 'indices' in opts ? opts.indices : null;
    if (!(mode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 68, 16, "mode != null");
    if (!(positions != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 69, 16, "positions != null");
    ;
  }).prototype = ui.Vertices.prototype;
  (ui.Vertices.raw = function(mode, positions, opts) {
    let textureCoordinates = opts && 'textureCoordinates' in opts ? opts.textureCoordinates : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let indices = opts && 'indices' in opts ? opts.indices : null;
    if (!(mode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 77, 16, "mode != null");
    if (!(positions != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 78, 16, "positions != null");
    ;
  }).prototype = ui.Vertices.prototype;
  dart.addTypeTests(ui.Vertices);
  dart.setLibraryUri(ui.Vertices, "package:flutter_web_ui/ui.dart");
  const PictureRecorder_cullRect = dart.privateName(ui, "PictureRecorder.cullRect");
  ui.PictureRecorder = class PictureRecorder extends core.Object {
    get cullRect() {
      return this[cullRect$0];
    }
    set cullRect(value) {
      this[cullRect$0] = value;
    }
    static new() {
      if (false) {
        return new engine.SkPictureRecorder.new();
      } else {
        return new ui.PictureRecorder.__();
      }
    }
    beginRecording(bounds) {
      if (!!dart.test(this[_isRecording$])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 104, 12, "!_isRecording");
      this.cullRect = bounds;
      this[_isRecording$] = true;
      this[_canvas$] = new engine.RecordingCanvas.new(this.cullRect);
      return this[_canvas$];
    }
    get isRecording() {
      return this[_isRecording$];
    }
    endRecording() {
      if (!dart.test(this[_isRecording$])) {
        return null;
      }
      this[_isRecording$] = false;
      return new ui.Picture.__(this[_canvas$], this.cullRect);
    }
  };
  (ui.PictureRecorder.__ = function() {
    this[_canvas$] = null;
    this[cullRect$0] = null;
    this[_isRecording$] = false;
    ;
  }).prototype = ui.PictureRecorder.prototype;
  dart.addTypeTests(ui.PictureRecorder);
  const cullRect$0 = PictureRecorder_cullRect;
  dart.setMethodSignature(ui.PictureRecorder, () => ({
    __proto__: dart.getMethods(ui.PictureRecorder.__proto__),
    beginRecording: dart.fnType(engine.RecordingCanvas, [ui.Rect]),
    endRecording: dart.fnType(ui.Picture, [])
  }));
  dart.setGetterSignature(ui.PictureRecorder, () => ({
    __proto__: dart.getGetters(ui.PictureRecorder.__proto__),
    isRecording: core.bool
  }));
  dart.setLibraryUri(ui.PictureRecorder, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PictureRecorder, () => ({
    __proto__: dart.getFields(ui.PictureRecorder.__proto__),
    [_canvas$]: dart.fieldType(engine.RecordingCanvas),
    cullRect: dart.fieldType(ui.Rect),
    [_isRecording$]: dart.fieldType(core.bool)
  }));
  const _saveLayerWithoutBounds = dart.privateName(ui, "_saveLayerWithoutBounds");
  const _saveLayer = dart.privateName(ui, "_saveLayer");
  const _scale = dart.privateName(ui, "_scale");
  const _transform = dart.privateName(ui, "_transform");
  const _clipRect = dart.privateName(ui, "_clipRect");
  const _clipRRect = dart.privateName(ui, "_clipRRect");
  const _clipPath = dart.privateName(ui, "_clipPath");
  const _drawColor = dart.privateName(ui, "_drawColor");
  const _drawLine = dart.privateName(ui, "_drawLine");
  const _drawPaint = dart.privateName(ui, "_drawPaint");
  const _drawRect = dart.privateName(ui, "_drawRect");
  const _drawRRect = dart.privateName(ui, "_drawRRect");
  const _drawDRRect = dart.privateName(ui, "_drawDRRect");
  const _drawOval = dart.privateName(ui, "_drawOval");
  const _drawCircle = dart.privateName(ui, "_drawCircle");
  const _drawPath = dart.privateName(ui, "_drawPath");
  const _drawImage = dart.privateName(ui, "_drawImage");
  const _drawImageRect = dart.privateName(ui, "_drawImageRect");
  const _drawParagraph = dart.privateName(ui, "_drawParagraph");
  ui.Canvas = class Canvas extends core.Object {
    save() {
      this[_canvas$].save();
    }
    saveLayer(bounds, paint) {
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 301, 12, "paint != null");
      if (bounds == null) {
        this[_saveLayerWithoutBounds](paint);
      } else {
        if (!dart.test(engine.rectIsValid(bounds))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 305, 14, "engine.rectIsValid(bounds)");
        this[_saveLayer](bounds, paint);
      }
    }
    [_saveLayerWithoutBounds](paint) {
      this[_canvas$].saveLayerWithoutBounds(paint);
    }
    [_saveLayer](bounds, paint) {
      this[_canvas$].saveLayer(bounds, paint);
    }
    restore() {
      this[_canvas$].restore();
    }
    getSaveCount() {
      return this[_canvas$].saveCount;
    }
    translate(dx, dy) {
      this[_canvas$].translate(dx, dy);
    }
    scale(sx, sy) {
      let t8;
      if (sy === void 0) sy = null;
      return this[_scale](sx, (t8 = sy, t8 == null ? sx : t8));
    }
    [_scale](sx, sy) {
      this[_canvas$].scale(sx, sy);
    }
    rotate(radians) {
      this[_canvas$].rotate(radians);
    }
    skew(sx, sy) {
      this[_canvas$].skew(sx, sy);
    }
    transform(matrix4) {
      if (!(matrix4 != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 371, 12, "t(matrix4 != nu");
      if (matrix4[$length] !== 16) {
        dart.throw(new core.ArgumentError.new("\"matrix4\" must have 16 entries."));
      }
      this[_transform](matrix4);
    }
    [_transform](matrix4) {
      this[_canvas$].transform(matrix4);
    }
    clipRect(rect, opts) {
      let clipOp = opts && 'clipOp' in opts ? opts.clipOp : C50 || CT.C50;
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (!dart.test(engine.rectIsValid(rect))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 395, 12, "t(engine.rectIsValid(rec");
      if (!(clipOp != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 396, 12, "t(clipOp != nu");
      if (!(doAntiAlias != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 397, 12, "t(doAntiAlias != nu");
      this[_clipRect](rect, clipOp, doAntiAlias);
    }
    [_clipRect](rect, clipOp, doAntiAlias) {
      this[_canvas$].clipRect(rect);
    }
    clipRRect(rrect, opts) {
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (!dart.test(engine.rrectIsValid(rrect))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 414, 12, "t(engine.rrectIsValid(rrec");
      if (!(doAntiAlias != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 415, 12, "t(doAntiAlias != nu");
      this[_clipRRect](rrect, doAntiAlias);
    }
    [_clipRRect](rrect, doAntiAlias) {
      this[_canvas$].clipRRect(rrect);
    }
    clipPath(path, opts) {
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (!(path != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 433, 12, "t(path != nu");
      if (!(doAntiAlias != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 434, 12, "t(doAntiAlias != nu");
      this[_clipPath](path, doAntiAlias);
    }
    [_clipPath](path, doAntiAlias) {
      this[_canvas$].clipPath(path, {doAntiAlias: doAntiAlias});
    }
    drawColor(color, blendMode) {
      if (!(color != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 446, 12, "t(color != nu");
      if (!(blendMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 447, 12, "t(blendMode != nu");
      this[_drawColor](color, blendMode);
    }
    [_drawColor](color, blendMode) {
      this[_canvas$].drawColor(color, blendMode);
    }
    drawLine(p1, p2, paint) {
      if (!dart.test(engine.offsetIsValid(p1))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 460, 12, "t(engine.offsetIsValid(p");
      if (!dart.test(engine.offsetIsValid(p2))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 461, 12, "t(engine.offsetIsValid(p");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 462, 12, "t(paint != nu");
      this[_drawLine](p1, p2, paint);
    }
    [_drawLine](p1, p2, paint) {
      this[_canvas$].drawLine(p1, p2, paint);
    }
    drawPaint(paint) {
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 475, 12, "t(paint != nu");
      this[_drawPaint](paint);
    }
    [_drawPaint](paint) {
      this[_canvas$].drawPaint(paint);
    }
    drawRect(rect, paint) {
      if (!dart.test(engine.rectIsValid(rect))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 486, 12, "t(engine.rectIsValid(rec");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 487, 12, "t(paint != nu");
      this[_drawRect](rect, paint);
    }
    [_drawRect](rect, paint) {
      this[_canvas$].drawRect(rect, paint);
    }
    drawRRect(rrect, paint) {
      if (!dart.test(engine.rrectIsValid(rrect))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 498, 12, "t(engine.rrectIsValid(rrec");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 499, 12, "t(paint != nu");
      this[_drawRRect](rrect, paint);
    }
    [_drawRRect](rrect, paint) {
      this[_canvas$].drawRRect(rrect, paint);
    }
    drawDRRect(outer, inner, paint) {
      if (!dart.test(engine.rrectIsValid(outer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 513, 12, "t(engine.rrectIsValid(oute");
      if (!dart.test(engine.rrectIsValid(inner))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 514, 12, "t(engine.rrectIsValid(inne");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 515, 12, "t(paint != nu");
      this[_drawDRRect](outer, inner, paint);
    }
    [_drawDRRect](outer, inner, paint) {
      this[_canvas$].drawDRRect(outer, inner, paint);
    }
    drawOval(rect, paint) {
      if (!dart.test(engine.rectIsValid(rect))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 527, 12, "t(engine.rectIsValid(rec");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 528, 12, "t(paint != nu");
      this[_drawOval](rect, paint);
    }
    [_drawOval](rect, paint) {
      this[_canvas$].drawOval(rect, paint);
    }
    drawCircle(c, radius, paint) {
      if (!dart.test(engine.offsetIsValid(c))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 541, 12, "t(engine.offsetIsValid(");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 542, 12, "t(paint != nu");
      this[_drawCircle](c, radius, paint);
    }
    [_drawCircle](c, radius, paint) {
      this[_canvas$].drawCircle(c, radius, paint);
    }
    drawArc(rect, startAngle, sweepAngle, useCenter, paint) {
      if (!dart.test(engine.rectIsValid(rect))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 562, 12, "t(engine.rectIsValid(rec");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 563, 12, "t(paint != nu");
      let path = ui.Path.new();
      if (dart.test(useCenter)) {
        path.moveTo((dart.notNull(rect.left) + dart.notNull(rect.right)) / 2.0, (dart.notNull(rect.top) + dart.notNull(rect.bottom)) / 2.0);
      }
      let forceMoveTo = !dart.test(useCenter);
      if (dart.notNull(sweepAngle) <= -6.283185307179586) {
        path.arcTo(rect, startAngle, -3.141592653589793, forceMoveTo);
        startAngle = dart.notNull(startAngle) - 3.141592653589793;
        path.arcTo(rect, startAngle, -3.141592653589793, false);
        startAngle = dart.notNull(startAngle) - 3.141592653589793;
        forceMoveTo = false;
        sweepAngle = dart.notNull(sweepAngle) + 6.283185307179586;
      }
      while (dart.notNull(sweepAngle) >= 6.283185307179586) {
        path.arcTo(rect, startAngle, 3.141592653589793, forceMoveTo);
        startAngle = dart.notNull(startAngle) + 3.141592653589793;
        path.arcTo(rect, startAngle, 3.141592653589793, false);
        startAngle = dart.notNull(startAngle) + 3.141592653589793;
        forceMoveTo = false;
        sweepAngle = dart.notNull(sweepAngle) - 6.283185307179586;
      }
      path.arcTo(rect, startAngle, sweepAngle, forceMoveTo);
      if (dart.test(useCenter)) {
        path.close();
      }
      this[_canvas$].drawPath(path, paint);
    }
    drawPath(path, paint) {
      if (!(path != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 600, 12, "t(path != nu");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 601, 12, "t(paint != nu");
      this[_drawPath](path, paint);
    }
    [_drawPath](path, paint) {
      this[_canvas$].drawPath(path, paint);
    }
    drawImage(image, p, paint) {
      if (!(image != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 612, 12, "t(image != nu");
      if (!dart.test(engine.offsetIsValid(p))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 613, 12, "t(engine.offsetIsValid(");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 614, 12, "t(paint != nu");
      this[_drawImage](image, p, paint);
    }
    [_drawImage](image, p, paint) {
      this[_canvas$].drawImage(image, p, paint);
    }
    drawImageRect(image, src, dst, paint) {
      if (!(image != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 632, 12, "t(image != nu");
      if (!dart.test(engine.rectIsValid(src))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 633, 12, "t(engine.rectIsValid(sr");
      if (!dart.test(engine.rectIsValid(dst))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 634, 12, "t(engine.rectIsValid(ds");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 635, 12, "t(paint != nu");
      this[_drawImageRect](image, src, dst, paint);
    }
    [_drawImageRect](image, src, dst, paint) {
      this[_canvas$].drawImageRect(image, src, dst, paint);
    }
    drawImageNine(image, center, dst, paint) {
      if (!(image != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 657, 12, "t(image != nu");
      if (!dart.test(engine.rectIsValid(center))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 658, 12, "t(engine.rectIsValid(cente");
      if (!dart.test(engine.rectIsValid(dst))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 659, 12, "t(engine.rectIsValid(ds");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 660, 12, "t(paint != nu");
      if (!(dart.notNull(image.width) - dart.notNull(center.width) >= dart.notNull(dst.width))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 663, 12, "t(image.width - center.width >= dst.wid");
      if (!(dart.notNull(image.height) - dart.notNull(center.height) >= dart.notNull(dst.height))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 664, 12, "t(image.height - center.height >= dst.heig");
      let srcTopLeft = new ui.Rect.fromLTWH(0.0, 0.0, center.left, center.top);
      let srcTopRight = new ui.Rect.fromLTWH(center.right, 0.0, dart.notNull(image.width) - dart.notNull(center.right), center.top);
      let srcBottomLeft = new ui.Rect.fromLTWH(0.0, center.bottom, center.left, dart.notNull(image.height) - dart.notNull(center.bottom));
      let srcBottomRight = new ui.Rect.fromLTWH(center.right, center.bottom, dart.notNull(image.width) - dart.notNull(center.right), dart.notNull(image.height) - dart.notNull(center.bottom));
      let dstTopLeft = srcTopLeft.shift(dst.topLeft);
      let dstCenter = new ui.Rect.fromLTWH(dstTopLeft.right, dstTopLeft.bottom, dart.notNull(dst.width) - (dart.notNull(srcTopLeft.width) + dart.notNull(srcTopRight.width)), dart.notNull(dst.height) - (dart.notNull(srcTopLeft.height) + dart.notNull(srcBottomLeft.height)));
      this.drawImageRect(image, srcTopLeft, dstTopLeft, paint);
      let dstTopRight = new ui.Rect.fromLTWH(dstCenter.right, dst.top, srcTopRight.width, srcTopRight.height);
      this.drawImageRect(image, srcTopRight, dstTopRight, paint);
      let dstBottomLeft = new ui.Rect.fromLTWH(dst.left, dstCenter.bottom, srcBottomLeft.width, srcBottomLeft.height);
      this.drawImageRect(image, srcBottomLeft, dstBottomLeft, paint);
      let dstBottomRight = new ui.Rect.fromLTWH(dstCenter.right, dstCenter.bottom, srcBottomRight.width, srcBottomRight.height);
      this.drawImageRect(image, srcBottomRight, dstBottomRight, paint);
      this.drawImageRect(image, new ui.Rect.fromLTRB(srcTopLeft.right, srcTopLeft.top, srcTopRight.left, srcTopRight.bottom), new ui.Rect.fromLTRB(dstTopLeft.right, dstTopLeft.top, dstTopRight.left, dstTopRight.bottom), paint);
      this.drawImageRect(image, new ui.Rect.fromLTRB(srcTopLeft.left, srcTopLeft.bottom, srcBottomLeft.right, srcBottomLeft.top), new ui.Rect.fromLTRB(dstTopLeft.left, dstTopLeft.bottom, dstBottomLeft.right, dstBottomLeft.top), paint);
      this.drawImageRect(image, center, dstCenter, paint);
      this.drawImageRect(image, new ui.Rect.fromLTRB(srcTopRight.left, srcTopRight.bottom, srcBottomRight.right, srcBottomRight.top), new ui.Rect.fromLTRB(dstTopRight.left, dstTopRight.bottom, dstBottomRight.right, dstBottomRight.top), paint);
      this.drawImageRect(image, new ui.Rect.fromLTRB(srcBottomLeft.right, srcBottomLeft.top, srcBottomRight.left, srcBottomRight.bottom), new ui.Rect.fromLTRB(dstBottomLeft.right, dstBottomLeft.top, dstBottomRight.left, dstBottomRight.bottom), paint);
    }
    drawPicture(picture) {
      if (!(picture != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 807, 12, "t(picture != nu");
      dart.throw(new core.UnimplementedError.new());
    }
    drawParagraph(paragraph, offset) {
      if (!(paragraph != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 833, 12, "t(paragraph != nu");
      if (!dart.test(engine.offsetIsValid(offset))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 834, 12, "t(engine.offsetIsValid(offse");
      this[_drawParagraph](paragraph, offset);
    }
    [_drawParagraph](paragraph, offset) {
      this[_canvas$].drawParagraph(paragraph, offset);
    }
    drawPoints(pointMode, points, paint) {
      if (!(pointMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 851, 12, "t(pointMode != nu");
      if (!(points != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 852, 12, "t(points != nu");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 853, 12, "t(paint != nu");
      dart.throw(new core.UnimplementedError.new());
    }
    drawRawPoints(pointMode, points, paint) {
      if (!(pointMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 867, 12, "t(pointMode != nu");
      if (!(points != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 868, 12, "t(points != nu");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 869, 12, "t(paint != nu");
      if (points[$length][$modulo](2) !== 0) {
        dart.throw(new core.ArgumentError.new("\"points\" must have an even number of values."));
      }
      dart.throw(new core.UnimplementedError.new());
    }
    drawVertices(vertices, blendMode, paint) {
      if (!(vertices != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 877, 12, "t(vertices != nu");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 878, 12, "t(paint != nu");
      if (!(blendMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 879, 12, "t(blendMode != nu");
      dart.throw(new core.UnimplementedError.new());
    }
    drawAtlas(atlas, transforms, rects, colors, blendMode, cullRect, paint) {
      if (!(atlas != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 890, 12, "t(atlas != nu");
      if (!(transforms != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 891, 12, "t(transforms != nu");
      if (!(rects != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 892, 12, "t(rects != nu");
      if (!(colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 893, 12, "t(colors != nu");
      if (!(blendMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 894, 12, "t(blendMode != nu");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 895, 12, "t(paint != nu");
      let rectCount = rects[$length];
      if (transforms[$length] != rectCount) {
        dart.throw(new core.ArgumentError.new("\"transforms\" and \"rects\" lengths must match."));
      }
      if (dart.test(colors[$isNotEmpty]) && colors[$length] != rectCount) {
        dart.throw(new core.ArgumentError.new("If non-null, \"colors\" length must match that of \"transforms\" and \"rects\"."));
      }
      dart.throw(new core.UnimplementedError.new());
    }
    drawRawAtlas(atlas, rstTransforms, rects, colors, blendMode, cullRect, paint) {
      if (!(atlas != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 927, 12, "t(atlas != nu");
      if (!(rstTransforms != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 928, 12, "t(rstTransforms != nu");
      if (!(rects != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 929, 12, "t(rects != nu");
      if (!(colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 930, 12, "t(colors != nu");
      if (!(blendMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 931, 12, "t(blendMode != nu");
      if (!(paint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 932, 12, "t(paint != nu");
      let rectCount = rects[$length];
      if (rstTransforms[$length] != rectCount) {
        dart.throw(new core.ArgumentError.new("\"rstTransforms\" and \"rects\" lengths must match."));
      }
      if (rectCount[$modulo](4) !== 0) {
        dart.throw(new core.ArgumentError.new("\"rstTransforms\" and \"rects\" lengths must be a multiple of four."));
      }
      if (colors != null && dart.notNull(colors[$length]) * 4 !== rectCount) {
        dart.throw(new core.ArgumentError.new("If non-null, \"colors\" length must be one fourth the length of \"rstTransforms\" and \"rects\"."));
      }
      dart.throw(new core.UnimplementedError.new());
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      if (!(path != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 959, 12, "t(path != nu");
      if (!(color != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 960, 12, "t(color != nu");
      if (!(transparentOccluder != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 961, 12, "t(transparentOccluder != nu");
      this[_canvas$].drawShadow(path, color, elevation, transparentOccluder);
    }
  };
  (ui.Canvas.new = function(recorder, cullRect) {
    if (cullRect === void 0) cullRect = null;
    this[_canvas$] = null;
    if (!(recorder != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 170, 62, "recorder != null");
    if (dart.test(recorder.isRecording)) {
      dart.throw(new core.ArgumentError.new("\"recorder\" must not already be associated with another Canvas."));
    }
    cullRect == null ? cullRect = ui.Rect.largest : null;
    this[_canvas$] = recorder.beginRecording(cullRect);
  }).prototype = ui.Canvas.prototype;
  dart.addTypeTests(ui.Canvas);
  dart.setMethodSignature(ui.Canvas, () => ({
    __proto__: dart.getMethods(ui.Canvas.__proto__),
    save: dart.fnType(dart.void, []),
    saveLayer: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    [_saveLayerWithoutBounds]: dart.fnType(dart.void, [ui.Paint]),
    [_saveLayer]: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    restore: dart.fnType(dart.void, []),
    getSaveCount: dart.fnType(core.int, []),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double], [core.double]),
    [_scale]: dart.fnType(dart.void, [core.double, core.double]),
    rotate: dart.fnType(dart.void, [core.double]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    [_transform]: dart.fnType(dart.void, [typed_data.Float64List]),
    clipRect: dart.fnType(dart.void, [ui.Rect], {clipOp: ui.ClipOp, doAntiAlias: core.bool}),
    [_clipRect]: dart.fnType(dart.void, [ui.Rect, ui.ClipOp, core.bool]),
    clipRRect: dart.fnType(dart.void, [ui.RRect], {doAntiAlias: core.bool}),
    [_clipRRect]: dart.fnType(dart.void, [ui.RRect, core.bool]),
    clipPath: dart.fnType(dart.void, [ui.Path], {doAntiAlias: core.bool}),
    [_clipPath]: dart.fnType(dart.void, [ui.Path, core.bool]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    [_drawColor]: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint]),
    [_drawLine]: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint]),
    drawPaint: dart.fnType(dart.void, [ui.Paint]),
    [_drawPaint]: dart.fnType(dart.void, [ui.Paint]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    [_drawRect]: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.Paint]),
    [_drawRRect]: dart.fnType(dart.void, [ui.RRect, ui.Paint]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.Paint]),
    [_drawDRRect]: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.Paint]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    [_drawOval]: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.Paint]),
    [_drawCircle]: dart.fnType(dart.void, [ui.Offset, core.double, ui.Paint]),
    drawArc: dart.fnType(dart.void, [ui.Rect, core.double, core.double, core.bool, ui.Paint]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    [_drawPath]: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.Paint]),
    [_drawImage]: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.Paint]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    [_drawImageRect]: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    drawImageNine: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    drawPicture: dart.fnType(dart.void, [ui.Picture]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset]),
    [_drawParagraph]: dart.fnType(dart.void, [ui.Paragraph, ui.Offset]),
    drawPoints: dart.fnType(dart.void, [ui.PointMode, core.List$(ui.Offset), ui.Paint]),
    drawRawPoints: dart.fnType(dart.void, [ui.PointMode, typed_data.Float32List, ui.Paint]),
    drawVertices: dart.fnType(dart.void, [ui.Vertices, ui.BlendMode, ui.Paint]),
    drawAtlas: dart.fnType(dart.void, [ui.Image, core.List$(ui.RSTransform), core.List$(ui.Rect), core.List$(ui.Color), ui.BlendMode, ui.Rect, ui.Paint]),
    drawRawAtlas: dart.fnType(dart.void, [ui.Image, typed_data.Float32List, typed_data.Float32List, typed_data.Int32List, ui.BlendMode, ui.Rect, ui.Paint]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool])
  }));
  dart.setLibraryUri(ui.Canvas, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Canvas, () => ({
    __proto__: dart.getFields(ui.Canvas.__proto__),
    [_canvas$]: dart.fieldType(engine.RecordingCanvas)
  }));
  const Picture_recordingCanvas = dart.privateName(ui, "Picture.recordingCanvas");
  const Picture_cullRect = dart.privateName(ui, "Picture.cullRect");
  ui.Picture = class Picture extends core.Object {
    get recordingCanvas() {
      return this[recordingCanvas$];
    }
    set recordingCanvas(value) {
      super.recordingCanvas = value;
    }
    get cullRect() {
      return this[cullRect$1];
    }
    set cullRect(value) {
      super.cullRect = value;
    }
    toImage(width, height) {
      return null;
    }
    dispose() {
    }
    get approximateBytesUsed() {
      return 0;
    }
  };
  (ui.Picture.__ = function(recordingCanvas, cullRect) {
    this[recordingCanvas$] = recordingCanvas;
    this[cullRect$1] = cullRect;
    ;
  }).prototype = ui.Picture.prototype;
  dart.addTypeTests(ui.Picture);
  const recordingCanvas$ = Picture_recordingCanvas;
  const cullRect$1 = Picture_cullRect;
  dart.setMethodSignature(ui.Picture, () => ({
    __proto__: dart.getMethods(ui.Picture.__proto__),
    toImage: dart.fnType(async.Future$(ui.Image), [core.int, core.int]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ui.Picture, () => ({
    __proto__: dart.getGetters(ui.Picture.__proto__),
    approximateBytesUsed: core.int
  }));
  dart.setLibraryUri(ui.Picture, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Picture, () => ({
    __proto__: dart.getFields(ui.Picture.__proto__),
    recordingCanvas: dart.finalFieldType(engine.RecordingCanvas),
    cullRect: dart.finalFieldType(ui.Rect)
  }));
  let C1193;
  ui.PathFillType = class PathFillType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.PathFillType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.PathFillType.prototype;
  dart.addTypeTests(ui.PathFillType);
  dart.setLibraryUri(ui.PathFillType, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PathFillType, () => ({
    __proto__: dart.getFields(ui.PathFillType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PathFillType, ['toString']);
  ui.PathFillType.nonZero = C32 || CT.C32;
  ui.PathFillType.evenOdd = C33 || CT.C33;
  ui.PathFillType.values = C1193 || CT.C1193;
  let C1194;
  let C1195;
  let C1196;
  let C1197;
  let C1198;
  let C1199;
  ui.PathOperation = class PathOperation extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.PathOperation.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.PathOperation.prototype;
  dart.addTypeTests(ui.PathOperation);
  dart.setLibraryUri(ui.PathOperation, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PathOperation, () => ({
    __proto__: dart.getFields(ui.PathOperation.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PathOperation, ['toString']);
  ui.PathOperation.difference = C1194 || CT.C1194;
  ui.PathOperation.intersect = C1195 || CT.C1195;
  ui.PathOperation.union = C1196 || CT.C1196;
  ui.PathOperation.xor = C1197 || CT.C1197;
  ui.PathOperation.reverseDifference = C1198 || CT.C1198;
  ui.PathOperation.values = C1199 || CT.C1199;
  let C1200;
  const Color__value = dart.privateName(ui, "Color._value");
  let C1201;
  const Path_subpaths = dart.privateName(ui, "Path.subpaths");
  const Path_fillType = dart.privateName(ui, "Path.fillType");
  ui.Path = class Path extends core.Object {
    get subpaths() {
      return this[subpaths$];
    }
    set subpaths(value) {
      super.subpaths = value;
    }
    get fillType() {
      return this[fillType$];
    }
    set fillType(value) {
      this[fillType$] = value;
    }
    get [_currentSubpath$]() {
      return dart.test(this.subpaths[$isEmpty]) ? null : this.subpaths[$last];
    }
    get [_commands$]() {
      let t8;
      t8 = this[_currentSubpath$];
      return t8 == null ? null : t8.commands;
    }
    get [_currentX$]() {
      let t8, t8$;
      t8$ = (t8 = this[_currentSubpath$], t8 == null ? null : t8.currentX);
      return t8$ == null ? 0.0 : t8$;
    }
    get [_currentY$]() {
      let t8, t8$;
      t8$ = (t8 = this[_currentSubpath$], t8 == null ? null : t8.currentY);
      return t8$ == null ? 0.0 : t8$;
    }
    static new() {
      if (false) {
        return new engine.SkPath.new();
      } else {
        return new ui.Path.__();
      }
    }
    [_openNewSubpath$](x, y) {
      this.subpaths[$add](new engine.Subpath.new(x, y));
      this[_setCurrentPoint$](x, y);
    }
    [_setCurrentPoint$](x, y) {
      this[_currentSubpath$].currentX = x;
      this[_currentSubpath$].currentY = y;
    }
    moveTo(x, y) {
      this[_openNewSubpath$](x, y);
      this[_commands$][$add](new engine.MoveTo.new(x, y));
    }
    relativeMoveTo(dx, dy) {
      let newX = dart.notNull(this[_currentX$]) + dart.notNull(dx);
      let newY = dart.notNull(this[_currentY$]) + dart.notNull(dy);
      this[_openNewSubpath$](newX, newY);
      this[_commands$][$add](new engine.MoveTo.new(newX, newY));
    }
    lineTo(x, y) {
      if (dart.test(this.subpaths[$isEmpty])) {
        this.moveTo(0.0, 0.0);
      }
      this[_commands$][$add](new engine.LineTo.new(x, y));
      this[_setCurrentPoint$](x, y);
    }
    relativeLineTo(dx, dy) {
      let newX = dart.notNull(this[_currentX$]) + dart.notNull(dx);
      let newY = dart.notNull(this[_currentY$]) + dart.notNull(dy);
      if (dart.test(this.subpaths[$isEmpty])) {
        this.moveTo(0.0, 0.0);
      }
      this[_commands$][$add](new engine.LineTo.new(newX, newY));
      this[_setCurrentPoint$](newX, newY);
    }
    [_ensurePathStarted$]() {
      if (dart.test(this.subpaths[$isEmpty])) {
        this.subpaths[$add](new engine.Subpath.new(0.0, 0.0));
      }
    }
    quadraticBezierTo(x1, y1, x2, y2) {
      this[_ensurePathStarted$]();
      this[_commands$][$add](new engine.QuadraticCurveTo.new(x1, y1, x2, y2));
      this[_setCurrentPoint$](x2, y2);
    }
    relativeQuadraticBezierTo(x1, y1, x2, y2) {
      this[_ensurePathStarted$]();
      this[_commands$][$add](new engine.QuadraticCurveTo.new(dart.notNull(x1) + dart.notNull(this[_currentX$]), dart.notNull(y1) + dart.notNull(this[_currentY$]), dart.notNull(x2) + dart.notNull(this[_currentX$]), dart.notNull(y2) + dart.notNull(this[_currentY$])));
      this[_setCurrentPoint$](dart.notNull(x2) + dart.notNull(this[_currentX$]), dart.notNull(y2) + dart.notNull(this[_currentY$]));
    }
    cubicTo(x1, y1, x2, y2, x3, y3) {
      this[_ensurePathStarted$]();
      this[_commands$][$add](new engine.BezierCurveTo.new(x1, y1, x2, y2, x3, y3));
      this[_setCurrentPoint$](x3, y3);
    }
    relativeCubicTo(x1, y1, x2, y2, x3, y3) {
      this[_ensurePathStarted$]();
      this[_commands$][$add](new engine.BezierCurveTo.new(dart.notNull(x1) + dart.notNull(this[_currentX$]), dart.notNull(y1) + dart.notNull(this[_currentY$]), dart.notNull(x2) + dart.notNull(this[_currentX$]), dart.notNull(y2) + dart.notNull(this[_currentY$]), dart.notNull(x3) + dart.notNull(this[_currentX$]), dart.notNull(y3) + dart.notNull(this[_currentY$])));
      this[_setCurrentPoint$](dart.notNull(x3) + dart.notNull(this[_currentX$]), dart.notNull(y3) + dart.notNull(this[_currentY$]));
    }
    conicTo(x1, y1, x2, y2, w) {
      let quads = new engine.Conic.new(this[_currentX$], this[_currentY$], x1, y1, x2, y2, w).toQuads();
      let len = quads[$length];
      for (let i = 1; i < dart.notNull(len); i = i + 2) {
        this.quadraticBezierTo(quads[$_get](i).dx, quads[$_get](i).dy, quads[$_get](i + 1).dx, quads[$_get](i + 1).dy);
      }
    }
    relativeConicTo(x1, y1, x2, y2, w) {
      this.conicTo(dart.notNull(this[_currentX$]) + dart.notNull(x1), dart.notNull(this[_currentY$]) + dart.notNull(y1), dart.notNull(this[_currentX$]) + dart.notNull(x2), dart.notNull(this[_currentY$]) + dart.notNull(y2), w);
    }
    arcTo(rect, startAngle, sweepAngle, forceMoveTo) {
      if (!dart.test(engine.rectIsValid(rect))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1285, 12, "t(engine.rectIsValid(rec");
      let center = rect.center;
      let radiusX = dart.notNull(rect.width) / 2;
      let radiusY = dart.notNull(rect.height) / 2;
      let startX = radiusX * math.cos(startAngle) + dart.notNull(center.dx);
      let startY = radiusY * math.sin(startAngle) + dart.notNull(center.dy);
      if (dart.test(forceMoveTo)) {
        this[_openNewSubpath$](startX, startY);
      } else {
        this.lineTo(startX, startY);
      }
      this[_commands$][$add](new engine.Ellipse.new(center.dx, center.dy, radiusX, radiusY, 0.0, startAngle, dart.notNull(startAngle) + dart.notNull(sweepAngle), sweepAngle[$isNegative]));
      this[_setCurrentPoint$](radiusX * math.cos(dart.notNull(startAngle) + dart.notNull(sweepAngle)) + dart.notNull(center.dx), radiusY * math.sin(dart.notNull(startAngle) + dart.notNull(sweepAngle)) + dart.notNull(center.dy));
    }
    arcToPoint(arcEnd, opts) {
      let radius = opts && 'radius' in opts ? opts.radius : C34 || CT.C34;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 0;
      let largeArc = opts && 'largeArc' in opts ? opts.largeArc : false;
      let clockwise = opts && 'clockwise' in opts ? opts.clockwise : true;
      if (!dart.test(engine.offsetIsValid(arcEnd))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1325, 12, "t(engine.offsetIsValid(arcEn");
      if (!dart.test(engine.radiusIsValid(radius))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1326, 12, "t(engine.radiusIsValid(radiu");
      let rx = radius.x[$abs]();
      let ry = radius.y[$abs]();
      let isSamePoint = this[_currentX$] == arcEnd.dx && this[_currentY$] == arcEnd.dy;
      if (isSamePoint || rx[$toInt]() === 0 || ry[$toInt]() === 0) {
        this[_commands$][$add](new engine.LineTo.new(arcEnd.dx, arcEnd.dy));
        this[_setCurrentPoint$](arcEnd.dx, arcEnd.dy);
        return;
      }
      let midPointX = (dart.notNull(this[_currentX$]) - dart.notNull(arcEnd.dx)) / 2.0;
      let midPointY = (dart.notNull(this[_currentY$]) - dart.notNull(arcEnd.dy)) / 2.0;
      let xAxisRotation = 3.141592653589793 * dart.notNull(rotation) / 180.0;
      let cosXAxisRotation = math.cos(xAxisRotation);
      let sinXAxisRotation = math.sin(xAxisRotation);
      let xPrime = cosXAxisRotation * midPointX + sinXAxisRotation * midPointY;
      let yPrime = -sinXAxisRotation * midPointX + cosXAxisRotation * midPointY;
      let rxSquare = rx * rx;
      let rySquare = ry * ry;
      let xPrimeSquare = xPrime * xPrime;
      let yPrimeSquare = yPrime * yPrime;
      let radiiScale = xPrimeSquare / rxSquare + yPrimeSquare / rySquare;
      if (radiiScale > 1) {
        radiiScale = math.sqrt(radiiScale);
        rx = rx * radiiScale;
        ry = ry * radiiScale;
        rxSquare = rx * rx;
        rySquare = ry * ry;
      }
      let distanceSquare = rxSquare * yPrimeSquare + rySquare * xPrimeSquare;
      let cNumerator = rxSquare * rySquare - distanceSquare;
      let scaleFactor = math.sqrt(math.max(core.num, cNumerator / distanceSquare, 0.0));
      if (dart.equals(largeArc, clockwise)) {
        scaleFactor = -scaleFactor;
      }
      let cxPrime = scaleFactor * (rx * yPrime / ry);
      let cyPrime = scaleFactor * (-(ry * xPrime) / rx);
      let cx = cosXAxisRotation * cxPrime - sinXAxisRotation * cyPrime + (dart.notNull(this[_currentX$]) + dart.notNull(arcEnd.dx)) / 2.0;
      let cy = sinXAxisRotation * cxPrime + cosXAxisRotation * cyPrime + (dart.notNull(this[_currentY$]) + dart.notNull(arcEnd.dy)) / 2.0;
      let startVectorX = (xPrime - cxPrime) / rx;
      let startVectorY = (yPrime - cyPrime) / ry;
      let startAngle = math.atan2(startVectorY, startVectorX);
      let endVectorX = (-xPrime - cxPrime) / rx;
      let endVectorY = (-yPrime - cyPrime) / ry;
      let sweepAngle = math.atan2(endVectorY, endVectorX) - startAngle;
      if (dart.test(clockwise) && sweepAngle < 0) {
        sweepAngle = sweepAngle + 3.141592653589793 * 2.0;
      } else if (!dart.test(clockwise) && sweepAngle > 0) {
        sweepAngle = sweepAngle - 3.141592653589793 * 2.0;
      }
      this[_commands$][$add](new engine.Ellipse.new(cx, cy, rx, ry, xAxisRotation, startAngle, startAngle + sweepAngle, sweepAngle[$isNegative]));
      this[_setCurrentPoint$](arcEnd.dx, arcEnd.dy);
    }
    relativeArcToPoint(arcEndDelta, opts) {
      let radius = opts && 'radius' in opts ? opts.radius : C34 || CT.C34;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 0;
      let largeArc = opts && 'largeArc' in opts ? opts.largeArc : false;
      let clockwise = opts && 'clockwise' in opts ? opts.clockwise : true;
      if (!dart.test(engine.offsetIsValid(arcEndDelta))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1451, 12, "t(engine.offsetIsValid(arcEndDelt");
      if (!dart.test(engine.radiusIsValid(radius))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1452, 12, "t(engine.radiusIsValid(radiu");
      this.arcToPoint(new ui.Offset.new(dart.notNull(this[_currentX$]) + dart.notNull(arcEndDelta.dx), dart.notNull(this[_currentY$]) + dart.notNull(arcEndDelta.dy)), {radius: radius, rotation: rotation, largeArc: largeArc, clockwise: clockwise});
    }
    addRect(rect) {
      if (!dart.test(engine.rectIsValid(rect))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1463, 12, "t(engine.rectIsValid(rec");
      this[_openNewSubpath$](rect.left, rect.top);
      this[_commands$][$add](new engine.RectCommand.new(rect.left, rect.top, rect.width, rect.height));
    }
    addOval(oval) {
      if (!dart.test(engine.rectIsValid(oval))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1476, 12, "t(engine.rectIsValid(ova");
      let center = oval.center;
      let radiusX = dart.notNull(oval.width) / 2;
      let radiusY = dart.notNull(oval.height) / 2;
      this[_openNewSubpath$](dart.notNull(center.dx) + radiusX, center.dy);
      this[_commands$][$add](new engine.Ellipse.new(center.dx, center.dy, radiusX, radiusY, 0.0, 0.0, 2 * 3.141592653589793, false));
    }
    addArc(oval, startAngle, sweepAngle) {
      if (!dart.test(engine.rectIsValid(oval))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1496, 12, "t(engine.rectIsValid(ova");
      let center = oval.center;
      let radiusX = dart.notNull(oval.width) / 2;
      let radiusY = dart.notNull(oval.height) / 2;
      this[_openNewSubpath$](radiusX * math.cos(startAngle) + dart.notNull(center.dx), radiusY * math.sin(startAngle) + dart.notNull(center.dy));
      this[_commands$][$add](new engine.Ellipse.new(center.dx, center.dy, radiusX, radiusY, 0.0, startAngle, dart.notNull(startAngle) + dart.notNull(sweepAngle), sweepAngle[$isNegative]));
      this[_setCurrentPoint$](radiusX * math.cos(dart.notNull(startAngle) + dart.notNull(sweepAngle)) + dart.notNull(center.dx), radiusY * math.sin(dart.notNull(startAngle) + dart.notNull(sweepAngle)) + dart.notNull(center.dy));
    }
    addPolygon(points, close) {
      if (!(points != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1517, 12, "t(points != nu");
      if (dart.test(points[$isEmpty])) {
        return;
      }
      this.moveTo(points[$first].dx, points[$first].dy);
      for (let i = 1; i < dart.notNull(points[$length]); i = i + 1) {
        let point = points[$_get](i);
        this.lineTo(point.dx, point.dy);
      }
      if (dart.test(close)) {
        this.close();
      } else {
        this[_setCurrentPoint$](points[$last].dx, points[$last].dy);
      }
    }
    addRRect(rrect) {
      if (!dart.test(engine.rrectIsValid(rrect))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1538, 12, "t(engine.rrectIsValid(rrec");
      this[_openNewSubpath$](rrect.tallMiddleRect.left, rrect.top);
      this[_commands$][$add](new engine.RRectCommand.new(rrect));
    }
    addPath(path, offset, opts) {
      let matrix4 = opts && 'matrix4' in opts ? opts.matrix4 : null;
      if (!(path != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1555, 12, "t(path != nu");
      if (!dart.test(engine.offsetIsValid(offset))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1556, 12, "t(engine.offsetIsValid(offse");
      if (matrix4 != null) {
        if (!dart.test(engine.matrix4IsValid(matrix4))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1558, 14, "t(engine.matrix4IsValid(matrix");
        this[_addPathWithMatrix$](path, offset.dx, offset.dy, matrix4);
      } else {
        this[_addPath$](path, offset.dx, offset.dy);
      }
    }
    [_addPath$](path, dx, dy) {
      if (dx === 0.0 && dy === 0.0) {
        this.subpaths[$addAll](path.subpaths);
      } else {
        dart.throw(new core.UnimplementedError.new("Cannot add path with non-zero offset"));
      }
    }
    [_addPathWithMatrix$](path, dx, dy, matrix) {
      dart.throw(new core.UnimplementedError.new("Cannot add path with transform matrix"));
    }
    extendWithPath(path, offset, opts) {
      let matrix4 = opts && 'matrix4' in opts ? opts.matrix4 : null;
      if (!(path != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1584, 12, "t(path != nu");
      if (!dart.test(engine.offsetIsValid(offset))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1585, 12, "t(engine.offsetIsValid(offse");
      if (matrix4 != null) {
        if (!dart.test(engine.matrix4IsValid(matrix4))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1587, 14, "t(engine.matrix4IsValid(matrix");
        this[_extendWithPathAndMatrix$](path, offset.dx, offset.dy, matrix4);
      } else {
        this[_extendWithPath$](path, offset.dx, offset.dy);
      }
    }
    [_extendWithPath$](path, dx, dy) {
      if (dx === 0.0 && dy === 0.0) {
        if (!(path.subpaths[$length] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1596, 14, "t(path.subpaths.length ==");
        this[_ensurePathStarted$]();
        this[_commands$][$addAll](path.subpaths[$single].commands);
        this[_setCurrentPoint$](path.subpaths[$single].currentX, path.subpaths[$single].currentY);
      } else {
        dart.throw(new core.UnimplementedError.new("Cannot extend path with non-zero offset"));
      }
    }
    [_extendWithPathAndMatrix$](path, dx, dy, matrix) {
      dart.throw(new core.UnimplementedError.new("Cannot extend path with transform matrix"));
    }
    close() {
      this[_ensurePathStarted$]();
      this[_commands$][$add](C1200 || CT.C1200);
      this[_setCurrentPoint$](this[_currentSubpath$].startX, this[_currentSubpath$].startY);
    }
    reset() {
      this.subpaths[$clear]();
    }
    contains(point) {
      let t8;
      if (!dart.test(engine.offsetIsValid(point))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1638, 12, "t(engine.offsetIsValid(poin");
      let subPathCount = this.subpaths[$length];
      if (subPathCount === 0) {
        return false;
      }
      let pointX = point.dx;
      let pointY = point.dy;
      if (subPathCount === 1) {
        let subPath = this.subpaths[$_get](0);
        if (subPath.commands[$length] === 1) {
          let cmd = subPath.commands[$_get](0);
          if (engine.RectCommand.is(cmd)) {
            if (dart.notNull(pointY) < dart.notNull(cmd.y) || dart.notNull(pointY) > dart.notNull(cmd.y) + dart.notNull(cmd.height)) {
              return false;
            }
            if (dart.notNull(pointX) < dart.notNull(cmd.x) || dart.notNull(pointX) > dart.notNull(cmd.x) + dart.notNull(cmd.width)) {
              return false;
            }
            return true;
          } else if (engine.RRectCommand.is(cmd)) {
            let rRect = cmd.rrect;
            if (dart.notNull(pointY) < dart.notNull(rRect.top) || dart.notNull(pointY) > dart.notNull(rRect.bottom)) {
              return false;
            }
            if (dart.notNull(pointX) < dart.notNull(rRect.left) || dart.notNull(pointX) > dart.notNull(rRect.right)) {
              return false;
            }
            if (dart.notNull(pointX) < dart.notNull(rRect.left) + dart.notNull(rRect.tlRadiusX) && dart.notNull(pointY) < dart.notNull(rRect.top) + dart.notNull(rRect.tlRadiusY)) {
              return ui._ellipseContains(pointX, pointY, dart.notNull(rRect.left) + dart.notNull(rRect.tlRadiusX), dart.notNull(rRect.top) + dart.notNull(rRect.tlRadiusY), rRect.tlRadiusX, rRect.tlRadiusY);
            } else if (dart.notNull(pointX) >= dart.notNull(rRect.right) - dart.notNull(rRect.trRadiusX) && dart.notNull(pointY) < dart.notNull(rRect.top) + dart.notNull(rRect.trRadiusY)) {
              return ui._ellipseContains(pointX, pointY, dart.notNull(rRect.right) - dart.notNull(rRect.trRadiusX), dart.notNull(rRect.top) + dart.notNull(rRect.trRadiusY), rRect.trRadiusX, rRect.trRadiusY);
            } else if (dart.notNull(pointX) >= dart.notNull(rRect.right) - dart.notNull(rRect.brRadiusX) && dart.notNull(pointY) >= dart.notNull(rRect.bottom) - dart.notNull(rRect.brRadiusY)) {
              return ui._ellipseContains(pointX, pointY, dart.notNull(rRect.right) - dart.notNull(rRect.brRadiusX), dart.notNull(rRect.bottom) - dart.notNull(rRect.brRadiusY), rRect.trRadiusX, rRect.trRadiusY);
            } else if (dart.notNull(pointX) < dart.notNull(rRect.left) + dart.notNull(rRect.blRadiusX) && dart.notNull(pointY) >= dart.notNull(rRect.bottom) - dart.notNull(rRect.blRadiusY)) {
              return ui._ellipseContains(pointX, pointY, dart.notNull(rRect.left) + dart.notNull(rRect.blRadiusX), dart.notNull(rRect.bottom) - dart.notNull(rRect.blRadiusY), rRect.trRadiusX, rRect.trRadiusY);
            }
            return true;
          }
        }
      }
      let size = ui.window.physicalSize['/'](ui.window.devicePixelRatio);
      ui.Path._rawRecorder == null ? ui.Path._rawRecorder = new ui.RawRecordingCanvas.new(size) : null;
      ui.Path._rawRecorder.translate(-(1)[$toDouble](), -(1)[$toDouble]());
      ui.Path._rawRecorder.drawPath(this, (t8 = new ui.Paint.new(), t8.color = C1201 || CT.C1201, t8).webOnlyPaintData);
      let result = ui.Path._rawRecorder.ctx.isPointInPath(pointX, pointY);
      ui.Path._rawRecorder.dispose();
      return result;
    }
    shift(offset) {
      if (!dart.test(engine.offsetIsValid(offset))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1726, 12, "t(engine.offsetIsValid(offse");
      let shiftedSubpaths = JSArrayOfSubpath().of([]);
      for (let subpath of this.subpaths) {
        shiftedSubpaths[$add](subpath.shift(offset));
      }
      return new ui.Path._clone(shiftedSubpaths, this.fillType);
    }
    transform(matrix4) {
      if (!dart.test(engine.matrix4IsValid(matrix4))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 1737, 12, "t(engine.matrix4IsValid(matrix");
      dart.throw(new core.UnimplementedError.new());
    }
    getBounds() {
      let ltrbInitialized = false;
      let left = 0.0;
      let top = 0.0;
      let right = 0.0;
      let bottom = 0.0;
      let curX = 0.0;
      let curY = 0.0;
      let minX = 0.0;
      let maxX = 0.0;
      let minY = 0.0;
      let maxY = 0.0;
      for (let subpath of this.subpaths) {
        for (let op of subpath.commands) {
          let skipBounds = false;
          switch (op.type) {
            case 0:
            {
              let cmd = engine.MoveTo._check(op);
              curX = minX = maxX = cmd.x;
              curY = minY = maxY = cmd.y;
              break;
            }
            case 1:
            {
              let cmd = engine.LineTo._check(op);
              curX = minX = maxX = cmd.x;
              curY = minY = maxY = cmd.y;
              break;
            }
            case 2:
            {
              let cmd = engine.Ellipse._check(op);
              let rx = cmd.radiusX;
              let ry = cmd.radiusY;
              let cosVal = math.cos(cmd.rotation);
              let sinVal = math.sin(cmd.rotation);
              let rxCos = dart.notNull(rx) * cosVal;
              let ryCos = dart.notNull(ry) * cosVal;
              let rxSin = dart.notNull(rx) * sinVal;
              let rySin = dart.notNull(ry) * sinVal;
              let leftDeltaX = rxCos - rySin;
              let rightDeltaX = -rxCos - rySin;
              let topDeltaY = ryCos + rxSin;
              let bottomDeltaY = ryCos - rxSin;
              let centerX = cmd.x;
              let centerY = cmd.y;
              let rotatedX = dart.notNull(centerX) + leftDeltaX;
              let rotatedY = dart.notNull(centerY) + topDeltaY;
              minX = maxX = rotatedX;
              minY = maxY = rotatedY;
              rotatedX = dart.notNull(centerX) + rightDeltaX;
              rotatedY = dart.notNull(centerY) + bottomDeltaY;
              minX = math.min(core.double, minX, rotatedX);
              maxX = math.max(core.double, maxX, rotatedX);
              minY = math.min(core.double, minY, rotatedY);
              maxY = math.max(core.double, maxY, rotatedY);
              rotatedX = dart.notNull(centerX) - leftDeltaX;
              rotatedY = dart.notNull(centerY) - topDeltaY;
              minX = math.min(core.double, minX, rotatedX);
              maxX = math.max(core.double, maxX, rotatedX);
              minY = math.min(core.double, minY, rotatedY);
              maxY = math.max(core.double, maxY, rotatedY);
              rotatedX = dart.notNull(centerX) - rightDeltaX;
              rotatedY = dart.notNull(centerY) - bottomDeltaY;
              minX = math.min(core.double, minX, rotatedX);
              maxX = math.max(core.double, maxX, rotatedX);
              minY = math.min(core.double, minY, rotatedY);
              maxY = math.max(core.double, maxY, rotatedY);
              curX = dart.notNull(centerX) + dart.notNull(cmd.radiusX);
              curY = centerY;
              break;
            }
            case 4:
            {
              let cmd = engine.QuadraticCurveTo._check(op);
              let x1 = curX;
              let y1 = curY;
              let cpX = cmd.x1;
              let cpY = cmd.y1;
              let x2 = cmd.x2;
              let y2 = cmd.y2;
              minX = math.min(core.double, x1, x2);
              minY = math.min(core.double, y1, y2);
              maxX = math.max(core.double, x1, x2);
              maxY = math.max(core.double, y1, y2);
              let denom = dart.notNull(x1) - 2 * dart.notNull(cpX) + dart.notNull(x2);
              if (denom[$abs]() > 1e-9) {
                let t1 = (dart.notNull(x1) - dart.notNull(cpX)) / denom;
                if (t1 >= 0 && t1 <= 1.0) {
                  let tprime = 1.0 - t1;
                  let extremaX = tprime * tprime * dart.notNull(x1) + 2 * t1 * tprime * dart.notNull(cpX) + t1 * t1 * dart.notNull(x2);
                  let extremaY = tprime * tprime * dart.notNull(y1) + 2 * t1 * tprime * dart.notNull(cpY) + t1 * t1 * dart.notNull(y2);
                  minX = math.min(core.double, minX, extremaX);
                  maxX = math.max(core.double, maxX, extremaX);
                  minY = math.min(core.double, minY, extremaY);
                  maxY = math.max(core.double, maxY, extremaY);
                }
              }
              denom = dart.notNull(y1) - 2 * dart.notNull(cpY) + dart.notNull(y2);
              if (denom[$abs]() > 1e-9) {
                let t2 = (dart.notNull(y1) - dart.notNull(cpY)) / denom;
                if (t2 >= 0 && t2 <= 1.0) {
                  let tprime2 = 1.0 - t2;
                  let extrema2X = tprime2 * tprime2 * dart.notNull(x1) + 2 * t2 * tprime2 * dart.notNull(cpX) + t2 * t2 * dart.notNull(x2);
                  let extrema2Y = tprime2 * tprime2 * dart.notNull(y1) + 2 * t2 * tprime2 * dart.notNull(cpY) + t2 * t2 * dart.notNull(y2);
                  minX = math.min(core.double, minX, extrema2X);
                  maxX = math.max(core.double, maxX, extrema2X);
                  minY = math.min(core.double, minY, extrema2Y);
                  maxY = math.max(core.double, maxY, extrema2Y);
                }
              }
              curX = x2;
              curY = y2;
              break;
            }
            case 5:
            {
              let cmd = engine.BezierCurveTo._check(op);
              let startX = curX;
              let startY = curY;
              let cpX1 = cmd.x1;
              let cpY1 = cmd.y1;
              let cpX2 = cmd.x2;
              let cpY2 = cmd.y2;
              let endX = cmd.x3;
              let endY = cmd.y3;
              minX = math.min(core.double, startX, endX);
              minY = math.min(core.double, startY, endY);
              maxX = math.max(core.double, startX, endX);
              maxY = math.max(core.double, startY, endY);
              let extremaX = null;
              let extremaY = null;
              let a = null;
              let b = null;
              let c = null;
              if (!(dart.notNull(startX) < dart.notNull(cpX1) && dart.notNull(cpX1) < dart.notNull(cpX2) && dart.notNull(cpX2) < dart.notNull(endX) || dart.notNull(startX) > dart.notNull(cpX1) && dart.notNull(cpX1) > dart.notNull(cpX2) && dart.notNull(cpX2) > dart.notNull(endX))) {
                a = -dart.notNull(startX) + 3 * (dart.notNull(cpX1) - dart.notNull(cpX2)) + dart.notNull(endX);
                b = 2 * (dart.notNull(startX) - 2 * dart.notNull(cpX1) + dart.notNull(cpX2));
                c = -dart.notNull(startX) + dart.notNull(cpX1);
                let s = dart.notNull(b) * dart.notNull(b) - 4 * dart.notNull(a) * dart.notNull(c);
                if (s >= 0.0 && a[$abs]() > 1e-9) {
                  if (s === 0.0) {
                    let t = -dart.notNull(b) / (2 * dart.notNull(a));
                    let tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaX = tprime * tprime * tprime * dart.notNull(startX) + 3 * tprime * tprime * t * dart.notNull(cpX1) + 3 * tprime * t * t * dart.notNull(cpX2) + t * t * t * dart.notNull(endX);
                      minX = math.min(core.double, extremaX, minX);
                      maxX = math.max(core.double, extremaX, maxX);
                    }
                  } else {
                    s = math.sqrt(s);
                    let t = (-dart.notNull(b) - s) / (2 * dart.notNull(a));
                    let tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaX = tprime * tprime * tprime * dart.notNull(startX) + 3 * tprime * tprime * t * dart.notNull(cpX1) + 3 * tprime * t * t * dart.notNull(cpX2) + t * t * t * dart.notNull(endX);
                      minX = math.min(core.double, extremaX, minX);
                      maxX = math.max(core.double, extremaX, maxX);
                    }
                    t = (-dart.notNull(b) + s) / (2 * dart.notNull(a));
                    tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaX = tprime * tprime * tprime * dart.notNull(startX) + 3 * tprime * tprime * t * dart.notNull(cpX1) + 3 * tprime * t * t * dart.notNull(cpX2) + t * t * t * dart.notNull(endX);
                      minX = math.min(core.double, extremaX, minX);
                      maxX = math.max(core.double, extremaX, maxX);
                    }
                  }
                }
              }
              if (!(dart.notNull(startY) < dart.notNull(cpY1) && dart.notNull(cpY1) < dart.notNull(cpY2) && dart.notNull(cpY2) < dart.notNull(endY) || dart.notNull(startY) > dart.notNull(cpY1) && dart.notNull(cpY1) > dart.notNull(cpY2) && dart.notNull(cpY2) > dart.notNull(endY))) {
                a = -dart.notNull(startY) + 3 * (dart.notNull(cpY1) - dart.notNull(cpY2)) + dart.notNull(endY);
                b = 2 * (dart.notNull(startY) - 2 * dart.notNull(cpY1) + dart.notNull(cpY2));
                c = -dart.notNull(startY) + dart.notNull(cpY1);
                let s = dart.notNull(b) * dart.notNull(b) - 4 * dart.notNull(a) * dart.notNull(c);
                if (s >= 0.0 && a[$abs]() > 1e-9) {
                  if (s === 0.0) {
                    let t = -dart.notNull(b) / (2 * dart.notNull(a));
                    let tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaY = tprime * tprime * tprime * dart.notNull(startY) + 3 * tprime * tprime * t * dart.notNull(cpY1) + 3 * tprime * t * t * dart.notNull(cpY2) + t * t * t * dart.notNull(endY);
                      minY = math.min(core.double, extremaY, minY);
                      maxY = math.max(core.double, extremaY, maxY);
                    }
                  } else {
                    s = math.sqrt(s);
                    let t = (-dart.notNull(b) - s) / (2 * dart.notNull(a));
                    let tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaY = tprime * tprime * tprime * dart.notNull(startY) + 3 * tprime * tprime * t * dart.notNull(cpY1) + 3 * tprime * t * t * dart.notNull(cpY2) + t * t * t * dart.notNull(endY);
                      minY = math.min(core.double, extremaY, minY);
                      maxY = math.max(core.double, extremaY, maxY);
                    }
                    let t2 = (-dart.notNull(b) + s) / (2 * dart.notNull(a));
                    let tprime2 = 1.0 - t2;
                    if (t2 >= 0.0 && t2 <= 1.0) {
                      extremaY = tprime2 * tprime2 * tprime2 * dart.notNull(startY) + 3 * tprime2 * tprime2 * t2 * dart.notNull(cpY1) + 3 * tprime2 * t2 * t2 * dart.notNull(cpY2) + t2 * t2 * t2 * dart.notNull(endY);
                      minY = math.min(core.double, extremaY, minY);
                      maxY = math.max(core.double, extremaY, maxY);
                    }
                  }
                }
              }
              break;
            }
            case 6:
            {
              let cmd = engine.RectCommand._check(op);
              left = cmd.x;
              let width = cmd.width;
              if (dart.notNull(cmd.width) < 0) {
                left = dart.notNull(left) - dart.notNull(width);
                width = -dart.notNull(width);
              }
              let top = cmd.y;
              let height = cmd.height;
              if (dart.notNull(cmd.height) < 0) {
                top = dart.notNull(top) - dart.notNull(height);
                height = -dart.notNull(height);
              }
              curX = minX = left;
              maxX = dart.notNull(left) + dart.notNull(width);
              curY = minY = top;
              maxY = dart.notNull(top) + dart.notNull(height);
              break;
            }
            case 7:
            {
              let cmd = engine.RRectCommand._check(op);
              let rRect = cmd.rrect;
              curX = minX = rRect.left;
              maxX = dart.notNull(rRect.left) + dart.notNull(rRect.width);
              curY = minY = rRect.top;
              maxY = dart.notNull(rRect.top) + dart.notNull(rRect.height);
              break;
            }
            case 3:
            default:
            {
              skipBounds = false;
              break;
            }
          }
          if (!skipBounds) {
            if (!ltrbInitialized) {
              left = minX;
              right = maxX;
              top = minY;
              bottom = maxY;
              ltrbInitialized = true;
            } else {
              left = math.min(core.double, left, minX);
              right = math.max(core.double, right, maxX);
              top = math.min(core.double, top, minY);
              bottom = math.max(core.double, bottom, maxY);
            }
          }
        }
      }
      return ltrbInitialized ? new ui.Rect.fromLTRB(left, top, right, bottom) : ui.Rect.zero;
    }
    static combine(operation, path1, path2) {
      if (!(path1 != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 2086, 12, "t(path1 != nu");
      if (!(path2 != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 2087, 12, "t(path2 != nu");
      dart.throw(new core.UnimplementedError.new());
    }
    computeMetrics(opts) {
      let forceClosed = opts && 'forceClosed' in opts ? opts.forceClosed : false;
      return new ui.PathMetrics.__(this, forceClosed);
    }
    get webOnlyPathAsRoundedRect() {
      if (this.subpaths[$length] !== 1) {
        return null;
      }
      let subPath = this.subpaths[$_get](0);
      if (subPath.commands[$length] !== 1) {
        return null;
      }
      let command = subPath.commands[$_get](0);
      return engine.RRectCommand.is(command) ? command.rrect : null;
    }
    get webOnlyPathAsRect() {
      if (this.subpaths[$length] !== 1) {
        return null;
      }
      let subPath = this.subpaths[$_get](0);
      if (subPath.commands[$length] !== 1) {
        return null;
      }
      let command = subPath.commands[$_get](0);
      return engine.RectCommand.is(command) ? new ui.Rect.fromLTWH(command.x, command.y, command.width, command.height) : null;
    }
    get webOnlyPathAsCircle() {
      if (this.subpaths[$length] !== 1) {
        return null;
      }
      let subPath = this.subpaths[$_get](0);
      if (subPath.commands[$length] !== 1) {
        return null;
      }
      let command = subPath.commands[$_get](0);
      if (engine.Ellipse.is(command)) {
        let ellipse = command;
        if ((dart.notNull(ellipse.endAngle) - dart.notNull(ellipse.startAngle))[$modulo](2 * 3.141592653589793) === 0.0) {
          return ellipse;
        }
      }
      return null;
    }
    webOnlySerializeToCssPaint() {
      let serializedSubpaths = [];
      for (let i = 0; i < dart.notNull(this.subpaths[$length]); i = i + 1) {
        serializedSubpaths[$add](this.subpaths[$_get](i).serializeToCssPaint());
      }
      return serializedSubpaths;
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "Path(" + dart.str(this.subpaths[$join](", ")) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (ui.Path.__ = function() {
    this[fillType$] = ui.PathFillType.nonZero;
    this[subpaths$] = JSArrayOfSubpath().of([]);
    ;
  }).prototype = ui.Path.prototype;
  (ui.Path.from = function(source) {
    this[fillType$] = ui.PathFillType.nonZero;
    this[subpaths$] = ListOfSubpath().from(source.subpaths);
    ;
  }).prototype = ui.Path.prototype;
  (ui.Path._clone = function(subpaths, fillType) {
    this[fillType$] = ui.PathFillType.nonZero;
    this[subpaths$] = subpaths;
    this[fillType$] = fillType;
    ;
  }).prototype = ui.Path.prototype;
  dart.addTypeTests(ui.Path);
  const subpaths$ = Path_subpaths;
  const fillType$ = Path_fillType;
  dart.setMethodSignature(ui.Path, () => ({
    __proto__: dart.getMethods(ui.Path.__proto__),
    [_openNewSubpath$]: dart.fnType(dart.void, [core.double, core.double]),
    [_setCurrentPoint$]: dart.fnType(dart.void, [core.double, core.double]),
    moveTo: dart.fnType(dart.void, [core.double, core.double]),
    relativeMoveTo: dart.fnType(dart.void, [core.double, core.double]),
    lineTo: dart.fnType(dart.void, [core.double, core.double]),
    relativeLineTo: dart.fnType(dart.void, [core.double, core.double]),
    [_ensurePathStarted$]: dart.fnType(dart.void, []),
    quadraticBezierTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    relativeQuadraticBezierTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    cubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    relativeCubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    conicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double]),
    relativeConicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double]),
    arcTo: dart.fnType(dart.void, [ui.Rect, core.double, core.double, core.bool]),
    arcToPoint: dart.fnType(dart.void, [ui.Offset], {clockwise: core.bool, largeArc: core.bool, radius: ui.Radius, rotation: core.double}),
    relativeArcToPoint: dart.fnType(dart.void, [ui.Offset], {clockwise: core.bool, largeArc: core.bool, radius: ui.Radius, rotation: core.double}),
    addRect: dart.fnType(dart.void, [ui.Rect]),
    addOval: dart.fnType(dart.void, [ui.Rect]),
    addArc: dart.fnType(dart.void, [ui.Rect, core.double, core.double]),
    addPolygon: dart.fnType(dart.void, [core.List$(ui.Offset), core.bool]),
    addRRect: dart.fnType(dart.void, [ui.RRect]),
    addPath: dart.fnType(dart.void, [ui.Path, ui.Offset], {matrix4: typed_data.Float64List}),
    [_addPath$]: dart.fnType(dart.void, [ui.Path, core.double, core.double]),
    [_addPathWithMatrix$]: dart.fnType(dart.void, [ui.Path, core.double, core.double, typed_data.Float64List]),
    extendWithPath: dart.fnType(dart.void, [ui.Path, ui.Offset], {matrix4: typed_data.Float64List}),
    [_extendWithPath$]: dart.fnType(dart.void, [ui.Path, core.double, core.double]),
    [_extendWithPathAndMatrix$]: dart.fnType(dart.void, [ui.Path, core.double, core.double, typed_data.Float64List]),
    close: dart.fnType(dart.void, []),
    reset: dart.fnType(dart.void, []),
    contains: dart.fnType(core.bool, [ui.Offset]),
    shift: dart.fnType(ui.Path, [ui.Offset]),
    transform: dart.fnType(ui.Path, [typed_data.Float64List]),
    getBounds: dart.fnType(ui.Rect, []),
    computeMetrics: dart.fnType(ui.PathMetrics, [], {forceClosed: core.bool}),
    webOnlySerializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setGetterSignature(ui.Path, () => ({
    __proto__: dart.getGetters(ui.Path.__proto__),
    [_currentSubpath$]: engine.Subpath,
    [_commands$]: core.List$(engine.PathCommand),
    [_currentX$]: core.double,
    [_currentY$]: core.double,
    webOnlyPathAsRoundedRect: ui.RRect,
    webOnlyPathAsRect: ui.Rect,
    webOnlyPathAsCircle: engine.Ellipse
  }));
  dart.setLibraryUri(ui.Path, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Path, () => ({
    __proto__: dart.getFields(ui.Path.__proto__),
    subpaths: dart.finalFieldType(core.List$(engine.Subpath)),
    fillType: dart.fieldType(ui.PathFillType)
  }));
  dart.defineExtensionMethods(ui.Path, ['toString']);
  dart.defineLazy(ui.Path, {
    /*ui.Path._rawRecorder*/get _rawRecorder() {
      return null;
    },
    set _rawRecorder(_) {}
  });
  const _iterator = dart.privateName(ui, "_iterator");
  const _getPosTan = dart.privateName(ui, "_getPosTan");
  const _moveNext = dart.privateName(ui, "_moveNext");
  const PathMetric_path = dart.privateName(ui, "PathMetric.path");
  const PathMetric_forceClosed = dart.privateName(ui, "PathMetric.forceClosed");
  ui.PathMetric = class PathMetric extends core.Object {
    get path() {
      return this[path$3];
    }
    set path(value) {
      super.path = value;
    }
    get forceClosed() {
      return this[forceClosed$];
    }
    set forceClosed(value) {
      super.forceClosed = value;
    }
    get length() {
      return dart.throw(new core.UnimplementedError.new());
    }
    getTangentForOffset(distance) {
      let posTan = this[_getPosTan](distance);
      if (posTan[$_get](0) === 0.0) {
        return null;
      } else {
        return new ui.Tangent.new(new ui.Offset.new(posTan[$_get](1), posTan[$_get](2)), new ui.Offset.new(posTan[$_get](3), posTan[$_get](4)));
      }
    }
    [_getPosTan](distance) {
      return dart.throw(new core.UnimplementedError.new());
    }
    extractPath(start, end, opts) {
      let startWithMoveTo = opts && 'startWithMoveTo' in opts ? opts.startWithMoveTo : true;
      return dart.throw(new core.UnimplementedError.new());
    }
    get isClosed() {
      return dart.throw(new core.UnimplementedError.new());
    }
    [_moveNext]() {
      return dart.throw(new core.UnimplementedError.new());
    }
    toString() {
      return "PathMetric";
    }
  };
  (ui.PathMetric.__ = function(path, forceClosed) {
    this[path$3] = path;
    this[forceClosed$] = forceClosed;
    ;
  }).prototype = ui.PathMetric.prototype;
  dart.addTypeTests(ui.PathMetric);
  const path$3 = PathMetric_path;
  const forceClosed$ = PathMetric_forceClosed;
  dart.setMethodSignature(ui.PathMetric, () => ({
    __proto__: dart.getMethods(ui.PathMetric.__proto__),
    getTangentForOffset: dart.fnType(ui.Tangent, [core.double]),
    [_getPosTan]: dart.fnType(typed_data.Float32List, [core.double]),
    extractPath: dart.fnType(ui.Path, [core.double, core.double], {startWithMoveTo: core.bool}),
    [_moveNext]: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(ui.PathMetric, () => ({
    __proto__: dart.getGetters(ui.PathMetric.__proto__),
    length: core.double,
    isClosed: core.bool
  }));
  dart.setLibraryUri(ui.PathMetric, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PathMetric, () => ({
    __proto__: dart.getFields(ui.PathMetric.__proto__),
    path: dart.finalFieldType(ui.Path),
    forceClosed: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(ui.PathMetric, ['toString']);
  ui.PathMetrics = class PathMetrics extends collection.IterableBase$(ui.PathMetric) {
    get iterator() {
      return this[_iterator];
    }
  };
  (ui.PathMetrics.__ = function(path, forceClosed) {
    this[_iterator] = new ui.PathMetricIterator.__(new ui.PathMetric.__(path, forceClosed));
    ui.PathMetrics.__proto__.new.call(this);
    ;
  }).prototype = ui.PathMetrics.prototype;
  dart.addTypeTests(ui.PathMetrics);
  dart.setGetterSignature(ui.PathMetrics, () => ({
    __proto__: dart.getGetters(ui.PathMetrics.__proto__),
    iterator: core.Iterator$(ui.PathMetric),
    [$iterator]: core.Iterator$(ui.PathMetric)
  }));
  dart.setLibraryUri(ui.PathMetrics, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PathMetrics, () => ({
    __proto__: dart.getFields(ui.PathMetrics.__proto__),
    [_iterator]: dart.finalFieldType(core.Iterator$(ui.PathMetric))
  }));
  dart.defineExtensionAccessors(ui.PathMetrics, ['iterator']);
  const _firstTime = dart.privateName(ui, "_firstTime");
  const _pathMetric$ = dart.privateName(ui, "_pathMetric");
  ui.PathMetricIterator = class PathMetricIterator extends core.Object {
    get current() {
      return dart.test(this[_firstTime]) ? null : this[_pathMetric$];
    }
    moveNext() {
      let t8;
      if (dart.equals(this[_firstTime], true)) {
        this[_firstTime] = false;
        return true;
      } else if (dart.equals((t8 = this[_pathMetric$], t8 == null ? null : t8[_moveNext]()), true)) {
        return true;
      }
      this[_pathMetric$] = null;
      return false;
    }
  };
  (ui.PathMetricIterator.__ = function(_pathMetric) {
    this[_firstTime] = true;
    this[_pathMetric$] = _pathMetric;
    ;
  }).prototype = ui.PathMetricIterator.prototype;
  dart.addTypeTests(ui.PathMetricIterator);
  ui.PathMetricIterator[dart.implements] = () => [core.Iterator$(ui.PathMetric)];
  dart.setMethodSignature(ui.PathMetricIterator, () => ({
    __proto__: dart.getMethods(ui.PathMetricIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(ui.PathMetricIterator, () => ({
    __proto__: dart.getGetters(ui.PathMetricIterator.__proto__),
    current: ui.PathMetric
  }));
  dart.setLibraryUri(ui.PathMetricIterator, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PathMetricIterator, () => ({
    __proto__: dart.getFields(ui.PathMetricIterator.__proto__),
    [_pathMetric$]: dart.fieldType(ui.PathMetric),
    [_firstTime]: dart.fieldType(core.bool)
  }));
  const Tangent_position = dart.privateName(ui, "Tangent.position");
  const Tangent_vector = dart.privateName(ui, "Tangent.vector");
  ui.Tangent = class Tangent extends core.Object {
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get vector() {
      return this[vector$];
    }
    set vector(value) {
      super.vector = value;
    }
    static fromAngle(position, angle) {
      return new ui.Tangent.new(position, new ui.Offset.new(math.cos(angle), math.sin(angle)));
    }
    get angle() {
      return -math.atan2(this.vector.dy, this.vector.dx);
    }
  };
  (ui.Tangent.new = function(position, vector) {
    this[position$] = position;
    this[vector$] = vector;
    if (!(position != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 2308, 16, "t(position != nu");
    if (!(vector != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart", 2309, 16, "t(vector != nu");
    ;
  }).prototype = ui.Tangent.prototype;
  dart.addTypeTests(ui.Tangent);
  const position$ = Tangent_position;
  const vector$ = Tangent_vector;
  dart.setGetterSignature(ui.Tangent, () => ({
    __proto__: dart.getGetters(ui.Tangent.__proto__),
    angle: core.double
  }));
  dart.setLibraryUri(ui.Tangent, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Tangent, () => ({
    __proto__: dart.getFields(ui.Tangent.__proto__),
    position: dart.finalFieldType(ui.Offset),
    vector: dart.finalFieldType(ui.Offset)
  }));
  const RawRecordingCanvas_cullRect = dart.privateName(ui, "RawRecordingCanvas.cullRect");
  ui.RawRecordingCanvas = class RawRecordingCanvas extends engine.BitmapCanvas {
    get cullRect() {
      return this[cullRect$2];
    }
    set cullRect(value) {
      this[cullRect$2] = value;
    }
    dispose() {
      this.clear();
    }
    beginRecording(bounds) {
      return dart.throw(new core.UnsupportedError.new(""));
    }
    endRecording() {
      return dart.throw(new core.UnsupportedError.new(""));
    }
    get isRecording() {
      return true;
    }
  };
  (ui.RawRecordingCanvas.new = function(size) {
    this[_canvas$] = null;
    this[_isRecording$] = true;
    this[cullRect$2] = null;
    ui.RawRecordingCanvas.__proto__.new.call(this, ui.Offset.zero['&'](size));
    ;
  }).prototype = ui.RawRecordingCanvas.prototype;
  dart.addTypeTests(ui.RawRecordingCanvas);
  const cullRect$2 = RawRecordingCanvas_cullRect;
  ui.RawRecordingCanvas[dart.implements] = () => [ui.PictureRecorder];
  dart.setMethodSignature(ui.RawRecordingCanvas, () => ({
    __proto__: dart.getMethods(ui.RawRecordingCanvas.__proto__),
    beginRecording: dart.fnType(engine.RecordingCanvas, [ui.Rect]),
    endRecording: dart.fnType(ui.Picture, [])
  }));
  dart.setGetterSignature(ui.RawRecordingCanvas, () => ({
    __proto__: dart.getGetters(ui.RawRecordingCanvas.__proto__),
    isRecording: core.bool
  }));
  dart.setLibraryUri(ui.RawRecordingCanvas, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.RawRecordingCanvas, () => ({
    __proto__: dart.getFields(ui.RawRecordingCanvas.__proto__),
    [_canvas$]: dart.fieldType(engine.RecordingCanvas),
    [_isRecording$]: dart.fieldType(core.bool),
    cullRect: dart.fieldType(ui.Rect)
  }));
  const Scene_webOnlyRootElement = dart.privateName(ui, "Scene.webOnlyRootElement");
  ui.Scene = class Scene extends core.Object {
    get webOnlyRootElement() {
      return this[webOnlyRootElement$];
    }
    set webOnlyRootElement(value) {
      super.webOnlyRootElement = value;
    }
    toImage(width, height) {
      if (dart.notNull(width) <= 0 || dart.notNull(height) <= 0) {
        dart.throw(core.Exception.new("Invalid image dimensions."));
      }
      dart.throw(new core.UnsupportedError.new("toImage is not supported on the Web"));
    }
    dispose() {
    }
  };
  (ui.Scene.__ = function(webOnlyRootElement) {
    this[webOnlyRootElement$] = webOnlyRootElement;
    ;
  }).prototype = ui.Scene.prototype;
  dart.addTypeTests(ui.Scene);
  const webOnlyRootElement$ = Scene_webOnlyRootElement;
  dart.setMethodSignature(ui.Scene, () => ({
    __proto__: dart.getMethods(ui.Scene.__proto__),
    toImage: dart.fnType(async.Future$(ui.Image), [core.int, core.int]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(ui.Scene, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Scene, () => ({
    __proto__: dart.getFields(ui.Scene.__proto__),
    webOnlyRootElement: dart.finalFieldType(html.Element)
  }));
  ui.TransformEngineLayer = class TransformEngineLayer extends core.Object {};
  (ui.TransformEngineLayer.new = function() {
    ;
  }).prototype = ui.TransformEngineLayer.prototype;
  dart.addTypeTests(ui.TransformEngineLayer);
  ui.TransformEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.TransformEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.OffsetEngineLayer = class OffsetEngineLayer extends core.Object {};
  (ui.OffsetEngineLayer.new = function() {
    ;
  }).prototype = ui.OffsetEngineLayer.prototype;
  dart.addTypeTests(ui.OffsetEngineLayer);
  ui.OffsetEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.OffsetEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.ClipRectEngineLayer = class ClipRectEngineLayer extends core.Object {};
  (ui.ClipRectEngineLayer.new = function() {
    ;
  }).prototype = ui.ClipRectEngineLayer.prototype;
  dart.addTypeTests(ui.ClipRectEngineLayer);
  ui.ClipRectEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.ClipRectEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.ClipRRectEngineLayer = class ClipRRectEngineLayer extends core.Object {};
  (ui.ClipRRectEngineLayer.new = function() {
    ;
  }).prototype = ui.ClipRRectEngineLayer.prototype;
  dart.addTypeTests(ui.ClipRRectEngineLayer);
  ui.ClipRRectEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.ClipRRectEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.ClipPathEngineLayer = class ClipPathEngineLayer extends core.Object {};
  (ui.ClipPathEngineLayer.new = function() {
    ;
  }).prototype = ui.ClipPathEngineLayer.prototype;
  dart.addTypeTests(ui.ClipPathEngineLayer);
  ui.ClipPathEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.ClipPathEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.OpacityEngineLayer = class OpacityEngineLayer extends core.Object {};
  (ui.OpacityEngineLayer.new = function() {
    ;
  }).prototype = ui.OpacityEngineLayer.prototype;
  dart.addTypeTests(ui.OpacityEngineLayer);
  ui.OpacityEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.OpacityEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.ColorFilterEngineLayer = class ColorFilterEngineLayer extends core.Object {};
  (ui.ColorFilterEngineLayer.new = function() {
    ;
  }).prototype = ui.ColorFilterEngineLayer.prototype;
  dart.addTypeTests(ui.ColorFilterEngineLayer);
  ui.ColorFilterEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.ColorFilterEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.BackdropFilterEngineLayer = class BackdropFilterEngineLayer extends core.Object {};
  (ui.BackdropFilterEngineLayer.new = function() {
    ;
  }).prototype = ui.BackdropFilterEngineLayer.prototype;
  dart.addTypeTests(ui.BackdropFilterEngineLayer);
  ui.BackdropFilterEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.BackdropFilterEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.ShaderMaskEngineLayer = class ShaderMaskEngineLayer extends core.Object {};
  (ui.ShaderMaskEngineLayer.new = function() {
    ;
  }).prototype = ui.ShaderMaskEngineLayer.prototype;
  dart.addTypeTests(ui.ShaderMaskEngineLayer);
  ui.ShaderMaskEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.ShaderMaskEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.PhysicalShapeEngineLayer = class PhysicalShapeEngineLayer extends core.Object {};
  (ui.PhysicalShapeEngineLayer.new = function() {
    ;
  }).prototype = ui.PhysicalShapeEngineLayer.prototype;
  dart.addTypeTests(ui.PhysicalShapeEngineLayer);
  ui.PhysicalShapeEngineLayer[dart.implements] = () => [ui.EngineLayer];
  dart.setLibraryUri(ui.PhysicalShapeEngineLayer, "package:flutter_web_ui/ui.dart");
  ui.SceneBuilder = class SceneBuilder extends core.Object {
    static new() {
      if (false) {
        return new engine.LayerSceneBuilder.new();
      } else {
        return new ui.SceneBuilder.__();
      }
    }
    get [_persistedScene$]() {
      if (!dart.test(dart.fn(() => {
        if (this[_surfaceStack$][$length] !== 1) {
          let surfacePrintout = this[_surfaceStack$][$map](core.Type, dart.fn(surface => dart.runtimeType(surface), PersistedContainerSurfaceToType()))[$toList]()[$join](", ");
          dart.throw(core.Exception.new("Incorrect sequence of push/pop operations while " + "building scene surfaces. After building the scene the persisted " + "surface stack must contain a single element which corresponds " + "to the scene itself (_PersistedScene). All other surfaces " + "should have been popped off the stack. Found the following " + "surfaces in the stack:\n" + dart.str(surfacePrintout)));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 146, 12, "() {\r\n      if (_surfaceStack.length != 1) {\r\n        final String surfacePrintout = _surfaceStack\r\n            .map<Type>((engine.PersistedContainerSurface surface) =>\r\n                surface.runtimeType)\r\n            .toList()\r\n            .join(', ');\r\n        throw Exception('Incorrect sequence of push/pop operations while '\r\n            'building scene surfaces. After building the scene the persisted '\r\n            'surface stack must contain a single element which corresponds '\r\n            'to the scene itself (_PersistedScene). All other surfaces '\r\n            'should have been popped off the stack. Found the following '\r\n            'surfaces in the stack:\\n$surfacePrintout');\r\n      }\r\n      return true;\r\n    }()");
      return engine.PersistedScene._check(this[_surfaceStack$][$first]);
    }
    get [_currentSurface$]() {
      return this[_surfaceStack$][$last];
    }
    [_pushSurface$](surface) {
      if (surface.oldLayer != null) {
        if (!dart.equals(dart.runtimeType(surface.oldLayer), dart.runtimeType(surface))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 172, 14, "surface.oldLayer.runtimeType == surface.runtimeType");
        if (!dart.test(surface.oldLayer.isActive)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 173, 14, "surface.oldLayer.isActive");
        surface.oldLayer.state = engine.PersistedSurfaceState.pendingUpdate;
      }
      this[_adoptSurface$](surface);
      this[_surfaceStack$][$add](surface);
      return surface;
    }
    [_addSurface$](surface) {
      this[_adoptSurface$](surface);
    }
    [_adoptSurface$](surface) {
      this[_currentSurface$].appendChild(surface);
    }
    pushOffset(dx, dy, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      return ui.OffsetEngineLayer._check(this[_pushSurface$](new engine.PersistedOffset.new(engine.PersistedOffset._check(oldLayer), dx, dy)));
    }
    pushTransform(matrix4, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      if (matrix4 == null) {
        dart.throw(new core.ArgumentError.new("\"matrix4\" argument cannot be null"));
      }
      if (matrix4[$length] !== 16) {
        dart.throw(new core.ArgumentError.new("\"matrix4\" must have 16 entries."));
      }
      return ui.TransformEngineLayer._check(this[_pushSurface$](new engine.PersistedTransform.new(engine.PersistedTransform._check(oldLayer), matrix4)));
    }
    pushClipRect(rect, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C18 || CT.C18;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      if (!(clipBehavior != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 223, 12, "clipBehavior != null");
      if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 224, 12, "clipBehavior != Clip.none");
      return ui.ClipRectEngineLayer._check(this[_pushSurface$](new engine.PersistedClipRect.new(engine.PersistedClipRect._check(oldLayer), rect)));
    }
    pushClipRRect(rrect, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      return ui.ClipRRectEngineLayer._check(this[_pushSurface$](new engine.PersistedClipRRect.new(oldLayer, rrect, clipBehavior)));
    }
    pushClipPath(path, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C18 || CT.C18;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      if (!(clipBehavior != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 246, 12, "clipBehavior != null");
      if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 247, 12, "clipBehavior != Clip.none");
      return ui.ClipPathEngineLayer._check(this[_pushSurface$](new engine.PersistedClipPath.new(engine.PersistedClipPath._check(oldLayer), path, clipBehavior)));
    }
    pushOpacity(alpha, opts) {
      let offset = opts && 'offset' in opts ? opts.offset : C21 || CT.C21;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      return ui.OpacityEngineLayer._check(this[_pushSurface$](new engine.PersistedOpacity.new(engine.PersistedOpacity._check(oldLayer), alpha, offset)));
    }
    pushColorFilter(filter, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      if (!(filter != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 276, 12, "filter != null");
      dart.throw(new core.UnimplementedError.new());
    }
    pushBackdropFilter(filter, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      return ui.BackdropFilterEngineLayer._check(this[_pushSurface$](new engine.PersistedBackdropFilter.new(engine.PersistedBackdropFilter._check(oldLayer), filter)));
    }
    pushShaderMask(shader, maskRect, blendMode, opts) {
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pushPhysicalShape(opts) {
      let t8, t8$;
      let path = opts && 'path' in opts ? opts.path : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C20 || CT.C20;
      let oldLayer = opts && 'oldLayer' in opts ? opts.oldLayer : null;
      return ui.PhysicalShapeEngineLayer._check(this[_pushSurface$](new engine.PersistedPhysicalShape.new(engine.PersistedPhysicalShape._check(oldLayer), path, elevation, color.value, (t8$ = (t8 = shadowColor, t8 == null ? null : t8.value), t8$ == null ? 4278190080 : t8$), clipBehavior)));
    }
    addRetained(retainedLayer) {
      let retainedSurface = engine.PersistedContainerSurface._check(retainedLayer);
      if (!(dart.test(retainedSurface.isActive) || dart.test(retainedSurface.isReleased))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 343, 12, "retainedSurface.isActive || retainedSurface.isReleased");
      retainedSurface.tryRetain();
      this[_adoptSurface$](retainedSurface);
    }
    pop() {
      if (!dart.test(this[_surfaceStack$][$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 355, 12, "_surfaceStack.isNotEmpty");
      this[_surfaceStack$][$removeLast]();
    }
    addPerformanceOverlay(enabledOptions, bounds) {
      this[_addPerformanceOverlay$](enabledOptions, bounds.left, bounds.right, bounds.top, bounds.bottom);
    }
    [_addPerformanceOverlay$](enabledOptions, left, right, top, bottom) {
      if (!dart.test(ui.SceneBuilder._webOnlyDidWarnAboutPerformanceOverlay)) {
        ui.SceneBuilder._webOnlyDidWarnAboutPerformanceOverlay = true;
        html.window[$console].warn("The performance overlay isn't supported on the web");
      }
    }
    addPicture(offset, picture, opts) {
      let isComplexHint = opts && 'isComplexHint' in opts ? opts.isComplexHint : false;
      let willChangeHint = opts && 'willChangeHint' in opts ? opts.willChangeHint : false;
      let hints = 0;
      if (dart.test(isComplexHint)) {
        hints = (hints | 1) >>> 0;
      }
      if (dart.test(willChangeHint)) {
        hints = (hints | 2) >>> 0;
      }
      this[_addSurface$](engine.persistedPictureFactory(offset.dx, offset.dy, picture, hints));
    }
    addTexture(textureId, opts) {
      let offset = opts && 'offset' in opts ? opts.offset : C21 || CT.C21;
      let width = opts && 'width' in opts ? opts.width : 0;
      let height = opts && 'height' in opts ? opts.height : 0;
      let freeze = opts && 'freeze' in opts ? opts.freeze : false;
      if (!(offset != null)) dart.assertFailed("Offset argument was null", "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 431, 12, "offset != null");
      this[_addTexture$](offset.dx, offset.dy, width, height, textureId);
    }
    [_addTexture$](dx, dy, width, height, textureId) {
      if (!dart.test(ui.debugEmulateFlutterTesterEnvironment)) {
        dart.throw(new core.UnimplementedError.new("Textures are not supported in Flutter Web"));
      }
    }
    addPlatformView(viewId, opts) {
      let offset = opts && 'offset' in opts ? opts.offset : C21 || CT.C21;
      let width = opts && 'width' in opts ? opts.width : 0;
      let height = opts && 'height' in opts ? opts.height : 0;
      if (!(offset != null)) dart.assertFailed("Offset argument was null", "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 465, 12, "offset != null");
      this[_addPlatformView$](offset.dx, offset.dy, width, height, viewId);
    }
    [_addPlatformView$](dx, dy, width, height, viewId) {
      this[_addSurface$](new engine.PersistedPlatformView.new(viewId, dx, dy, width, height));
    }
    addChildScene(opts) {
      let offset = opts && 'offset' in opts ? opts.offset : C21 || CT.C21;
      let width = opts && 'width' in opts ? opts.width : 0;
      let height = opts && 'height' in opts ? opts.height : 0;
      let sceneHost = opts && 'sceneHost' in opts ? opts.sceneHost : null;
      let hitTestable = opts && 'hitTestable' in opts ? opts.hitTestable : true;
      this[_addChildScene$](offset.dx, offset.dy, width, height, sceneHost, hitTestable);
    }
    [_addChildScene$](dx, dy, width, height, sceneHost, hitTestable) {
      dart.throw(new core.UnimplementedError.new());
    }
    setRasterizerTracingThreshold(frameInterval) {
    }
    setCheckerboardRasterCacheImages(checkerboard) {
    }
    setCheckerboardOffscreenLayers(checkerboard) {
    }
    static get debugLastFrameScene() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        result = ui.SceneBuilder._lastFrameScene;
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart", 540, 12, "() {\r\n      result = _lastFrameScene;\r\n      return true;\r\n    }()");
      return result;
    }
    static debugForgetFrameScene() {
      let t8, t8$;
      t8$ = (t8 = ui.SceneBuilder._lastFrameScene, t8 == null ? null : t8.rootElement);
      t8$ == null ? null : t8$[$remove]();
      ui.SceneBuilder._lastFrameScene = null;
      engine.debugForgetFrameScene();
    }
    build() {
      this[_persistedScene$].preroll();
      if (ui.SceneBuilder._lastFrameScene == null) {
        this[_persistedScene$].build();
      } else {
        this[_persistedScene$].update(ui.SceneBuilder._lastFrameScene);
      }
      engine.commitScene(this[_persistedScene$]);
      ui.SceneBuilder._lastFrameScene = this[_persistedScene$];
      return new ui.Scene.__(this[_persistedScene$].rootElement);
    }
    setProperties(width, height, insetTop, insetRight, insetBottom, insetLeft, focusable) {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (ui.SceneBuilder.__ = function() {
    this[_surfaceStack$] = JSArrayOfPersistedContainerSurface().of([]);
    this[_surfaceStack$][$add](new engine.PersistedScene.new(ui.SceneBuilder._lastFrameScene));
  }).prototype = ui.SceneBuilder.prototype;
  dart.addTypeTests(ui.SceneBuilder);
  dart.setMethodSignature(ui.SceneBuilder, () => ({
    __proto__: dart.getMethods(ui.SceneBuilder.__proto__),
    [_pushSurface$]: dart.fnType(ui.EngineLayer, [engine.PersistedContainerSurface]),
    [_addSurface$]: dart.fnType(dart.void, [engine.PersistedSurface]),
    [_adoptSurface$]: dart.fnType(dart.void, [engine.PersistedSurface]),
    pushOffset: dart.fnType(ui.OffsetEngineLayer, [core.double, core.double], {oldLayer: ui.OffsetEngineLayer}),
    pushTransform: dart.fnType(ui.TransformEngineLayer, [typed_data.Float64List], {oldLayer: ui.TransformEngineLayer}),
    pushClipRect: dart.fnType(ui.ClipRectEngineLayer, [ui.Rect], {clipBehavior: ui.Clip, oldLayer: ui.ClipRectEngineLayer}),
    pushClipRRect: dart.fnType(ui.ClipRRectEngineLayer, [ui.RRect], {clipBehavior: ui.Clip, oldLayer: ui.ClipRRectEngineLayer}),
    pushClipPath: dart.fnType(ui.ClipPathEngineLayer, [ui.Path], {clipBehavior: ui.Clip, oldLayer: ui.ClipPathEngineLayer}),
    pushOpacity: dart.fnType(ui.OpacityEngineLayer, [core.int], {offset: ui.Offset, oldLayer: ui.OpacityEngineLayer}),
    pushColorFilter: dart.fnType(ui.ColorFilterEngineLayer, [ui.ColorFilter], {oldLayer: ui.ColorFilterEngineLayer}),
    pushBackdropFilter: dart.fnType(ui.BackdropFilterEngineLayer, [ui.ImageFilter], {oldLayer: ui.BackdropFilterEngineLayer}),
    pushShaderMask: dart.fnType(ui.ShaderMaskEngineLayer, [ui.Shader, ui.Rect, ui.BlendMode], {oldLayer: ui.ShaderMaskEngineLayer}),
    pushPhysicalShape: dart.fnType(ui.PhysicalShapeEngineLayer, [], {clipBehavior: ui.Clip, color: ui.Color, elevation: core.double, oldLayer: ui.PhysicalShapeEngineLayer, path: ui.Path, shadowColor: ui.Color}),
    addRetained: dart.fnType(dart.void, [ui.EngineLayer]),
    pop: dart.fnType(dart.void, []),
    addPerformanceOverlay: dart.fnType(dart.void, [core.int, ui.Rect]),
    [_addPerformanceOverlay$]: dart.fnType(dart.void, [core.int, core.double, core.double, core.double, core.double]),
    addPicture: dart.fnType(dart.void, [ui.Offset, ui.Picture], {isComplexHint: core.bool, willChangeHint: core.bool}),
    addTexture: dart.fnType(dart.void, [core.int], {freeze: core.bool, height: core.double, offset: ui.Offset, width: core.double}),
    [_addTexture$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.int]),
    addPlatformView: dart.fnType(dart.void, [core.int], {height: core.double, offset: ui.Offset, width: core.double}),
    [_addPlatformView$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.int]),
    addChildScene: dart.fnType(dart.void, [], {height: core.double, hitTestable: core.bool, offset: ui.Offset, sceneHost: ui.SceneHost, width: core.double}),
    [_addChildScene$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, ui.SceneHost, core.bool]),
    setRasterizerTracingThreshold: dart.fnType(dart.void, [core.int]),
    setCheckerboardRasterCacheImages: dart.fnType(dart.void, [core.bool]),
    setCheckerboardOffscreenLayers: dart.fnType(dart.void, [core.bool]),
    build: dart.fnType(ui.Scene, []),
    setProperties: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double, core.bool])
  }));
  dart.setGetterSignature(ui.SceneBuilder, () => ({
    __proto__: dart.getGetters(ui.SceneBuilder.__proto__),
    [_persistedScene$]: engine.PersistedScene,
    [_currentSurface$]: engine.PersistedContainerSurface
  }));
  dart.setLibraryUri(ui.SceneBuilder, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.SceneBuilder, () => ({
    __proto__: dart.getFields(ui.SceneBuilder.__proto__),
    [_surfaceStack$]: dart.finalFieldType(core.List$(engine.PersistedContainerSurface))
  }));
  dart.defineLazy(ui.SceneBuilder, {
    /*ui.SceneBuilder._webOnlyDidWarnAboutPerformanceOverlay*/get _webOnlyDidWarnAboutPerformanceOverlay() {
      return false;
    },
    set _webOnlyDidWarnAboutPerformanceOverlay(_) {},
    /*ui.SceneBuilder._lastFrameScene*/get _lastFrameScene() {
      return null;
    },
    set _lastFrameScene(_) {}
  });
  ui.EngineLayer = class EngineLayer extends core.Object {};
  (ui.EngineLayer.new = function() {
    ;
  }).prototype = ui.EngineLayer.prototype;
  dart.addTypeTests(ui.EngineLayer);
  dart.setLibraryUri(ui.EngineLayer, "package:flutter_web_ui/ui.dart");
  ui.SceneHost = class SceneHost extends core.Object {
    dispose() {
    }
    setProperties(width, height, insetTop, insetRight, insetBottom, insetLeft, focusable) {
      dart.throw(new core.UnimplementedError.new());
    }
    setOpacity(opacity) {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (ui.SceneHost.new = function(viewHolderToken, viewConnectedCallback, viewDisconnectedCallback, viewStateChangedCallback) {
    ;
  }).prototype = ui.SceneHost.prototype;
  (ui.SceneHost.fromViewHolderToken = function(viewHolderToken, viewConnectedCallback, viewDisconnectedCallback, viewStateChangedCallback) {
    ;
  }).prototype = ui.SceneHost.prototype;
  dart.addTypeTests(ui.SceneHost);
  dart.setMethodSignature(ui.SceneHost, () => ({
    __proto__: dart.getMethods(ui.SceneHost.__proto__),
    dispose: dart.fnType(dart.void, []),
    setProperties: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double, core.bool]),
    setOpacity: dart.fnType(dart.void, [core.double])
  }));
  dart.setLibraryUri(ui.SceneHost, "package:flutter_web_ui/ui.dart");
  const _dx = dart.privateName(ui, "_dx");
  const _dy = dart.privateName(ui, "_dy");
  ui.OffsetBase = class OffsetBase extends core.Object {
    get [_dx]() {
      return this[_dx$];
    }
    set [_dx](value) {
      super[_dx] = value;
    }
    get [_dy]() {
      return this[_dy$];
    }
    set [_dy](value) {
      super[_dy] = value;
    }
    get isInfinite() {
      return dart.notNull(this[_dx]) >= 1 / 0 || dart.notNull(this[_dy]) >= 1 / 0;
    }
    get isFinite() {
      return this[_dx][$isFinite] && this[_dy][$isFinite];
    }
    ['<'](other) {
      return dart.notNull(this[_dx]) < dart.notNull(other[_dx]) && dart.notNull(this[_dy]) < dart.notNull(other[_dy]);
    }
    ['<='](other) {
      return dart.notNull(this[_dx]) <= dart.notNull(other[_dx]) && dart.notNull(this[_dy]) <= dart.notNull(other[_dy]);
    }
    ['>'](other) {
      return dart.notNull(this[_dx]) > dart.notNull(other[_dx]) && dart.notNull(this[_dy]) > dart.notNull(other[_dy]);
    }
    ['>='](other) {
      return dart.notNull(this[_dx]) > dart.notNull(other[_dx]) && dart.notNull(this[_dy]) >= dart.notNull(other[_dy]);
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.OffsetBase.is(other)) {
        return false;
      }
      let typedOther = ui.OffsetBase._check(other);
      return this[_dx] == typedOther[_dx] && this[_dy] == typedOther[_dy];
    }
    get hashCode() {
      return ui.hashValues(this[_dx], this[_dy]);
    }
    toString() {
      let t8, t8$;
      return dart.str(this[$runtimeType]) + "(" + dart.str((t8 = this[_dx], t8 == null ? null : t8[$toStringAsFixed](1))) + ", " + dart.str((t8$ = this[_dy], t8$ == null ? null : t8$[$toStringAsFixed](1))) + ")";
    }
  };
  (ui.OffsetBase.new = function(_dx, _dy) {
    this[_dx$] = _dx;
    this[_dy$] = _dy;
    ;
  }).prototype = ui.OffsetBase.prototype;
  dart.addTypeTests(ui.OffsetBase);
  const _dx$ = OffsetBase__dx;
  const _dy$ = OffsetBase__dy;
  dart.setMethodSignature(ui.OffsetBase, () => ({
    __proto__: dart.getMethods(ui.OffsetBase.__proto__),
    '<': dart.fnType(core.bool, [ui.OffsetBase]),
    '<=': dart.fnType(core.bool, [ui.OffsetBase]),
    '>': dart.fnType(core.bool, [ui.OffsetBase]),
    '>=': dart.fnType(core.bool, [ui.OffsetBase])
  }));
  dart.setGetterSignature(ui.OffsetBase, () => ({
    __proto__: dart.getGetters(ui.OffsetBase.__proto__),
    isInfinite: core.bool,
    isFinite: core.bool
  }));
  dart.setLibraryUri(ui.OffsetBase, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.OffsetBase, () => ({
    __proto__: dart.getFields(ui.OffsetBase.__proto__),
    [_dx]: dart.finalFieldType(core.double),
    [_dy]: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.OffsetBase, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.OffsetBase, ['hashCode']);
  let C1202;
  ui.Offset = class Offset extends ui.OffsetBase {
    static fromDirection(direction, distance) {
      if (distance === void 0) distance = 1;
      return new ui.Offset.new(dart.notNull(distance) * math.cos(direction), dart.notNull(distance) * math.sin(direction));
    }
    get dx() {
      return this[_dx];
    }
    get dy() {
      return this[_dy];
    }
    get distance() {
      return math.sqrt(dart.notNull(this.dx) * dart.notNull(this.dx) + dart.notNull(this.dy) * dart.notNull(this.dy));
    }
    get distanceSquared() {
      return dart.notNull(this.dx) * dart.notNull(this.dx) + dart.notNull(this.dy) * dart.notNull(this.dy);
    }
    get direction() {
      return math.atan2(this.dy, this.dx);
    }
    scale(scaleX, scaleY) {
      return new ui.Offset.new(dart.notNull(this.dx) * dart.notNull(scaleX), dart.notNull(this.dy) * dart.notNull(scaleY));
    }
    translate(translateX, translateY) {
      return new ui.Offset.new(dart.notNull(this.dx) + dart.notNull(translateX), dart.notNull(this.dy) + dart.notNull(translateY));
    }
    _negate() {
      return new ui.Offset.new(-dart.notNull(this.dx), -dart.notNull(this.dy));
    }
    ['-'](other) {
      return new ui.Offset.new(dart.notNull(this.dx) - dart.notNull(other.dx), dart.notNull(this.dy) - dart.notNull(other.dy));
    }
    ['+'](other) {
      return new ui.Offset.new(dart.notNull(this.dx) + dart.notNull(other.dx), dart.notNull(this.dy) + dart.notNull(other.dy));
    }
    ['*'](operand) {
      return new ui.Offset.new(dart.notNull(this.dx) * dart.notNull(operand), dart.notNull(this.dy) * dart.notNull(operand));
    }
    ['/'](operand) {
      return new ui.Offset.new(dart.notNull(this.dx) / dart.notNull(operand), dart.notNull(this.dy) / dart.notNull(operand));
    }
    ['~/'](operand) {
      return new ui.Offset.new((dart.notNull(this.dx) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.dy) / dart.notNull(operand))[$truncate]()[$toDouble]());
    }
    ['%'](operand) {
      return new ui.Offset.new(this.dx[$modulo](operand), this.dy[$modulo](operand));
    }
    ['&'](other) {
      return new ui.Rect.fromLTWH(this.dx, this.dy, other.width, other.height);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 323, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      if (a == null) {
        return b['*'](t);
      }
      if (b == null) {
        return a['*'](1.0 - dart.notNull(t));
      }
      return new ui.Offset.new(ui.lerpDouble(a.dx, b.dx, t), ui.lerpDouble(a.dy, b.dy, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.Offset.is(other)) {
        return false;
      }
      let typedOther = ui.Offset._check(other);
      return this.dx == typedOther.dx && this.dy == typedOther.dy;
    }
    get hashCode() {
      return ui.hashValues(this.dx, this.dy);
    }
    toString() {
      let t8, t8$;
      return "Offset(" + dart.str((t8 = this.dx, t8 == null ? null : t8[$toStringAsFixed](1))) + ", " + dart.str((t8$ = this.dy, t8$ == null ? null : t8$[$toStringAsFixed](1))) + ")";
    }
  };
  (ui.Offset.new = function(dx, dy) {
    ui.Offset.__proto__.new.call(this, dx, dy);
    ;
  }).prototype = ui.Offset.prototype;
  dart.addTypeTests(ui.Offset);
  dart.setMethodSignature(ui.Offset, () => ({
    __proto__: dart.getMethods(ui.Offset.__proto__),
    scale: dart.fnType(ui.Offset, [core.double, core.double]),
    translate: dart.fnType(ui.Offset, [core.double, core.double]),
    _negate: dart.fnType(ui.Offset, []),
    '-': dart.fnType(ui.Offset, [ui.Offset]),
    '+': dart.fnType(ui.Offset, [ui.Offset]),
    '*': dart.fnType(ui.Offset, [core.double]),
    '/': dart.fnType(ui.Offset, [core.double]),
    '~/': dart.fnType(ui.Offset, [core.double]),
    '%': dart.fnType(ui.Offset, [core.double]),
    '&': dart.fnType(ui.Rect, [ui.Size])
  }));
  dart.setGetterSignature(ui.Offset, () => ({
    __proto__: dart.getGetters(ui.Offset.__proto__),
    dx: core.double,
    dy: core.double,
    distance: core.double,
    distanceSquared: core.double,
    direction: core.double
  }));
  dart.setLibraryUri(ui.Offset, "package:flutter_web_ui/ui.dart");
  dart.defineExtensionMethods(ui.Offset, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Offset, ['hashCode']);
  dart.defineLazy(ui.Offset, {
    /*ui.Offset.zero*/get zero() {
      return C21 || CT.C21;
    },
    /*ui.Offset.infinite*/get infinite() {
      return C1202 || CT.C1202;
    }
  });
  let C1203;
  let C1204;
  ui.Size = class Size extends ui.OffsetBase {
    get width() {
      return this[_dx];
    }
    get height() {
      return this[_dy];
    }
    get aspectRatio() {
      if (this.height !== 0.0) {
        return dart.notNull(this.width) / dart.notNull(this.height);
      }
      if (dart.notNull(this.width) > 0.0) {
        return 1 / 0;
      }
      if (dart.notNull(this.width) < 0.0) {
        return -1 / 0;
      }
      return 0.0;
    }
    get isEmpty() {
      return dart.notNull(this.width) <= 0.0 || dart.notNull(this.height) <= 0.0;
    }
    ['-'](other) {
      if (ui.Size.is(other)) {
        return new ui.Offset.new(dart.notNull(this.width) - dart.notNull(other.width), dart.notNull(this.height) - dart.notNull(other.height));
      }
      if (ui.Offset.is(other)) {
        return new ui.Size.new(dart.notNull(this.width) - dart.notNull(other.dx), dart.notNull(this.height) - dart.notNull(other.dy));
      }
      dart.throw(new core.ArgumentError.new(other));
    }
    ['+'](other) {
      return new ui.Size.new(dart.notNull(this.width) + dart.notNull(other.dx), dart.notNull(this.height) + dart.notNull(other.dy));
    }
    ['*'](operand) {
      return new ui.Size.new(dart.notNull(this.width) * dart.notNull(operand), dart.notNull(this.height) * dart.notNull(operand));
    }
    ['/'](operand) {
      return new ui.Size.new(dart.notNull(this.width) / dart.notNull(operand), dart.notNull(this.height) / dart.notNull(operand));
    }
    ['~/'](operand) {
      return new ui.Size.new((dart.notNull(this.width) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.height) / dart.notNull(operand))[$truncate]()[$toDouble]());
    }
    ['%'](operand) {
      return new ui.Size.new(this.width[$modulo](operand), this.height[$modulo](operand));
    }
    get shortestSide() {
      return math.min(core.double, this.width[$abs](), this.height[$abs]());
    }
    get longestSide() {
      return math.max(core.double, this.width[$abs](), this.height[$abs]());
    }
    topLeft(origin) {
      return origin;
    }
    topCenter(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width) / 2.0, origin.dy);
    }
    topRight(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width), origin.dy);
    }
    centerLeft(origin) {
      return new ui.Offset.new(origin.dx, dart.notNull(origin.dy) + dart.notNull(this.height) / 2.0);
    }
    center(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width) / 2.0, dart.notNull(origin.dy) + dart.notNull(this.height) / 2.0);
    }
    centerRight(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width), dart.notNull(origin.dy) + dart.notNull(this.height) / 2.0);
    }
    bottomLeft(origin) {
      return new ui.Offset.new(origin.dx, dart.notNull(origin.dy) + dart.notNull(this.height));
    }
    bottomCenter(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width) / 2.0, dart.notNull(origin.dy) + dart.notNull(this.height));
    }
    bottomRight(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width), dart.notNull(origin.dy) + dart.notNull(this.height));
    }
    contains(offset) {
      return dart.notNull(offset.dx) >= 0.0 && dart.notNull(offset.dx) < dart.notNull(this.width) && dart.notNull(offset.dy) >= 0.0 && dart.notNull(offset.dy) < dart.notNull(this.height);
    }
    get flipped() {
      return new ui.Size.new(this.height, this.width);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 608, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      if (a == null) {
        return b['*'](t);
      }
      if (b == null) {
        return a['*'](1.0 - dart.notNull(t));
      }
      return new ui.Size.new(ui.lerpDouble(a.width, b.width, t), ui.lerpDouble(a.height, b.height, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.Size.is(other)) {
        return false;
      }
      let typedOther = ui.Size._check(other);
      return this[_dx] == typedOther[_dx] && this[_dy] == typedOther[_dy];
    }
    get hashCode() {
      return ui.hashValues(this[_dx], this[_dy]);
    }
    toString() {
      let t8, t8$;
      return "Size(" + dart.str((t8 = this.width, t8 == null ? null : t8[$toStringAsFixed](1))) + ", " + dart.str((t8$ = this.height, t8$ == null ? null : t8$[$toStringAsFixed](1))) + ")";
    }
  };
  (ui.Size.new = function(width, height) {
    ui.Size.__proto__.new.call(this, width, height);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.copy = function(source) {
    ui.Size.__proto__.new.call(this, source.width, source.height);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.square = function(dimension) {
    ui.Size.__proto__.new.call(this, dimension, dimension);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.fromWidth = function(width) {
    ui.Size.__proto__.new.call(this, width, 1 / 0);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.fromHeight = function(height) {
    ui.Size.__proto__.new.call(this, 1 / 0, height);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.fromRadius = function(radius) {
    ui.Size.__proto__.new.call(this, dart.notNull(radius) * 2.0, dart.notNull(radius) * 2.0);
    ;
  }).prototype = ui.Size.prototype;
  dart.addTypeTests(ui.Size);
  dart.setMethodSignature(ui.Size, () => ({
    __proto__: dart.getMethods(ui.Size.__proto__),
    '-': dart.fnType(ui.OffsetBase, [ui.OffsetBase]),
    '+': dart.fnType(ui.Size, [ui.Offset]),
    '*': dart.fnType(ui.Size, [core.double]),
    '/': dart.fnType(ui.Size, [core.double]),
    '~/': dart.fnType(ui.Size, [core.double]),
    '%': dart.fnType(ui.Size, [core.double]),
    topLeft: dart.fnType(ui.Offset, [ui.Offset]),
    topCenter: dart.fnType(ui.Offset, [ui.Offset]),
    topRight: dart.fnType(ui.Offset, [ui.Offset]),
    centerLeft: dart.fnType(ui.Offset, [ui.Offset]),
    center: dart.fnType(ui.Offset, [ui.Offset]),
    centerRight: dart.fnType(ui.Offset, [ui.Offset]),
    bottomLeft: dart.fnType(ui.Offset, [ui.Offset]),
    bottomCenter: dart.fnType(ui.Offset, [ui.Offset]),
    bottomRight: dart.fnType(ui.Offset, [ui.Offset]),
    contains: dart.fnType(core.bool, [ui.Offset])
  }));
  dart.setGetterSignature(ui.Size, () => ({
    __proto__: dart.getGetters(ui.Size.__proto__),
    width: core.double,
    height: core.double,
    aspectRatio: core.double,
    isEmpty: core.bool,
    shortestSide: core.double,
    longestSide: core.double,
    flipped: ui.Size
  }));
  dart.setLibraryUri(ui.Size, "package:flutter_web_ui/ui.dart");
  dart.defineExtensionMethods(ui.Size, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Size, ['hashCode']);
  dart.defineLazy(ui.Size, {
    /*ui.Size.zero*/get zero() {
      return C1203 || CT.C1203;
    },
    /*ui.Size.infinite*/get infinite() {
      return C1204 || CT.C1204;
    }
  });
  const Rect_left = dart.privateName(ui, "Rect.left");
  const Rect_top = dart.privateName(ui, "Rect.top");
  const Rect_right = dart.privateName(ui, "Rect.right");
  const Rect_bottom = dart.privateName(ui, "Rect.bottom");
  let C1205;
  let C1206;
  ui.Rect = class Rect extends core.Object {
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get width() {
      return dart.notNull(this.right) - dart.notNull(this.left);
    }
    get height() {
      return dart.notNull(this.bottom) - dart.notNull(this.top);
    }
    get size() {
      return new ui.Size.new(this.width, this.height);
    }
    get hasNaN() {
      return this.left[$isNaN] || this.top[$isNaN] || this.right[$isNaN] || this.bottom[$isNaN];
    }
    get isInfinite() {
      return dart.notNull(this.left) >= 1 / 0 || dart.notNull(this.top) >= 1 / 0 || dart.notNull(this.right) >= 1 / 0 || dart.notNull(this.bottom) >= 1 / 0;
    }
    get isFinite() {
      return this.left[$isFinite] && this.top[$isFinite] && this.right[$isFinite] && this.bottom[$isFinite];
    }
    get isEmpty() {
      return dart.notNull(this.left) >= dart.notNull(this.right) || dart.notNull(this.top) >= dart.notNull(this.bottom);
    }
    shift(offset) {
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + dart.notNull(offset.dx), dart.notNull(this.top) + dart.notNull(offset.dy), dart.notNull(this.right) + dart.notNull(offset.dx), dart.notNull(this.bottom) + dart.notNull(offset.dy));
    }
    translate(translateX, translateY) {
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + dart.notNull(translateX), dart.notNull(this.top) + dart.notNull(translateY), dart.notNull(this.right) + dart.notNull(translateX), dart.notNull(this.bottom) + dart.notNull(translateY));
    }
    inflate(delta) {
      return new ui.Rect.fromLTRB(dart.notNull(this.left) - dart.notNull(delta), dart.notNull(this.top) - dart.notNull(delta), dart.notNull(this.right) + dart.notNull(delta), dart.notNull(this.bottom) + dart.notNull(delta));
    }
    deflate(delta) {
      return this.inflate(-dart.notNull(delta));
    }
    intersect(other) {
      return new ui.Rect.fromLTRB(math.max(core.double, this.left, other.left), math.max(core.double, this.top, other.top), math.min(core.double, this.right, other.right), math.min(core.double, this.bottom, other.bottom));
    }
    expandToInclude(other) {
      return new ui.Rect.fromLTRB(math.min(core.double, this.left, other.left), math.min(core.double, this.top, other.top), math.max(core.double, this.right, other.right), math.max(core.double, this.bottom, other.bottom));
    }
    overlaps(other) {
      if (dart.notNull(this.right) <= dart.notNull(other.left) || dart.notNull(other.right) <= dart.notNull(this.left)) {
        return false;
      }
      if (dart.notNull(this.bottom) <= dart.notNull(other.top) || dart.notNull(other.bottom) <= dart.notNull(this.top)) {
        return false;
      }
      return true;
    }
    get shortestSide() {
      return math.min(core.double, this.width[$abs](), this.height[$abs]());
    }
    get longestSide() {
      return math.max(core.double, this.width[$abs](), this.height[$abs]());
    }
    get topLeft() {
      return new ui.Offset.new(this.left, this.top);
    }
    get topCenter() {
      return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, this.top);
    }
    get topRight() {
      return new ui.Offset.new(this.right, this.top);
    }
    get centerLeft() {
      return new ui.Offset.new(this.left, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
    }
    get center() {
      return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
    }
    get centerRight() {
      return new ui.Offset.new(this.right, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
    }
    get bottomLeft() {
      return new ui.Offset.new(this.left, this.bottom);
    }
    get bottomCenter() {
      return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, this.bottom);
    }
    get bottomRight() {
      return new ui.Offset.new(this.right, this.bottom);
    }
    contains(offset) {
      return dart.notNull(offset.dx) >= dart.notNull(this.left) && dart.notNull(offset.dx) < dart.notNull(this.right) && dart.notNull(offset.dy) >= dart.notNull(this.top) && dart.notNull(offset.dy) < dart.notNull(this.bottom);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 893, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      if (a == null) return new ui.Rect.fromLTRB(dart.notNull(b.left) * dart.notNull(t), dart.notNull(b.top) * dart.notNull(t), dart.notNull(b.right) * dart.notNull(t), dart.notNull(b.bottom) * dart.notNull(t));
      if (b == null) {
        let k = 1.0 - dart.notNull(t);
        return new ui.Rect.fromLTRB(dart.notNull(a.left) * k, dart.notNull(a.top) * k, dart.notNull(a.right) * k, dart.notNull(a.bottom) * k);
      }
      return new ui.Rect.fromLTRB(ui.lerpDouble(a.left, b.left, t), ui.lerpDouble(a.top, b.top, t), ui.lerpDouble(a.right, b.right, t), ui.lerpDouble(a.bottom, b.bottom, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) {
        return false;
      }
      let typedOther = ui.Rect._check(other);
      return this.left == typedOther.left && this.top == typedOther.top && this.right == typedOther.right && this.bottom == typedOther.bottom;
    }
    get hashCode() {
      return ui.hashValues(this.left, this.top, this.right, this.bottom);
    }
    toString() {
      return "Rect.fromLTRB(" + this.left[$toStringAsFixed](1) + ", " + this.top[$toStringAsFixed](1) + ", " + this.right[$toStringAsFixed](1) + ", " + this.bottom[$toStringAsFixed](1) + ")";
    }
  };
  (ui.Rect.fromLTRB = function(left, top, right, bottom) {
    this[left$] = left;
    this[top$] = top;
    this[right$] = right;
    this[bottom$] = bottom;
    if (!(left != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 653, 16, "left != null");
    if (!(top != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 654, 16, "top != null");
    if (!(right != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 655, 16, "right != null");
    if (!(bottom != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 656, 16, "bottom != null");
    ;
  }).prototype = ui.Rect.prototype;
  (ui.Rect.fromLTWH = function(left, top, width, height) {
    ui.Rect.fromLTRB.call(this, left, top, dart.notNull(left) + dart.notNull(width), dart.notNull(top) + dart.notNull(height));
  }).prototype = ui.Rect.prototype;
  (ui.Rect.fromCircle = function(opts) {
    let center = opts && 'center' in opts ? opts.center : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    ui.Rect.fromCenter.call(this, {center: center, width: dart.notNull(radius) * 2, height: dart.notNull(radius) * 2});
  }).prototype = ui.Rect.prototype;
  (ui.Rect.fromCenter = function(opts) {
    let center = opts && 'center' in opts ? opts.center : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    ui.Rect.fromLTRB.call(this, dart.notNull(center.dx) - dart.notNull(width) / 2, dart.notNull(center.dy) - dart.notNull(height) / 2, dart.notNull(center.dx) + dart.notNull(width) / 2, dart.notNull(center.dy) + dart.notNull(height) / 2);
  }).prototype = ui.Rect.prototype;
  (ui.Rect.fromPoints = function(a, b) {
    ui.Rect.fromLTRB.call(this, math.min(core.double, a.dx, b.dx), math.min(core.double, a.dy, b.dy), math.max(core.double, a.dx, b.dx), math.max(core.double, a.dy, b.dy));
  }).prototype = ui.Rect.prototype;
  dart.addTypeTests(ui.Rect);
  const left$ = Rect_left;
  const top$ = Rect_top;
  const right$ = Rect_right;
  const bottom$ = Rect_bottom;
  dart.setMethodSignature(ui.Rect, () => ({
    __proto__: dart.getMethods(ui.Rect.__proto__),
    shift: dart.fnType(ui.Rect, [ui.Offset]),
    translate: dart.fnType(ui.Rect, [core.double, core.double]),
    inflate: dart.fnType(ui.Rect, [core.double]),
    deflate: dart.fnType(ui.Rect, [core.double]),
    intersect: dart.fnType(ui.Rect, [ui.Rect]),
    expandToInclude: dart.fnType(ui.Rect, [ui.Rect]),
    overlaps: dart.fnType(core.bool, [ui.Rect]),
    contains: dart.fnType(core.bool, [ui.Offset])
  }));
  dart.setGetterSignature(ui.Rect, () => ({
    __proto__: dart.getGetters(ui.Rect.__proto__),
    width: core.double,
    height: core.double,
    size: ui.Size,
    hasNaN: core.bool,
    isInfinite: core.bool,
    isFinite: core.bool,
    isEmpty: core.bool,
    shortestSide: core.double,
    longestSide: core.double,
    topLeft: ui.Offset,
    topCenter: ui.Offset,
    topRight: ui.Offset,
    centerLeft: ui.Offset,
    center: ui.Offset,
    centerRight: ui.Offset,
    bottomLeft: ui.Offset,
    bottomCenter: ui.Offset,
    bottomRight: ui.Offset
  }));
  dart.setLibraryUri(ui.Rect, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Rect, () => ({
    __proto__: dart.getFields(ui.Rect.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.Rect, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Rect, ['hashCode']);
  dart.defineLazy(ui.Rect, {
    /*ui.Rect.zero*/get zero() {
      return C1205 || CT.C1205;
    },
    /*ui.Rect._giantScalar*/get _giantScalar() {
      return 1000000000;
    },
    /*ui.Rect.largest*/get largest() {
      return C1206 || CT.C1206;
    }
  });
  ui.Radius = class Radius extends core.Object {
    get x() {
      return this[x$3];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$3];
    }
    set y(value) {
      super.y = value;
    }
    _negate() {
      return new ui.Radius.elliptical(-dart.notNull(this.x), -dart.notNull(this.y));
    }
    ['-'](other) {
      return new ui.Radius.elliptical(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['+'](other) {
      return new ui.Radius.elliptical(dart.notNull(this.x) + dart.notNull(other.x), dart.notNull(this.y) + dart.notNull(other.y));
    }
    ['*'](operand) {
      return new ui.Radius.elliptical(dart.notNull(this.x) * dart.notNull(operand), dart.notNull(this.y) * dart.notNull(operand));
    }
    ['/'](operand) {
      return new ui.Radius.elliptical(dart.notNull(this.x) / dart.notNull(operand), dart.notNull(this.y) / dart.notNull(operand));
    }
    ['~/'](operand) {
      return new ui.Radius.elliptical((dart.notNull(this.x) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.y) / dart.notNull(operand))[$truncate]()[$toDouble]());
    }
    ['%'](operand) {
      return new ui.Radius.elliptical(this.x[$modulo](operand), this.y[$modulo](operand));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1027, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      if (a == null) {
        return new ui.Radius.elliptical(dart.notNull(b.x) * dart.notNull(t), dart.notNull(b.y) * dart.notNull(t));
      }
      if (b == null) {
        let k = 1.0 - dart.notNull(t);
        return new ui.Radius.elliptical(dart.notNull(a.x) * k, dart.notNull(a.y) * k);
      }
      return new ui.Radius.elliptical(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) {
        return false;
      }
      let typedOther = ui.Radius._check(other);
      return typedOther.x == this.x && typedOther.y == this.y;
    }
    get hashCode() {
      return ui.hashValues(this.x, this.y);
    }
    toString() {
      return this.x == this.y ? "Radius.circular(" + this.x[$toStringAsFixed](1) + ")" : "Radius.elliptical(" + this.x[$toStringAsFixed](1) + ", " + this.y[$toStringAsFixed](1) + ")";
    }
  };
  (ui.Radius.circular = function(radius) {
    ui.Radius.elliptical.call(this, radius, radius);
  }).prototype = ui.Radius.prototype;
  (ui.Radius.elliptical = function(x, y) {
    this[x$3] = x;
    this[y$3] = y;
    ;
  }).prototype = ui.Radius.prototype;
  dart.addTypeTests(ui.Radius);
  const x$3 = Radius_x;
  const y$3 = Radius_y;
  dart.setMethodSignature(ui.Radius, () => ({
    __proto__: dart.getMethods(ui.Radius.__proto__),
    _negate: dart.fnType(ui.Radius, []),
    '-': dart.fnType(ui.Radius, [ui.Radius]),
    '+': dart.fnType(ui.Radius, [ui.Radius]),
    '*': dart.fnType(ui.Radius, [core.double]),
    '/': dart.fnType(ui.Radius, [core.double]),
    '~/': dart.fnType(ui.Radius, [core.double]),
    '%': dart.fnType(ui.Radius, [core.double])
  }));
  dart.setLibraryUri(ui.Radius, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Radius, () => ({
    __proto__: dart.getFields(ui.Radius.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.Radius, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Radius, ['hashCode']);
  dart.defineLazy(ui.Radius, {
    /*ui.Radius.zero*/get zero() {
      return C34 || CT.C34;
    }
  });
  const _getMin = dart.privateName(ui, "_getMin");
  const RRect_left = dart.privateName(ui, "RRect.left");
  const RRect_top = dart.privateName(ui, "RRect.top");
  const RRect_right = dart.privateName(ui, "RRect.right");
  const RRect_bottom = dart.privateName(ui, "RRect.bottom");
  const RRect_tlRadiusX = dart.privateName(ui, "RRect.tlRadiusX");
  const RRect_tlRadiusY = dart.privateName(ui, "RRect.tlRadiusY");
  const RRect_trRadiusX = dart.privateName(ui, "RRect.trRadiusX");
  const RRect_trRadiusY = dart.privateName(ui, "RRect.trRadiusY");
  const RRect_brRadiusX = dart.privateName(ui, "RRect.brRadiusX");
  const RRect_brRadiusY = dart.privateName(ui, "RRect.brRadiusY");
  const RRect_blRadiusX = dart.privateName(ui, "RRect.blRadiusX");
  const RRect_blRadiusY = dart.privateName(ui, "RRect.blRadiusY");
  let C1207;
  ui.RRect = class RRect extends core.Object {
    get left() {
      return this[left$0];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$0];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$0];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$0];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get tlRadiusX() {
      return this[tlRadiusX$];
    }
    set tlRadiusX(value) {
      super.tlRadiusX = value;
    }
    get tlRadiusY() {
      return this[tlRadiusY$];
    }
    set tlRadiusY(value) {
      super.tlRadiusY = value;
    }
    get trRadiusX() {
      return this[trRadiusX$];
    }
    set trRadiusX(value) {
      super.trRadiusX = value;
    }
    get trRadiusY() {
      return this[trRadiusY$];
    }
    set trRadiusY(value) {
      super.trRadiusY = value;
    }
    get brRadiusX() {
      return this[brRadiusX$];
    }
    set brRadiusX(value) {
      super.brRadiusX = value;
    }
    get brRadiusY() {
      return this[brRadiusY$];
    }
    set brRadiusY(value) {
      super.brRadiusY = value;
    }
    get blRadiusX() {
      return this[blRadiusX$];
    }
    set blRadiusX(value) {
      super.blRadiusX = value;
    }
    get blRadiusY() {
      return this[blRadiusY$];
    }
    set blRadiusY(value) {
      super.blRadiusY = value;
    }
    get tlRadius() {
      return new ui.Radius.elliptical(this.tlRadiusX, this.tlRadiusY);
    }
    get trRadius() {
      return new ui.Radius.elliptical(this.trRadiusX, this.trRadiusY);
    }
    get brRadius() {
      return new ui.Radius.elliptical(this.brRadiusX, this.brRadiusY);
    }
    get blRadius() {
      return new ui.Radius.elliptical(this.blRadiusX, this.blRadiusY);
    }
    shift(offset) {
      return new ui.RRect._raw({left: dart.notNull(this.left) + dart.notNull(offset.dx), top: dart.notNull(this.top) + dart.notNull(offset.dy), right: dart.notNull(this.right) + dart.notNull(offset.dx), bottom: dart.notNull(this.bottom) + dart.notNull(offset.dy), tlRadiusX: this.tlRadiusX, tlRadiusY: this.tlRadiusY, trRadiusX: this.trRadiusX, trRadiusY: this.trRadiusY, blRadiusX: this.blRadiusX, blRadiusY: this.blRadiusY, brRadiusX: this.brRadiusX, brRadiusY: this.brRadiusY});
    }
    inflate(delta) {
      return new ui.RRect._raw({left: dart.notNull(this.left) - dart.notNull(delta), top: dart.notNull(this.top) - dart.notNull(delta), right: dart.notNull(this.right) + dart.notNull(delta), bottom: dart.notNull(this.bottom) + dart.notNull(delta), tlRadiusX: dart.notNull(this.tlRadiusX) + dart.notNull(delta), tlRadiusY: dart.notNull(this.tlRadiusY) + dart.notNull(delta), trRadiusX: dart.notNull(this.trRadiusX) + dart.notNull(delta), trRadiusY: dart.notNull(this.trRadiusY) + dart.notNull(delta), blRadiusX: dart.notNull(this.blRadiusX) + dart.notNull(delta), blRadiusY: dart.notNull(this.blRadiusY) + dart.notNull(delta), brRadiusX: dart.notNull(this.brRadiusX) + dart.notNull(delta), brRadiusY: dart.notNull(this.brRadiusY) + dart.notNull(delta)});
    }
    deflate(delta) {
      return this.inflate(-dart.notNull(delta));
    }
    get width() {
      return dart.notNull(this.right) - dart.notNull(this.left);
    }
    get height() {
      return dart.notNull(this.bottom) - dart.notNull(this.top);
    }
    get outerRect() {
      return new ui.Rect.fromLTRB(this.left, this.top, this.right, this.bottom);
    }
    get safeInnerRect() {
      let leftRadius = math.max(core.double, this.blRadiusX, this.tlRadiusX);
      let topRadius = math.max(core.double, this.tlRadiusY, this.trRadiusY);
      let rightRadius = math.max(core.double, this.trRadiusX, this.brRadiusX);
      let bottomRadius = math.max(core.double, this.brRadiusY, this.blRadiusY);
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + leftRadius * 0.29289321881, dart.notNull(this.top) + topRadius * 0.29289321881, dart.notNull(this.right) - rightRadius * 0.29289321881, dart.notNull(this.bottom) - bottomRadius * 0.29289321881);
    }
    get middleRect() {
      let leftRadius = math.max(core.double, this.blRadiusX, this.tlRadiusX);
      let topRadius = math.max(core.double, this.tlRadiusY, this.trRadiusY);
      let rightRadius = math.max(core.double, this.trRadiusX, this.brRadiusX);
      let bottomRadius = math.max(core.double, this.brRadiusY, this.blRadiusY);
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + leftRadius, dart.notNull(this.top) + topRadius, dart.notNull(this.right) - rightRadius, dart.notNull(this.bottom) - bottomRadius);
    }
    get wideMiddleRect() {
      let topRadius = math.max(core.double, this.tlRadiusY, this.trRadiusY);
      let bottomRadius = math.max(core.double, this.brRadiusY, this.blRadiusY);
      return new ui.Rect.fromLTRB(this.left, dart.notNull(this.top) + topRadius, this.right, dart.notNull(this.bottom) - bottomRadius);
    }
    get tallMiddleRect() {
      let leftRadius = math.max(core.double, this.blRadiusX, this.tlRadiusX);
      let rightRadius = math.max(core.double, this.trRadiusX, this.brRadiusX);
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + leftRadius, this.top, dart.notNull(this.right) - rightRadius, this.bottom);
    }
    get isEmpty() {
      return dart.notNull(this.left) >= dart.notNull(this.right) || dart.notNull(this.top) >= dart.notNull(this.bottom);
    }
    get isFinite() {
      return this.left[$isFinite] && this.top[$isFinite] && this.right[$isFinite] && this.bottom[$isFinite];
    }
    get isRect() {
      return (this.tlRadiusX === 0.0 || this.tlRadiusY === 0.0) && (this.trRadiusX === 0.0 || this.trRadiusY === 0.0) && (this.blRadiusX === 0.0 || this.blRadiusY === 0.0) && (this.brRadiusX === 0.0 || this.brRadiusY === 0.0);
    }
    get isStadium() {
      return dart.equals(this.tlRadius, this.trRadius) && dart.equals(this.trRadius, this.brRadius) && dart.equals(this.brRadius, this.blRadius) && (dart.notNull(this.width) <= 2.0 * dart.notNull(this.tlRadiusX) || dart.notNull(this.height) <= 2.0 * dart.notNull(this.tlRadiusY));
    }
    get isEllipse() {
      return dart.equals(this.tlRadius, this.trRadius) && dart.equals(this.trRadius, this.brRadius) && dart.equals(this.brRadius, this.blRadius) && dart.notNull(this.width) <= 2.0 * dart.notNull(this.tlRadiusX) && dart.notNull(this.height) <= 2.0 * dart.notNull(this.tlRadiusY);
    }
    get isCircle() {
      return this.width == this.height && dart.test(this.isEllipse);
    }
    get shortestSide() {
      return math.min(core.double, this.width[$abs](), this.height[$abs]());
    }
    get longestSide() {
      return math.max(core.double, this.width[$abs](), this.height[$abs]());
    }
    get hasNaN() {
      return this.left[$isNaN] || this.top[$isNaN] || this.right[$isNaN] || this.bottom[$isNaN] || this.trRadiusX[$isNaN] || this.trRadiusY[$isNaN] || this.tlRadiusX[$isNaN] || this.tlRadiusY[$isNaN] || this.brRadiusX[$isNaN] || this.brRadiusY[$isNaN] || this.blRadiusX[$isNaN] || this.blRadiusY[$isNaN];
    }
    get center() {
      return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
    }
    [_getMin](min, radius1, radius2, limit) {
      let sum = dart.notNull(radius1) + dart.notNull(radius2);
      if (sum > dart.notNull(limit) && sum !== 0.0) {
        return math.min(core.double, min, dart.notNull(limit) / sum);
      }
      return min;
    }
    scaleRadii() {
      let scale = 1.0;
      scale = this[_getMin](scale, this.blRadiusY, this.tlRadiusY, this.height);
      scale = this[_getMin](scale, this.tlRadiusX, this.trRadiusX, this.width);
      scale = this[_getMin](scale, this.trRadiusY, this.brRadiusY, this.height);
      scale = this[_getMin](scale, this.brRadiusX, this.blRadiusX, this.width);
      if (dart.notNull(scale) < 1.0) {
        return new ui.RRect._raw({top: this.top, left: this.left, right: this.right, bottom: this.bottom, tlRadiusX: dart.notNull(this.tlRadiusX) * dart.notNull(scale), tlRadiusY: dart.notNull(this.tlRadiusY) * dart.notNull(scale), trRadiusX: dart.notNull(this.trRadiusX) * dart.notNull(scale), trRadiusY: dart.notNull(this.trRadiusY) * dart.notNull(scale), blRadiusX: dart.notNull(this.blRadiusX) * dart.notNull(scale), blRadiusY: dart.notNull(this.blRadiusY) * dart.notNull(scale), brRadiusX: dart.notNull(this.brRadiusX) * dart.notNull(scale), brRadiusY: dart.notNull(this.brRadiusY) * dart.notNull(scale)});
      }
      return new ui.RRect._raw({top: this.top, left: this.left, right: this.right, bottom: this.bottom, tlRadiusX: this.tlRadiusX, tlRadiusY: this.tlRadiusY, trRadiusX: this.trRadiusX, trRadiusY: this.trRadiusY, blRadiusX: this.blRadiusX, blRadiusY: this.blRadiusY, brRadiusX: this.brRadiusX, brRadiusY: this.brRadiusY});
    }
    contains(point) {
      if (dart.notNull(point.dx) < dart.notNull(this.left) || dart.notNull(point.dx) >= dart.notNull(this.right) || dart.notNull(point.dy) < dart.notNull(this.top) || dart.notNull(point.dy) >= dart.notNull(this.bottom)) {
        return false;
      }
      let scaled = this.scaleRadii();
      let x = null;
      let y = null;
      let radiusX = null;
      let radiusY = null;
      if (dart.notNull(point.dx) < dart.notNull(this.left) + dart.notNull(scaled.tlRadiusX) && dart.notNull(point.dy) < dart.notNull(this.top) + dart.notNull(scaled.tlRadiusY)) {
        x = dart.notNull(point.dx) - dart.notNull(this.left) - dart.notNull(scaled.tlRadiusX);
        y = dart.notNull(point.dy) - dart.notNull(this.top) - dart.notNull(scaled.tlRadiusY);
        radiusX = scaled.tlRadiusX;
        radiusY = scaled.tlRadiusY;
      } else if (dart.notNull(point.dx) > dart.notNull(this.right) - dart.notNull(scaled.trRadiusX) && dart.notNull(point.dy) < dart.notNull(this.top) + dart.notNull(scaled.trRadiusY)) {
        x = dart.notNull(point.dx) - dart.notNull(this.right) + dart.notNull(scaled.trRadiusX);
        y = dart.notNull(point.dy) - dart.notNull(this.top) - dart.notNull(scaled.trRadiusY);
        radiusX = scaled.trRadiusX;
        radiusY = scaled.trRadiusY;
      } else if (dart.notNull(point.dx) > dart.notNull(this.right) - dart.notNull(scaled.brRadiusX) && dart.notNull(point.dy) > dart.notNull(this.bottom) - dart.notNull(scaled.brRadiusY)) {
        x = dart.notNull(point.dx) - dart.notNull(this.right) + dart.notNull(scaled.brRadiusX);
        y = dart.notNull(point.dy) - dart.notNull(this.bottom) + dart.notNull(scaled.brRadiusY);
        radiusX = scaled.brRadiusX;
        radiusY = scaled.brRadiusY;
      } else if (dart.notNull(point.dx) < dart.notNull(this.left) + dart.notNull(scaled.blRadiusX) && dart.notNull(point.dy) > dart.notNull(this.bottom) - dart.notNull(scaled.blRadiusY)) {
        x = dart.notNull(point.dx) - dart.notNull(this.left) - dart.notNull(scaled.blRadiusX);
        y = dart.notNull(point.dy) - dart.notNull(this.bottom) + dart.notNull(scaled.blRadiusY);
        radiusX = scaled.blRadiusX;
        radiusY = scaled.blRadiusY;
      } else {
        return true;
      }
      x = dart.notNull(x) / dart.notNull(radiusX);
      y = dart.notNull(y) / dart.notNull(radiusY);
      if (dart.notNull(x) * dart.notNull(x) + dart.notNull(y) * dart.notNull(y) > 1.0) {
        return false;
      }
      return true;
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1571, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      if (a == null) {
        return new ui.RRect._raw({left: dart.notNull(b.left) * dart.notNull(t), top: dart.notNull(b.top) * dart.notNull(t), right: dart.notNull(b.right) * dart.notNull(t), bottom: dart.notNull(b.bottom) * dart.notNull(t), tlRadiusX: dart.notNull(b.tlRadiusX) * dart.notNull(t), tlRadiusY: dart.notNull(b.tlRadiusY) * dart.notNull(t), trRadiusX: dart.notNull(b.trRadiusX) * dart.notNull(t), trRadiusY: dart.notNull(b.trRadiusY) * dart.notNull(t), brRadiusX: dart.notNull(b.brRadiusX) * dart.notNull(t), brRadiusY: dart.notNull(b.brRadiusY) * dart.notNull(t), blRadiusX: dart.notNull(b.blRadiusX) * dart.notNull(t), blRadiusY: dart.notNull(b.blRadiusY) * dart.notNull(t)});
      }
      if (b == null) {
        let k = 1.0 - dart.notNull(t);
        return new ui.RRect._raw({left: dart.notNull(a.left) * k, top: dart.notNull(a.top) * k, right: dart.notNull(a.right) * k, bottom: dart.notNull(a.bottom) * k, tlRadiusX: dart.notNull(a.tlRadiusX) * k, tlRadiusY: dart.notNull(a.tlRadiusY) * k, trRadiusX: dart.notNull(a.trRadiusX) * k, trRadiusY: dart.notNull(a.trRadiusY) * k, brRadiusX: dart.notNull(a.brRadiusX) * k, brRadiusY: dart.notNull(a.brRadiusY) * k, blRadiusX: dart.notNull(a.blRadiusX) * k, blRadiusY: dart.notNull(a.blRadiusY) * k});
      }
      return new ui.RRect._raw({left: ui.lerpDouble(a.left, b.left, t), top: ui.lerpDouble(a.top, b.top, t), right: ui.lerpDouble(a.right, b.right, t), bottom: ui.lerpDouble(a.bottom, b.bottom, t), tlRadiusX: ui.lerpDouble(a.tlRadiusX, b.tlRadiusX, t), tlRadiusY: ui.lerpDouble(a.tlRadiusY, b.tlRadiusY, t), trRadiusX: ui.lerpDouble(a.trRadiusX, b.trRadiusX, t), trRadiusY: ui.lerpDouble(a.trRadiusY, b.trRadiusY, t), brRadiusX: ui.lerpDouble(a.brRadiusX, b.brRadiusX, t), brRadiusY: ui.lerpDouble(a.brRadiusY, b.brRadiusY, t), blRadiusX: ui.lerpDouble(a.blRadiusX, b.blRadiusX, t), blRadiusY: ui.lerpDouble(a.blRadiusY, b.blRadiusY, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) {
        return false;
      }
      let typedOther = ui.RRect._check(other);
      return this.left == typedOther.left && this.top == typedOther.top && this.right == typedOther.right && this.bottom == typedOther.bottom && this.tlRadiusX == typedOther.tlRadiusX && this.tlRadiusY == typedOther.tlRadiusY && this.trRadiusX == typedOther.trRadiusX && this.trRadiusY == typedOther.trRadiusY && this.blRadiusX == typedOther.blRadiusX && this.blRadiusY == typedOther.blRadiusY && this.brRadiusX == typedOther.brRadiusX && this.brRadiusY == typedOther.brRadiusY;
    }
    get hashCode() {
      return ui.hashValues(this.left, this.top, this.right, this.bottom, this.tlRadiusX, this.tlRadiusY, this.trRadiusX, this.trRadiusY, this.blRadiusX, this.blRadiusY, this.brRadiusX, this.brRadiusY);
    }
    toString() {
      let rect = this.left[$toStringAsFixed](1) + ", " + this.top[$toStringAsFixed](1) + ", " + this.right[$toStringAsFixed](1) + ", " + this.bottom[$toStringAsFixed](1);
      if (dart.equals(this.tlRadius, this.trRadius) && dart.equals(this.trRadius, this.brRadius) && dart.equals(this.brRadius, this.blRadius)) {
        if (this.tlRadius.x == this.tlRadius.y) return "RRect.fromLTRBR(" + rect + ", " + this.tlRadius.x[$toStringAsFixed](1) + ")";
        return "RRect.fromLTRBXY(" + rect + ", " + this.tlRadius.x[$toStringAsFixed](1) + ", " + this.tlRadius.y[$toStringAsFixed](1) + ")";
      }
      return "RRect.fromLTRBAndCorners(" + rect + ", " + "topLeft: " + dart.str(this.tlRadius) + ", " + "topRight: " + dart.str(this.trRadius) + ", " + "bottomRight: " + dart.str(this.brRadius) + ", " + "bottomLeft: " + dart.str(this.blRadius) + ")";
    }
  };
  (ui.RRect.fromLTRBXY = function(left, top, right, bottom, radiusX, radiusY) {
    ui.RRect._raw.call(this, {top: top, left: left, right: right, bottom: bottom, tlRadiusX: radiusX, tlRadiusY: radiusY, trRadiusX: radiusX, trRadiusY: radiusY, blRadiusX: radiusX, blRadiusY: radiusY, brRadiusX: radiusX, brRadiusY: radiusY});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromLTRBR = function(left, top, right, bottom, radius) {
    ui.RRect._raw.call(this, {top: top, left: left, right: right, bottom: bottom, tlRadiusX: radius.x, tlRadiusY: radius.y, trRadiusX: radius.x, trRadiusY: radius.y, blRadiusX: radius.x, blRadiusY: radius.y, brRadiusX: radius.x, brRadiusY: radius.y});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromRectXY = function(rect, radiusX, radiusY) {
    ui.RRect._raw.call(this, {top: rect.top, left: rect.left, right: rect.right, bottom: rect.bottom, tlRadiusX: radiusX, tlRadiusY: radiusY, trRadiusX: radiusX, trRadiusY: radiusY, blRadiusX: radiusX, blRadiusY: radiusY, brRadiusX: radiusX, brRadiusY: radiusY});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromRectAndRadius = function(rect, radius) {
    ui.RRect._raw.call(this, {top: rect.top, left: rect.left, right: rect.right, bottom: rect.bottom, tlRadiusX: radius.x, tlRadiusY: radius.y, trRadiusX: radius.x, trRadiusY: radius.y, blRadiusX: radius.x, blRadiusY: radius.y, brRadiusX: radius.x, brRadiusY: radius.y});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromLTRBAndCorners = function(left, top, right, bottom, opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : C34 || CT.C34;
    let topRight = opts && 'topRight' in opts ? opts.topRight : C34 || CT.C34;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : C34 || CT.C34;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : C34 || CT.C34;
    ui.RRect._raw.call(this, {top: top, left: left, right: right, bottom: bottom, tlRadiusX: topLeft.x, tlRadiusY: topLeft.y, trRadiusX: topRight.x, trRadiusY: topRight.y, blRadiusX: bottomLeft.x, blRadiusY: bottomLeft.y, brRadiusX: bottomRight.x, brRadiusY: bottomRight.y});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromRectAndCorners = function(rect, opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : C34 || CT.C34;
    let topRight = opts && 'topRight' in opts ? opts.topRight : C34 || CT.C34;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : C34 || CT.C34;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : C34 || CT.C34;
    ui.RRect._raw.call(this, {top: rect.top, left: rect.left, right: rect.right, bottom: rect.bottom, tlRadiusX: topLeft.x, tlRadiusY: topLeft.y, trRadiusX: topRight.x, trRadiusY: topRight.y, blRadiusX: bottomLeft.x, blRadiusY: bottomLeft.y, brRadiusX: bottomRight.x, brRadiusY: bottomRight.y});
  }).prototype = ui.RRect.prototype;
  (ui.RRect._raw = function(opts) {
    let left = opts && 'left' in opts ? opts.left : 0;
    let top = opts && 'top' in opts ? opts.top : 0;
    let right = opts && 'right' in opts ? opts.right : 0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
    let tlRadiusX = opts && 'tlRadiusX' in opts ? opts.tlRadiusX : 0;
    let tlRadiusY = opts && 'tlRadiusY' in opts ? opts.tlRadiusY : 0;
    let trRadiusX = opts && 'trRadiusX' in opts ? opts.trRadiusX : 0;
    let trRadiusY = opts && 'trRadiusY' in opts ? opts.trRadiusY : 0;
    let brRadiusX = opts && 'brRadiusX' in opts ? opts.brRadiusX : 0;
    let brRadiusY = opts && 'brRadiusY' in opts ? opts.brRadiusY : 0;
    let blRadiusX = opts && 'blRadiusX' in opts ? opts.blRadiusX : 0;
    let blRadiusY = opts && 'blRadiusY' in opts ? opts.blRadiusY : 0;
    this[left$0] = left;
    this[top$0] = top;
    this[right$0] = right;
    this[bottom$0] = bottom;
    this[tlRadiusX$] = tlRadiusX;
    this[tlRadiusY$] = tlRadiusY;
    this[trRadiusX$] = trRadiusX;
    this[trRadiusY$] = trRadiusY;
    this[brRadiusX$] = brRadiusX;
    this[brRadiusY$] = brRadiusY;
    this[blRadiusX$] = blRadiusX;
    this[blRadiusY$] = blRadiusY;
    if (!(left != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1209, 16, "left != null");
    if (!(top != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1210, 16, "top != null");
    if (!(right != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1211, 16, "right != null");
    if (!(bottom != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1212, 16, "bottom != null");
    if (!(tlRadiusX != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1213, 16, "tlRadiusX != null");
    if (!(tlRadiusY != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1214, 16, "tlRadiusY != null");
    if (!(trRadiusX != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1215, 16, "trRadiusX != null");
    if (!(trRadiusY != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1216, 16, "trRadiusY != null");
    if (!(brRadiusX != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1217, 16, "brRadiusX != null");
    if (!(brRadiusY != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1218, 16, "brRadiusY != null");
    if (!(blRadiusX != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1219, 16, "blRadiusX != null");
    if (!(blRadiusY != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart", 1220, 16, "blRadiusY != null");
    ;
  }).prototype = ui.RRect.prototype;
  dart.addTypeTests(ui.RRect);
  const left$0 = RRect_left;
  const top$0 = RRect_top;
  const right$0 = RRect_right;
  const bottom$0 = RRect_bottom;
  const tlRadiusX$ = RRect_tlRadiusX;
  const tlRadiusY$ = RRect_tlRadiusY;
  const trRadiusX$ = RRect_trRadiusX;
  const trRadiusY$ = RRect_trRadiusY;
  const brRadiusX$ = RRect_brRadiusX;
  const brRadiusY$ = RRect_brRadiusY;
  const blRadiusX$ = RRect_blRadiusX;
  const blRadiusY$ = RRect_blRadiusY;
  dart.setMethodSignature(ui.RRect, () => ({
    __proto__: dart.getMethods(ui.RRect.__proto__),
    shift: dart.fnType(ui.RRect, [ui.Offset]),
    inflate: dart.fnType(ui.RRect, [core.double]),
    deflate: dart.fnType(ui.RRect, [core.double]),
    [_getMin]: dart.fnType(core.double, [core.double, core.double, core.double, core.double]),
    scaleRadii: dart.fnType(ui.RRect, []),
    contains: dart.fnType(core.bool, [ui.Offset])
  }));
  dart.setGetterSignature(ui.RRect, () => ({
    __proto__: dart.getGetters(ui.RRect.__proto__),
    tlRadius: ui.Radius,
    trRadius: ui.Radius,
    brRadius: ui.Radius,
    blRadius: ui.Radius,
    width: core.double,
    height: core.double,
    outerRect: ui.Rect,
    safeInnerRect: ui.Rect,
    middleRect: ui.Rect,
    wideMiddleRect: ui.Rect,
    tallMiddleRect: ui.Rect,
    isEmpty: core.bool,
    isFinite: core.bool,
    isRect: core.bool,
    isStadium: core.bool,
    isEllipse: core.bool,
    isCircle: core.bool,
    shortestSide: core.double,
    longestSide: core.double,
    hasNaN: core.bool,
    center: ui.Offset
  }));
  dart.setLibraryUri(ui.RRect, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.RRect, () => ({
    __proto__: dart.getFields(ui.RRect.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double),
    tlRadiusX: dart.finalFieldType(core.double),
    tlRadiusY: dart.finalFieldType(core.double),
    trRadiusX: dart.finalFieldType(core.double),
    trRadiusY: dart.finalFieldType(core.double),
    brRadiusX: dart.finalFieldType(core.double),
    brRadiusY: dart.finalFieldType(core.double),
    blRadiusX: dart.finalFieldType(core.double),
    blRadiusY: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.RRect, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.RRect, ['hashCode']);
  dart.defineLazy(ui.RRect, {
    /*ui.RRect.zero*/get zero() {
      return C1207 || CT.C1207;
    }
  });
  const _value$ = dart.privateName(ui, "_value");
  ui.RSTransform = class RSTransform extends core.Object {
    static fromComponents(opts) {
      let rotation = opts && 'rotation' in opts ? opts.rotation : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let anchorX = opts && 'anchorX' in opts ? opts.anchorX : null;
      let anchorY = opts && 'anchorY' in opts ? opts.anchorY : null;
      let translateX = opts && 'translateX' in opts ? opts.translateX : null;
      let translateY = opts && 'translateY' in opts ? opts.translateY : null;
      let scos = math.cos(rotation) * dart.notNull(scale);
      let ssin = math.sin(rotation) * dart.notNull(scale);
      let tx = dart.notNull(translateX) + -scos * dart.notNull(anchorX) + ssin * dart.notNull(anchorY);
      let ty = dart.notNull(translateY) + -ssin * dart.notNull(anchorX) - scos * dart.notNull(anchorY);
      return new ui.RSTransform.new(scos, ssin, tx, ty);
    }
    get scos() {
      return this[_value$][$_get](0);
    }
    get ssin() {
      return this[_value$][$_get](1);
    }
    get tx() {
      return this[_value$][$_get](2);
    }
    get ty() {
      return this[_value$][$_get](3);
    }
  };
  (ui.RSTransform.new = function(scos, ssin, tx, ty) {
    let t8;
    this[_value$] = _native_typed_data.NativeFloat32List.new(4);
    t8 = this[_value$];
    t8[$_set](0, scos);
    t8[$_set](1, ssin);
    t8[$_set](2, tx);
    t8[$_set](3, ty);
    t8;
  }).prototype = ui.RSTransform.prototype;
  dart.addTypeTests(ui.RSTransform);
  dart.setGetterSignature(ui.RSTransform, () => ({
    __proto__: dart.getGetters(ui.RSTransform.__proto__),
    scos: core.double,
    ssin: core.double,
    tx: core.double,
    ty: core.double
  }));
  dart.setLibraryUri(ui.RSTransform, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.RSTransform, () => ({
    __proto__: dart.getFields(ui.RSTransform.__proto__),
    [_value$]: dart.finalFieldType(typed_data.Float32List)
  }));
  const Point_x = dart.privateName(ui, "Point.x");
  const Point_y = dart.privateName(ui, "Point.y");
  let C1208;
  ui.Point = class Point extends core.Object {
    get x() {
      return this[x$4];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$4];
    }
    set y(value) {
      super.y = value;
    }
    _negate() {
      return new ui.Point.new(-dart.notNull(this.x), -dart.notNull(this.y));
    }
    ['-'](other) {
      return new ui.Offset.new(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['+'](other) {
      return new ui.Point.new(dart.notNull(this.x) + dart.notNull(other.dx), dart.notNull(this.y) + dart.notNull(other.dy));
    }
    ['&'](other) {
      return new ui.Rect.fromLTWH(this.x, this.y, other.width, other.height);
    }
    ['*'](operand) {
      return new ui.Point.new(dart.notNull(this.x) * dart.notNull(operand), dart.notNull(this.y) * dart.notNull(operand));
    }
    ['/'](operand) {
      return new ui.Point.new(dart.notNull(this.x) / dart.notNull(operand), dart.notNull(this.y) / dart.notNull(operand));
    }
    ['~/'](operand) {
      return new ui.Point.new((dart.notNull(this.x) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.y) / dart.notNull(operand))[$truncate]()[$toDouble]());
    }
    ['%'](operand) {
      return new ui.Point.new(this.x[$modulo](operand), this.y[$modulo](operand));
    }
    toOffset() {
      return new ui.Offset.new(this.x, this.y);
    }
    static lerp(a, b, t) {
      if (a == null && b == null) {
        return null;
      }
      if (a == null) {
        return b['*'](t);
      }
      if (b == null) {
        return a['*'](1.0 - dart.notNull(t));
      }
      return new ui.Point.new(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.Point.is(other)) {
        return false;
      }
      let typedOther = ui.Point._check(other);
      return this.x == typedOther.x && this.y == typedOther.y;
    }
    get hashCode() {
      return ui.hashValues(this.x, this.y);
    }
    toString() {
      let t8, t8$;
      return "Point(" + dart.str((t8 = this.x, t8 == null ? null : t8[$toStringAsFixed](1))) + ", " + dart.str((t8$ = this.y, t8$ == null ? null : t8$[$toStringAsFixed](1))) + ")";
    }
  };
  (ui.Point.new = function(x, y) {
    this[x$4] = x;
    this[y$4] = y;
    ;
  }).prototype = ui.Point.prototype;
  dart.addTypeTests(ui.Point);
  const x$4 = Point_x;
  const y$4 = Point_y;
  dart.setMethodSignature(ui.Point, () => ({
    __proto__: dart.getMethods(ui.Point.__proto__),
    _negate: dart.fnType(ui.Point, []),
    '-': dart.fnType(ui.Offset, [ui.Point]),
    '+': dart.fnType(ui.Point, [ui.Offset]),
    '&': dart.fnType(ui.Rect, [ui.Size]),
    '*': dart.fnType(ui.Point, [core.double]),
    '/': dart.fnType(ui.Point, [core.double]),
    '~/': dart.fnType(ui.Point, [core.double]),
    '%': dart.fnType(ui.Point, [core.double]),
    toOffset: dart.fnType(ui.Offset, [])
  }));
  dart.setLibraryUri(ui.Point, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Point, () => ({
    __proto__: dart.getFields(ui.Point.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.Point, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Point, ['hashCode']);
  dart.defineLazy(ui.Point, {
    /*ui.Point.origin*/get origin() {
      return C1208 || CT.C1208;
    }
  });
  ui._HashEnd = class _HashEnd extends core.Object {};
  (ui._HashEnd.new = function() {
    ;
  }).prototype = ui._HashEnd.prototype;
  dart.addTypeTests(ui._HashEnd);
  dart.setLibraryUri(ui._HashEnd, "package:flutter_web_ui/ui.dart");
  ui.Color = class Color extends core.Object {
    get [_value$]() {
      return this[_value$0];
    }
    set [_value$](value) {
      super[_value$] = value;
    }
    get value() {
      return this[_value$];
    }
    get alpha() {
      return (4278190080 & dart.notNull(this[_value$])) >>> 24;
    }
    get opacity() {
      return dart.notNull(this.alpha) / 255;
    }
    get red() {
      return (16711680 & dart.notNull(this[_value$])) >> 16;
    }
    get green() {
      return (65280 & dart.notNull(this[_value$])) >> 8;
    }
    get blue() {
      return (255 & dart.notNull(this[_value$])) >> 0;
    }
    withAlpha(a) {
      return new ui.Color.fromARGB(a, this.red, this.green, this.blue);
    }
    withOpacity(opacity) {
      if (!(dart.notNull(opacity) >= 0.0 && dart.notNull(opacity) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 107, 12, "opacity >= 0.0 && opacity <= 1.0");
      return this.withAlpha((255.0 * dart.notNull(opacity))[$round]());
    }
    withRed(r) {
      return new ui.Color.fromARGB(this.alpha, r, this.green, this.blue);
    }
    withGreen(g) {
      return new ui.Color.fromARGB(this.alpha, this.red, g, this.blue);
    }
    withBlue(b) {
      return new ui.Color.fromARGB(this.alpha, this.red, this.green, b);
    }
    static _linearizeColorComponent(component) {
      if (dart.notNull(component) <= 0.03928) {
        return dart.notNull(component) / 12.92;
      }
      return math.pow((dart.notNull(component) + 0.055) / 1.055, 2.4);
    }
    computeLuminance() {
      let R = ui.Color._linearizeColorComponent(dart.notNull(this.red) / 255);
      let G = ui.Color._linearizeColorComponent(dart.notNull(this.green) / 255);
      let B = ui.Color._linearizeColorComponent(dart.notNull(this.blue) / 255);
      return 0.2126 * dart.notNull(R) + 0.7152 * dart.notNull(G) + 0.0722 * dart.notNull(B);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 174, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      if (a == null) {
        return ui._scaleAlpha(b, t);
      }
      if (b == null) {
        return ui._scaleAlpha(a, 1.0 - dart.notNull(t));
      }
      return new ui.Color.fromARGB(dart.asInt(ui.lerpDouble(a.alpha, b.alpha, t)[$toInt]()[$clamp](0, 255)), dart.asInt(ui.lerpDouble(a.red, b.red, t)[$toInt]()[$clamp](0, 255)), dart.asInt(ui.lerpDouble(a.green, b.green, t)[$toInt]()[$clamp](0, 255)), dart.asInt(ui.lerpDouble(a.blue, b.blue, t)[$toInt]()[$clamp](0, 255)));
    }
    static alphaBlend(foreground, background) {
      let alpha = foreground.alpha;
      if (alpha === 0) {
        return background;
      }
      let invAlpha = 255 - dart.notNull(alpha);
      let backAlpha = background.alpha;
      if (backAlpha === 255) {
        return new ui.Color.fromARGB(255, ((dart.notNull(alpha) * dart.notNull(foreground.red) + invAlpha * dart.notNull(background.red)) / 255)[$truncate](), ((dart.notNull(alpha) * dart.notNull(foreground.green) + invAlpha * dart.notNull(background.green)) / 255)[$truncate](), ((dart.notNull(alpha) * dart.notNull(foreground.blue) + invAlpha * dart.notNull(background.blue)) / 255)[$truncate]());
      } else {
        backAlpha = (dart.notNull(backAlpha) * invAlpha / 255)[$truncate]();
        let outAlpha = dart.notNull(alpha) + dart.notNull(backAlpha);
        if (!(outAlpha !== 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 220, 14, "outAlpha != 0x00");
        return new ui.Color.fromARGB(outAlpha, ((dart.notNull(foreground.red) * dart.notNull(alpha) + dart.notNull(background.red) * dart.notNull(backAlpha)) / outAlpha)[$truncate](), ((dart.notNull(foreground.green) * dart.notNull(alpha) + dart.notNull(background.green) * dart.notNull(backAlpha)) / outAlpha)[$truncate](), ((dart.notNull(foreground.blue) * dart.notNull(alpha) + dart.notNull(background.blue) * dart.notNull(backAlpha)) / outAlpha)[$truncate]());
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = ui.Color._check(other);
      return this.value == typedOther.value;
    }
    get hashCode() {
      return dart.hashCode(this[_value$]);
    }
    toCssString() {
      if ((4278190080 & dart.notNull(this[_value$])) >>> 0 === 4278190080) {
        return this.toCssStringRgbOnly();
      } else {
        let alpha = (this[_value$][$rightShift](24) & 255) / 255.0;
        let sb = new core.StringBuffer.new();
        sb.write("rgba(");
        sb.write((dart.notNull(this[_value$]) >> 16 & 255)[$toString]());
        sb.write(",");
        sb.write((dart.notNull(this[_value$]) >> 8 & 255)[$toString]());
        sb.write(",");
        sb.write((dart.notNull(this[_value$]) & 255)[$toString]());
        sb.write(",");
        sb.write(alpha[$toString]());
        sb.write(")");
        return sb.toString();
      }
    }
    toCssStringRgbOnly() {
      let paddedValue = "00000" + this[_value$][$toRadixString](16);
      return "#" + paddedValue[$substring](paddedValue.length - 6);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "Color(0x" + this.value[$toRadixString](16)[$padLeft](8, "0") + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (ui.Color.new = function(value) {
    this[_value$0] = (dart.notNull(value) & 4294967295) >>> 0;
    ;
  }).prototype = ui.Color.prototype;
  (ui.Color.fromARGB = function(a, r, g, b) {
    this[_value$0] = (((dart.notNull(a) & 255) << 24 | (dart.notNull(r) & 255) << 16 | (dart.notNull(g) & 255) << 8 | (dart.notNull(b) & 255) << 0) & 4294967295) >>> 0;
    ;
  }).prototype = ui.Color.prototype;
  (ui.Color.fromRGBO = function(r, g, b, opacity) {
    this[_value$0] = ((((dart.notNull(opacity) * 255 / 1)[$truncate]() & 255) << 24 | (dart.notNull(r) & 255) << 16 | (dart.notNull(g) & 255) << 8 | (dart.notNull(b) & 255) << 0) & 4294967295) >>> 0;
    ;
  }).prototype = ui.Color.prototype;
  dart.addTypeTests(ui.Color);
  const _value$0 = Color__value;
  dart.setMethodSignature(ui.Color, () => ({
    __proto__: dart.getMethods(ui.Color.__proto__),
    withAlpha: dart.fnType(ui.Color, [core.int]),
    withOpacity: dart.fnType(ui.Color, [core.double]),
    withRed: dart.fnType(ui.Color, [core.int]),
    withGreen: dart.fnType(ui.Color, [core.int]),
    withBlue: dart.fnType(ui.Color, [core.int]),
    computeLuminance: dart.fnType(core.double, []),
    toCssString: dart.fnType(core.String, []),
    toCssStringRgbOnly: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(ui.Color, () => ({
    __proto__: dart.getGetters(ui.Color.__proto__),
    value: core.int,
    alpha: core.int,
    opacity: core.double,
    red: core.int,
    green: core.int,
    blue: core.int
  }));
  dart.setLibraryUri(ui.Color, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Color, () => ({
    __proto__: dart.getFields(ui.Color.__proto__),
    [_value$]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.Color, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Color, ['hashCode']);
  let C1209;
  ui.StrokeCap = class StrokeCap extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.StrokeCap.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.StrokeCap.prototype;
  dart.addTypeTests(ui.StrokeCap);
  dart.setLibraryUri(ui.StrokeCap, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.StrokeCap, () => ({
    __proto__: dart.getFields(ui.StrokeCap.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.StrokeCap, ['toString']);
  ui.StrokeCap.butt = C185 || CT.C185;
  ui.StrokeCap.round = C186 || CT.C186;
  ui.StrokeCap.square = C187 || CT.C187;
  ui.StrokeCap.values = C1209 || CT.C1209;
  let C1210;
  ui.StrokeJoin = class StrokeJoin extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.StrokeJoin.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.StrokeJoin.prototype;
  dart.addTypeTests(ui.StrokeJoin);
  dart.setLibraryUri(ui.StrokeJoin, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.StrokeJoin, () => ({
    __proto__: dart.getFields(ui.StrokeJoin.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.StrokeJoin, ['toString']);
  ui.StrokeJoin.miter = C190 || CT.C190;
  ui.StrokeJoin.round = C188 || CT.C188;
  ui.StrokeJoin.bevel = C189 || CT.C189;
  ui.StrokeJoin.values = C1210 || CT.C1210;
  let C1211;
  ui.PaintingStyle = class PaintingStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.PaintingStyle.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.PaintingStyle.prototype;
  dart.addTypeTests(ui.PaintingStyle);
  dart.setLibraryUri(ui.PaintingStyle, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PaintingStyle, () => ({
    __proto__: dart.getFields(ui.PaintingStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PaintingStyle, ['toString']);
  ui.PaintingStyle.fill = C1 || CT.C1;
  ui.PaintingStyle.stroke = C0 || CT.C0;
  ui.PaintingStyle.values = C1211 || CT.C1211;
  let C1212;
  ui.BlendMode = class BlendMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.BlendMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.BlendMode.prototype;
  dart.addTypeTests(ui.BlendMode);
  dart.setLibraryUri(ui.BlendMode, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.BlendMode, () => ({
    __proto__: dart.getFields(ui.BlendMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.BlendMode, ['toString']);
  ui.BlendMode.clear = C191 || CT.C191;
  ui.BlendMode.src = C167 || CT.C167;
  ui.BlendMode.dst = C192 || CT.C192;
  ui.BlendMode.srcOver = C158 || CT.C158;
  ui.BlendMode.dstOver = C162 || CT.C162;
  ui.BlendMode.srcIn = C159 || CT.C159;
  ui.BlendMode.dstIn = C163 || CT.C163;
  ui.BlendMode.srcOut = C160 || CT.C160;
  ui.BlendMode.dstOut = C164 || CT.C164;
  ui.BlendMode.srcATop = C161 || CT.C161;
  ui.BlendMode.dstATop = C165 || CT.C165;
  ui.BlendMode.xor = C168 || CT.C168;
  ui.BlendMode.plus = C166 || CT.C166;
  ui.BlendMode.modulate = C170 || CT.C170;
  ui.BlendMode.screen = C171 || CT.C171;
  ui.BlendMode.overlay = C172 || CT.C172;
  ui.BlendMode.darken = C173 || CT.C173;
  ui.BlendMode.lighten = C174 || CT.C174;
  ui.BlendMode.colorDodge = C175 || CT.C175;
  ui.BlendMode.colorBurn = C176 || CT.C176;
  ui.BlendMode.hardLight = C177 || CT.C177;
  ui.BlendMode.softLight = C178 || CT.C178;
  ui.BlendMode.difference = C179 || CT.C179;
  ui.BlendMode.exclusion = C180 || CT.C180;
  ui.BlendMode.multiply = C169 || CT.C169;
  ui.BlendMode.hue = C181 || CT.C181;
  ui.BlendMode.saturation = C182 || CT.C182;
  ui.BlendMode.color = C183 || CT.C183;
  ui.BlendMode.luminosity = C184 || CT.C184;
  ui.BlendMode.values = C1212 || CT.C1212;
  let C1213;
  ui.Clip = class Clip extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.Clip.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.Clip.prototype;
  dart.addTypeTests(ui.Clip);
  dart.setLibraryUri(ui.Clip, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Clip, () => ({
    __proto__: dart.getFields(ui.Clip.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.Clip, ['toString']);
  ui.Clip.none = C20 || CT.C20;
  ui.Clip.hardEdge = C17 || CT.C17;
  ui.Clip.antiAlias = C18 || CT.C18;
  ui.Clip.antiAliasWithSaveLayer = C19 || CT.C19;
  ui.Clip.values = C1213 || CT.C1213;
  const PaintData_blendMode = dart.privateName(ui, "PaintData.blendMode");
  const PaintData_style = dart.privateName(ui, "PaintData.style");
  const PaintData_strokeWidth = dart.privateName(ui, "PaintData.strokeWidth");
  const PaintData_strokeCap = dart.privateName(ui, "PaintData.strokeCap");
  const PaintData_strokeJoin = dart.privateName(ui, "PaintData.strokeJoin");
  const PaintData_isAntiAlias = dart.privateName(ui, "PaintData.isAntiAlias");
  const PaintData_color = dart.privateName(ui, "PaintData.color");
  const PaintData_shader = dart.privateName(ui, "PaintData.shader");
  const PaintData_maskFilter = dart.privateName(ui, "PaintData.maskFilter");
  const PaintData_filterQuality = dart.privateName(ui, "PaintData.filterQuality");
  const PaintData_colorFilter = dart.privateName(ui, "PaintData.colorFilter");
  ui.PaintData = class PaintData extends core.Object {
    get blendMode() {
      return this[blendMode];
    }
    set blendMode(value) {
      this[blendMode] = value;
    }
    get style() {
      return this[style];
    }
    set style(value) {
      this[style] = value;
    }
    get strokeWidth() {
      return this[strokeWidth];
    }
    set strokeWidth(value) {
      this[strokeWidth] = value;
    }
    get strokeCap() {
      return this[strokeCap];
    }
    set strokeCap(value) {
      this[strokeCap] = value;
    }
    get strokeJoin() {
      return this[strokeJoin];
    }
    set strokeJoin(value) {
      this[strokeJoin] = value;
    }
    get isAntiAlias() {
      return this[isAntiAlias];
    }
    set isAntiAlias(value) {
      this[isAntiAlias] = value;
    }
    get color() {
      return this[color];
    }
    set color(value) {
      this[color] = value;
    }
    get shader() {
      return this[shader];
    }
    set shader(value) {
      this[shader] = value;
    }
    get maskFilter() {
      return this[maskFilter];
    }
    set maskFilter(value) {
      this[maskFilter] = value;
    }
    get filterQuality() {
      return this[filterQuality];
    }
    set filterQuality(value) {
      this[filterQuality] = value;
    }
    get colorFilter() {
      return this[colorFilter];
    }
    set colorFilter(value) {
      this[colorFilter] = value;
    }
    clone() {
      let t8;
      t8 = new ui.PaintData.new();
      t8.blendMode = this.blendMode;
      t8.filterQuality = this.filterQuality;
      t8.maskFilter = this.maskFilter;
      t8.shader = this.shader;
      t8.isAntiAlias = this.isAntiAlias;
      t8.color = this.color;
      t8.colorFilter = this.colorFilter;
      t8.strokeWidth = this.strokeWidth;
      t8.style = this.style;
      t8.strokeJoin = this.strokeJoin;
      t8.strokeCap = this.strokeCap;
      return t8;
    }
  };
  (ui.PaintData.new = function() {
    this[blendMode] = null;
    this[style] = null;
    this[strokeWidth] = null;
    this[strokeCap] = null;
    this[strokeJoin] = null;
    this[isAntiAlias] = true;
    this[color] = null;
    this[shader] = null;
    this[maskFilter] = null;
    this[filterQuality] = null;
    this[colorFilter] = null;
    ;
  }).prototype = ui.PaintData.prototype;
  dart.addTypeTests(ui.PaintData);
  const blendMode = PaintData_blendMode;
  const style = PaintData_style;
  const strokeWidth = PaintData_strokeWidth;
  const strokeCap = PaintData_strokeCap;
  const strokeJoin = PaintData_strokeJoin;
  const isAntiAlias = PaintData_isAntiAlias;
  const color = PaintData_color;
  const shader = PaintData_shader;
  const maskFilter = PaintData_maskFilter;
  const filterQuality = PaintData_filterQuality;
  const colorFilter = PaintData_colorFilter;
  dart.setMethodSignature(ui.PaintData, () => ({
    __proto__: dart.getMethods(ui.PaintData.__proto__),
    clone: dart.fnType(ui.PaintData, [])
  }));
  dart.setLibraryUri(ui.PaintData, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PaintData, () => ({
    __proto__: dart.getFields(ui.PaintData.__proto__),
    blendMode: dart.fieldType(ui.BlendMode),
    style: dart.fieldType(ui.PaintingStyle),
    strokeWidth: dart.fieldType(core.double),
    strokeCap: dart.fieldType(ui.StrokeCap),
    strokeJoin: dart.fieldType(ui.StrokeJoin),
    isAntiAlias: dart.fieldType(core.bool),
    color: dart.fieldType(ui.Color),
    shader: dart.fieldType(ui.Shader),
    maskFilter: dart.fieldType(ui.MaskFilter),
    filterQuality: dart.fieldType(ui.FilterQuality),
    colorFilter: dart.fieldType(ui.ColorFilter)
  }));
  const _paintData = dart.privateName(ui, "_paintData");
  const _blendMode = dart.privateName(ui, "_blendMode");
  const _color = dart.privateName(ui, "_color");
  const _frozen = dart.privateName(ui, "_frozen");
  ui.Paint = class Paint extends core.Object {
    get blendMode() {
      let t8;
      t8 = this[_paintData].blendMode;
      return t8 == null ? ui.BlendMode.srcOver : t8;
    }
    set blendMode(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].blendMode = value;
    }
    get style() {
      let t8;
      t8 = this[_paintData].style;
      return t8 == null ? ui.PaintingStyle.fill : t8;
    }
    set style(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].style = value;
    }
    get strokeWidth() {
      let t8;
      t8 = this[_paintData].strokeWidth;
      return t8 == null ? 0.0 : t8;
    }
    set strokeWidth(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].strokeWidth = value;
    }
    get strokeCap() {
      return this[_paintData].strokeCap;
    }
    set strokeCap(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].strokeCap = value;
    }
    get strokeJoin() {
      return this[_paintData].strokeJoin;
    }
    set strokeJoin(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].strokeJoin = value;
    }
    get isAntiAlias() {
      return this[_paintData].isAntiAlias;
    }
    set isAntiAlias(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].isAntiAlias = value;
    }
    get color() {
      return this[_paintData].color;
    }
    set color(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].color = value;
    }
    get invertColors() {
      return false;
    }
    set invertColors(value) {
    }
    get shader() {
      return this[_paintData].shader;
    }
    set shader(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].shader = value;
    }
    get maskFilter() {
      return this[_paintData].maskFilter;
    }
    set maskFilter(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].maskFilter = value;
    }
    get filterQuality() {
      return this[_paintData].filterQuality;
    }
    set filterQuality(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].filterQuality = value;
    }
    get colorFilter() {
      return this[_paintData].colorFilter;
    }
    set colorFilter(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].colorFilter = value;
    }
    get strokeMiterLimit() {
      return null;
    }
    set strokeMiterLimit(value) {
      if (!(value != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 1148, 12, "value != null");
    }
    get imageFilter() {
      return null;
    }
    set imageFilter(value) {
    }
    get webOnlyPaintData() {
      this[_frozen] = true;
      return this[_paintData];
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        let result = new core.StringBuffer.new();
        let semicolon = "";
        result.write("Paint(");
        if (dart.equals(this.style, ui.PaintingStyle.stroke)) {
          result.write(dart.str(this.style));
          if (this.strokeWidth != null && this.strokeWidth !== 0.0)
            result.write(" " + dart.str(this.strokeWidth));
          else
            result.write(" hairline");
          if (this.strokeCap != null && !dart.equals(this.strokeCap, ui.StrokeCap.butt)) result.write(" " + dart.str(this.strokeCap));
          semicolon = "; ";
        }
        if (!dart.equals(this.isAntiAlias, true)) {
          result.write(semicolon + "antialias off");
          semicolon = "; ";
        }
        if (!dart.equals(this.color, ui.Paint._defaultPaintColor)) {
          if (this.color != null)
            result.write(semicolon + dart.str(this.color));
          else
            result.write(semicolon + "no color");
          semicolon = "; ";
        }
        result.write(")");
        return result.toString();
      } else {
        return super[$toString]();
      }
    }
  };
  (ui.Paint.new = function() {
    this[_paintData] = new ui.PaintData.new();
    this[_blendMode] = null;
    this[_color] = ui.Paint._defaultPaintColor;
    this[_frozen] = false;
    ;
  }).prototype = ui.Paint.prototype;
  dart.addTypeTests(ui.Paint);
  dart.setGetterSignature(ui.Paint, () => ({
    __proto__: dart.getGetters(ui.Paint.__proto__),
    blendMode: ui.BlendMode,
    style: ui.PaintingStyle,
    strokeWidth: core.double,
    strokeCap: ui.StrokeCap,
    strokeJoin: ui.StrokeJoin,
    isAntiAlias: core.bool,
    color: ui.Color,
    invertColors: core.bool,
    shader: ui.Shader,
    maskFilter: ui.MaskFilter,
    filterQuality: ui.FilterQuality,
    colorFilter: ui.ColorFilter,
    strokeMiterLimit: core.double,
    imageFilter: ui.ImageFilter,
    webOnlyPaintData: ui.PaintData
  }));
  dart.setSetterSignature(ui.Paint, () => ({
    __proto__: dart.getSetters(ui.Paint.__proto__),
    blendMode: ui.BlendMode,
    style: ui.PaintingStyle,
    strokeWidth: core.double,
    strokeCap: ui.StrokeCap,
    strokeJoin: ui.StrokeJoin,
    isAntiAlias: core.bool,
    color: ui.Color,
    invertColors: core.bool,
    shader: ui.Shader,
    maskFilter: ui.MaskFilter,
    filterQuality: ui.FilterQuality,
    colorFilter: ui.ColorFilter,
    strokeMiterLimit: core.double,
    imageFilter: ui.ImageFilter
  }));
  dart.setLibraryUri(ui.Paint, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Paint, () => ({
    __proto__: dart.getFields(ui.Paint.__proto__),
    [_paintData]: dart.fieldType(ui.PaintData),
    [_blendMode]: dart.fieldType(ui.BlendMode),
    [_color]: dart.fieldType(ui.Color),
    [_frozen]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(ui.Paint, ['toString']);
  dart.defineLazy(ui.Paint, {
    /*ui.Paint._defaultPaintColor*/get _defaultPaintColor() {
      return C1201 || CT.C1201;
    }
  });
  ui.Shader = class Shader extends core.Object {};
  (ui.Shader.__ = function() {
    ;
  }).prototype = ui.Shader.prototype;
  dart.addTypeTests(ui.Shader);
  dart.setLibraryUri(ui.Shader, "package:flutter_web_ui/ui.dart");
  let C1214;
  ui.Gradient = class Gradient extends ui.Shader {
    static linear(from, to, colors, colorStops, tileMode, matrix4) {
      if (colorStops === void 0) colorStops = null;
      if (tileMode === void 0) tileMode = C1214 || CT.C1214;
      if (matrix4 === void 0) matrix4 = null;
      return new engine.GradientLinear.new(from, to, colors, colorStops, tileMode);
    }
    static radial(center, radius, colors, colorStops, tileMode, matrix4, focal, focalRadius) {
      if (colorStops === void 0) colorStops = null;
      if (tileMode === void 0) tileMode = C1214 || CT.C1214;
      if (matrix4 === void 0) matrix4 = null;
      if (focal === void 0) focal = null;
      if (focalRadius === void 0) focalRadius = 0;
      focalRadius == null ? focalRadius = 0.0 : null;
      ui._validateColorStops(colors, colorStops);
      if (focal == null || dart.equals(focal, center) && focalRadius === 0.0) {
        return new engine.GradientRadial.new(center, radius, colors, colorStops, tileMode, matrix4);
      } else {
        if (!(!dart.equals(center, ui.Offset.zero) || !dart.equals(focal, ui.Offset.zero))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 1314, 14, "center != Offset.zero ||\r\n          focal != Offset.zero");
        return new engine.GradientConical.new(focal, focalRadius, center, radius, colors, colorStops, tileMode, matrix4);
      }
    }
    static sweep(center, colors, colorStops, tileMode, startAngle, endAngle, matrix4) {
      if (colorStops === void 0) colorStops = null;
      if (tileMode === void 0) tileMode = C1214 || CT.C1214;
      if (startAngle === void 0) startAngle = 0;
      if (endAngle === void 0) endAngle = 6.283185307179586;
      if (matrix4 === void 0) matrix4 = null;
      return new engine.GradientSweep.new(center, colors, colorStops, tileMode, startAngle, endAngle, matrix4);
    }
  };
  (ui.Gradient.__ = function() {
    ui.Gradient.__proto__.__.call(this);
    ;
  }).prototype = ui.Gradient.prototype;
  dart.addTypeTests(ui.Gradient);
  dart.setLibraryUri(ui.Gradient, "package:flutter_web_ui/ui.dart");
  ui.Image = class Image extends core.Object {
    toString() {
      return "[" + dart.str(this.width) + "×" + dart.str(this.height) + "]";
    }
  };
  (ui.Image.new = function() {
    ;
  }).prototype = ui.Image.prototype;
  dart.addTypeTests(ui.Image);
  dart.setLibraryUri(ui.Image, "package:flutter_web_ui/ui.dart");
  dart.defineExtensionMethods(ui.Image, ['toString']);
  const ColorFilter__color = dart.privateName(ui, "ColorFilter._color");
  const ColorFilter__blendMode = dart.privateName(ui, "ColorFilter._blendMode");
  ui.ColorFilter = class ColorFilter extends core.Object {
    get [_color]() {
      return this[_color$0];
    }
    set [_color](value) {
      super[_color] = value;
    }
    get [_blendMode]() {
      return this[_blendMode$];
    }
    set [_blendMode](value) {
      super[_blendMode] = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.ColorFilter.is(other)) {
        return false;
      }
      let typedOther = ui.ColorFilter._check(other);
      return dart.equals(this[_color], typedOther[_color]) && dart.equals(this[_blendMode], typedOther[_blendMode]);
    }
    get hashCode() {
      return ui.hashValues(this[_color], this[_blendMode]);
    }
    webOnlySerializeToCssPaint() {
      dart.throw(new core.UnsupportedError.new("ColorFilter for CSS paint not yet supported"));
    }
    toString() {
      return dart.test(engine.assertionsEnabled) ? "ColorFilter(" + dart.str(this[_color]) + ", " + dart.str(this[_blendMode]) + ")" : super[$toString]();
    }
  };
  (ui.ColorFilter.mode = function(color, blendMode) {
    this[_color$0] = color;
    this[_blendMode$] = blendMode;
    ;
  }).prototype = ui.ColorFilter.prototype;
  (ui.ColorFilter.matrix = function(matrix) {
    this[_color$0] = null;
    this[_blendMode$] = null;
    ;
  }).prototype = ui.ColorFilter.prototype;
  (ui.ColorFilter.linearToSrgbGamma = function() {
    this[_color$0] = null;
    this[_blendMode$] = null;
    ;
  }).prototype = ui.ColorFilter.prototype;
  (ui.ColorFilter.srgbToLinearGamma = function() {
    this[_color$0] = null;
    this[_blendMode$] = null;
    ;
  }).prototype = ui.ColorFilter.prototype;
  dart.addTypeTests(ui.ColorFilter);
  const _color$0 = ColorFilter__color;
  const _blendMode$ = ColorFilter__blendMode;
  dart.setMethodSignature(ui.ColorFilter, () => ({
    __proto__: dart.getMethods(ui.ColorFilter.__proto__),
    webOnlySerializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setLibraryUri(ui.ColorFilter, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.ColorFilter, () => ({
    __proto__: dart.getFields(ui.ColorFilter.__proto__),
    [_color]: dart.finalFieldType(ui.Color),
    [_blendMode]: dart.finalFieldType(ui.BlendMode)
  }));
  dart.defineExtensionMethods(ui.ColorFilter, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.ColorFilter, ['hashCode']);
  let C1215;
  ui.BlurStyle = class BlurStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.BlurStyle.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.BlurStyle.prototype;
  dart.addTypeTests(ui.BlurStyle);
  dart.setLibraryUri(ui.BlurStyle, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.BlurStyle, () => ({
    __proto__: dart.getFields(ui.BlurStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.BlurStyle, ['toString']);
  ui.BlurStyle.normal = C193 || CT.C193;
  ui.BlurStyle.solid = C194 || CT.C194;
  ui.BlurStyle.outer = C195 || CT.C195;
  ui.BlurStyle.inner = C196 || CT.C196;
  ui.BlurStyle.values = C1215 || CT.C1215;
  const _style = dart.privateName(ui, "_style");
  const _sigma = dart.privateName(ui, "_sigma");
  const MaskFilter__style = dart.privateName(ui, "MaskFilter._style");
  const MaskFilter__sigma = dart.privateName(ui, "MaskFilter._sigma");
  ui.MaskFilter = class MaskFilter extends core.Object {
    get [_style]() {
      return this[_style$0];
    }
    set [_style](value) {
      super[_style] = value;
    }
    get [_sigma]() {
      return this[_sigma$];
    }
    set [_sigma](value) {
      super[_sigma] = value;
    }
    get webOnlySigma() {
      return this[_sigma];
    }
    get webOnlyBlurStyle() {
      return this[_style];
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.MaskFilter.is(other)) {
        return false;
      }
      let typedOther = ui.MaskFilter._check(other);
      return dart.equals(this[_style], typedOther[_style]) && this[_sigma] == typedOther[_sigma];
    }
    get hashCode() {
      return ui.hashValues(this[_style], this[_sigma]);
    }
    webOnlySerializeToCssPaint() {
      let t8;
      return [(t8 = this[_style], t8 == null ? null : t8.index), this[_sigma]];
    }
    toString() {
      return "MaskFilter.blur(" + dart.str(this[_style]) + ", " + this[_sigma][$toStringAsFixed](1) + ")";
    }
  };
  (ui.MaskFilter.blur = function(_style, _sigma) {
    this[_style$0] = _style;
    this[_sigma$] = _sigma;
    if (!(_style != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 1506, 16, "_style != null");
    if (!(_sigma != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 1507, 16, "_sigma != null");
    ;
  }).prototype = ui.MaskFilter.prototype;
  dart.addTypeTests(ui.MaskFilter);
  const _style$0 = MaskFilter__style;
  const _sigma$ = MaskFilter__sigma;
  dart.setMethodSignature(ui.MaskFilter, () => ({
    __proto__: dart.getMethods(ui.MaskFilter.__proto__),
    webOnlySerializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setGetterSignature(ui.MaskFilter, () => ({
    __proto__: dart.getGetters(ui.MaskFilter.__proto__),
    webOnlySigma: core.double,
    webOnlyBlurStyle: ui.BlurStyle
  }));
  dart.setLibraryUri(ui.MaskFilter, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.MaskFilter, () => ({
    __proto__: dart.getFields(ui.MaskFilter.__proto__),
    [_style]: dart.finalFieldType(ui.BlurStyle),
    [_sigma]: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.MaskFilter, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.MaskFilter, ['hashCode']);
  let C1216;
  let C1217;
  let C1218;
  let C1219;
  let C1220;
  ui.FilterQuality = class FilterQuality extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.FilterQuality.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.FilterQuality.prototype;
  dart.addTypeTests(ui.FilterQuality);
  dart.setLibraryUri(ui.FilterQuality, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.FilterQuality, () => ({
    __proto__: dart.getFields(ui.FilterQuality.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.FilterQuality, ['toString']);
  ui.FilterQuality.none = C1216 || CT.C1216;
  ui.FilterQuality.low = C1217 || CT.C1217;
  ui.FilterQuality.medium = C1218 || CT.C1218;
  ui.FilterQuality.high = C1219 || CT.C1219;
  ui.FilterQuality.values = C1220 || CT.C1220;
  const ImageFilter_matrix4 = dart.privateName(ui, "ImageFilter.matrix4");
  const ImageFilter_filterQuality = dart.privateName(ui, "ImageFilter.filterQuality");
  const ImageFilter_sigmaX = dart.privateName(ui, "ImageFilter.sigmaX");
  const ImageFilter_sigmaY = dart.privateName(ui, "ImageFilter.sigmaY");
  ui.ImageFilter = class ImageFilter extends core.Object {
    get matrix4() {
      return this[matrix4$4];
    }
    set matrix4(value) {
      super.matrix4 = value;
    }
    get filterQuality() {
      return this[filterQuality$];
    }
    set filterQuality(value) {
      super.filterQuality = value;
    }
    get sigmaX() {
      return this[sigmaX$];
    }
    set sigmaX(value) {
      super.sigmaX = value;
    }
    get sigmaY() {
      return this[sigmaY$];
    }
    set sigmaY(value) {
      super.sigmaY = value;
    }
  };
  (ui.ImageFilter.blur = function(opts) {
    let sigmaX = opts && 'sigmaX' in opts ? opts.sigmaX : 0;
    let sigmaY = opts && 'sigmaY' in opts ? opts.sigmaY : 0;
    this[sigmaX$] = sigmaX;
    this[sigmaY$] = sigmaY;
    this[matrix4$4] = null;
    this[filterQuality$] = ui.FilterQuality.low;
    ;
  }).prototype = ui.ImageFilter.prototype;
  (ui.ImageFilter.matrix = function(matrix4, opts) {
    let filterQuality = opts && 'filterQuality' in opts ? opts.filterQuality : C1217 || CT.C1217;
    this[matrix4$4] = matrix4;
    this[filterQuality$] = filterQuality;
    this[sigmaX$] = 0.0;
    this[sigmaY$] = 0.0;
    dart.throw(new core.UnimplementedError.new("ImageFilter.matrix not implemented for web platform."));
  }).prototype = ui.ImageFilter.prototype;
  dart.addTypeTests(ui.ImageFilter);
  const matrix4$4 = ImageFilter_matrix4;
  const filterQuality$ = ImageFilter_filterQuality;
  const sigmaX$ = ImageFilter_sigmaX;
  const sigmaY$ = ImageFilter_sigmaY;
  dart.setLibraryUri(ui.ImageFilter, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.ImageFilter, () => ({
    __proto__: dart.getFields(ui.ImageFilter.__proto__),
    matrix4: dart.finalFieldType(typed_data.Float64List),
    filterQuality: dart.finalFieldType(ui.FilterQuality),
    sigmaX: dart.finalFieldType(core.double),
    sigmaY: dart.finalFieldType(core.double)
  }));
  let C1221;
  let C1222;
  let C1223;
  ui.ImageByteFormat = class ImageByteFormat extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.ImageByteFormat.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.ImageByteFormat.prototype;
  dart.addTypeTests(ui.ImageByteFormat);
  dart.setLibraryUri(ui.ImageByteFormat, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.ImageByteFormat, () => ({
    __proto__: dart.getFields(ui.ImageByteFormat.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.ImageByteFormat, ['toString']);
  ui.ImageByteFormat.rawRgba = C15 || CT.C15;
  ui.ImageByteFormat.rawUnmodified = C1221 || CT.C1221;
  ui.ImageByteFormat.png = C1222 || CT.C1222;
  ui.ImageByteFormat.values = C1223 || CT.C1223;
  let C1224;
  let C1225;
  let C1226;
  ui.PixelFormat = class PixelFormat extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.PixelFormat.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.PixelFormat.prototype;
  dart.addTypeTests(ui.PixelFormat);
  dart.setLibraryUri(ui.PixelFormat, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PixelFormat, () => ({
    __proto__: dart.getFields(ui.PixelFormat.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PixelFormat, ['toString']);
  ui.PixelFormat.rgba8888 = C1224 || CT.C1224;
  ui.PixelFormat.bgra8888 = C1225 || CT.C1225;
  ui.PixelFormat.values = C1226 || CT.C1226;
  ui._ImageInfo = class _ImageInfo extends core.Object {};
  (ui._ImageInfo.new = function(width, height, format, rowBytes) {
    this.width = width;
    this.height = height;
    this.format = format;
    this.rowBytes = rowBytes;
    this.rowBytes == null ? this.rowBytes = dart.notNull(this.width) * 4 : null;
  }).prototype = ui._ImageInfo.prototype;
  dart.addTypeTests(ui._ImageInfo);
  dart.setLibraryUri(ui._ImageInfo, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui._ImageInfo, () => ({
    __proto__: dart.getFields(ui._ImageInfo.__proto__),
    width: dart.fieldType(core.int),
    height: dart.fieldType(core.int),
    format: dart.fieldType(core.int),
    rowBytes: dart.fieldType(core.int)
  }));
  ui.FrameInfo = class FrameInfo extends core.Object {
    get duration() {
      return new core.Duration.new({milliseconds: this[_durationMillis$]});
    }
    get [_durationMillis$]() {
      return 0;
    }
    get image() {
      return null;
    }
  };
  (ui.FrameInfo.__ = function() {
    ;
  }).prototype = ui.FrameInfo.prototype;
  dart.addTypeTests(ui.FrameInfo);
  dart.setGetterSignature(ui.FrameInfo, () => ({
    __proto__: dart.getGetters(ui.FrameInfo.__proto__),
    duration: core.Duration,
    [_durationMillis$]: core.int,
    image: ui.Image
  }));
  dart.setLibraryUri(ui.FrameInfo, "package:flutter_web_ui/ui.dart");
  ui.Codec = class Codec extends core.Object {
    get frameCount() {
      return 0;
    }
    get repetitionCount() {
      return 0;
    }
    getNextFrame() {
      return engine.futurize(ui.FrameInfo, dart.bind(this, _getNextFrame$));
    }
    [_getNextFrame$](callback) {
      return null;
    }
    dispose() {
    }
  };
  (ui.Codec.__ = function() {
    ;
  }).prototype = ui.Codec.prototype;
  dart.addTypeTests(ui.Codec);
  dart.setMethodSignature(ui.Codec, () => ({
    __proto__: dart.getMethods(ui.Codec.__proto__),
    getNextFrame: dart.fnType(async.Future$(ui.FrameInfo), []),
    [_getNextFrame$]: dart.fnType(core.String, [dart.fnType(dart.void, [ui.FrameInfo])]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ui.Codec, () => ({
    __proto__: dart.getGetters(ui.Codec.__proto__),
    frameCount: core.int,
    repetitionCount: core.int
  }));
  dart.setLibraryUri(ui.Codec, "package:flutter_web_ui/ui.dart");
  const Shadow_color = dart.privateName(ui, "Shadow.color");
  const Shadow_offset = dart.privateName(ui, "Shadow.offset");
  const Shadow_blurRadius = dart.privateName(ui, "Shadow.blurRadius");
  ui.Shadow = class Shadow extends core.Object {
    get color() {
      return this[color$3];
    }
    set color(value) {
      super.color = value;
    }
    get offset() {
      return this[offset$3];
    }
    set offset(value) {
      super.offset = value;
    }
    get blurRadius() {
      return this[blurRadius$];
    }
    set blurRadius(value) {
      super.blurRadius = value;
    }
    static convertRadiusToSigma(radius) {
      return dart.notNull(radius) * 0.57735 + 0.5;
    }
    get blurSigma() {
      return ui.Shadow.convertRadiusToSigma(this.blurRadius);
    }
    toPaint() {
      let t8;
      t8 = new ui.Paint.new();
      t8.color = this.color;
      t8.maskFilter = new ui.MaskFilter.blur(ui.BlurStyle.normal, this.blurSigma);
      return t8;
    }
    scale(factor) {
      return new ui.Shadow.new({color: this.color, offset: this.offset['*'](factor), blurRadius: dart.notNull(this.blurRadius) * dart.notNull(factor)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 1889, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      if (a == null) {
        return b.scale(t);
      }
      if (b == null) {
        return a.scale(1.0 - dart.notNull(t));
      }
      return new ui.Shadow.new({color: ui.Color.lerp(a.color, b.color, t), offset: ui.Offset.lerp(a.offset, b.offset, t), blurRadius: ui.lerpDouble(a.blurRadius, b.blurRadius, t)});
    }
    static lerpList(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 1912, 12, "t != null");
      if (a == null && b == null) {
        return null;
      }
      a == null ? a = JSArrayOfShadow().of([]) : null;
      b == null ? b = JSArrayOfShadow().of([]) : null;
      let result = JSArrayOfShadow().of([]);
      let commonLength = math.min(core.int, a[$length], b[$length]);
      for (let i = 0; i < commonLength; i = i + 1)
        result[$add](ui.Shadow.lerp(a[$_get](i), b[$_get](i), t));
      for (let i = commonLength; i < dart.notNull(a[$length]); i = i + 1)
        result[$add](a[$_get](i).scale(1.0 - dart.notNull(t)));
      for (let i = commonLength; i < dart.notNull(b[$length]); i = i + 1) {
        result[$add](b[$_get](i).scale(t));
      }
      return result;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!ui.Shadow.is(other)) {
        return false;
      }
      let typedOther = ui.Shadow._check(other);
      return dart.equals(this.color, typedOther.color) && dart.equals(this.offset, typedOther.offset) && this.blurRadius == typedOther.blurRadius;
    }
    get hashCode() {
      return ui.hashValues(this.color, this.offset, this.blurRadius);
    }
    toString() {
      return "TextShadow(" + dart.str(this.color) + ", " + dart.str(this.offset) + ", " + dart.str(this.blurRadius) + ")";
    }
  };
  (ui.Shadow.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C1201 || CT.C1201;
    let offset = opts && 'offset' in opts ? opts.offset : C21 || CT.C21;
    let blurRadius = opts && 'blurRadius' in opts ? opts.blurRadius : 0;
    this[color$3] = color;
    this[offset$3] = offset;
    this[blurRadius$] = blurRadius;
    if (!(color != null)) dart.assertFailed("Text shadow color was null.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 1806, 16, "color != null");
    if (!(offset != null)) dart.assertFailed("Text shadow offset was null.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 1807, 16, "offset != null");
    if (!(dart.notNull(blurRadius) >= 0.0)) dart.assertFailed("Text shadow blur radius should be non-negative.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 1808, 16, "blurRadius >= 0.0");
    ;
  }).prototype = ui.Shadow.prototype;
  dart.addTypeTests(ui.Shadow);
  const color$3 = Shadow_color;
  const offset$3 = Shadow_offset;
  const blurRadius$ = Shadow_blurRadius;
  dart.setMethodSignature(ui.Shadow, () => ({
    __proto__: dart.getMethods(ui.Shadow.__proto__),
    toPaint: dart.fnType(ui.Paint, []),
    scale: dart.fnType(ui.Shadow, [core.double])
  }));
  dart.setGetterSignature(ui.Shadow, () => ({
    __proto__: dart.getGetters(ui.Shadow.__proto__),
    blurSigma: core.double
  }));
  dart.setLibraryUri(ui.Shadow, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Shadow, () => ({
    __proto__: dart.getFields(ui.Shadow.__proto__),
    color: dart.finalFieldType(ui.Color),
    offset: dart.finalFieldType(ui.Offset),
    blurRadius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.Shadow, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Shadow, ['hashCode']);
  dart.defineLazy(ui.Shadow, {
    /*ui.Shadow._kColorDefault*/get _kColorDefault() {
      return 4278190080.0;
    }
  });
  let C1227;
  let C1228;
  let C1229;
  let C1230;
  let C1231;
  let C1232;
  let C1233;
  let C1234;
  ui.PointerChange = class PointerChange extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.PointerChange.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.PointerChange.prototype;
  dart.addTypeTests(ui.PointerChange);
  dart.setLibraryUri(ui.PointerChange, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PointerChange, () => ({
    __proto__: dart.getFields(ui.PointerChange.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PointerChange, ['toString']);
  ui.PointerChange.cancel = C1227 || CT.C1227;
  ui.PointerChange.add = C1228 || CT.C1228;
  ui.PointerChange.remove = C1229 || CT.C1229;
  ui.PointerChange.hover = C1230 || CT.C1230;
  ui.PointerChange.down = C1231 || CT.C1231;
  ui.PointerChange.move = C1232 || CT.C1232;
  ui.PointerChange.up = C1233 || CT.C1233;
  ui.PointerChange.values = C1234 || CT.C1234;
  let C1235;
  let C1236;
  let C1237;
  let C1238;
  let C1239;
  let C1240;
  ui.PointerDeviceKind = class PointerDeviceKind extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.PointerDeviceKind.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.PointerDeviceKind.prototype;
  dart.addTypeTests(ui.PointerDeviceKind);
  dart.setLibraryUri(ui.PointerDeviceKind, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PointerDeviceKind, () => ({
    __proto__: dart.getFields(ui.PointerDeviceKind.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PointerDeviceKind, ['toString']);
  ui.PointerDeviceKind.touch = C1235 || CT.C1235;
  ui.PointerDeviceKind.mouse = C1236 || CT.C1236;
  ui.PointerDeviceKind.stylus = C1237 || CT.C1237;
  ui.PointerDeviceKind.invertedStylus = C1238 || CT.C1238;
  ui.PointerDeviceKind.unknown = C1239 || CT.C1239;
  ui.PointerDeviceKind.values = C1240 || CT.C1240;
  let C1241;
  let C1242;
  let C1243;
  let C1244;
  ui.PointerSignalKind = class PointerSignalKind extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.PointerSignalKind.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.PointerSignalKind.prototype;
  dart.addTypeTests(ui.PointerSignalKind);
  dart.setLibraryUri(ui.PointerSignalKind, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PointerSignalKind, () => ({
    __proto__: dart.getFields(ui.PointerSignalKind.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PointerSignalKind, ['toString']);
  ui.PointerSignalKind.none = C1241 || CT.C1241;
  ui.PointerSignalKind.scroll = C1242 || CT.C1242;
  ui.PointerSignalKind.unknown = C1243 || CT.C1243;
  ui.PointerSignalKind.values = C1244 || CT.C1244;
  const PointerData_timeStamp = dart.privateName(ui, "PointerData.timeStamp");
  const PointerData_change = dart.privateName(ui, "PointerData.change");
  const PointerData_kind = dart.privateName(ui, "PointerData.kind");
  const PointerData_signalKind = dart.privateName(ui, "PointerData.signalKind");
  const PointerData_device = dart.privateName(ui, "PointerData.device");
  const PointerData_physicalX = dart.privateName(ui, "PointerData.physicalX");
  const PointerData_physicalY = dart.privateName(ui, "PointerData.physicalY");
  const PointerData_buttons = dart.privateName(ui, "PointerData.buttons");
  const PointerData_obscured = dart.privateName(ui, "PointerData.obscured");
  const PointerData_pressure = dart.privateName(ui, "PointerData.pressure");
  const PointerData_pressureMin = dart.privateName(ui, "PointerData.pressureMin");
  const PointerData_pressureMax = dart.privateName(ui, "PointerData.pressureMax");
  const PointerData_distance = dart.privateName(ui, "PointerData.distance");
  const PointerData_distanceMax = dart.privateName(ui, "PointerData.distanceMax");
  const PointerData_size = dart.privateName(ui, "PointerData.size");
  const PointerData_radiusMajor = dart.privateName(ui, "PointerData.radiusMajor");
  const PointerData_radiusMinor = dart.privateName(ui, "PointerData.radiusMinor");
  const PointerData_radiusMin = dart.privateName(ui, "PointerData.radiusMin");
  const PointerData_radiusMax = dart.privateName(ui, "PointerData.radiusMax");
  const PointerData_orientation = dart.privateName(ui, "PointerData.orientation");
  const PointerData_tilt = dart.privateName(ui, "PointerData.tilt");
  const PointerData_platformData = dart.privateName(ui, "PointerData.platformData");
  const PointerData_scrollDeltaX = dart.privateName(ui, "PointerData.scrollDeltaX");
  const PointerData_scrollDeltaY = dart.privateName(ui, "PointerData.scrollDeltaY");
  ui.PointerData = class PointerData extends core.Object {
    get timeStamp() {
      return this[timeStamp$];
    }
    set timeStamp(value) {
      super.timeStamp = value;
    }
    get change() {
      return this[change$];
    }
    set change(value) {
      super.change = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get signalKind() {
      return this[signalKind$];
    }
    set signalKind(value) {
      super.signalKind = value;
    }
    get device() {
      return this[device$];
    }
    set device(value) {
      super.device = value;
    }
    get physicalX() {
      return this[physicalX$];
    }
    set physicalX(value) {
      super.physicalX = value;
    }
    get physicalY() {
      return this[physicalY$];
    }
    set physicalY(value) {
      super.physicalY = value;
    }
    get buttons() {
      return this[buttons$];
    }
    set buttons(value) {
      super.buttons = value;
    }
    get obscured() {
      return this[obscured$];
    }
    set obscured(value) {
      super.obscured = value;
    }
    get pressure() {
      return this[pressure$];
    }
    set pressure(value) {
      super.pressure = value;
    }
    get pressureMin() {
      return this[pressureMin$];
    }
    set pressureMin(value) {
      super.pressureMin = value;
    }
    get pressureMax() {
      return this[pressureMax$];
    }
    set pressureMax(value) {
      super.pressureMax = value;
    }
    get distance() {
      return this[distance$];
    }
    set distance(value) {
      super.distance = value;
    }
    get distanceMax() {
      return this[distanceMax$];
    }
    set distanceMax(value) {
      super.distanceMax = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    get radiusMajor() {
      return this[radiusMajor$];
    }
    set radiusMajor(value) {
      super.radiusMajor = value;
    }
    get radiusMinor() {
      return this[radiusMinor$];
    }
    set radiusMinor(value) {
      super.radiusMinor = value;
    }
    get radiusMin() {
      return this[radiusMin$];
    }
    set radiusMin(value) {
      super.radiusMin = value;
    }
    get radiusMax() {
      return this[radiusMax$];
    }
    set radiusMax(value) {
      super.radiusMax = value;
    }
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get tilt() {
      return this[tilt$];
    }
    set tilt(value) {
      super.tilt = value;
    }
    get platformData() {
      return this[platformData$];
    }
    set platformData(value) {
      super.platformData = value;
    }
    get scrollDeltaX() {
      return this[scrollDeltaX$];
    }
    set scrollDeltaX(value) {
      super.scrollDeltaX = value;
    }
    get scrollDeltaY() {
      return this[scrollDeltaY$];
    }
    set scrollDeltaY(value) {
      super.scrollDeltaY = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(x: " + dart.str(this.physicalX) + ", y: " + dart.str(this.physicalY) + ")";
    }
    toStringFull() {
      return dart.str(this[$runtimeType]) + "(" + "timeStamp: " + dart.str(this.timeStamp) + ", " + "change: " + dart.str(this.change) + ", " + "kind: " + dart.str(this.kind) + ", " + "signalKind: " + dart.str(this.signalKind) + ", " + "device: " + dart.str(this.device) + ", " + "physicalX: " + dart.str(this.physicalX) + ", " + "physicalY: " + dart.str(this.physicalY) + ", " + "buttons: " + dart.str(this.buttons) + ", " + "pressure: " + dart.str(this.pressure) + ", " + "pressureMin: " + dart.str(this.pressureMin) + ", " + "pressureMax: " + dart.str(this.pressureMax) + ", " + "distance: " + dart.str(this.distance) + ", " + "distanceMax: " + dart.str(this.distanceMax) + ", " + "size: " + dart.str(this.size) + ", " + "radiusMajor: " + dart.str(this.radiusMajor) + ", " + "radiusMinor: " + dart.str(this.radiusMinor) + ", " + "radiusMin: " + dart.str(this.radiusMin) + ", " + "radiusMax: " + dart.str(this.radiusMax) + ", " + "orientation: " + dart.str(this.orientation) + ", " + "tilt: " + dart.str(this.tilt) + ", " + "platformData: " + dart.str(this.platformData) + ", " + "scrollDeltaX: " + dart.str(this.scrollDeltaX) + ", " + "scrollDeltaY: " + dart.str(this.scrollDeltaY) + ")";
    }
  };
  (ui.PointerData.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : C54 || CT.C54;
    let change = opts && 'change' in opts ? opts.change : C1227 || CT.C1227;
    let kind = opts && 'kind' in opts ? opts.kind : C1235 || CT.C1235;
    let signalKind = opts && 'signalKind' in opts ? opts.signalKind : null;
    let device = opts && 'device' in opts ? opts.device : 0;
    let physicalX = opts && 'physicalX' in opts ? opts.physicalX : 0;
    let physicalY = opts && 'physicalY' in opts ? opts.physicalY : 0;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 0;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 0;
    let distance = opts && 'distance' in opts ? opts.distance : 0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0;
    let size = opts && 'size' in opts ? opts.size : 0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0;
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    let scrollDeltaX = opts && 'scrollDeltaX' in opts ? opts.scrollDeltaX : 0;
    let scrollDeltaY = opts && 'scrollDeltaY' in opts ? opts.scrollDeltaY : 0;
    this[timeStamp$] = timeStamp;
    this[change$] = change;
    this[kind$] = kind;
    this[signalKind$] = signalKind;
    this[device$] = device;
    this[physicalX$] = physicalX;
    this[physicalY$] = physicalY;
    this[buttons$] = buttons;
    this[obscured$] = obscured;
    this[pressure$] = pressure;
    this[pressureMin$] = pressureMin;
    this[pressureMax$] = pressureMax;
    this[distance$] = distance;
    this[distanceMax$] = distanceMax;
    this[size$0] = size;
    this[radiusMajor$] = radiusMajor;
    this[radiusMinor$] = radiusMinor;
    this[radiusMin$] = radiusMin;
    this[radiusMax$] = radiusMax;
    this[orientation$] = orientation;
    this[tilt$] = tilt;
    this[platformData$] = platformData;
    this[scrollDeltaX$] = scrollDeltaX;
    this[scrollDeltaY$] = scrollDeltaY;
    ;
  }).prototype = ui.PointerData.prototype;
  dart.addTypeTests(ui.PointerData);
  const timeStamp$ = PointerData_timeStamp;
  const change$ = PointerData_change;
  const kind$ = PointerData_kind;
  const signalKind$ = PointerData_signalKind;
  const device$ = PointerData_device;
  const physicalX$ = PointerData_physicalX;
  const physicalY$ = PointerData_physicalY;
  const buttons$ = PointerData_buttons;
  const obscured$ = PointerData_obscured;
  const pressure$ = PointerData_pressure;
  const pressureMin$ = PointerData_pressureMin;
  const pressureMax$ = PointerData_pressureMax;
  const distance$ = PointerData_distance;
  const distanceMax$ = PointerData_distanceMax;
  const size$0 = PointerData_size;
  const radiusMajor$ = PointerData_radiusMajor;
  const radiusMinor$ = PointerData_radiusMinor;
  const radiusMin$ = PointerData_radiusMin;
  const radiusMax$ = PointerData_radiusMax;
  const orientation$ = PointerData_orientation;
  const tilt$ = PointerData_tilt;
  const platformData$ = PointerData_platformData;
  const scrollDeltaX$ = PointerData_scrollDeltaX;
  const scrollDeltaY$ = PointerData_scrollDeltaY;
  dart.setMethodSignature(ui.PointerData, () => ({
    __proto__: dart.getMethods(ui.PointerData.__proto__),
    toStringFull: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(ui.PointerData, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PointerData, () => ({
    __proto__: dart.getFields(ui.PointerData.__proto__),
    timeStamp: dart.finalFieldType(core.Duration),
    change: dart.finalFieldType(ui.PointerChange),
    kind: dart.finalFieldType(ui.PointerDeviceKind),
    signalKind: dart.finalFieldType(ui.PointerSignalKind),
    device: dart.finalFieldType(core.int),
    physicalX: dart.finalFieldType(core.double),
    physicalY: dart.finalFieldType(core.double),
    buttons: dart.finalFieldType(core.int),
    obscured: dart.finalFieldType(core.bool),
    pressure: dart.finalFieldType(core.double),
    pressureMin: dart.finalFieldType(core.double),
    pressureMax: dart.finalFieldType(core.double),
    distance: dart.finalFieldType(core.double),
    distanceMax: dart.finalFieldType(core.double),
    size: dart.finalFieldType(core.double),
    radiusMajor: dart.finalFieldType(core.double),
    radiusMinor: dart.finalFieldType(core.double),
    radiusMin: dart.finalFieldType(core.double),
    radiusMax: dart.finalFieldType(core.double),
    orientation: dart.finalFieldType(core.double),
    tilt: dart.finalFieldType(core.double),
    platformData: dart.finalFieldType(core.int),
    scrollDeltaX: dart.finalFieldType(core.double),
    scrollDeltaY: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.PointerData, ['toString']);
  let C1245;
  const PointerDataPacket_data = dart.privateName(ui, "PointerDataPacket.data");
  ui.PointerDataPacket = class PointerDataPacket extends core.Object {
    get data() {
      return this[data$1];
    }
    set data(value) {
      super.data = value;
    }
  };
  (ui.PointerDataPacket.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : C1245 || CT.C1245;
    this[data$1] = data;
    ;
  }).prototype = ui.PointerDataPacket.prototype;
  dart.addTypeTests(ui.PointerDataPacket);
  const data$1 = PointerDataPacket_data;
  dart.setLibraryUri(ui.PointerDataPacket, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PointerDataPacket, () => ({
    __proto__: dart.getFields(ui.PointerDataPacket.__proto__),
    data: dart.finalFieldType(core.List$(ui.PointerData))
  }));
  const SemanticsAction_index = dart.privateName(ui, "SemanticsAction.index");
  let C1246;
  let C1247;
  let C1248;
  let C1249;
  let C1250;
  let C1251;
  let C1252;
  let C1253;
  let C1254;
  let C1255;
  let C1256;
  let C1257;
  let C1258;
  let C1259;
  let C1260;
  let C1261;
  let C1262;
  let C1263;
  let C1264;
  let C1265;
  let C1266;
  let C1267;
  ui.SemanticsAction = class SemanticsAction extends core.Object {
    get index() {
      return this[index$0];
    }
    set index(value) {
      super.index = value;
    }
    toString() {
      switch (this.index) {
        case 1:
        {
          return "SemanticsAction.tap";
        }
        case 2:
        {
          return "SemanticsAction.longPress";
        }
        case 4:
        {
          return "SemanticsAction.scrollLeft";
        }
        case 8:
        {
          return "SemanticsAction.scrollRight";
        }
        case 16:
        {
          return "SemanticsAction.scrollUp";
        }
        case 32:
        {
          return "SemanticsAction.scrollDown";
        }
        case 64:
        {
          return "SemanticsAction.increase";
        }
        case 128:
        {
          return "SemanticsAction.decrease";
        }
        case 256:
        {
          return "SemanticsAction.showOnScreen";
        }
        case 512:
        {
          return "SemanticsAction.moveCursorForwardByCharacter";
        }
        case 1024:
        {
          return "SemanticsAction.moveCursorBackwardByCharacter";
        }
        case 2048:
        {
          return "SemanticsAction.setSelection";
        }
        case 4096:
        {
          return "SemanticsAction.copy";
        }
        case 8192:
        {
          return "SemanticsAction.cut";
        }
        case 16384:
        {
          return "SemanticsAction.paste";
        }
        case 32768:
        {
          return "SemanticsAction.didGainAccessibilityFocus";
        }
        case 65536:
        {
          return "SemanticsAction.didLoseAccessibilityFocus";
        }
        case 131072:
        {
          return "SemanticsAction.customAction";
        }
        case 262144:
        {
          return "SemanticsAction.dismiss";
        }
        case 524288:
        {
          return "SemanticsAction.moveCursorForwardByWord";
        }
        case 1048576:
        {
          return "SemanticsAction.moveCursorBackwardByWord";
        }
      }
      return null;
    }
  };
  (ui.SemanticsAction.__ = function(index) {
    this[index$0] = index;
    ;
  }).prototype = ui.SemanticsAction.prototype;
  dart.addTypeTests(ui.SemanticsAction);
  const index$0 = SemanticsAction_index;
  dart.setLibraryUri(ui.SemanticsAction, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.SemanticsAction, () => ({
    __proto__: dart.getFields(ui.SemanticsAction.__proto__),
    index: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.SemanticsAction, ['toString']);
  dart.defineLazy(ui.SemanticsAction, {
    /*ui.SemanticsAction._kTapIndex*/get _kTapIndex() {
      return 1;
    },
    /*ui.SemanticsAction._kLongPressIndex*/get _kLongPressIndex() {
      return 2;
    },
    /*ui.SemanticsAction._kScrollLeftIndex*/get _kScrollLeftIndex() {
      return 4;
    },
    /*ui.SemanticsAction._kScrollRightIndex*/get _kScrollRightIndex() {
      return 8;
    },
    /*ui.SemanticsAction._kScrollUpIndex*/get _kScrollUpIndex() {
      return 16;
    },
    /*ui.SemanticsAction._kScrollDownIndex*/get _kScrollDownIndex() {
      return 32;
    },
    /*ui.SemanticsAction._kIncreaseIndex*/get _kIncreaseIndex() {
      return 64;
    },
    /*ui.SemanticsAction._kDecreaseIndex*/get _kDecreaseIndex() {
      return 128;
    },
    /*ui.SemanticsAction._kShowOnScreenIndex*/get _kShowOnScreenIndex() {
      return 256;
    },
    /*ui.SemanticsAction._kMoveCursorForwardByCharacterIndex*/get _kMoveCursorForwardByCharacterIndex() {
      return 512;
    },
    /*ui.SemanticsAction._kMoveCursorBackwardByCharacterIndex*/get _kMoveCursorBackwardByCharacterIndex() {
      return 1024;
    },
    /*ui.SemanticsAction._kSetSelectionIndex*/get _kSetSelectionIndex() {
      return 2048;
    },
    /*ui.SemanticsAction._kCopyIndex*/get _kCopyIndex() {
      return 4096;
    },
    /*ui.SemanticsAction._kCutIndex*/get _kCutIndex() {
      return 8192;
    },
    /*ui.SemanticsAction._kPasteIndex*/get _kPasteIndex() {
      return 16384;
    },
    /*ui.SemanticsAction._kDidGainAccessibilityFocusIndex*/get _kDidGainAccessibilityFocusIndex() {
      return 32768;
    },
    /*ui.SemanticsAction._kDidLoseAccessibilityFocusIndex*/get _kDidLoseAccessibilityFocusIndex() {
      return 65536;
    },
    /*ui.SemanticsAction._kCustomAction*/get _kCustomAction() {
      return 131072;
    },
    /*ui.SemanticsAction._kDismissIndex*/get _kDismissIndex() {
      return 262144;
    },
    /*ui.SemanticsAction._kMoveCursorForwardByWordIndex*/get _kMoveCursorForwardByWordIndex() {
      return 524288;
    },
    /*ui.SemanticsAction._kMoveCursorBackwardByWordIndex*/get _kMoveCursorBackwardByWordIndex() {
      return 1048576;
    },
    /*ui.SemanticsAction.tap*/get tap() {
      return C1246 || CT.C1246;
    },
    /*ui.SemanticsAction.longPress*/get longPress() {
      return C1247 || CT.C1247;
    },
    /*ui.SemanticsAction.scrollLeft*/get scrollLeft() {
      return C1248 || CT.C1248;
    },
    /*ui.SemanticsAction.scrollRight*/get scrollRight() {
      return C1249 || CT.C1249;
    },
    /*ui.SemanticsAction.scrollUp*/get scrollUp() {
      return C1250 || CT.C1250;
    },
    /*ui.SemanticsAction.scrollDown*/get scrollDown() {
      return C1251 || CT.C1251;
    },
    /*ui.SemanticsAction.increase*/get increase() {
      return C1252 || CT.C1252;
    },
    /*ui.SemanticsAction.decrease*/get decrease() {
      return C1253 || CT.C1253;
    },
    /*ui.SemanticsAction.showOnScreen*/get showOnScreen() {
      return C1254 || CT.C1254;
    },
    /*ui.SemanticsAction.moveCursorForwardByCharacter*/get moveCursorForwardByCharacter() {
      return C1255 || CT.C1255;
    },
    /*ui.SemanticsAction.moveCursorBackwardByCharacter*/get moveCursorBackwardByCharacter() {
      return C1256 || CT.C1256;
    },
    /*ui.SemanticsAction.setSelection*/get setSelection() {
      return C1257 || CT.C1257;
    },
    /*ui.SemanticsAction.copy*/get copy() {
      return C1258 || CT.C1258;
    },
    /*ui.SemanticsAction.cut*/get cut() {
      return C1259 || CT.C1259;
    },
    /*ui.SemanticsAction.paste*/get paste() {
      return C1260 || CT.C1260;
    },
    /*ui.SemanticsAction.didGainAccessibilityFocus*/get didGainAccessibilityFocus() {
      return C1261 || CT.C1261;
    },
    /*ui.SemanticsAction.didLoseAccessibilityFocus*/get didLoseAccessibilityFocus() {
      return C1262 || CT.C1262;
    },
    /*ui.SemanticsAction.customAction*/get customAction() {
      return C1263 || CT.C1263;
    },
    /*ui.SemanticsAction.dismiss*/get dismiss() {
      return C1264 || CT.C1264;
    },
    /*ui.SemanticsAction.moveCursorForwardByWord*/get moveCursorForwardByWord() {
      return C1265 || CT.C1265;
    },
    /*ui.SemanticsAction.moveCursorBackwardByWord*/get moveCursorBackwardByWord() {
      return C1266 || CT.C1266;
    },
    /*ui.SemanticsAction.values*/get values() {
      return C1267 || CT.C1267;
    }
  });
  const SemanticsFlag_index = dart.privateName(ui, "SemanticsFlag.index");
  let C1268;
  let C1269;
  let C1270;
  let C1271;
  let C1272;
  let C1273;
  let C1274;
  let C1275;
  let C1276;
  let C1277;
  let C1278;
  let C1279;
  let C1280;
  let C1281;
  let C1282;
  let C1283;
  let C1284;
  let C1285;
  let C1286;
  let C1287;
  let C1288;
  let C1289;
  ui.SemanticsFlag = class SemanticsFlag extends core.Object {
    get index() {
      return this[index$1];
    }
    set index(value) {
      super.index = value;
    }
    toString() {
      switch (this.index) {
        case 1:
        {
          return "SemanticsFlag.hasCheckedState";
        }
        case 2:
        {
          return "SemanticsFlag.isChecked";
        }
        case 4:
        {
          return "SemanticsFlag.isSelected";
        }
        case 8:
        {
          return "SemanticsFlag.isButton";
        }
        case 16:
        {
          return "SemanticsFlag.isTextField";
        }
        case 32:
        {
          return "SemanticsFlag.isFocused";
        }
        case 64:
        {
          return "SemanticsFlag.hasEnabledState";
        }
        case 128:
        {
          return "SemanticsFlag.isEnabled";
        }
        case 256:
        {
          return "SemanticsFlag.isInMutuallyExclusiveGroup";
        }
        case 512:
        {
          return "SemanticsFlag.isHeader";
        }
        case 1024:
        {
          return "SemanticsFlag.isObscured";
        }
        case 2048:
        {
          return "SemanticsFlag.scopesRoute";
        }
        case 4096:
        {
          return "SemanticsFlag.namesRoute";
        }
        case 8192:
        {
          return "SemanticsFlag.isHidden";
        }
        case 16384:
        {
          return "SemanticsFlag.isImage";
        }
        case 32768:
        {
          return "SemanticsFlag.isLiveRegion";
        }
        case 65536:
        {
          return "SemanticsFlag.hasToggledState";
        }
        case 131072:
        {
          return "SemanticsFlag.isToggled";
        }
        case 262144:
        {
          return "SemanticsFlag.hasImplicitScrolling";
        }
        case 524288:
        {
          return "SemanticsFlag.isMultiline";
        }
        case 1048576:
        {
          return "SemanticsFlag.isReadOnly";
        }
      }
      return null;
    }
  };
  (ui.SemanticsFlag.__ = function(index) {
    this[index$1] = index;
    ;
  }).prototype = ui.SemanticsFlag.prototype;
  dart.addTypeTests(ui.SemanticsFlag);
  const index$1 = SemanticsFlag_index;
  dart.setLibraryUri(ui.SemanticsFlag, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.SemanticsFlag, () => ({
    __proto__: dart.getFields(ui.SemanticsFlag.__proto__),
    index: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.SemanticsFlag, ['toString']);
  dart.defineLazy(ui.SemanticsFlag, {
    /*ui.SemanticsFlag._kHasCheckedStateIndex*/get _kHasCheckedStateIndex() {
      return 1;
    },
    /*ui.SemanticsFlag._kIsCheckedIndex*/get _kIsCheckedIndex() {
      return 2;
    },
    /*ui.SemanticsFlag._kIsSelectedIndex*/get _kIsSelectedIndex() {
      return 4;
    },
    /*ui.SemanticsFlag._kIsButtonIndex*/get _kIsButtonIndex() {
      return 8;
    },
    /*ui.SemanticsFlag._kIsTextFieldIndex*/get _kIsTextFieldIndex() {
      return 16;
    },
    /*ui.SemanticsFlag._kIsFocusedIndex*/get _kIsFocusedIndex() {
      return 32;
    },
    /*ui.SemanticsFlag._kHasEnabledStateIndex*/get _kHasEnabledStateIndex() {
      return 64;
    },
    /*ui.SemanticsFlag._kIsEnabledIndex*/get _kIsEnabledIndex() {
      return 128;
    },
    /*ui.SemanticsFlag._kIsInMutuallyExclusiveGroupIndex*/get _kIsInMutuallyExclusiveGroupIndex() {
      return 256;
    },
    /*ui.SemanticsFlag._kIsHeaderIndex*/get _kIsHeaderIndex() {
      return 512;
    },
    /*ui.SemanticsFlag._kIsObscuredIndex*/get _kIsObscuredIndex() {
      return 1024;
    },
    /*ui.SemanticsFlag._kScopesRouteIndex*/get _kScopesRouteIndex() {
      return 2048;
    },
    /*ui.SemanticsFlag._kNamesRouteIndex*/get _kNamesRouteIndex() {
      return 4096;
    },
    /*ui.SemanticsFlag._kIsHiddenIndex*/get _kIsHiddenIndex() {
      return 8192;
    },
    /*ui.SemanticsFlag._kIsImageIndex*/get _kIsImageIndex() {
      return 16384;
    },
    /*ui.SemanticsFlag._kIsLiveRegionIndex*/get _kIsLiveRegionIndex() {
      return 32768;
    },
    /*ui.SemanticsFlag._kHasToggledStateIndex*/get _kHasToggledStateIndex() {
      return 65536;
    },
    /*ui.SemanticsFlag._kIsToggledIndex*/get _kIsToggledIndex() {
      return 131072;
    },
    /*ui.SemanticsFlag._kHasImplicitScrollingIndex*/get _kHasImplicitScrollingIndex() {
      return 262144;
    },
    /*ui.SemanticsFlag._kIsMultilineIndex*/get _kIsMultilineIndex() {
      return 524288;
    },
    /*ui.SemanticsFlag._kIsReadOnlyIndex*/get _kIsReadOnlyIndex() {
      return 1048576;
    },
    /*ui.SemanticsFlag.hasCheckedState*/get hasCheckedState() {
      return C1268 || CT.C1268;
    },
    /*ui.SemanticsFlag.isChecked*/get isChecked() {
      return C1269 || CT.C1269;
    },
    /*ui.SemanticsFlag.isSelected*/get isSelected() {
      return C1270 || CT.C1270;
    },
    /*ui.SemanticsFlag.isButton*/get isButton() {
      return C1271 || CT.C1271;
    },
    /*ui.SemanticsFlag.isTextField*/get isTextField() {
      return C1272 || CT.C1272;
    },
    /*ui.SemanticsFlag.isReadOnly*/get isReadOnly() {
      return C1273 || CT.C1273;
    },
    /*ui.SemanticsFlag.isFocused*/get isFocused() {
      return C1274 || CT.C1274;
    },
    /*ui.SemanticsFlag.hasEnabledState*/get hasEnabledState() {
      return C1275 || CT.C1275;
    },
    /*ui.SemanticsFlag.isEnabled*/get isEnabled() {
      return C1276 || CT.C1276;
    },
    /*ui.SemanticsFlag.isInMutuallyExclusiveGroup*/get isInMutuallyExclusiveGroup() {
      return C1277 || CT.C1277;
    },
    /*ui.SemanticsFlag.isHeader*/get isHeader() {
      return C1278 || CT.C1278;
    },
    /*ui.SemanticsFlag.isObscured*/get isObscured() {
      return C1279 || CT.C1279;
    },
    /*ui.SemanticsFlag.scopesRoute*/get scopesRoute() {
      return C1280 || CT.C1280;
    },
    /*ui.SemanticsFlag.namesRoute*/get namesRoute() {
      return C1281 || CT.C1281;
    },
    /*ui.SemanticsFlag.isHidden*/get isHidden() {
      return C1282 || CT.C1282;
    },
    /*ui.SemanticsFlag.isImage*/get isImage() {
      return C1283 || CT.C1283;
    },
    /*ui.SemanticsFlag.isLiveRegion*/get isLiveRegion() {
      return C1284 || CT.C1284;
    },
    /*ui.SemanticsFlag.hasToggledState*/get hasToggledState() {
      return C1285 || CT.C1285;
    },
    /*ui.SemanticsFlag.isToggled*/get isToggled() {
      return C1286 || CT.C1286;
    },
    /*ui.SemanticsFlag.hasImplicitScrolling*/get hasImplicitScrolling() {
      return C1287 || CT.C1287;
    },
    /*ui.SemanticsFlag.isMultiline*/get isMultiline() {
      return C1288 || CT.C1288;
    },
    /*ui.SemanticsFlag.values*/get values() {
      return C1289 || CT.C1289;
    }
  });
  const _nodeUpdates$ = dart.privateName(ui, "_nodeUpdates");
  ui.SemanticsUpdateBuilder = class SemanticsUpdateBuilder extends core.Object {
    updateNode(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      let textSelectionBase = opts && 'textSelectionBase' in opts ? opts.textSelectionBase : null;
      let textSelectionExtent = opts && 'textSelectionExtent' in opts ? opts.textSelectionExtent : null;
      let platformViewId = opts && 'platformViewId' in opts ? opts.platformViewId : null;
      let scrollChildren = opts && 'scrollChildren' in opts ? opts.scrollChildren : null;
      let scrollIndex = opts && 'scrollIndex' in opts ? opts.scrollIndex : null;
      let scrollPosition = opts && 'scrollPosition' in opts ? opts.scrollPosition : null;
      let scrollExtentMax = opts && 'scrollExtentMax' in opts ? opts.scrollExtentMax : null;
      let scrollExtentMin = opts && 'scrollExtentMin' in opts ? opts.scrollExtentMin : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let thickness = opts && 'thickness' in opts ? opts.thickness : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let label = opts && 'label' in opts ? opts.label : null;
      let hint = opts && 'hint' in opts ? opts.hint : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let increasedValue = opts && 'increasedValue' in opts ? opts.increasedValue : null;
      let decreasedValue = opts && 'decreasedValue' in opts ? opts.decreasedValue : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let childrenInTraversalOrder = opts && 'childrenInTraversalOrder' in opts ? opts.childrenInTraversalOrder : null;
      let childrenInHitTestOrder = opts && 'childrenInHitTestOrder' in opts ? opts.childrenInHitTestOrder : null;
      let additionalActions = opts && 'additionalActions' in opts ? opts.additionalActions : null;
      if (transform[$length] !== 16) dart.throw(new core.ArgumentError.new("transform argument must have 16 entries."));
      this[_nodeUpdates$][$add](new engine.SemanticsNodeUpdate.new({id: id, flags: flags, actions: actions, textSelectionBase: textSelectionBase, textSelectionExtent: textSelectionExtent, scrollChildren: scrollChildren, scrollIndex: scrollIndex, scrollPosition: scrollPosition, scrollExtentMax: scrollExtentMax, scrollExtentMin: scrollExtentMin, rect: rect, label: label, hint: hint, value: value, increasedValue: increasedValue, decreasedValue: decreasedValue, textDirection: textDirection, transform: transform, elevation: elevation, thickness: thickness, childrenInTraversalOrder: childrenInTraversalOrder, childrenInHitTestOrder: childrenInHitTestOrder, additionalActions: additionalActions, platformViewId: platformViewId}));
    }
    updateCustomAction(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let label = opts && 'label' in opts ? opts.label : null;
      let hint = opts && 'hint' in opts ? opts.hint : null;
      let overrideId = opts && 'overrideId' in opts ? opts.overrideId : -1;
    }
    build() {
      return new engine.SemanticsUpdate.new({nodeUpdates: this[_nodeUpdates$]});
    }
  };
  (ui.SemanticsUpdateBuilder.new = function() {
    this[_nodeUpdates$] = JSArrayOfSemanticsNodeUpdate().of([]);
    ;
  }).prototype = ui.SemanticsUpdateBuilder.prototype;
  dart.addTypeTests(ui.SemanticsUpdateBuilder);
  dart.setMethodSignature(ui.SemanticsUpdateBuilder, () => ({
    __proto__: dart.getMethods(ui.SemanticsUpdateBuilder.__proto__),
    updateNode: dart.fnType(dart.void, [], {actions: core.int, additionalActions: typed_data.Int32List, childrenInHitTestOrder: typed_data.Int32List, childrenInTraversalOrder: typed_data.Int32List, decreasedValue: core.String, elevation: core.double, flags: core.int, hint: core.String, id: core.int, increasedValue: core.String, label: core.String, platformViewId: core.int, rect: ui.Rect, scrollChildren: core.int, scrollExtentMax: core.double, scrollExtentMin: core.double, scrollIndex: core.int, scrollPosition: core.double, textDirection: ui.TextDirection, textSelectionBase: core.int, textSelectionExtent: core.int, thickness: core.double, transform: typed_data.Float64List, value: core.String}),
    updateCustomAction: dart.fnType(dart.void, [], {hint: core.String, id: core.int, label: core.String, overrideId: core.int}),
    build: dart.fnType(ui.SemanticsUpdate, [])
  }));
  dart.setLibraryUri(ui.SemanticsUpdateBuilder, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.SemanticsUpdateBuilder, () => ({
    __proto__: dart.getFields(ui.SemanticsUpdateBuilder.__proto__),
    [_nodeUpdates$]: dart.finalFieldType(core.List$(engine.SemanticsNodeUpdate))
  }));
  ui.SemanticsUpdate = class SemanticsUpdate extends core.Object {};
  (ui.SemanticsUpdate[dart.mixinNew] = function() {
  }).prototype = ui.SemanticsUpdate.prototype;
  dart.addTypeTests(ui.SemanticsUpdate);
  dart.setLibraryUri(ui.SemanticsUpdate, "package:flutter_web_ui/ui.dart");
  let C1290;
  let C1291;
  let C1292;
  ui.FontStyle = class FontStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.FontStyle.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.FontStyle.prototype;
  dart.addTypeTests(ui.FontStyle);
  dart.setLibraryUri(ui.FontStyle, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.FontStyle, () => ({
    __proto__: dart.getFields(ui.FontStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.FontStyle, ['toString']);
  ui.FontStyle.normal = C1290 || CT.C1290;
  ui.FontStyle.italic = C1291 || CT.C1291;
  ui.FontStyle.values = C1292 || CT.C1292;
  let C1293;
  let C1294;
  let C1295;
  let C1296;
  let C1297;
  let C1298;
  let C1299;
  ui.PlaceholderAlignment = class PlaceholderAlignment extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.PlaceholderAlignment.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.PlaceholderAlignment.prototype;
  dart.addTypeTests(ui.PlaceholderAlignment);
  dart.setLibraryUri(ui.PlaceholderAlignment, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.PlaceholderAlignment, () => ({
    __proto__: dart.getFields(ui.PlaceholderAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PlaceholderAlignment, ['toString']);
  ui.PlaceholderAlignment.baseline = C1293 || CT.C1293;
  ui.PlaceholderAlignment.aboveBaseline = C1294 || CT.C1294;
  ui.PlaceholderAlignment.belowBaseline = C1295 || CT.C1295;
  ui.PlaceholderAlignment.top = C1296 || CT.C1296;
  ui.PlaceholderAlignment.bottom = C1297 || CT.C1297;
  ui.PlaceholderAlignment.middle = C1298 || CT.C1298;
  ui.PlaceholderAlignment.values = C1299 || CT.C1299;
  let C1300;
  const FontWeight_index = dart.privateName(ui, "FontWeight.index");
  let C1301;
  let C1302;
  let C1303;
  let C1304;
  let C1305;
  let C1306;
  let C1307;
  let C1308;
  let C1309;
  let C1310;
  ui.FontWeight = class FontWeight extends core.Object {
    get index() {
      return this[index$2];
    }
    set index(value) {
      super.index = value;
    }
    static lerp(a, b, t) {
      let t8, t8$, t8$0, t8$1;
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 134, 12, "t(t != nu");
      return ui.FontWeight.values[$_get](dart.asInt(ui.lerpDouble((t8$ = (t8 = a, t8 == null ? null : t8.index), t8$ == null ? ui.FontWeight.normal.index : t8$), (t8$1 = (t8$0 = b, t8$0 == null ? null : t8$0.index), t8$1 == null ? ui.FontWeight.normal.index : t8$1), t)[$round]()[$clamp](0, 8)));
    }
    toString() {
      return (C1300 || CT.C1300)[$_get](this.index);
    }
  };
  (ui.FontWeight.__ = function(index) {
    this[index$2] = index;
    ;
  }).prototype = ui.FontWeight.prototype;
  dart.addTypeTests(ui.FontWeight);
  const index$2 = FontWeight_index;
  dart.setLibraryUri(ui.FontWeight, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.FontWeight, () => ({
    __proto__: dart.getFields(ui.FontWeight.__proto__),
    index: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.FontWeight, ['toString']);
  dart.defineLazy(ui.FontWeight, {
    /*ui.FontWeight.w100*/get w100() {
      return C1301 || CT.C1301;
    },
    /*ui.FontWeight.w200*/get w200() {
      return C1302 || CT.C1302;
    },
    /*ui.FontWeight.w300*/get w300() {
      return C1303 || CT.C1303;
    },
    /*ui.FontWeight.w400*/get w400() {
      return C1304 || CT.C1304;
    },
    /*ui.FontWeight.w500*/get w500() {
      return C1305 || CT.C1305;
    },
    /*ui.FontWeight.w600*/get w600() {
      return C1306 || CT.C1306;
    },
    /*ui.FontWeight.w700*/get w700() {
      return C1307 || CT.C1307;
    },
    /*ui.FontWeight.w800*/get w800() {
      return C1308 || CT.C1308;
    },
    /*ui.FontWeight.w900*/get w900() {
      return C1309 || CT.C1309;
    },
    /*ui.FontWeight.normal*/get normal() {
      return C1304 || CT.C1304;
    },
    /*ui.FontWeight.bold*/get bold() {
      return C1307 || CT.C1307;
    },
    /*ui.FontWeight.values*/get values() {
      return C1310 || CT.C1310;
    }
  });
  const FontFeature_feature = dart.privateName(ui, "FontFeature.feature");
  const FontFeature_value = dart.privateName(ui, "FontFeature.value");
  ui.FontFeature = class FontFeature extends core.Object {
    get feature() {
      return this[feature$];
    }
    set feature(value) {
      super.feature = value;
    }
    get value() {
      return this[value$2];
    }
    set value(value) {
      super.value = value;
    }
    static stylisticSet(value) {
      if (!(dart.notNull(value) >= 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 204, 12, "t(value >=");
      if (!(dart.notNull(value) <= 20)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 205, 12, "t(value <= ");
      return new ui.FontFeature.new("ss" + dart.toString(value)[$padLeft](2, "0"));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = ui.FontFeature._check(other);
      return this.feature == typedOther.feature && this.value == typedOther.value;
    }
    get hashCode() {
      return ui.hashValues(this.feature, this.value);
    }
    toString() {
      return "FontFeature(" + dart.str(this.feature) + ", " + dart.str(this.value) + ")";
    }
  };
  (ui.FontFeature.new = function(feature, value) {
    if (value === void 0) value = 1;
    this[feature$] = feature;
    this[value$2] = value;
    if (!(feature != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 171, 16, "t(feature != nu");
    if (!(feature.length === 4)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 172, 16, "t(feature.length ==");
    if (!(value != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 173, 16, "t(value != nu");
    if (!(dart.notNull(value) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 174, 16, "t(value >=");
    ;
  }).prototype = ui.FontFeature.prototype;
  (ui.FontFeature.enable = function(feature) {
    ui.FontFeature.new.call(this, feature, 1);
  }).prototype = ui.FontFeature.prototype;
  (ui.FontFeature.disable = function(feature) {
    ui.FontFeature.new.call(this, feature, 0);
  }).prototype = ui.FontFeature.prototype;
  (ui.FontFeature.randomize = function() {
    this[feature$] = "rand";
    this[value$2] = 1;
    ;
  }).prototype = ui.FontFeature.prototype;
  (ui.FontFeature.slashedZero = function() {
    this[feature$] = "zero";
    this[value$2] = 1;
    ;
  }).prototype = ui.FontFeature.prototype;
  (ui.FontFeature.oldstyleFigures = function() {
    this[feature$] = "onum";
    this[value$2] = 1;
    ;
  }).prototype = ui.FontFeature.prototype;
  (ui.FontFeature.proportionalFigures = function() {
    this[feature$] = "pnum";
    this[value$2] = 1;
    ;
  }).prototype = ui.FontFeature.prototype;
  (ui.FontFeature.tabularFigures = function() {
    this[feature$] = "tnum";
    this[value$2] = 1;
    ;
  }).prototype = ui.FontFeature.prototype;
  dart.addTypeTests(ui.FontFeature);
  const feature$ = FontFeature_feature;
  const value$2 = FontFeature_value;
  dart.setLibraryUri(ui.FontFeature, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.FontFeature, () => ({
    __proto__: dart.getFields(ui.FontFeature.__proto__),
    feature: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.FontFeature, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.FontFeature, ['hashCode']);
  let C1311;
  ui.TextAlign = class TextAlign extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.TextAlign.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.TextAlign.prototype;
  dart.addTypeTests(ui.TextAlign);
  dart.setLibraryUri(ui.TextAlign, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.TextAlign, () => ({
    __proto__: dart.getFields(ui.TextAlign.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextAlign, ['toString']);
  ui.TextAlign.left = C204 || CT.C204;
  ui.TextAlign.right = C115 || CT.C115;
  ui.TextAlign.center = C114 || CT.C114;
  ui.TextAlign.justify = C205 || CT.C205;
  ui.TextAlign.start = C116 || CT.C116;
  ui.TextAlign.end = C117 || CT.C117;
  ui.TextAlign.values = C1311 || CT.C1311;
  let C1312;
  let C1313;
  let C1314;
  ui.TextBaseline = class TextBaseline extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.TextBaseline.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.TextBaseline.prototype;
  dart.addTypeTests(ui.TextBaseline);
  dart.setLibraryUri(ui.TextBaseline, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.TextBaseline, () => ({
    __proto__: dart.getFields(ui.TextBaseline.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextBaseline, ['toString']);
  ui.TextBaseline.alphabetic = C1312 || CT.C1312;
  ui.TextBaseline.ideographic = C1313 || CT.C1313;
  ui.TextBaseline.values = C1314 || CT.C1314;
  const _mask = dart.privateName(ui, "_mask");
  const TextDecoration__mask = dart.privateName(ui, "TextDecoration._mask");
  let C1315;
  let C1316;
  let C1317;
  let C1318;
  ui.TextDecoration = class TextDecoration extends core.Object {
    get [_mask]() {
      return this[_mask$];
    }
    set [_mask](value) {
      super[_mask] = value;
    }
    static combine(decorations) {
      let mask = 0;
      for (let decoration of decorations) {
        mask = (mask | dart.notNull(decoration[_mask])) >>> 0;
      }
      return new ui.TextDecoration.__(mask);
    }
    contains(other) {
      return (dart.notNull(this[_mask]) | dart.notNull(other[_mask])) >>> 0 === this[_mask];
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.TextDecoration.is(other)) {
        return false;
      }
      let typedOther = ui.TextDecoration._check(other);
      return this[_mask] == typedOther[_mask];
    }
    get hashCode() {
      return dart.hashCode(this[_mask]);
    }
    toString() {
      if (this[_mask] === 0) {
        return "TextDecoration.none";
      }
      let values = JSArrayOfString().of([]);
      if ((dart.notNull(this[_mask]) & dart.notNull(ui.TextDecoration.underline[_mask])) !== 0) {
        values[$add]("underline");
      }
      if ((dart.notNull(this[_mask]) & dart.notNull(ui.TextDecoration.overline[_mask])) !== 0) {
        values[$add]("overline");
      }
      if ((dart.notNull(this[_mask]) & dart.notNull(ui.TextDecoration.lineThrough[_mask])) !== 0) {
        values[$add]("lineThrough");
      }
      if (values[$length] === 1) {
        return "TextDecoration." + dart.str(values[$_get](0));
      }
      return "TextDecoration.combine([" + dart.str(values[$join](", ")) + "])";
    }
  };
  (ui.TextDecoration.__ = function(_mask) {
    this[_mask$] = _mask;
    ;
  }).prototype = ui.TextDecoration.prototype;
  dart.addTypeTests(ui.TextDecoration);
  const _mask$ = TextDecoration__mask;
  dart.setMethodSignature(ui.TextDecoration, () => ({
    __proto__: dart.getMethods(ui.TextDecoration.__proto__),
    contains: dart.fnType(core.bool, [ui.TextDecoration])
  }));
  dart.setLibraryUri(ui.TextDecoration, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.TextDecoration, () => ({
    __proto__: dart.getFields(ui.TextDecoration.__proto__),
    [_mask]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.TextDecoration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.TextDecoration, ['hashCode']);
  dart.defineLazy(ui.TextDecoration, {
    /*ui.TextDecoration.none*/get none() {
      return C1315 || CT.C1315;
    },
    /*ui.TextDecoration.underline*/get underline() {
      return C1316 || CT.C1316;
    },
    /*ui.TextDecoration.overline*/get overline() {
      return C1317 || CT.C1317;
    },
    /*ui.TextDecoration.lineThrough*/get lineThrough() {
      return C1318 || CT.C1318;
    }
  });
  let C1319;
  ui.TextDecorationStyle = class TextDecorationStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.TextDecorationStyle.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.TextDecorationStyle.prototype;
  dart.addTypeTests(ui.TextDecorationStyle);
  dart.setLibraryUri(ui.TextDecorationStyle, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.TextDecorationStyle, () => ({
    __proto__: dart.getFields(ui.TextDecorationStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextDecorationStyle, ['toString']);
  ui.TextDecorationStyle.solid = C202 || CT.C202;
  ui.TextDecorationStyle.double = C201 || CT.C201;
  ui.TextDecorationStyle.dotted = C200 || CT.C200;
  ui.TextDecorationStyle.dashed = C199 || CT.C199;
  ui.TextDecorationStyle.wavy = C203 || CT.C203;
  ui.TextDecorationStyle.values = C1319 || CT.C1319;
  ui.TextStyle = class TextStyle extends core.Object {};
  (ui.TextStyle[dart.mixinNew] = function() {
  }).prototype = ui.TextStyle.prototype;
  dart.addTypeTests(ui.TextStyle);
  dart.setLibraryUri(ui.TextStyle, "package:flutter_web_ui/ui.dart");
  ui.ParagraphStyle = class ParagraphStyle extends core.Object {};
  (ui.ParagraphStyle[dart.mixinNew] = function() {
  }).prototype = ui.ParagraphStyle.prototype;
  dart.addTypeTests(ui.ParagraphStyle);
  dart.setLibraryUri(ui.ParagraphStyle, "package:flutter_web_ui/ui.dart");
  ui.StrutStyle = class StrutStyle extends core.Object {};
  (ui.StrutStyle[dart.mixinNew] = function() {
  }).prototype = ui.StrutStyle.prototype;
  dart.addTypeTests(ui.StrutStyle);
  dart.setLibraryUri(ui.StrutStyle, "package:flutter_web_ui/ui.dart");
  let C1320;
  ui.TextDirection = class TextDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.TextDirection.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.TextDirection.prototype;
  dart.addTypeTests(ui.TextDirection);
  dart.setLibraryUri(ui.TextDirection, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.TextDirection, () => ({
    __proto__: dart.getFields(ui.TextDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextDirection, ['toString']);
  ui.TextDirection.rtl = C207 || CT.C207;
  ui.TextDirection.ltr = C206 || CT.C206;
  ui.TextDirection.values = C1320 || CT.C1320;
  const TextBox_left = dart.privateName(ui, "TextBox.left");
  const TextBox_top = dart.privateName(ui, "TextBox.top");
  const TextBox_right = dart.privateName(ui, "TextBox.right");
  const TextBox_bottom = dart.privateName(ui, "TextBox.bottom");
  const TextBox_direction = dart.privateName(ui, "TextBox.direction");
  ui.TextBox = class TextBox extends core.Object {
    get left() {
      return this[left$1];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$1];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$1];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$1];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    toRect() {
      return new ui.Rect.fromLTRB(this.left, this.top, this.right, this.bottom);
    }
    get start() {
      return dart.equals(this.direction, ui.TextDirection.ltr) ? this.left : this.right;
    }
    get end() {
      return dart.equals(this.direction, ui.TextDirection.ltr) ? this.right : this.left;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = ui.TextBox._check(other);
      return typedOther.left == this.left && typedOther.top == this.top && typedOther.right == this.right && typedOther.bottom == this.bottom && dart.equals(typedOther.direction, this.direction);
    }
    get hashCode() {
      return ui.hashValues(this.left, this.top, this.right, this.bottom, this.direction);
    }
    toString() {
      if (dart.test(engine.assertionsEnabled)) {
        return "TextBox.fromLTRBD(" + this.left[$toStringAsFixed](1) + ", " + this.top[$toStringAsFixed](1) + ", " + this.right[$toStringAsFixed](1) + ", " + this.bottom[$toStringAsFixed](1) + ", " + dart.str(this.direction) + ")";
      }
      return super[$toString]();
    }
  };
  (ui.TextBox.fromLTRBD = function(left, top, right, bottom, direction) {
    this[left$1] = left;
    this[top$1] = top;
    this[right$1] = right;
    this[bottom$1] = bottom;
    this[direction$] = direction;
    ;
  }).prototype = ui.TextBox.prototype;
  (ui.TextBox.__ = function(left, top, right, bottom, directionIndex) {
    this[left$1] = left;
    this[top$1] = top;
    this[right$1] = right;
    this[bottom$1] = bottom;
    this[direction$] = ui.TextDirection.values[$_get](directionIndex);
    ;
  }).prototype = ui.TextBox.prototype;
  dart.addTypeTests(ui.TextBox);
  const left$1 = TextBox_left;
  const top$1 = TextBox_top;
  const right$1 = TextBox_right;
  const bottom$1 = TextBox_bottom;
  const direction$ = TextBox_direction;
  dart.setMethodSignature(ui.TextBox, () => ({
    __proto__: dart.getMethods(ui.TextBox.__proto__),
    toRect: dart.fnType(ui.Rect, [])
  }));
  dart.setGetterSignature(ui.TextBox, () => ({
    __proto__: dart.getGetters(ui.TextBox.__proto__),
    start: core.double,
    end: core.double
  }));
  dart.setLibraryUri(ui.TextBox, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.TextBox, () => ({
    __proto__: dart.getFields(ui.TextBox.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double),
    direction: dart.finalFieldType(ui.TextDirection)
  }));
  dart.defineExtensionMethods(ui.TextBox, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.TextBox, ['hashCode']);
  let C1321;
  let C1322;
  ui.TextAffinity = class TextAffinity extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.TextAffinity.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.TextAffinity.prototype;
  dart.addTypeTests(ui.TextAffinity);
  dart.setLibraryUri(ui.TextAffinity, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.TextAffinity, () => ({
    __proto__: dart.getFields(ui.TextAffinity.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextAffinity, ['toString']);
  ui.TextAffinity.upstream = C1321 || CT.C1321;
  ui.TextAffinity.downstream = C111 || CT.C111;
  ui.TextAffinity.values = C1322 || CT.C1322;
  ui.TextPosition = class TextPosition extends core.Object {
    get offset() {
      return this[offset$4];
    }
    set offset(value) {
      super.offset = value;
    }
    get affinity() {
      return this[affinity$];
    }
    set affinity(value) {
      super.affinity = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = ui.TextPosition._check(other);
      return typedOther.offset == this.offset && dart.equals(typedOther.affinity, this.affinity);
    }
    get hashCode() {
      return ui.hashValues(this.offset, this.affinity);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(offset: " + dart.str(this.offset) + ", affinity: " + dart.str(this.affinity) + ")";
    }
  };
  (ui.TextPosition.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let affinity = opts && 'affinity' in opts ? opts.affinity : C111 || CT.C111;
    this[offset$4] = offset;
    this[affinity$] = affinity;
    if (!(offset != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 874, 16, " assert(offset");
    if (!(affinity != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 875, 16, " assert(affinity");
    ;
  }).prototype = ui.TextPosition.prototype;
  dart.addTypeTests(ui.TextPosition);
  const offset$4 = TextPosition_offset;
  const affinity$ = TextPosition_affinity;
  dart.setLibraryUri(ui.TextPosition, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.TextPosition, () => ({
    __proto__: dart.getFields(ui.TextPosition.__proto__),
    offset: dart.finalFieldType(core.int),
    affinity: dart.finalFieldType(ui.TextAffinity)
  }));
  dart.defineExtensionMethods(ui.TextPosition, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.TextPosition, ['hashCode']);
  const ParagraphConstraints_width = dart.privateName(ui, "ParagraphConstraints.width");
  ui.ParagraphConstraints = class ParagraphConstraints extends core.Object {
    get width() {
      return this[width$3];
    }
    set width(value) {
      super.width = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = ui.ParagraphConstraints._check(other);
      return typedOther.width == this.width;
    }
    get hashCode() {
      return dart.hashCode(this.width);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(width: " + dart.str(this.width) + ")";
    }
  };
  (ui.ParagraphConstraints.new = function(opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    this[width$3] = width;
    if (!(width != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart", 924, 15, " assert(width");
    ;
  }).prototype = ui.ParagraphConstraints.prototype;
  dart.addTypeTests(ui.ParagraphConstraints);
  const width$3 = ParagraphConstraints_width;
  dart.setLibraryUri(ui.ParagraphConstraints, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.ParagraphConstraints, () => ({
    __proto__: dart.getFields(ui.ParagraphConstraints.__proto__),
    width: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.ParagraphConstraints, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.ParagraphConstraints, ['hashCode']);
  let C1323;
  let C1324;
  let C1325;
  let C1326;
  let C1327;
  ui.BoxHeightStyle = class BoxHeightStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.BoxHeightStyle.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.BoxHeightStyle.prototype;
  dart.addTypeTests(ui.BoxHeightStyle);
  dart.setLibraryUri(ui.BoxHeightStyle, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.BoxHeightStyle, () => ({
    __proto__: dart.getFields(ui.BoxHeightStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.BoxHeightStyle, ['toString']);
  ui.BoxHeightStyle.tight = C119 || CT.C119;
  ui.BoxHeightStyle.max = C1323 || CT.C1323;
  ui.BoxHeightStyle.includeLineSpacingMiddle = C1324 || CT.C1324;
  ui.BoxHeightStyle.includeLineSpacingTop = C1325 || CT.C1325;
  ui.BoxHeightStyle.includeLineSpacingBottom = C1326 || CT.C1326;
  ui.BoxHeightStyle.values = C1327 || CT.C1327;
  let C1328;
  let C1329;
  ui.BoxWidthStyle = class BoxWidthStyle extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.BoxWidthStyle.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.BoxWidthStyle.prototype;
  dart.addTypeTests(ui.BoxWidthStyle);
  dart.setLibraryUri(ui.BoxWidthStyle, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.BoxWidthStyle, () => ({
    __proto__: dart.getFields(ui.BoxWidthStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.BoxWidthStyle, ['toString']);
  ui.BoxWidthStyle.tight = C120 || CT.C120;
  ui.BoxWidthStyle.max = C1328 || CT.C1328;
  ui.BoxWidthStyle.values = C1329 || CT.C1329;
  ui.Paragraph = class Paragraph extends core.Object {};
  (ui.Paragraph.new = function() {
    ;
  }).prototype = ui.Paragraph.prototype;
  dart.addTypeTests(ui.Paragraph);
  dart.setLibraryUri(ui.Paragraph, "package:flutter_web_ui/ui.dart");
  ui.ParagraphBuilder = class ParagraphBuilder extends core.Object {
    static new(style) {
      return new engine.EngineParagraphBuilder.new(engine.EngineParagraphStyle._check(style));
    }
  };
  (ui.ParagraphBuilder[dart.mixinNew] = function() {
  }).prototype = ui.ParagraphBuilder.prototype;
  dart.addTypeTests(ui.ParagraphBuilder);
  dart.setLibraryUri(ui.ParagraphBuilder, "package:flutter_web_ui/ui.dart");
  let C1330;
  let C1331;
  let C1332;
  ui.TileMode = class TileMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.TileMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.TileMode.prototype;
  dart.addTypeTests(ui.TileMode);
  dart.setLibraryUri(ui.TileMode, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.TileMode, () => ({
    __proto__: dart.getFields(ui.TileMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TileMode, ['toString']);
  ui.TileMode.clamp = C1214 || CT.C1214;
  ui.TileMode.repeated = C1330 || CT.C1330;
  ui.TileMode.mirror = C1331 || CT.C1331;
  ui.TileMode.values = C1332 || CT.C1332;
  let C1333;
  let C1334;
  let C1335;
  let C1336;
  let C1337;
  ui.AppLifecycleState = class AppLifecycleState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.AppLifecycleState.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.AppLifecycleState.prototype;
  dart.addTypeTests(ui.AppLifecycleState);
  dart.setLibraryUri(ui.AppLifecycleState, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.AppLifecycleState, () => ({
    __proto__: dart.getFields(ui.AppLifecycleState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.AppLifecycleState, ['toString']);
  ui.AppLifecycleState.resumed = C1333 || CT.C1333;
  ui.AppLifecycleState.inactive = C1334 || CT.C1334;
  ui.AppLifecycleState.paused = C1335 || CT.C1335;
  ui.AppLifecycleState.suspending = C1336 || CT.C1336;
  ui.AppLifecycleState.values = C1337 || CT.C1337;
  const WindowPadding_left = dart.privateName(ui, "WindowPadding.left");
  const WindowPadding_top = dart.privateName(ui, "WindowPadding.top");
  const WindowPadding_right = dart.privateName(ui, "WindowPadding.right");
  const WindowPadding_bottom = dart.privateName(ui, "WindowPadding.bottom");
  let C1338;
  ui.WindowPadding = class WindowPadding extends core.Object {
    get left() {
      return this[left$2];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$2];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$2];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$2];
    }
    set bottom(value) {
      super.bottom = value;
    }
    toString() {
      return "WindowPadding(left: " + dart.str(this.left) + ", top: " + dart.str(this.top) + ", right: " + dart.str(this.right) + ", bottom: " + dart.str(this.bottom) + ")";
    }
  };
  (ui.WindowPadding.__ = function(opts) {
    let left = opts && 'left' in opts ? opts.left : null;
    let top = opts && 'top' in opts ? opts.top : null;
    let right = opts && 'right' in opts ? opts.right : null;
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    this[left$2] = left;
    this[top$2] = top;
    this[right$2] = right;
    this[bottom$2] = bottom;
    ;
  }).prototype = ui.WindowPadding.prototype;
  dart.addTypeTests(ui.WindowPadding);
  const left$2 = WindowPadding_left;
  const top$2 = WindowPadding_top;
  const right$2 = WindowPadding_right;
  const bottom$2 = WindowPadding_bottom;
  dart.setLibraryUri(ui.WindowPadding, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.WindowPadding, () => ({
    __proto__: dart.getFields(ui.WindowPadding.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.WindowPadding, ['toString']);
  dart.defineLazy(ui.WindowPadding, {
    /*ui.WindowPadding.zero*/get zero() {
      return C1338 || CT.C1338;
    }
  });
  const _languageCode = dart.privateName(ui, "_languageCode");
  const _countryCode = dart.privateName(ui, "_countryCode");
  ui.Locale = class Locale extends core.Object {
    get [_languageCode]() {
      return this[_languageCode$];
    }
    set [_languageCode](value) {
      super[_languageCode] = value;
    }
    get scriptCode() {
      return this[scriptCode$];
    }
    set scriptCode(value) {
      super.scriptCode = value;
    }
    get [_countryCode]() {
      return this[_countryCode$];
    }
    set [_countryCode](value) {
      super[_countryCode] = value;
    }
    get languageCode() {
      return ui.Locale._replaceDeprecatedLanguageSubtag(this[_languageCode]);
    }
    static _replaceDeprecatedLanguageSubtag(languageCode) {
      switch (languageCode) {
        case "in":
        {
          return "id";
        }
        case "iw":
        {
          return "he";
        }
        case "ji":
        {
          return "yi";
        }
        case "jw":
        {
          return "jv";
        }
        case "mo":
        {
          return "ro";
        }
        case "aam":
        {
          return "aas";
        }
        case "adp":
        {
          return "dz";
        }
        case "aue":
        {
          return "ktz";
        }
        case "ayx":
        {
          return "nun";
        }
        case "bgm":
        {
          return "bcg";
        }
        case "bjd":
        {
          return "drl";
        }
        case "ccq":
        {
          return "rki";
        }
        case "cjr":
        {
          return "mom";
        }
        case "cka":
        {
          return "cmr";
        }
        case "cmk":
        {
          return "xch";
        }
        case "coy":
        {
          return "pij";
        }
        case "cqu":
        {
          return "quh";
        }
        case "drh":
        {
          return "khk";
        }
        case "drw":
        {
          return "prs";
        }
        case "gav":
        {
          return "dev";
        }
        case "gfx":
        {
          return "vaj";
        }
        case "ggn":
        {
          return "gvr";
        }
        case "gti":
        {
          return "nyc";
        }
        case "guv":
        {
          return "duz";
        }
        case "hrr":
        {
          return "jal";
        }
        case "ibi":
        {
          return "opa";
        }
        case "ilw":
        {
          return "gal";
        }
        case "jeg":
        {
          return "oyb";
        }
        case "kgc":
        {
          return "tdf";
        }
        case "kgh":
        {
          return "kml";
        }
        case "koj":
        {
          return "kwv";
        }
        case "krm":
        {
          return "bmf";
        }
        case "ktr":
        {
          return "dtp";
        }
        case "kvs":
        {
          return "gdj";
        }
        case "kwq":
        {
          return "yam";
        }
        case "kxe":
        {
          return "tvd";
        }
        case "kzj":
        {
          return "dtp";
        }
        case "kzt":
        {
          return "dtp";
        }
        case "lii":
        {
          return "raq";
        }
        case "lmm":
        {
          return "rmx";
        }
        case "meg":
        {
          return "cir";
        }
        case "mst":
        {
          return "mry";
        }
        case "mwj":
        {
          return "vaj";
        }
        case "myt":
        {
          return "mry";
        }
        case "nad":
        {
          return "xny";
        }
        case "ncp":
        {
          return "kdz";
        }
        case "nnx":
        {
          return "ngv";
        }
        case "nts":
        {
          return "pij";
        }
        case "oun":
        {
          return "vaj";
        }
        case "pcr":
        {
          return "adx";
        }
        case "pmc":
        {
          return "huw";
        }
        case "pmu":
        {
          return "phr";
        }
        case "ppa":
        {
          return "bfy";
        }
        case "ppr":
        {
          return "lcq";
        }
        case "pry":
        {
          return "prt";
        }
        case "puz":
        {
          return "pub";
        }
        case "sca":
        {
          return "hle";
        }
        case "skk":
        {
          return "oyb";
        }
        case "tdu":
        {
          return "dtp";
        }
        case "thc":
        {
          return "tpo";
        }
        case "thx":
        {
          return "oyb";
        }
        case "tie":
        {
          return "ras";
        }
        case "tkk":
        {
          return "twm";
        }
        case "tlw":
        {
          return "weo";
        }
        case "tmp":
        {
          return "tyj";
        }
        case "tne":
        {
          return "kak";
        }
        case "tnf":
        {
          return "prs";
        }
        case "tsf":
        {
          return "taj";
        }
        case "uok":
        {
          return "ema";
        }
        case "xba":
        {
          return "cax";
        }
        case "xia":
        {
          return "acn";
        }
        case "xkh":
        {
          return "waw";
        }
        case "xsj":
        {
          return "suj";
        }
        case "ybd":
        {
          return "rki";
        }
        case "yma":
        {
          return "lrr";
        }
        case "ymt":
        {
          return "mtm";
        }
        case "yos":
        {
          return "zom";
        }
        case "yuu":
        {
          return "yug";
        }
        default:
        {
          return languageCode;
        }
      }
    }
    get countryCode() {
      return ui.Locale._replaceDeprecatedRegionSubtag(this[_countryCode]);
    }
    static _replaceDeprecatedRegionSubtag(regionCode) {
      switch (regionCode) {
        case "BU":
        {
          return "MM";
        }
        case "DD":
        {
          return "DE";
        }
        case "FX":
        {
          return "FR";
        }
        case "TP":
        {
          return "TL";
        }
        case "YD":
        {
          return "YE";
        }
        case "ZR":
        {
          return "CD";
        }
        default:
        {
          return regionCode;
        }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!ui.Locale.is(other)) {
        return false;
      }
      let typedOther = ui.Locale._check(other);
      return this.languageCode == typedOther.languageCode && this.scriptCode == typedOther.scriptCode && this.countryCode == typedOther.countryCode;
    }
    get hashCode() {
      return ui.hashValues(this.languageCode, this.scriptCode, this.countryCode);
    }
    toString() {
      let out = new core.StringBuffer.new(this.languageCode);
      if (this.scriptCode != null) {
        out.write("_" + dart.str(this.scriptCode));
      }
      if (this[_countryCode] != null) {
        out.write("_" + dart.str(this.countryCode));
      }
      return out.toString();
    }
    toLanguageTag() {
      return "_";
    }
  };
  (ui.Locale.new = function(_languageCode, _countryCode) {
    if (_countryCode === void 0) _countryCode = null;
    this[_languageCode$] = _languageCode;
    this[_countryCode$] = _countryCode;
    if (!(_languageCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 188, 16, "_languageCode != null");
    if (!(_languageCode !== "")) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 189, 16, "_languageCode != ''");
    this[scriptCode$] = null;
    ;
  }).prototype = ui.Locale.prototype;
  (ui.Locale.fromSubtags = function(opts) {
    let languageCode = opts && 'languageCode' in opts ? opts.languageCode : "und";
    let scriptCode = opts && 'scriptCode' in opts ? opts.scriptCode : null;
    let countryCode = opts && 'countryCode' in opts ? opts.countryCode : null;
    this[scriptCode$] = scriptCode;
    if (!(languageCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 212, 16, "languageCode != null");
    if (!(languageCode !== "")) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 213, 16, "languageCode != ''");
    this[_languageCode$] = languageCode;
    if (!(scriptCode !== "")) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 215, 16, "scriptCode != ''");
    if (!(countryCode !== "")) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 216, 16, "countryCode != ''");
    this[_countryCode$] = countryCode;
    ;
  }).prototype = ui.Locale.prototype;
  dart.addTypeTests(ui.Locale);
  const _languageCode$ = Locale__languageCode;
  const scriptCode$ = Locale_scriptCode;
  const _countryCode$ = Locale__countryCode;
  dart.setMethodSignature(ui.Locale, () => ({
    __proto__: dart.getMethods(ui.Locale.__proto__),
    toLanguageTag: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(ui.Locale, () => ({
    __proto__: dart.getGetters(ui.Locale.__proto__),
    languageCode: core.String,
    countryCode: core.String
  }));
  dart.setLibraryUri(ui.Locale, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Locale, () => ({
    __proto__: dart.getFields(ui.Locale.__proto__),
    [_languageCode]: dart.finalFieldType(core.String),
    scriptCode: dart.finalFieldType(core.String),
    [_countryCode]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.Locale, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Locale, ['hashCode']);
  const _index = dart.privateName(ui, "_index");
  ui.AccessibilityFeatures = class AccessibilityFeatures extends core.Object {
    get [_index]() {
      return this[_index$];
    }
    set [_index](value) {
      super[_index] = value;
    }
    get accessibleNavigation() {
      return (1 & dart.notNull(this[_index])) !== 0;
    }
    get invertColors() {
      return (2 & dart.notNull(this[_index])) !== 0;
    }
    get disableAnimations() {
      return (4 & dart.notNull(this[_index])) !== 0;
    }
    get boldText() {
      return (8 & dart.notNull(this[_index])) !== 0;
    }
    get reduceMotion() {
      return (16 & dart.notNull(this[_index])) !== 0;
    }
    toString() {
      let features = JSArrayOfString().of([]);
      if (dart.test(this.accessibleNavigation)) {
        features[$add]("accessibleNavigation");
      }
      if (dart.test(this.invertColors)) {
        features[$add]("invertColors");
      }
      if (dart.test(this.disableAnimations)) {
        features[$add]("disableAnimations");
      }
      if (dart.test(this.boldText)) {
        features[$add]("boldText");
      }
      if (dart.test(this.reduceMotion)) {
        features[$add]("reduceMotion");
      }
      return "AccessibilityFeatures" + dart.str(features);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = ui.AccessibilityFeatures._check(other);
      return this[_index] == typedOther[_index];
    }
    get hashCode() {
      return dart.hashCode(this[_index]);
    }
  };
  (ui.AccessibilityFeatures.__ = function(_index) {
    this[_index$] = _index;
    ;
  }).prototype = ui.AccessibilityFeatures.prototype;
  dart.addTypeTests(ui.AccessibilityFeatures);
  const _index$ = AccessibilityFeatures__index;
  dart.setGetterSignature(ui.AccessibilityFeatures, () => ({
    __proto__: dart.getGetters(ui.AccessibilityFeatures.__proto__),
    accessibleNavigation: core.bool,
    invertColors: core.bool,
    disableAnimations: core.bool,
    boldText: core.bool,
    reduceMotion: core.bool
  }));
  dart.setLibraryUri(ui.AccessibilityFeatures, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.AccessibilityFeatures, () => ({
    __proto__: dart.getFields(ui.AccessibilityFeatures.__proto__),
    [_index]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.AccessibilityFeatures, ['toString', '_equals']);
  dart.defineExtensionAccessors(ui.AccessibilityFeatures, ['hashCode']);
  dart.defineLazy(ui.AccessibilityFeatures, {
    /*ui.AccessibilityFeatures._kAccessibleNavigation*/get _kAccessibleNavigation() {
      return 1;
    },
    /*ui.AccessibilityFeatures._kInvertColorsIndex*/get _kInvertColorsIndex() {
      return 2;
    },
    /*ui.AccessibilityFeatures._kDisableAnimationsIndex*/get _kDisableAnimationsIndex() {
      return 4;
    },
    /*ui.AccessibilityFeatures._kBoldTextIndex*/get _kBoldTextIndex() {
      return 8;
    },
    /*ui.AccessibilityFeatures._kReduceMotionIndex*/get _kReduceMotionIndex() {
      return 16;
    }
  });
  let C1339;
  let C1340;
  let C1341;
  ui.Brightness = class Brightness extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.Brightness.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.Brightness.prototype;
  dart.addTypeTests(ui.Brightness);
  dart.setLibraryUri(ui.Brightness, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.Brightness, () => ({
    __proto__: dart.getFields(ui.Brightness.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.Brightness, ['toString']);
  ui.Brightness.dark = C1339 || CT.C1339;
  ui.Brightness.light = C1340 || CT.C1340;
  ui.Brightness.values = C1341 || CT.C1341;
  const _handle$ = dart.privateName(ui, "_handle");
  ui.CallbackHandle = class CallbackHandle extends core.Object {
    toRawHandle() {
      return this[_handle$];
    }
    _equals(other) {
      if (other == null) return false;
      return this === other;
    }
    get hashCode() {
      return super[$hashCode];
    }
  };
  (ui.CallbackHandle.fromRawHandle = function(_handle) {
    this[_handle$] = _handle;
    ;
  }).prototype = ui.CallbackHandle.prototype;
  dart.addTypeTests(ui.CallbackHandle);
  dart.setMethodSignature(ui.CallbackHandle, () => ({
    __proto__: dart.getMethods(ui.CallbackHandle.__proto__),
    toRawHandle: dart.fnType(core.int, []),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(ui.CallbackHandle, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.CallbackHandle, () => ({
    __proto__: dart.getFields(ui.CallbackHandle.__proto__),
    [_handle$]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.CallbackHandle, ['_equals']);
  dart.defineExtensionAccessors(ui.CallbackHandle, ['hashCode']);
  ui.PluginUtilities = class PluginUtilities extends core.Object {
    static getCallbackHandle(callback) {
      dart.throw(new core.UnimplementedError.new());
    }
    static getCallbackFromHandle(handle) {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (ui.PluginUtilities.new = function() {
    ;
  }).prototype = ui.PluginUtilities.prototype;
  dart.addTypeTests(ui.PluginUtilities);
  dart.setLibraryUri(ui.PluginUtilities, "package:flutter_web_ui/ui.dart");
  ui.ImageShader = class ImageShader extends core.Object {};
  (ui.ImageShader.new = function(image, tmx, tmy, matrix4) {
    ;
  }).prototype = ui.ImageShader.prototype;
  dart.addTypeTests(ui.ImageShader);
  dart.setLibraryUri(ui.ImageShader, "package:flutter_web_ui/ui.dart");
  ui.IsolateNameServer = class IsolateNameServer extends core.Object {
    static lookupPortByName(name) {
      if (!(name != null)) dart.assertFailed("'name' cannot be null.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 1113, 12, "(name != nul");
      dart.throw(new core.UnimplementedError.new());
    }
    static registerPortWithName(port, name) {
      if (!(port != null)) dart.assertFailed("'port' cannot be null.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 1118, 12, "(port != nul");
      if (!(name != null)) dart.assertFailed("'name' cannot be null.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 1119, 12, "(name != nul");
      dart.throw(new core.UnimplementedError.new());
    }
    static removePortNameMapping(name) {
      if (!(name != null)) dart.assertFailed("'name' cannot be null.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 1124, 12, "(name != nul");
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (ui.IsolateNameServer.new = function() {
    ;
  }).prototype = ui.IsolateNameServer.prototype;
  dart.addTypeTests(ui.IsolateNameServer);
  dart.setLibraryUri(ui.IsolateNameServer, "package:flutter_web_ui/ui.dart");
  let C1342;
  let C1343;
  let C1344;
  let C1345;
  let C1346;
  ui.FramePhase = class FramePhase extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (ui.FramePhase.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = ui.FramePhase.prototype;
  dart.addTypeTests(ui.FramePhase);
  dart.setLibraryUri(ui.FramePhase, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.FramePhase, () => ({
    __proto__: dart.getFields(ui.FramePhase.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.FramePhase, ['toString']);
  ui.FramePhase.buildStart = C1342 || CT.C1342;
  ui.FramePhase.buildFinish = C1343 || CT.C1343;
  ui.FramePhase.rasterStart = C1344 || CT.C1344;
  ui.FramePhase.rasterFinish = C1345 || CT.C1345;
  ui.FramePhase.values = C1346 || CT.C1346;
  const _timestamps = dart.privateName(ui, "_timestamps");
  const _rawDuration = dart.privateName(ui, "_rawDuration");
  const _formatMS = dart.privateName(ui, "_formatMS");
  ui.FrameTiming = class FrameTiming extends core.Object {
    timestampInMicroseconds(phase) {
      return this[_timestamps][$_get](phase.index);
    }
    [_rawDuration](phase) {
      return new core.Duration.new({microseconds: this[_timestamps][$_get](phase.index)});
    }
    get buildDuration() {
      return this[_rawDuration](ui.FramePhase.buildFinish)['-'](this[_rawDuration](ui.FramePhase.buildStart));
    }
    get rasterDuration() {
      return this[_rawDuration](ui.FramePhase.rasterFinish)['-'](this[_rawDuration](ui.FramePhase.rasterStart));
    }
    get totalSpan() {
      return this[_rawDuration](ui.FramePhase.rasterFinish)['-'](this[_rawDuration](ui.FramePhase.buildStart));
    }
    [_formatMS](duration) {
      return dart.str(dart.notNull(duration.inMicroseconds) * 0.001) + "ms";
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(buildDuration: " + dart.str(this[_formatMS](this.buildDuration)) + ", rasterDuration: " + dart.str(this[_formatMS](this.rasterDuration)) + ", totalSpan: " + dart.str(this[_formatMS](this.totalSpan)) + ")";
    }
  };
  (ui.FrameTiming.new = function(timestamps) {
    if (!(timestamps[$length] == ui.FramePhase.values[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart", 1171, 16, "(timestamps.length == FramePhase.values.lengt");
    this[_timestamps] = timestamps;
    ;
  }).prototype = ui.FrameTiming.prototype;
  dart.addTypeTests(ui.FrameTiming);
  dart.setMethodSignature(ui.FrameTiming, () => ({
    __proto__: dart.getMethods(ui.FrameTiming.__proto__),
    timestampInMicroseconds: dart.fnType(core.int, [ui.FramePhase]),
    [_rawDuration]: dart.fnType(core.Duration, [ui.FramePhase]),
    [_formatMS]: dart.fnType(core.String, [core.Duration])
  }));
  dart.setGetterSignature(ui.FrameTiming, () => ({
    __proto__: dart.getGetters(ui.FrameTiming.__proto__),
    buildDuration: core.Duration,
    rasterDuration: core.Duration,
    totalSpan: core.Duration
  }));
  dart.setLibraryUri(ui.FrameTiming, "package:flutter_web_ui/ui.dart");
  dart.setFieldSignature(ui.FrameTiming, () => ({
    __proto__: dart.getFields(ui.FrameTiming.__proto__),
    [_timestamps]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineExtensionMethods(ui.FrameTiming, ['toString']);
  let C1347;
  let C1348;
  let C1349;
  ui._ellipseContains = function _ellipseContains(px, py, centerX, centerY, radiusX, radiusY) {
    let dx = dart.notNull(px) - dart.notNull(centerX);
    let dy = dart.notNull(py) - dart.notNull(centerY);
    return dx * dx / (dart.notNull(radiusX) * dart.notNull(radiusX)) + dy * dy / (dart.notNull(radiusY) * dart.notNull(radiusY)) < 1.0;
  };
  ui.hashValues = function hashValues(arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20) {
    if (arg03 === void 0) arg03 = C1347 || CT.C1347;
    if (arg04 === void 0) arg04 = C1347 || CT.C1347;
    if (arg05 === void 0) arg05 = C1347 || CT.C1347;
    if (arg06 === void 0) arg06 = C1347 || CT.C1347;
    if (arg07 === void 0) arg07 = C1347 || CT.C1347;
    if (arg08 === void 0) arg08 = C1347 || CT.C1347;
    if (arg09 === void 0) arg09 = C1347 || CT.C1347;
    if (arg10 === void 0) arg10 = C1347 || CT.C1347;
    if (arg11 === void 0) arg11 = C1347 || CT.C1347;
    if (arg12 === void 0) arg12 = C1347 || CT.C1347;
    if (arg13 === void 0) arg13 = C1347 || CT.C1347;
    if (arg14 === void 0) arg14 = C1347 || CT.C1347;
    if (arg15 === void 0) arg15 = C1347 || CT.C1347;
    if (arg16 === void 0) arg16 = C1347 || CT.C1347;
    if (arg17 === void 0) arg17 = C1347 || CT.C1347;
    if (arg18 === void 0) arg18 = C1347 || CT.C1347;
    if (arg19 === void 0) arg19 = C1347 || CT.C1347;
    if (arg20 === void 0) arg20 = C1347 || CT.C1347;
    let result = 373;
    if (!!core.Iterable.is(arg01)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 45, 10, "arg01 is! Iterable");
    result = 37 * result + dart.notNull(dart.hashCode(arg01));
    if (!!core.Iterable.is(arg02)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 47, 10, "arg02 is! Iterable");
    result = 37 * result + dart.notNull(dart.hashCode(arg02));
    if (!dart.equals(arg03, ui._hashEnd)) {
      if (!!core.Iterable.is(arg03)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 50, 12, "arg03 is! Iterable");
      result = 37 * result + dart.notNull(dart.hashCode(arg03));
      if (!dart.equals(arg04, ui._hashEnd)) {
        if (!!core.Iterable.is(arg04)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 53, 14, "arg04 is! Iterable");
        result = 37 * result + dart.notNull(dart.hashCode(arg04));
        if (!dart.equals(arg05, ui._hashEnd)) {
          if (!!core.Iterable.is(arg05)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 56, 16, "arg05 is! Iterable");
          result = 37 * result + dart.notNull(dart.hashCode(arg05));
          if (!dart.equals(arg06, ui._hashEnd)) {
            if (!!core.Iterable.is(arg06)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 59, 18, "arg06 is! Iterable");
            result = 37 * result + dart.notNull(dart.hashCode(arg06));
            if (!dart.equals(arg07, ui._hashEnd)) {
              if (!!core.Iterable.is(arg07)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 62, 20, "arg07 is! Iterable");
              result = 37 * result + dart.notNull(dart.hashCode(arg07));
              if (!dart.equals(arg08, ui._hashEnd)) {
                if (!!core.Iterable.is(arg08)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 65, 22, "arg08 is! Iterable");
                result = 37 * result + dart.notNull(dart.hashCode(arg08));
                if (!dart.equals(arg09, ui._hashEnd)) {
                  if (!!core.Iterable.is(arg09)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 68, 24, "arg09 is! Iterable");
                  result = 37 * result + dart.notNull(dart.hashCode(arg09));
                  if (!dart.equals(arg10, ui._hashEnd)) {
                    if (!!core.Iterable.is(arg10)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 71, 26, "arg10 is! Iterable");
                    result = 37 * result + dart.notNull(dart.hashCode(arg10));
                    if (!dart.equals(arg11, ui._hashEnd)) {
                      if (!!core.Iterable.is(arg11)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 74, 28, "arg11 is! Iterable");
                      result = 37 * result + dart.notNull(dart.hashCode(arg11));
                      if (!dart.equals(arg12, ui._hashEnd)) {
                        if (!!core.Iterable.is(arg12)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 77, 30, "arg12 is! Iterable");
                        result = 37 * result + dart.notNull(dart.hashCode(arg12));
                        if (!dart.equals(arg13, ui._hashEnd)) {
                          if (!!core.Iterable.is(arg13)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 80, 32, "arg13 is! Iterable");
                          result = 37 * result + dart.notNull(dart.hashCode(arg13));
                          if (!dart.equals(arg14, ui._hashEnd)) {
                            if (!!core.Iterable.is(arg14)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 83, 34, "arg14 is! Iterable");
                            result = 37 * result + dart.notNull(dart.hashCode(arg14));
                            if (!dart.equals(arg15, ui._hashEnd)) {
                              if (!!core.Iterable.is(arg15)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 86, 36, "arg15 is! Iterable");
                              result = 37 * result + dart.notNull(dart.hashCode(arg15));
                              if (!dart.equals(arg16, ui._hashEnd)) {
                                if (!!core.Iterable.is(arg16)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 89, 38, "arg16 is! Iterable");
                                result = 37 * result + dart.notNull(dart.hashCode(arg16));
                                if (!dart.equals(arg17, ui._hashEnd)) {
                                  if (!!core.Iterable.is(arg17)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 92, 40, "arg17 is! Iterable");
                                  result = 37 * result + dart.notNull(dart.hashCode(arg17));
                                  if (!dart.equals(arg18, ui._hashEnd)) {
                                    if (!!core.Iterable.is(arg18)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 95, 42, "arg18 is! Iterable");
                                    result = 37 * result + dart.notNull(dart.hashCode(arg18));
                                    if (!dart.equals(arg19, ui._hashEnd)) {
                                      if (!!core.Iterable.is(arg19)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 98, 44, "arg19 is! Iterable");
                                      result = 37 * result + dart.notNull(dart.hashCode(arg19));
                                      if (!dart.equals(arg20, ui._hashEnd)) {
                                        if (!!core.Iterable.is(arg20)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 101, 46, "arg20 is! Iterable");
                                        result = 37 * result + dart.notNull(dart.hashCode(arg20));
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  };
  ui.hashList = function hashList(args) {
    let result = 373;
    if (args != null) {
      for (let arg of args) {
        if (!!core.Iterable.is(arg)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart", 132, 14, "arg is! Iterable");
        result = 37 * result + dart.notNull(dart.hashCode(arg));
      }
    }
    return result;
  };
  ui.webOnlyInitializePlatform = function webOnlyInitializePlatform(opts) {
    let assetManager = opts && 'assetManager' in opts ? opts.assetManager : null;
    return async.async(dart.void, function* webOnlyInitializePlatform() {
      if (!dart.test(ui.debugEmulateFlutterTesterEnvironment)) {
        engine.window.webOnlyLocationStrategy = C1348 || CT.C1348;
      }
      engine.webOnlyInitializeEngine();
      if (false) {
        yield engine.initializeSkia();
      }
      assetManager == null ? assetManager = C1349 || CT.C1349 : null;
      yield ui.webOnlySetAssetManager(assetManager);
      yield ui._fontCollection.ensureFontsLoaded();
      if (false) {
        yield engine.skiaFontCollection.ensureFontsLoaded();
      }
      ui._webOnlyIsInitialized = true;
    });
  };
  ui.webOnlySetAssetManager = function webOnlySetAssetManager(assetManager) {
    return async.async(dart.void, function* webOnlySetAssetManager() {
      if (!(assetManager != null)) dart.assertFailed("Cannot set assetManager to null", "org-dartlang-app:///packages/flutter_web_ui/src/ui/initialization.dart", 44, 10, "assetManager != null");
      if (dart.equals(assetManager, ui._assetManager)) {
        return;
      }
      ui._assetManager = assetManager;
      if (false) {
        engine.skiaFontCollection == null ? engine.skiaFontCollection = new engine.SkiaFontCollection.new() : null;
      }
      ui._fontCollection == null ? ui._fontCollection = new engine.FontCollection.new() : null;
      ui._fontCollection.clear();
      if (ui._assetManager != null) {
        yield ui._fontCollection.registerFonts(ui._assetManager);
        if (false) {
          yield engine.skiaFontCollection.registerFonts(ui._assetManager);
        }
      }
      if (dart.test(ui.debugEmulateFlutterTesterEnvironment)) {
        ui._fontCollection.debugRegisterTestFonts();
      }
    });
  };
  ui.lerpDouble = function lerpDouble(a, b, t) {
    if (a == null && b == null) {
      return null;
    }
    a == null ? a = 0.0 : null;
    b == null ? b = 0.0 : null;
    return dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * dart.notNull(t);
  };
  ui.saveCompilationTrace = function saveCompilationTrace() {
    dart.throw(new core.UnimplementedError.new());
  };
  ui._offsetIsValid = function _offsetIsValid$(offset) {
    if (!(offset != null)) dart.assertFailed("Offset argument was null.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 9, 10, "offset != null");
    if (!(!offset.dx[$isNaN] && !offset.dy[$isNaN])) dart.assertFailed("Offset argument contained a NaN value.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 10, 10, "!offset.dx.isNaN && !offset.dy.isNaN");
    return true;
  };
  ui._matrix4IsValid = function _matrix4IsValid$(matrix4) {
    if (!(matrix4 != null)) dart.assertFailed("Matrix4 argument was null.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 17, 10, "matrix4 != null");
    if (!(matrix4[$length] === 16)) dart.assertFailed("Matrix4 must have 16 entries.", "org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart", 18, 10, "matrix4.length == 16");
    return true;
  };
  ui._validateColorStops = function _validateColorStops$(colors, colorStops) {
    if (colorStops == null) {
      if (colors[$length] !== 2) dart.throw(new core.ArgumentError.new("\"colors\" must have length 2 if \"colorStops\" is omitted."));
    } else {
      if (colors[$length] != colorStops[$length]) dart.throw(new core.ArgumentError.new("\"colors\" and \"colorStops\" arguments must have equal length."));
    }
  };
  ui._scaleAlpha = function _scaleAlpha(a, factor) {
    return a.withAlpha(dart.asInt((dart.notNull(a.alpha) * dart.notNull(factor))[$round]()[$clamp](0, 255)));
  };
  ui.instantiateImageCodec = function instantiateImageCodec(list, opts) {
    let decodedCacheRatioCap = opts && 'decodedCacheRatioCap' in opts ? opts.decodedCacheRatioCap : 1 / 0;
    return engine.futurize(ui.Codec, dart.fn(callback => ui._instantiateImageCodec(list, callback, null), FnToString$()));
  };
  ui._instantiateImageCodec = function _instantiateImageCodec(list, callback, imageInfo) {
    if (false) {
      if (imageInfo == null) {
        engine.skiaInstantiateImageCodec(list, callback);
      } else {
        engine.skiaInstantiateImageCodec(list, callback, imageInfo.width, imageInfo.height, imageInfo.format, imageInfo.rowBytes);
      }
      return null;
    }
    let blob = html.Blob.new([list[$buffer]]);
    callback(new engine.HtmlBlobCodec.new(blob));
    return null;
  };
  ui.webOnlyInstantiateImageCodecFromUrl = function webOnlyInstantiateImageCodecFromUrl(uri) {
    return engine.futurize(ui.Codec, dart.fn(callback => ui._instantiateImageCodecFromUrl(uri, callback), FnToString$()));
  };
  ui._instantiateImageCodecFromUrl = function _instantiateImageCodecFromUrl(uri, callback) {
    callback(new engine.HtmlCodec.new(dart.toString(uri)));
    return null;
  };
  ui.decodeImageFromList = function decodeImageFromList(list, callback) {
    ui._decodeImageFromListAsync(list, callback);
  };
  ui._decodeImageFromListAsync = function _decodeImageFromListAsync(list, callback) {
    return async.async(dart.void, function* _decodeImageFromListAsync() {
      let codec = (yield ui.instantiateImageCodec(list));
      let frameInfo = (yield codec.getNextFrame());
      callback(frameInfo.image);
    });
  };
  ui.decodeImageFromPixels = function decodeImageFromPixels(pixels, width, height, format, callback, opts) {
    let rowBytes = opts && 'rowBytes' in opts ? opts.rowBytes : null;
    let imageInfo = new ui._ImageInfo.new(width, height, format.index, rowBytes);
    let codecFuture = engine.futurize(ui.Codec, dart.fn(callback => ui._instantiateImageCodec(pixels, callback, imageInfo), FnToString$()));
    codecFuture.then(ui.FrameInfo, dart.fn(codec => codec.getNextFrame(), CodecToFutureOfFrameInfo())).then(dart.void, dart.fn(frameInfo => callback(frameInfo.image), FrameInfoTovoid()));
  };
  ui.ensureTestPlatformInitializedThenRunTest = function ensureTestPlatformInitializedThenRunTest(body) {
    if (ui._testPlatformInitializedFuture == null) {
      ui.debugEmulateFlutterTesterEnvironment = true;
      ui._testPlatformInitializedFuture = ui.webOnlyInitializePlatform({assetManager: new engine.WebOnlyMockAssetManager.new()});
    }
    return ui._testPlatformInitializedFuture.then(dart.dynamic, dart.fn(_ => body(), voidTodynamic()));
  };
  ui.webOnlyInitializeTestDomRenderer = function webOnlyInitializeTestDomRenderer(opts) {
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : 3;
    engine.domRenderer;
    engine.window.debugOverrideDevicePixelRatio(devicePixelRatio);
    engine.window.webOnlyDebugPhysicalSizeOverride = new ui.Size.new(800 * dart.notNull(devicePixelRatio), 600 * dart.notNull(devicePixelRatio));
    ui.webOnlyScheduleFrameCallback = dart.fn(() => {
    }, VoidToNull());
    ui.debugEmulateFlutterTesterEnvironment = true;
    if (ui._platformInitializedFuture != null) {
      return ui._platformInitializedFuture;
    }
    return ui._platformInitializedFuture = ui.webOnlyInitializePlatform({assetManager: new engine.WebOnlyMockAssetManager.new()}).timeout(C104 || CT.C104, {onTimeout: dart.fn(() => async.async(core.Null, function*() {
        dart.throw(core.Exception.new("Timed out loading Ahem font."));
      }), VoidToFutureOfNull())});
  };
  ui.loadFontFromList = function loadFontFromList(list, opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    if (dart.test(engine.assertionsEnabled)) {
      dart.throw(new core.UnsupportedError.new("loadFontFromList is not supported."));
    }
    return FutureOfvoid().value(null);
  };
  let C1350;
  dart.copyProperties(ui, {
    get webOnlyIsInitialized() {
      return ui._webOnlyIsInitialized;
    },
    get debugEmulateFlutterTesterEnvironment() {
      return ui._debugEmulateFlutterTesterEnvironment;
    },
    set debugEmulateFlutterTesterEnvironment(value) {
      ui._debugEmulateFlutterTesterEnvironment = value;
      if (dart.test(ui._debugEmulateFlutterTesterEnvironment)) {
        let logicalSize = C1350 || CT.C1350;
        engine.window.webOnlyDebugPhysicalSizeOverride = logicalSize['*'](ui.window.devicePixelRatio);
      }
    },
    get webOnlyAssetManager() {
      return ui._assetManager;
    },
    get webOnlyFontCollection() {
      return ui._fontCollection;
    },
    set webOnlyRouteName(routeName) {
      engine.window.webOnlyRouteName = routeName;
    },
    get window() {
      return engine.window;
    }
  });
  dart.defineLazy(ui, {
    /*ui.isWeb*/get isWeb() {
      return true;
    },
    /*ui.kMaxUnsignedSMI*/get kMaxUnsignedSMI() {
      return -1;
    },
    /*ui._hashEnd*/get _hashEnd() {
      return C1347 || CT.C1347;
    },
    /*ui._assetManager*/get _assetManager() {
      return null;
    },
    set _assetManager(_) {},
    /*ui._fontCollection*/get _fontCollection() {
      return null;
    },
    set _fontCollection(_) {},
    /*ui._webOnlyIsInitialized*/get _webOnlyIsInitialized() {
      return false;
    },
    set _webOnlyIsInitialized(_) {},
    /*ui._debugEmulateFlutterTesterEnvironment*/get _debugEmulateFlutterTesterEnvironment() {
      return false;
    },
    set _debugEmulateFlutterTesterEnvironment(_) {},
    /*ui._testPlatformInitializedFuture*/get _testPlatformInitializedFuture() {
      return null;
    },
    set _testPlatformInitializedFuture(_) {},
    /*ui._platformInitializedFuture*/get _platformInitializedFuture() {
      return null;
    },
    set _platformInitializedFuture(_) {},
    /*ui.webOnlyScheduleFrameCallback*/get webOnlyScheduleFrameCallback() {
      return null;
    },
    set webOnlyScheduleFrameCallback(_) {}
  });
  dart.trackLibraries("packages/flutter_web_ui/ui", {
    "package:flutter_web_ui/src/engine.dart": engine,
    "package:flutter_web_ui/ui.dart": ui
  }, {
    "package:flutter_web_ui/src/engine.dart": ["engine/alarm_clock.dart", "engine/assets.dart", "engine/bitmap_canvas.dart", "engine/browser_detection.dart", "engine/browser_location.dart", "engine/compositor/canvas.dart", "engine/compositor/engine_delegate.dart", "engine/compositor/fonts.dart", "engine/compositor/image.dart", "engine/compositor/initialization.dart", "engine/compositor/layer.dart", "engine/compositor/layer_scene_builder.dart", "engine/compositor/layer_tree.dart", "engine/compositor/path.dart", "engine/compositor/picture.dart", "engine/compositor/picture_recorder.dart", "engine/compositor/platform_message.dart", "engine/compositor/raster_cache.dart", "engine/compositor/rasterizer.dart", "engine/compositor/recording_canvas.dart", "engine/compositor/runtime_delegate.dart", "engine/compositor/surface.dart", "engine/compositor/util.dart", "engine/compositor/viewport_metrics.dart", "engine/conic.dart", "engine/dom_canvas.dart", "engine/dom_renderer.dart", "engine/engine_canvas.dart", "engine/history.dart", "engine/houdini_canvas.dart", "engine/html_image_codec.dart", "engine/keyboard.dart", "engine/onscreen_logging.dart", "engine/path_to_svg.dart", "engine/platform_views.dart", "engine/pointer_binding.dart", "engine/recording_canvas.dart", "engine/semantics/accessibility.dart", "engine/semantics/checkable.dart", "engine/semantics/image.dart", "engine/semantics/incrementable.dart", "engine/semantics/label_and_value.dart", "engine/semantics/live_region.dart", "engine/semantics/scrollable.dart", "engine/semantics/semantics.dart", "engine/semantics/tappable.dart", "engine/semantics/text_field.dart", "engine/services/buffers.dart", "engine/services/message_codec.dart", "engine/services/message_codecs.dart", "engine/services/serialization.dart", "engine/shader.dart", "engine/shadow.dart", "engine/surface/backdrop_filter.dart", "engine/surface/clip.dart", "engine/surface/debug_canvas_reuse_overlay.dart", "engine/surface/offset.dart", "engine/surface/opacity.dart", "engine/surface/picture.dart", "engine/surface/platform_view.dart", "engine/surface/scene.dart", "engine/surface/surface.dart", "engine/surface/transform.dart", "engine/test_embedding.dart", "engine/text/font_collection.dart", "engine/text/line_breaker.dart", "engine/text/measurement.dart", "engine/text/paragraph.dart", "engine/text/ruler.dart", "engine/text/unicode_range.dart", "engine/text/word_break_properties.dart", "engine/text/word_breaker.dart", "engine/text_editing.dart", "engine/util.dart", "engine/validators.dart", "engine/vector_math.dart", "engine/window.dart"],
    "package:flutter_web_ui/ui.dart": ["src/ui/canvas.dart", "src/ui/compositing.dart", "src/ui/geometry.dart", "src/ui/hash_codes.dart", "src/ui/initialization.dart", "src/ui/lerp.dart", "src/ui/natives.dart", "src/ui/painting.dart", "src/ui/pointer.dart", "src/ui/semantics.dart", "src/ui/test_embedding.dart", "src/ui/text.dart", "src/ui/tile_mode.dart", "src/ui/window.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src\\\\engine.dart","src\\\\engine\\\\alarm_clock.dart","src\\\\engine\\\\assets.dart","src\\\\engine\\\\engine_canvas.dart","src\\\\engine\\\\bitmap_canvas.dart","src\\\\engine\\\\browser_detection.dart","src\\\\engine\\\\browser_location.dart","src\\\\engine\\\\compositor\\\\canvas.dart","src\\\\engine\\\\compositor\\\\runtime_delegate.dart","src\\\\engine\\\\compositor\\\\engine_delegate.dart","src\\\\engine\\\\compositor\\\\fonts.dart","src\\\\engine\\\\compositor\\\\image.dart","src\\\\engine\\\\compositor\\\\layer.dart","src\\\\engine\\\\compositor\\\\layer_scene_builder.dart","src\\\\engine\\\\compositor\\\\layer_tree.dart","src\\\\engine\\\\compositor\\\\path.dart","src\\\\engine\\\\compositor\\\\picture.dart","src\\\\engine\\\\compositor\\\\picture_recorder.dart","src\\\\engine\\\\compositor\\\\platform_message.dart","src\\\\engine\\\\compositor\\\\raster_cache.dart","src\\\\engine\\\\compositor\\\\rasterizer.dart","src\\\\engine\\\\compositor\\\\recording_canvas.dart","src\\\\engine\\\\compositor\\\\surface.dart","src\\\\engine\\\\compositor\\\\viewport_metrics.dart","src\\\\engine\\\\conic.dart","src\\\\engine\\\\houdini_canvas.dart","src\\\\engine\\\\dom_canvas.dart","src\\\\engine\\\\dom_renderer.dart","src\\\\engine\\\\history.dart","src\\\\engine\\\\html_image_codec.dart","src\\\\engine\\\\keyboard.dart","src\\\\engine\\\\onscreen_logging.dart","src\\\\engine\\\\platform_views.dart","src\\\\engine\\\\pointer_binding.dart","src\\\\engine\\\\recording_canvas.dart","src\\\\engine\\\\semantics\\\\accessibility.dart","src\\\\engine\\\\semantics\\\\checkable.dart","src\\\\engine\\\\semantics\\\\semantics.dart","src\\\\engine\\\\semantics\\\\image.dart","src\\\\engine\\\\semantics\\\\incrementable.dart","src\\\\engine\\\\semantics\\\\label_and_value.dart","src\\\\engine\\\\semantics\\\\live_region.dart","src\\\\engine\\\\semantics\\\\scrollable.dart","src\\\\engine\\\\semantics\\\\tappable.dart","src\\\\engine\\\\semantics\\\\text_field.dart","src\\\\engine\\\\services\\\\buffers.dart","src\\\\engine\\\\services\\\\message_codec.dart","src\\\\engine\\\\services\\\\message_codecs.dart","src\\\\engine\\\\services\\\\serialization.dart","src\\\\engine\\\\shader.dart","src\\\\engine\\\\shadow.dart","src\\\\engine\\\\surface\\\\surface.dart","src\\\\engine\\\\surface\\\\backdrop_filter.dart","src\\\\engine\\\\surface\\\\clip.dart","src\\\\engine\\\\surface\\\\debug_canvas_reuse_overlay.dart","src\\\\engine\\\\surface\\\\offset.dart","src\\\\engine\\\\surface\\\\opacity.dart","src\\\\engine\\\\surface\\\\picture.dart","src\\\\engine\\\\surface\\\\platform_view.dart","src\\\\engine\\\\surface\\\\scene.dart","src\\\\engine\\\\surface\\\\transform.dart","src\\\\engine\\\\test_embedding.dart","src\\\\engine\\\\text\\\\font_collection.dart","src\\\\engine\\\\text\\\\line_breaker.dart","src\\\\engine\\\\text\\\\measurement.dart","src\\\\engine\\\\text\\\\paragraph.dart","src\\\\engine\\\\text\\\\ruler.dart","src\\\\engine\\\\text\\\\unicode_range.dart","src\\\\engine\\\\text\\\\word_break_properties.dart","src\\\\engine\\\\text\\\\word_breaker.dart","src\\\\engine\\\\text_editing.dart","src\\\\engine\\\\vector_math.dart","src\\\\ui\\\\window.dart","src\\\\engine\\\\window.dart","src\\\\engine\\\\compositor\\\\initialization.dart","src\\\\engine\\\\compositor\\\\util.dart","src\\\\engine\\\\path_to_svg.dart","src\\\\engine\\\\util.dart","src\\\\engine\\\\validators.dart","src\\\\ui\\\\canvas.dart","src\\\\ui\\\\compositing.dart","src\\\\ui\\\\geometry.dart","src\\\\ui\\\\hash_codes.dart","src\\\\ui\\\\painting.dart","src\\\\ui\\\\pointer.dart","src\\\\ui\\\\semantics.dart","src\\\\ui\\\\text.dart","src\\\\ui\\\\tile_mode.dart","src\\\\ui\\\\initialization.dart","src\\\\ui\\\\lerp.dart","src\\\\ui\\\\natives.dart","src\\\\ui\\\\test_embedding.dart","ui.dart"],"names":[],"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AE,IAAI;AAEzC,mBAAuB;AAChD,UAAI,AAAG,EAAD,KAAI;AAON,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,YACD,aAAa;AASpB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,CAAC,YACF,kBAAkB;AASzB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,YACD,UAAU;YAEd,KAAI,AAAG,EAAD,KAAI;AAOb,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,YACD,aAAa;AASpB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,CAAC,YACF,kBAAkB;AASzB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,YACD,UAAU;YAEd,KAAI,AAAG,EAAD,KAAI;AAOb,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,YACD,aAAa;AASpB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,YACD,kBAAkB;AASzB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,CAAC,YACF,UAAU;YAEd,KAAI,AAAG,EAAD,KAAI;AAOb,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,YACD,aAAa;AASpB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,YACD,kBAAkB;AASzB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,CAAC,YACF,UAAU;YAEd,KAAI,AAAG,EAAD,KAAI;AAOb,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,cACE,YACD,aAAa;AASpB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,YACD,kBAAkB;AASzB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,CAAC,YACF,UAAU;YAEd,KAAI,AAAG,EAAD,KAAI;AAOb,QANF,AAAO,MAAD,OAAK,sCACA,cACA,YACH,aACE,YACD,aAAa;AASpB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,cACE,YACD,kBAAkB;AASzB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,CAAC,YACF,UAAU;YAEd,KAAI,AAAG,EAAD,KAAI;AAOb,QANF,AAAO,MAAD,OAAK,sCACA,cACA,YACH,cACE,YACD,aAAa;AASpB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,cACE,YACD,kBAAkB;AASzB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,aACE,CAAC,YACF,UAAU;;AASjB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,YACH,cACE,YACD,aAAa;AASpB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,WACH,cACE,YACD,kBAAkB;AASzB,QANF,AAAO,MAAD,OAAK,sCACA,cACA,YACH,aACE,CAAC,YACF,UAAU;;AAGrB,YAAO,OAAM;IACf;;;;EACF;;;;;;;;;IAWe;;;;;;IACA;;;;;;IACA;;;;;;IAEA;;;;;;IACE;;;;;;;;QAZE;QACA;QACA;QACA;QACA;IAJA;IACA;IACA;IACA;IACA;;EACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC4OW;;;;;;IAea;;;;;;;AA3GS;IAAM;cACT;AAC9B,YAAO,QAAQ,IAAI;AACnB,wBAAO,QAAQ,EAAI,iCACf;AACJ,qBAAO,oCAA8B,QAAQ;AAC5B,MAAjB,eAAS,QAAQ;IACnB;oCAIyD;AACvD,UAAa,YAAT,QAAQ,EAA0B;AACpC,uBAAO,oCAAY;;AAEnB,aAAO,WAAC,oCACJ,AAA6E,+EAAV,QAAQ;;AAEjF,UAAa,YAAT,QAAQ,EAA0B;AACpC,cACkC,UAAhC,6BAAa,sCAAsB,0CACnC,AAAmG,yBAAtF,cAAK;;AAGtB,UAAa,YAAT,QAAQ,EAA0B;AACpC,uBAAO,kCACH;;AAEN,UAAa,YAAT,QAAQ,EAA0B;AACpC,uBAAO,kCACH;;AAEN,UAAa,YAAT,QAAQ,EAA0B;AACpC,cAAgB,UAAT,4BAAY,0CACf,AAAkG,uGAAP,cAAK;;AAEtG,YAAO;IACT;;AASE,YAAgB,UAAT,4BAAY;AAGnB,oBAAI;AAC4C,QAA9C,aAA8B;;AAKtB,QAAR;;IAEJ;;AAWE,qBAAO;AAC8B,MAArC,aAA8B;IAChC;;AAGsB,YAAO,aAAP,cAAgC;IAAO;;AAGxC,YAAO,aAAP,cAAgC;IAAM;;AAIvD,YAAO,aAAP,cAAgC;IAAgB;;AAGxB,YAAO,aAAP,cAAgC;IAAa;;AAGlD,YAAO,aAAP,cAAgC;IAAQ;qBASxB;AACrC,YAA2B,WAApB,AAAW,UAAD,cAAyB,YAAZ,oBAA0B,iBAAX,UAAU;IACzD;;AAOmC;IAAW;;;AAgC5C,YAAO,AAAY,oBAAG;AACtB,qBAAO;AACsB,MAA7B,mBAAc;AACd;AACgD,aAA9C,wBAAiB;QAAM,2BAAqB,aAArB,4BAAqB;;AAEvC,MAAP;AACoC,MAApC,aAA8B;IAChC;kBAU8C;;;AAC5C,YAAO,AAAW,UAAD,gBAAgB;AACjC,YAA2B,UAApB,AAAW,UAAD,wBAAa,AAAW,UAAD;AACxC,qBAAO,AAMN;AALC,sBAAI,AAAW,UAAD;AACoB,6DAAO;AACvC,gBAAO,AAAU,AAAK,IAAD,aAAW,UAAU;;AAE5C,cAAO;;AAE2B,MAApC,mBAAc,AAAW,UAAD;AACxB;AAC4C,aAA1C,wBAAiB;QAAM,uBAAiB,aAAjB,wBAAiB;;AAIb,MAA7B,AAAW,UAAD,eAAe;AAEwB,MAAjD,AAAW,UAAD,SAA+B;IAC3C;WAQuC;;AACrC,YAAO,UAAU,IAAI;AACrB,YAAO,AAAW,UAAU,KAAE;AAC9B,YAAiB,UAAV,8BAAc,AAAW,UAAD,+BAAoB,AAAW,UAAD;AAEpC,MAAzB,mBAAc,UAAU;AAExB,oBAAI;AACoD,QAAtD,AAAY,gCAAa,mBAAmB;;AAEV,MAApC,aAA8B;AAC9B,YAAO,oBAAe;IACxB;;;AAYE,YAAO,oBAAe;AACtB,oBAAI;AAKyB,QAA3B,AAAkB,+BAAI;;AAExB,oBAAI;AACqD,QAAvD,AAAY,gCAAa,mBAAmB;;AAE9C;AAC6C,aAA3C,wBAAiB;QAAM,wBAAkB,aAAlB,yBAAkB;;IAE7C;;AAUE,qBAAO;AACP,YAAO,oBAAe;AAcF,MAApB,AAAY;AACM,MAAlB,mBAAc;AACwB,MAAtC,aAA8B;IAChC;kBAIgC;AAC9B,UAAI,AAAY,oBAAG;AACmD,QAApE,AAAiB,gBAAD,OAAmD,SAA3C,qBAAc,SAAM;;AAE9C,qBAAK;AAGuC,QAF1C,AAAiB,gBAAD,gBAAQ,qBAAc,SAAM,8BACxC,2DAAsE,uCAAO,QAC7E,0CAA8B,cAAK;;IAE3C;yBAOyC;AACpB,oBAAuB,iBAAI,OAAO;AAClB,MAAnC,AAAQ,AAAM,OAAP,oBAAkB;AACzB,oBAAI;AAC4C,QAA9C,AAAQ,OAAD,gBAAc,mBAAmB;;AAE1C,YAAO,QAAO;IAChB;;AAcyB;IAAU;;AA4BH,MAA9B,oBAAa,AAAO;AACG,MAAvB,yBAAmB;AACU,MAA7B,+BAAyB;AACJ,MAArB,uBAAiB;IACnB;;AAW6B,MAA3B;IACF;eAG6B,QAAY;AACvC,UAAI,oBAAe;AACqD,QAAtE,AAAO,MAAD,OAAU,AAAK,AAAgD,aAA9C,MAAM,IAAC,MAAG,AAAY,AAAQ,2CAAc;;AAEZ,QAAvD,AAAO,MAAD,OAAU,AAAK,AAAiC,aAA/B,MAAM,IAAC,eAAE,sBAAW;;AAEjB,MAA5B,0BAAqB,MAAM;AACR,MAAnB,AAAO,MAAD,SAAS;AACmB,MAAlC,wBAAmB,MAAM,EAAE,MAAM;AACjC,UAAI,oBAAe;AACwD,QAAzE,AAAO,MAAD,SAAY,AAAK,AAAiD,aAA/C,MAAM,IAAC,OAAI,AAAY,AAAQ,2CAAc;;AAErB,QAAjD,AAAO,MAAD,SAAY,AAAK,AAAyB,aAAvB,MAAM,IAAC,gBAAG,sBAAW;;IAElD;yBAIuC;AACrC,UAAI,oBAAe;AACwB,QAAzC,AAAO,MAAD,OAAO,AAA2B,eAAX,cAAZ,qBAAqB;;IAE1C;uBAIqC,QAAY;IAAS;;AAIxD,oBAAI;AACiB,kBAAM;AACP,QAAlB,gBAAW,GAAG,EAAE;AAChB,cAAO,AAAI,IAAD;;AAEV,cAAa;;IAEjB;;;IA3WsB,eAA+B;IAmFxC;IAea;IAsLlB;IAQA;IAGA;IAGA;;EAnTU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsZe,YAAA,AAAU;IAAK;kBAML;AACf,MAA1B,AAAU,0BAAQ,OAAO;IAC3B;gBAGkC;AAChC,YAAmD,UAA5C,AAAM,KAAD,yBAAc,AAAM,KAAD,kCAAuB,AAAM,KAAD,sCACvD,AAA4C,0CAAb,AAAM,KAAD;AACpB,MAApB,AAAU,sBAAI,KAAK;AACA,MAAnB,AAAM,KAAD,UAAU;IACjB;;AAIiB,MAAT;AACI,mBAAS,AAAU;AAC7B,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAE,CAAD,GAAI;AACT,QAAtB,AAAS,AAAI,uBAAH,CAAC;;IAEf;;AAIgC,MAA9B,oBAAa,AAAO;AACG,MAAvB,yBAAmB;AACU,MAA7B,+BAAyB;AACJ,MAArB,uBAAiB;IACnB;;AAIe,MAAP;AAEI,gBAAM,AAAU;AAEP,6BAAmB;AACtC,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,GAAG,GAAE,IAAA,AAAC,CAAA;AACD,oBAAQ,AAAS,uBAAC,CAAC;AAC1C,sBAAI,AAAM,KAAD;AACP,gBAAO,AAAM,KAAD,gBAAgB;AACd,UAAd,AAAM,KAAD;cACA,KAAU,oCAAN,KAAK,KAAiC,AAAM,KAAD,aAAa;AAC1C,yBAAW,AAAM,KAAD;AACvC,gBAAO,AAAS,QAAD,gBAAgB;AAC/B,yBAAO,AAAS,QAAD;AACa,UAA5B,AAAM,KAAD,gDAAQ,AAAM,KAAD;;AAElB,yBAAO,AAAM,KAAD;AACZ,gBAAO,AAAM,AAAY,KAAb,gBAAgB;AACf,UAAb,AAAM,KAAD;;AAEmC,QAA1C,AAAiB,gBAAD,UAAQ,AAAM,KAAD;;IAEjC;mBAGgD;;AAC9C,WAAmC,YAAZ,iBAAhB,eAAe,GAAgB;AAStC,YAAO;IACT;WAGsC;;AACpC,YAA2B,UAApB,AAAW,UAAD,wBAAa,AAAW,UAAD;AACxC,WAAmB,YAAZ,oBAA0B,iBAAX,UAAU;AACR,MAAlB,aAAO,UAAU;AACvB,qBAAO,AAAW,UAAD;AAEjB,oBAAI,AAAW,AAAU,UAAX;AACiB,QAA7B,wBAAkB,UAAU;YACvB,KAAI,AAAU,AAAO,6BAAG;AACD,QAA5B,uBAAiB,UAAU;YACtB,eAAI,AAAU;AACe,QAAlC,wDAAuB,UAAU;;AAEJ,QAA7B,wBAAkB,UAAU;;AAG9B,oBAAI;AACuC,QAAzC,oCAA8B,UAAU;;IAE5C;oCAE6D;AAG3D,qBAAO,AAkBN;AAjBC,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAW,AAAU,UAAX,uBAAmB,IAAA,AAAC,CAAA;AACzB,yBAAW,AAAW,AAAS,UAAV,mBAAW,CAAC;AACxD,gBAA0B,WAAlB,AAAS,QAAD,yBAAc,AAAS,QAAD,gCAClC,AAAmD,8CAAhB,AAAS,QAAD;AAC/C,wBAAI,AAAS,QAAD;AACV,kBAAO,AAAS,AAAY,QAAb,gBAAgB;AAC/B,kBAAO,AAAS,AAAe,QAAhB,mBAAmB;;;AAGtC,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAU,2BAAQ,IAAA,AAAC,CAAA;AACd,yBAAW,AAAS,uBAAC,CAAC;AAC7C,gBAAyB,UAAlB,AAAS,QAAD,wBAAa,AAAS,QAAD,yCAChC,AAAmD,8CAAhB,AAAS,QAAD;AAC/C,gBAAO,AAAS,QAAD,gBAAgB;AAC/B,eAAmC,YAA5B,AAAS,AAAY,QAAb,uBAAuB;;AAExC,cAAO;;IAEX;wBAMiD;AAC/C,qBAAO,AAAW,AAAU,UAAX;AAGE,6BAAmB;AAC5B,mBAAS,AAAU;AAE7B,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AACJ,uBAAW,AAAS,uBAAC,CAAC;AAC7C,sBAAI,AAAS,QAAD;AACO,UAAjB,AAAS,QAAD;AACR,yBAAO,AAAS,QAAD;cACV,KAAa,oCAAT,QAAQ,KACf,AAAS,QAAD,aAAa;AACS,iEAAW,AAAS,QAAD;AACnD,yBAAO,AAAS,QAAD;AACU,UAAzB,AAAS,QAAD,QAAQ,QAAQ;AACxB,yBAAO,AAAS,QAAD;AACf,yBAAO,AAAS,QAAD;;AAEC,UAAhB,AAAS,QAAD;AACR,yBAAO,AAAS,QAAD;;AAEjB,cAAO,AAAS,QAAD,gBAAgB;AACc,QAA7C,AAAiB,gBAAD,UAAQ,AAAS,QAAD;;IAEpC;kCAG6D;AACjD,mBAAS,AAAQ,AAAU,OAAX;AAC1B,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAE,CAAD,GAAI;AACR,oBAAQ,AAAQ,AAAS,OAAV,mBAAW,CAAC;AAGlD,sBAAI,AAAM,KAAD;AACQ,UAAf,AAAM,KAAD;;AAEP,cAAwB,WAAhB,AAAM,KAAD,0BAAe,AAAM,KAAD;;IAErC;uBAIgD;AAC9C,YAAO,AAAU,AAAO,6BAAG;AACJ,qBAAW,AAAS,uBAAC;AAI5C,oBAAI,AAAS,QAAD;AACV,cAAO,AAAS,QAAD,gBAAgB;AAG/B,yBAAI,AAAS,AAAY,QAAb,uBAAuB;AACU,UAA3C,AAAe,6BAAO,AAAS,QAAD;;AAGf,QAAjB,AAAS,QAAD;AAE0B,QAAlC,wDAAuB,UAAU;AACjC,uBAAO,AAAS,QAAD;AACf;;AAKF,UAAa,oCAAT,QAAQ,KAAiC,AAAS,QAAD,aAAa;AAChE,uBAAO,AAAS,AAAS,QAAV;AACf,cAAO,AAAS,AAAY,QAAb,gBAAgB;AAC/B,cAAO,AAAS,AAAS,QAAV,yBAAyB;AAER,+DAAW,AAAS,QAAD;AAGnD,yBAAI,AAAS,AAAY,QAAb,uBAAuB;AACU,UAA3C,AAAe,6BAAO,AAAS,QAAD;;AAGP,QAAzB,AAAS,QAAD,QAAQ,QAAQ;AACU,QAAlC,wDAAuB,UAAU;AACjC,uBAAO,AAAS,QAAD;AACf,uBAAO,AAAS,QAAD;AACf;;AAGF,qBAAO,AAAS,QAAD;AAEE;AACV,sBAAY;AACnB,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAW,AAAU,UAAX,uBAAmB,IAAA,AAAC,CAAA;AACzB,wBAAY,AAAW,AAAS,UAAV,mBAAW,CAAC;AACzD,uBAAK,AAAS,QAAD,kBAAkB,SAAS;AACtC;;AAEW,oBAAQ,AAAS,QAAD,gBAAgB,SAAS;AACtD,YAAU,aAAN,KAAK,iBAAG,SAAS;AACE,UAArB,YAAY,SAAS;AACJ,UAAjB,YAAY,KAAK;;;AAIrB,UAAI,SAAS,IAAI;AACf,uBAAO,AAAU,SAAD;AACU,QAA1B,AAAS,QAAD,QAAQ,SAAS;AAGzB,yBAAI,AAAS,AAAY,QAAb,uBAAuB;AACU,UAA3C,AAAe,6BAAO,AAAS,QAAD;;AAGhC,uBAAO,AAAU,SAAD;;AAEA,QAAhB,AAAS,QAAD;AACmC,QAA3C,AAAe,6BAAO,AAAS,QAAD;AAC9B,uBAAO,AAAS,QAAD;;AAKjB,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAW,AAAU,UAAX,uBAAmB,IAAA,AAAC,CAAA;AACzB,uBAAW,AAAW,AAAS,UAAV,mBAAW,CAAC;AACxD,YAAe,QAAQ,IAAE,SAAS,cAAK,AAAS,QAAD;AAC3B,UAAlB,AAAS,QAAD;;AAEV,cAA2B,WAAnB,AAAS,QAAD,0BAAe,AAAS,QAAD;;IAE3C;wBAIiD;AAC/C,YAA4B,UAArB,AAAU,2CAAc,AAAW,AAAU,UAAX;AAGtB,6BAAmB;AAErB;AAKjB,YAAK,uBAAsC;;AACzC,cAAO,AAAS,QAAD,gBAAgB;AAC/B,aAAuB,YAAhB,AAAS,QAAD,SAAW;AACf,sCAAa,AAAS,AAAY,QAAb,uBAAuB,gBAAgB;AAE5D,oBAAQ,AAAW,UAAD,iBACzB,AAAS,AAAY,QAAb,uCAAmC,WAAW,eAAX,OAAa;AAC5D,YAAI,KAAK;AACP,cAAI,AAAY,WAAD,IAAI;AAE4B,YAA7C,AAAiB,gBAAD,UAAQ,AAAS,QAAD;;AAIkB,YADlD,AAAiB,gBAAD,cACZ,AAAS,QAAD,cAAc,AAAY,WAAD;;;;;AAKG,oBAC1C,qBAAe,UAAU;AAE7B,eAAS,cAA+B,aAAjB,AAAU,4BAAS,GACtC,AAAY,WAAD,IAAI,GACf,cAAA,AAAW,WAAA;AACU,uBAAW,AAAS,uBAAC,WAAW;AACvD,sBAAI,AAAS,QAAD;AACO,UAAjB,AAAS,QAAD;AACR,yBAAO,AAAS,QAAD;cACV,KAAa,oCAAT,QAAQ,KACf,AAAS,QAAD,aAAa;AACS,iEAAW,AAAS,QAAD;AACnD,yBAAO,AAAS,QAAD;AACU,UAAzB,AAAS,QAAD,QAAQ,QAAQ;AACxB,yBAAO,AAAS,QAAD;AACf,yBAAO,AAAS,QAAD;;AAEQ,gCAAkB,AAAO,OAAA,QAAC,QAAQ;AACzD,cAAI,eAAe,IAAI;AACrB,2BAAO,AAAgB,eAAD;AACU,YAAhC,AAAS,QAAD,QAAQ,eAAe;AAC/B,2BAAO,AAAgB,eAAD;AACtB,2BAAO,AAAS,QAAD;;AAEC,YAAhB,AAAS,QAAD;AACR,2BAAO,AAAS,QAAD;;;AAGW,QAA9B,AAAoB,oBAAA,CAAC,QAAQ;AAC7B,cAAO,AAAS,QAAD,gBAAgB;AAC/B,cAAyB,UAAlB,AAAS,QAAD,wBAAa,AAAS,QAAD;AACd,QAAtB,cAAc,QAAQ;;AAIU,MAAlC,wDAAuB,UAAU;IACnC;qBAG8B;AAClB,oCAA0B,AAAU;AACpC,oCAA0B,AAAW,AAAU,UAAX;AAGjB,wBAAgC;AAC7D,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,uBAAuB,GAAE,IAAA,AAAC,CAAA;AACrB,oBAAQ,AAAS,uBAAC,CAAC;AAC1C,sBAAI,AAAM,KAAD;AACe,UAAtB,AAAY,WAAD,OAAK,KAAK;;;AAKI,wBAAgC;AAC7D,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,uBAAuB,GAAE,IAAA,AAAC,CAAA;AACrB,oBAAQ,AAAW,AAAS,UAAV,mBAAW,CAAC;AACrD,sBAAI,AAAM,KAAD;AACe,UAAtB,AAAY,WAAD,OAAK,KAAK;;;AAIf,0BAAgB,AAAY,WAAD;AAC3B,0BAAgB,AAAY,WAAD;AAErC,UAAI,AAAc,aAAD,KAAI,KAAK,AAAc,aAAD,KAAI;AAEzC;;AAGiC,uBAAqC;AAQxE,eAAS,aAAa,GAAG,AAAW,UAAD,gBAAG,aAAa,GAAE,aAAA,AAAW,UAAD,GAAI;AAC1C,uBAAW,AAAW,WAAA,QAAC,UAAU;AACxD,iBAAS,aAAa,GAAG,AAAW,UAAD,gBAAG,aAAa,GAAE,aAAA,AAAW,UAAD,GAAI;AAC1C,yBAAW,AAAW,WAAA,QAAC,UAAU;AAC7C,oCAAsB,AAAS,QAAD,IAAI;AAC7C,cAAI,mBAAmB,eAAK,AAAS,QAAD,kBAAkB,QAAQ;AAC5D;;AAMA,UAJF,AAAW,UAAD,OAAK,qDACC,AAAS,QAAD,gBAAgB,QAAQ,aACpC,QAAQ,iBACH,UAAU;;;AAO7B,MAFF,AAAW,UAAD,QAAM,SAAwB,IAA2B,OAC1D,AAAG,AAAa,EAAd,0BAAwB,AAAG,EAAD;AAGS,mBACN;AACxC,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAW,UAAD,YAAS,IAAA,AAAE,CAAD,GAAI;AACb,oBAAQ,AAAU,UAAA,QAAC,CAAC;AAE1B,2BAAe,AAAW,WAAA,QAAC,AAAM,KAAD;AACvD,YAAI,YAAY,IAAI;AACqB,UAAvC,AAAW,WAAA,QAAC,AAAM,KAAD,gBAAkB;AACE,UAArC,AAAM,MAAA,QAAC,AAAM,KAAD,WAAa,YAAY;;;AAIzC,YAAO,AAAO,AAAO,MAAR,aAAQ,AAA6C,uCAAf,AAAO,MAAD;AACzD,YAAO,OAAM;IACf;;AAIgB,MAAR;AACI,gBAAM,AAAU;AAC1B,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,GAAG,GAAE,IAAA,AAAC,CAAA;AACH,QAArB,AAAS,AAAI,uBAAH,CAAC;;IAEf;;AAIgB,MAAR;AACI,gBAAM,AAAU;AAC1B,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,GAAG,GAAE,IAAA,AAAC,CAAA;AACH,QAArB,AAAS,AAAI,uBAAH,CAAC;;IAEf;;AAIiB,MAAT;AACsB,MAA5B,wDAAuB;IACzB;kBAKgC;AACO,MAA/B,oBAAc,gBAAgB;AACpC,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAU,2BAAQ,IAAA,AAAC,CAAA;AACd,oBAAQ,AAAS,uBAAC,CAAC;AAC1C,yBAAI,AAAM,KAAD,SAAW;AAE0G,UAD5H,AAAiB,gBAAD,OAC2G,SAApH,qBAAc,KAAK,KAAE,yBAAa,qBAAc,AAAM,KAAD,YAAS,6CAAiC,qBAAc;;;AAGxH,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAU,2BAAQ,IAAA,AAAC,CAAA;AACO,QAA5C,AAAS,AAAI,uBAAH,CAAC,gBAAgB,gBAAgB;;IAE/C;uBAGqC,QAAY;AACP,MAAlC,yBAAmB,MAAM,EAAE,MAAM;AACvC,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAU,2BAAQ,IAAA,AAAC,CAAA;AACM,QAA3C,AAAS,AAAI,uBAAH,CAAC,aAAa,MAAM,EAAS,aAAP,MAAM,IAAG;;IAE7C;;mDA1c2C;IAcd,kBAA8B;IAb3C,kBAAE,6CACR,AAAiB,QAAT,IAAI,kBAAQ,AAAS,QAAD,aAAY,QAAQ,GAAG;AAF7D;AAGE,UAAO,AAAS,AAAQ,QAAT,IAAI,QAAoB,YAAZ,oBAAwB,iBAAT,QAAQ;EACpD;;;;;;;;;;;;;;;;;;;;;;;;;ICv3BqB;;;;;;;AAMc;IAAe;;;AAU9C;mBAAuB,OAAvB,+BAAmC;IAAU;kBAGN;;AACV,MAAzB,oBAAc,UAAU;AACc,MAA5C,wBAAkB,AAAW,UAAD;AACc,MAA1C,uBAAiB,AAAW,UAAD;AACM,MAAjC,AAAW,UAAD,oBAAmB;IAC/B;;;AAIqB,0BAAU,0BAAqB,iBAC9C,AAAM,6BAAkB;AAC+B,MAA3D,wBAA+B,iBAAI;AACQ,MAA3C,AAAgB,AAAM,yCAAW;AACjC;AAEgD,cAA9C,wBAAiB;QAAM,4BAAqB,aAArB,6BAAqB;;AAEc,MAA5D,uBAAiB,0BAAqB;AACQ,MAA9C,AAAe,AAAM,+CAAkB;AACiB,aAAxD,OAAO;MAAE,cAAO;MAAiB,cAAO;;AACxC,YAAO,QAAO;IAChB;;AAIiB,MAAT;AAIgB,MAAtB,wBAAkB;AACG,MAArB,uBAAiB;IACnB;;;AAIE,uBAAI,0BAAsB;AACyB,QAAjD,2BAA6B,wBAAS;AACP,QAA/B,2BAAqB;;AAET,iBAAO,qBAAc,0BAAoB,KAAG,KACnD,AAAO,AAAa,8BAAU,AAAO,AAAa;AAC1B,+BAAqB,AAAe;AAKpC,WAJ/B,kBAAkB;MACd,gBAAW;MACX,iBAAY,AACd,wBAD2B,AAAK,IAAD,SAAM,kBAAM,AAAK,IAAD,QAAK;MAClD,aACF,SADa,AAAK,IAAD,UAAO;MACtB,cAA2B,SAAf,AAAK,IAAD,WAAQ;;AAC5B,UAAkB,YAAd,sBAA+B;AAOd,cAFnB,kBAAkB;QACd,wBAAkB;QAClB,gBAAU;;;AAM8C,QAD5D,AAAY,mCAAgB,sBAAgB,mBACxC,AAAuD,mBAA/C,AAAuC,sBAA9B,AAAO,oBAAQ,AAAO,sBAAU,KAAE;;IAE3D;WAGoC;;AACV,MAAlB,aAAO,UAAU;AACvB,uBAAI,aAAU,AAAW,UAAD;AACf,QAAP;;IAEJ;;iDA5FgD,UAAe;IAUlD;IACA;IAEL;IAEA;IAfuD;AACzD,4DAAM,QAAQ;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACGc;IAAe;kBAItB;;AACK,MAAzB,oBAAc,UAAU;AACc,MAA5C,wBAAkB,AAAW,UAAD;AACK,MAAjC,AAAW,UAAD,oBAAmB;IAC/B;;;AAIqB,oBAAU,0BAAqB;AAClD,qBAAK;AAG8B,QAAjC,AAAQ,AAAM,OAAP,oBAAkB;;AAKuB,QAAhD,AAAQ,AAAM,OAAP,qBAAmB;;AAE2B,MAAvD,wBAA+B,iBAAI;AACnC;AAEgD,aAA9C,wBAAiB;QAAM,2BAAqB,aAArB,4BAAqB;;AAEH,MAA3C,AAAgB,AAAM,yCAAW;AACF,MAA/B,AAAQ,OAAD,UAAQ;AACf,YAAO,QAAO;IAChB;;AAIiB,MAAT;AAKgB,MAAtB,wBAAkB;IACpB;;;IAxCa;;;;;;;;;;;;;;;wDFi3B8B;;;;;;IEh0B7B;;;;;;;AAIkB,MAA9B,oBAAa,AAAO;AACG,MAAvB,yBAAmB;AACU,MAA7B,+BAAyB;AACJ,MAArB,uBAAiB;IACnB;;;AAII;mBAAuB,OAAvB,+BAAmC;IAAU;;;AAI/C,WAAa;MAAiB,kBAAa,aAAa;;IAC1D;;;AAO4C,WAH1C,AAAY;MACR,iBAAY,AACd,wBAD2B,AAAK,kBAAK,kBAAM,AAAK,iBAAI;MAClD,aACF,SADwB,aAAX,AAAK,gCAAQ,AAAK,mBAAK;MAClC,cAAsC,SAAd,aAAZ,AAAK,iCAAS,AAAK,kBAAI;;AAMS,MADhD,AAAe,AAAM,wCACjB,AAA4C,wBAA/B,cAAC,AAAK,mBAAK,kBAAM,cAAC,AAAK,kBAAI;IAC9C;WAG8B;;AACJ,MAAlB,aAAO,UAAU;AACvB,uBAAI,WAAQ,AAAW,UAAD;AACb,QAAP;;IAEJ;;2CAzCoC;IAAe;AAAQ,sDAAM,QAAQ;;EAAC;;;;;;;;;;;;;;;;;;;;yDFk0B/B;;;;;;IE/wB5B;;;;;;IAED;;;;;;;AAIkB,MAA9B,oBAAa,AAAO;AACc,MAAlC,yBAAmB,AAAM;AACI,MAA7B,+BAAyB;AACJ,MAArB,uBAAiB;IACnB;;;AAII;mBAAuB,OAAvB,+BAAmC;IAAU;;;AAI/C,WAAa;MAAiB,kBAAa,aAAa;;IAC1D;;;AAWqD,WAPnD,AAAY;MACR,iBAAY,AACd,wBAD2B,AAAM,mBAAK,kBAAM,AAAM,kBAAI;MACpD,aACF,SADa,AAAM,oBAAM;MACvB,cACF,SADc,AAAM,qBAAO;MACzB,2BACF,SAD2B,AAAM,wBAAU;MACzC,4BACF,SAD4B,AAAM,wBAAU;MAC1C,+BACF,SAD+B,AAAM,wBAAU;MAC7C,8BAA+C,SAAnB,AAAM,wBAAU;;AAME,MADlD,AAAe,AAAM,wCACjB,AAA8C,wBAAjC,cAAC,AAAM,oBAAK,kBAAM,cAAC,AAAM,mBAAI;IAChD;WAG+B;;AACL,MAAlB,aAAO,UAAU;AACvB,uBAAI,YAAS,AAAW,UAAD;AACd,QAAP;;IAEJ;;4CAhDkC,UAAe,OAAY;IAAZ;IAAY;AACvD,sFAAM,QAAQ;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DFixBsB;;;;;;IEttB7B;;;;;;IACD;;;;;;IACE;;;;;;IACA;;;;;;IACD;;;;;;;AAKkB,MAA9B,oBAAa,AAAO;AAEL,sBAAY,AAAK;AAChC,UAAI,SAAS,IAAI;AACuB,QAAtC,yBAAmB,AAAU,SAAD;;AAEd,mBAAO,AAAK;AAC1B,YAAI,IAAI,IAAI;AACa,UAAvB,yBAAmB,IAAI;;AAEA,UAAvB,yBAAmB;;;AAGM,MAA7B,+BAAyB;AACJ,MAArB,uBAAiB;IACnB;;;AAII;mBAAuB,OAAvB,+BAAmC;IAAU;;AAGQ,MAAvD,AAAY,AAAM,2CAAkB,AAAM;IAC5C;;AAGwE,MAAtD,mCAAY,AAAY,wBAAO,gBAAW;IAC5D;;;AAIE,WAAa;MAAiB,kBAAa,aAAa;;IAC1D;;AAIe,MAAb;AACc,MAAd;AACa,MAAb;IACF;;;AAGE,UAAI,AAAK,aAAG;AACV;;AAIa,sBAAY,AAAK;AAChC,UAAI,SAAS,IAAI;AACF,oCACN,AAAU,SAAD,cAAW,iBAAK,AAAU,SAAD,cAAW,iBAC7C,AAAU,SAAD,cAAW,iBAAK,AAAU,SAAD,cAAW;AACrB,oBAAQ,AAAY;AAKpB,aAJ/B,KAAK;QACD,iBAAY,AACd,wBAD2B,AAAU,SAAD,SAAM,kBAAM,AAAU,SAAD,QAAK;QAC5D,aACF,SADa,AAAU,SAAD,UAAO;QAC3B,cACF,SADc,AAAU,SAAD,WAAQ;QAC7B,oBAAe,YAAY;;AAE2B,QAD1D,AAAe,AAAM,wCACjB,AAAsD,wBAAzC,cAAC,AAAU,SAAD,UAAM,kBAAM,cAAC,AAAU,SAAD,SAAK;AACtD,yBAAI,mBAAwB;AACD,UAAzB,AAAM,KAAD,cAAY;;AAEnB;;AAEc,mBAAO,AAAK;AAC1B,YAAI,IAAI,IAAI;AACqB,sBAAQ,AAAY;AAK9B,gBAJrB,KAAK;UACD,kBAAY,AACd,wBAD2B,AAAK,IAAD,SAAM,kBAAM,AAAK,IAAD,QAAK;UAClD,cACF,SADa,AAAK,IAAD,UAAO;UACtB,eACF,SADc,AAAK,IAAD,WAAQ;UACxB,qBAAe;;AAE6B,UADhD,AAAe,AAAM,wCACjB,AAA4C,wBAA/B,cAAC,AAAK,IAAD,UAAM,kBAAM,cAAC,AAAK,IAAD,SAAK;AAC5C,2BAAI,mBAAwB;AACD,YAAzB,AAAM,KAAD,cAAY;;AAEnB;;AAEc,wBAAU,AAAK;AAC7B,cAAI,OAAO,IAAI;AACA,qBAAK,AAAQ,OAAD;AACZ,qBAAK,AAAQ,OAAD;AACZ,+BACT,AAAG,EAAD,IAAI,EAAE,GAAc,SAAR,EAAE,IAAC,QAAyB,SAAf,EAAE,IAAC,iBAAK,EAAE,IAAC;AACX,wBAAQ,AAAY;AACtC,uBAAiB,aAAV,AAAQ,OAAD,mBAAK,EAAE;AACrB,sBAAgB,aAAV,AAAQ,OAAD,mBAAK,EAAE;AAKF,mBAJ/B,KAAK;YACD,mBAAY,AACd,wBAD2B,IAAI,IAAC,kBAAM,GAAG,IAAC;YACxC,eACF,SADgB,aAAH,EAAE,IAAG,KAAE;YAClB,gBACF,SADiB,aAAH,EAAE,IAAG,KAAE;YACnB,sBAAe,YAAY;;AACoC,YAAnE,AAAe,AAAM,wCAAY,AAAkC,wBAArB,CAAC,IAAI,IAAC,kBAAM,CAAC,GAAG,IAAC;AAC/D,6BAAI,mBAAwB;AACD,cAAzB,AAAM,KAAD,cAAY;;AAEnB;;;;AAKQ,mBAAS,AAAK;AACf,wBACT,0BAAmB,qBAAe,cAAC,AAAO,MAAD,iBAAgB,cAAC,AAAO,MAAD;AACpE,YAAO,AAAa,sBAAG;AAEgD,MADvE,qBACiB,kBAAK,WAAW,kBAAiB;AACL,MAA7C,AAAY,0BAAO,kBAAa;AAE6B,MAD7D,AAAY,mCACR,kBAAa,aAAa,AAA8B,0BAAhB,yBAAc;AAEW,MADrE,AAAY,mCACR,kBAAa,qBAAqB,AAA8B,0BAAhB,yBAAc;AACnC,6BAAmB,AAAY;AAMzC,aALrB,gBAAgB;MACZ,kBAAW;MACX,mBAAY,AACd,wBAD2B,AAAO,MAAD,SAAM,kBAAM,AAAO,MAAD,QAAK;MACtD,eACF,SADa,AAAO,MAAD,UAAO;MACxB,gBACF,SADc,AAAO,MAAD,WAAQ;MAC1B,sBAAe;;AAEiC,MADpD,AAAe,AAAM,wCACjB,AAAgD,wBAAnC,cAAC,AAAO,MAAD,UAAM,kBAAM,cAAC,AAAO,MAAD,SAAK;IAClD;WAGmC;;;AACT,MAAlB,aAAO,UAAU;AACvB,uBAAI,AAAW,UAAD,QAAU;AACT,QAAb;;AAEF,UAAI,AAAW,UAAD,cAAc,+BACxB,AAAW,UAAD,cAAgB;AACd,QAAd;;AAEF,uBAAI,AAAW,UAAD,OAAS;AACY,aAAjC,AAAW,UAAD;qBAAC,OAAc;AAGM,oBAAQ,AAAY;AAC/B,QAApB,AAAM,KAAD,eAAa;AACK,QAAvB,AAAM,KAAD,kBAAgB;AACoC,QAAzD,AAAY,mCAAgB,kBAAa,aAAa;AACW,QAAjE,AAAY,mCAAgB,kBAAa,qBAAqB;AACjD,QAAb;;AAEsC,QAAtC,qBAAe,AAAW,UAAD;;AAEG,MAA9B,AAAW,UAAD,iBAAgB;IAC5B;;gDApK8C,UAAe,MACpD,WAAe,OAAW,aAAkB;IAUxC;IAXgD;IACpD;IAA4C;IACzC,gBAAK,iBAAM,KAAK;IACV,qBAAK,iBAAM,WAAW;AAClC,2DAAM,QAAQ;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0KP;;;;;;IACA;;;;;;;AAKZ,YAAO,2BAAqB;IAC9B;;AAImC,MAA3B;AACmC,MAAzC,AAAiB,0BAAA,OAAjB,yBAAqB,AAAS,4BAAb;IACnB;;;AAII;mBAAuB,OAAvB,+BAAmC;IAAU;;;AAI/C,UAAI,AAAS,iBAAG;AACd,YAAI,sBAAgB;AAC0C,UAA5D,AAAY,mCAAgB,qBAAgB,aAAa;AACW,UAApE,AAAY,mCAAgB,qBAAgB,qBAAqB;AAC5C,UAArB,AAAa;AACM,UAAnB,qBAAe;;AAEjB;;AAEW,wBAAc,0BAAmB;AACxB,WAAtB;0BAAc;AAEyD,MADvE,qBACiB,kBAAK,WAAW,kBAAiB;AACF,MAAhD,AAAY,0BAAO,qBAAgB;AAE6B,MADhE,AAAY,mCACR,qBAAgB,aAAa,AAA8B,0BAAhB,yBAAc;AAEW,MADxE,AAAY,mCACR,qBAAgB,qBAAqB,AAA8B,0BAAhB,yBAAc;IACvE;WAG8B;;;AACJ,MAAlB,aAAO,UAAU;AACvB,uBAAI,AAAW,UAAD,WAAa;AACF,QAAvB,yBAAmB;AACc,aAAjC,AAAW,UAAD;qBAAC,OAAc;AAClB,QAAP;;AAEsC,QAAtC,qBAAe,AAAW,UAAD;;AAEG,MAA9B,AAAW,UAAD,iBAAgB;IAC5B;;;AAIwB,WAAtB;0BAAc;AACK,MAAnB,qBAAe;AACA,MAAT;IACR;;2CA9DsB,UAAe,UAAe;IAKvC;IALwB;IAAe;AAC9C,sDAAM,QAAQ;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrQnB,UAAI,AAAU,4CAAG;AAGf,sBAAI;AACqC,UAAvC,2CAAoC;;;AAGxC,YAAO;IACT;;AASwB;IAAa;qBAChB;AACS,MAA5B,sBAAgB,YAAY;AACnB,MAAT;IACF;;AAGqB;IAAU;kBACb;AACM,MAAtB,mBAAa,SAAS;AACb,MAAT;IACF;;AAGuB;IAAY;oBACf;AACQ,MAA1B,qBAAe,WAAW;AACjB,MAAT;IACF;;AAGyB;IAAc;sBACjB;AACU,MAA9B,uBAAiB,aAAa;AACrB,MAAT;IACF;;AAG0B;IAAe;uBAClB;AACW,MAAhC,wBAAkB,cAAc;AACvB,MAAT;IACF;;AAGkC,MAAhC,AAAS,wBAAuB,SAAd;AACQ,MAA1B,AAAM,qBAAoB,SAAX;AACe,MAA9B,AAAQ,uBAAsB,SAAb;AACiB,MAAlC,AAAU,yBAAwB,SAAf;AACiB,MAApC,AAAW,0BAAyB,SAAhB;IACtB;;AAIsE,MADpE,sBACI,mBAAa,qBAAe,uBAAiB,wBAAkB;AAC1D,MAAT;IACF;;;;IArDgB,iBAAgB,cAAK;IACrB,cAAa,cAAK;IAClB,gBAAe,cAAK;IACpB,kBAAiB,cAAK;IACtB,mBAAkB,cAAK;IAEnC,sBAAgB;IAOhB,mBAAa;IAOb,qBAAe;IAOf,uBAAiB;IAOjB,wBAAkB;AA5FG,oBAAY;AACZ,gBAAa;AAGJ,SAFhC,AAAM,KAAD;IACD,kBAAa;IACb,sBAAiB;;AACM,IAA3B,AAAM,KAAD,UAAQ;AAsCZ,IApCI,AAAS,AAAK,mCACjB,SAAS,EACL,aAAO,KAAK,GACZ,mBACK,uBACD,gBAAW,cACX,YAAO,uBAEX,oBACK,uBACD,iBAAW,WACX,aAAO,qBAEX,qBACK,uBACD,kBAAW,aACX,cAAO,wBAEX,qBACK,uBACD,kBAAW,eACX,cAAO,0BAEX,qBACK,uBACD,kBAAW,sBACX,cAAO,2BAEX,qBACK,uBACD,oBACK,0BACD,YAAO,SACP,sBAAiB,SAAS,QAAC,KAAM;EAIjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAE+B,wCAAS;;;;;;;;IC5D3B;;;;;;IAGA;;;;;;;AAImB,MAA9B,oBAAa,AAAO;AACpB,UAAI,YAAM,OAAO,YAAM;AACU,QAA/B,oBAAa,AAAW;AACI,QAA5B,AAAW,4BAAU,SAAI;;AAEN,MAArB,uBAAiB;AACY,MAA7B,+BAAyB;IAC3B;;;AAII;mBAAuB,OAAvB,+BAAmC,iCAAkB,cAAC,UAAI,cAAC,UAAI;IAAE;;;AAInE,WAAO,0BAAqB;MAAe,AAAM,6BAAkB;;IACrE;;AAI6D,MAA3D,AAAY,AAAM,qCAAY,AAA6B,wBAAhB,WAAG,kBAAM,WAAG;IACzD;WAG4B;;AACF,MAAlB,aAAO,UAAU;AAEvB,UAAI,AAAW,UAAD,OAAO,WAAM,AAAW,UAAD,OAAO;AACnC,QAAP;;IAEJ;;yCAxCgC,UAAe,IAAS;IAAT;IAAS;AAAM,oDAAM,QAAQ;;EAAC;;;;;;;;;;;;;;;;;;;;;;;ICGnE;;;;;;IACM;;;;;;;AAIgB,MAA9B,oBAAa,AAAO;AAEP,eAAK,AAAO;AACZ,eAAK,AAAO;AAEzB,UAAI,EAAE,KAAI,OAAO,EAAE,KAAI;AACU,QAA/B,oBAAa,AAAW;AACI,QAA5B,AAAW,4BAAU,EAAE,EAAE,EAAE;;AAEA,MAA7B,+BAAyB;AACJ,MAArB,uBAAiB;IACnB;;;AAGqC;mBAAuB,OAAvB,+BACzB,iCAAkB,cAAC,AAAO,iBAAI,cAAC,AAAO,iBAAI;IAAE;;;AAItD,WAAO,0BAAqB;MAAgB,AAAM,6BAAkB;;IACtE;;AAO8C,MAA5C,AAAY,AAAM,mCAA0B,SAAP,aAAN,cAAQ;AACkC,MAAzE,AAAY,AAAM,qCAAY,AAA2C,wBAA9B,AAAO,kBAAG,kBAAM,AAAO,kBAAG;IACvE;WAG6B;;AACH,MAAlB,aAAO,UAAU;AACvB,UAAI,cAAS,AAAW,UAAD,uBAAU,aAAU,AAAW,UAAD;AAC5C,QAAP;;IAEJ;;0CA7CkC,UAAe,OAAY;IAAZ;IAAY;AACvD,qDAAM,QAAQ;;EAAC;;;;;;;;;;;;;;;;;;;;;;QCkBd;QACA;IADA;IACA;UACM,UAAU,IAAI;UACd,aAAa,IAAI;;EAAK;;;;;;;;;;;;;;;kBNq1BQ;IAE3C;;;AALA;;EAAsB;;;;;;;;;;;;;IMphBT;;;;;;IACA;;;;;;IACI;;;;;;IACH;;;;;;IACJ;;;;;;;AAIR,YAAO,2BAAqB;IAC9B;;AAIgC,MAA9B,oBAAa,AAAO;AACpB,UAAI,YAAM,OAAO,YAAM;AACU,QAA/B,oBAAa,AAAW;AACI,QAA5B,AAAW,4BAAU,SAAI;;AAEH,MAAxB;IACF;;AASoC;IAAqB;;AAIjB;IAAoB;;AAc1D,YAAO,kBAAa;AACpB,YAAO,yBAAoB;AAE3B,UAAI,AAAO,AAAe,+BAAG;AAInB;AACS,4BAAgB;AACnB,4BAAwB;AACtC,eAAO,aAAa,IAAI;AACR,gCAAkB,AAAc,aAAD;AAC7C,cAAI,eAAe,IAAI;AACrB,gBAAI,AAAO,MAAD,IAAI;AAC0C,cAAtD,SAAS,qBAAc,aAAa,EAAE,eAAe;;AAGc,cADnE,SACI,AAAO,MAAD,WAAW,qBAAc,aAAa,EAAE,eAAe;;;AAGvD,6BAAe,AAAc,aAAD;AAC1C,cAAI,YAAY,IAAI,mBAAS,AAAa,YAAD;AACH,YAApC,AAAc,aAAD,UAAU,YAAY;;AAED,UAApC,gBAAgB,AAAc,aAAD;;AAE/B,YAAI,MAAM,IAAI,SAAsB,aAAb,AAAO,MAAD,WAAU,KAAmB,aAAd,AAAO,MAAD,YAAW;AACtC,UAArB,SAAiB;;AAGW,QAA9B,AAAO,8BAAiB,MAAM;;AAIhC,UAAI,AAAO,AAAe,+BAAG;AACW,QAAtC,4BAAsB;;AAEiD,QAAvE,4BAAsB,AAAiB,gCAAU,AAAO;;AAE1D,UAA8B,aAA1B,AAAoB,oCAAS,KAAgC,aAA3B,AAAoB,qCAAU;AAChC,QAAlC,4BAA8B;AACK,QAAnC,6BAA+B;;AAE/B,uBAAO,AAGN;AAFqE,UAApE,6BAAuB,qBAAc,gBAAW;AAChD,gBAAO;;;IAGb;8BAE8C;AAC5C,YAAO,6BAAuB;AAE9B,UAAI,AAAW,UAAD,IAAI,mBAAS,AAAW,AAAQ,AAAgB,UAAzB;AAEQ,QAA3C,8BAAwB;AACxB,cAAO;;AAGT,YAAO,AAAW,UAAD,2BAA0B;AAEhC,iCAAuB,AAAU,UAAU,KAAE;AAC1C,oCAA0B,oBAAoB,GACtD,8BACA,AAAW,UAAD;AAEhB,UAAwB,YAApB,2BAA+B;AAGG,QAApC,8BAAgC;AAChC,4BAAO,uBAAuB,EAAY;;AAG5C,oBAAI,yBAAkB,uBAAuB,EAAE;AAKE,QAA/C,8BAAwB,uBAAuB;AAC/C,cAAO;;AAkBI,0BAAuC,IAChD,mBAAsC,aAA7B,AAAwB,uBAAD,sBAAQ,AAAoB,iCAAM;AACzD,wBAAqC,IAC9C,mBAAqC,aAA5B,AAAwB,uBAAD,qBAAO,AAAoB,gCAAK;AACvD,2BAAwC,IACjD,mBAAmC,aAA1B,AAAoB,gDAAQ,AAAwB,uBAAD,SAAQ;AAC3D,4BAAyC,IAClD,mBAC+B,aAA3B,AAAoB,iDAAS,AAAwB,uBAAD,UAAS;AAEvD,6BAA2B,AAKvC,qBAJ6B,aAA7B,AAAwB,uBAAD,SAAQ,aAAa,EAChB,aAA5B,AAAwB,uBAAD,QAAO,WAAW,EACX,aAA9B,AAAwB,uBAAD,UAAS,cAAc,EACf,aAA/B,AAAwB,uBAAD,WAAU,eAAe,YACtC;AAED,8CAAuB,6BAAyB,gBAAgB;AACnC,MAAxC,8BAAwB,gBAAgB;AACxC,YAAO,qBAAoB;IAC7B;kBAQkC;;AACb,4BAAY,UAAU,eAAV,OAAY;AAC3C,qBAAK,AAAQ,AAAgB;AACF,QAAzB,sBAAe,SAAS;AACS,QAAjC,AAAY,4BAAS;AACrB;;AAGF;AACqC,cAAnC,wBAAiB;QAAM,iBAAU,aAAV,kBAAU;;AAGnC,YAAO,+BAAyB;AACX,MAArB,gBAAW,SAAS;IACtB;;AAM6D,MAA3D,AAAY,AAAM,qCAAY,AAA6B,wBAAhB,WAAG,kBAAM,WAAG;IACzD;;AAImB,MAAjB;AACiB,MAAjB,kBAAY;IACd;;AAI+B,MAA7B,8BAAwB;AACX,MAAP;IACR;WAG6B;;AACH,MAAlB,aAAO,UAAU;AAEvB,UAAI,WAAM,AAAW,UAAD,OAAO,WAAM,AAAW,UAAD;AACxB,QAAjB;;AAGS,0CACP,8BAAwB,UAAU;AACtC,UAAI,AAAU,gBAAS,AAAW,UAAD;AAE/B,sBAAI,6BAA6B;AAER,UAAvB,kBAAY,UAAU;;AAIM,UAA5B,gBAAU,AAAW,UAAD;;;AAIC,QAAvB,kBAAY,UAAU;;IAE1B;;AAIgB,MAAR;AACK,0CAAgC,8BAAwB;AACnE,oBAAI,6BAA6B;AACd,QAAjB,kBAAY;;IAEhB;;AAIyB,MAAvB,sBAAe;AACA,MAAT;IACR;uBAGqC,QAAY;AACP,MAAlC,yBAAmB,MAAM,EAAE,MAAM;AACvC,UAAI,oBAAe,QAAQ,AAAY,+BAAc;AAChC,6CAAa,AAAY;AAC/B,wBAAY,AAAW,AAAQ,UAAT;AACzB,yBAAoC,cAAvB,AAAY;AACgC,QAAnE,AAAO,MAAD,SAAY,AAAK,AAA2C,aAAjC,aAAP,MAAM,IAAG,KAAG,MAAE,SAAS,mBAAG,UAAU;YACzD,KAAI,oBAAe;AAEwD,QADhF,AAAO,MAAD,SACC,AAAK,AAAmE,aAAzD,aAAP,MAAM,IAAG,KAAG,MAAG,AAAY,AAAQ,2CAAc,gBAAG,mBAAQ;;AAEhB,QAA3D,AAAO,MAAD,SAAY,AAAK,AAAmC,aAAzB,aAAP,MAAM,IAAG,KAAG;;IAE1C;kBAGgC;AACO,MAA/B,oBAAc,gBAAgB;AAEpC,oBAAI,AAAQ,AAAgB;AAC1B,YAAI,AAAQ,iBAAG;AAE0D,UADvE,AACK,gBADW,OACsD,SAA3D,sBAAW;;AAExB,YAAI,AAAsB,+BAAG;AACwC,UAAnE,AAAiB,gBAAD,OAAkD,SAA3C,sBAAW;;AAEpC,YAAI,AAAqB,8BAAG;AACwC,UAAlE,AAAiB,gBAAD,OAAiD,SAA1C,sBAAW;;AAEpC,YAAI,AAAoB,6BAAG;AACwC,UAAjE,AAAiB,gBAAD,OAAgD,SAAzC,sBAAW;;;IAGxC;;0CA/RsB,IAAS,IAAS,SAAc;IAGzC;IA+BL;IAIA;IAEA;IAxCc;IAAS;IAAS;IAAc;IAC/B,yBAAE,AAAQ,AAAgB,OAAjB;AADhC;;EACqE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBA1P9B;;AAIrC,YAA+B,aAAxB,AAAgB,eAAD,UAAY,gBAAU,MAAM;IACpD;;;AAII;mBAAuB,OAAvB,+BAAmC;IAAU;;AAGnB,MAA5B,uDAAwB;AACV,gBAAM,oBAAyB,aAAQ;AACvC,yBAAe,oBAAoB,GAAG,EAAE;AACtD,UAAI,AAAa,YAAD,IAAI;AAGiD,QAF9D,AAAO,AAAQ,2BAChB,sEACA;AACJ;;AAQD,MAND,mBACE,YAAY,EACZ,aACS,CACP;IAGN;;AAI4B;IAAC;eAGA;AACF,MAAzB,sBAAe,SAAS;AACJ,mBAAS,6BAAc;AAC3B,MAAhB,gBAAU,MAAM;AACiB,MAAjC,AAAY,4BAAS;AACkB,MAAvC,AAAY,0BAAO,AAAQ;AACW,MAAtC,AAAQ,AAAgB,mCAAM;AACf,MAAf,AAAO,MAAD;IACR;;iDArD+B,IAAW,IAAe,SAAa;AAChE,4DAAM,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK;AAChC,mBAAK;AACkB,MAArB;;EAEJ;;;;;;;;;;;;;;MAEY,oDAAqB;YAAG;;;;;;;;;mBAsDW;;AAC7C,UAA4B,YAAxB,AAAgB,eAAD,UAAY;AAE7B,cAAO;;AAGT,qBAAK,AAAgB,AAAQ,AAAgB,eAAzB;AAGlB,cAAO;;AAGE,6BACP,AAAgB,AAAQ,AAAgB,eAAzB;AACR,2BAAiB,AAAQ,AAAgB;AACpD,uBAAI,gBAAgB,EAAI,cAAc;AAEpC,cAAO;YACF,gBAAK,cAAc;AAIxB,cAAO;;AAEY,mDAAY,AAAgB,eAAD;AAC9C,uBAAK,qDAAqB,SAAS,EAAE;AAEnC,gBAAO;;AAEM,8BACsB,aAA/B,AAAoB,AAAK,qDAAQ,AAAoB,AAAK;AACjD,8BACY,aAArB,AAAU,AAAK,SAAN,4BAAc,AAAU,AAAK,SAAN;AAEpC,cAAI,AAAc,aAAD,KAAI;AACnB,kBAAO;;AAGI,gCAAkB,AAAc,aAAD,GAAG,aAAa;AAC5D,gBAAO,AAAE,AAAmB,KAAhB,eAAe,IAAI,AAAgB,eAAD,IAAI,wBAC9C,AAA4C,wCAAhB,eAAe;AAC/C,gBAAO,AAAI,OAAE,eAAe;;;IAGlC;;AAGqC;IAAI;;AAIvC,WAAY,uBAAR;AACF,cAAO;;AAGU,oDAAe;AAClC,YAAO,AAAa,aAAD;IACrB;eAK6B;AAC3B,oBAAI,AAAQ,AAAgB;AACE,QAA5B,wBAAkB,SAAS;;AAEF,QAAzB,qBAAe,SAAS;;AAEC,MAA3B,AAAe,6BAAQ;IACzB;qBAEiC;AACN,MAAzB,sBAAe,SAAS;AACH,MAArB,gBAAU;AACuB,MAAjC,AAAY,4BAAS;AACkB,MAAvC,AAAY,0BAAO,AAAQ;AACW,MAAtC,AAAQ,AAAgB,mCAAM;IAChC;gCAE8C,QAAgB;AAC5D,YAAO,MAAM,IAAI;AACjB,YAAO,SAAS,IAAI;AACN,yBAAe,AAAO,MAAD;AACnC,YAAO,YAAY,IAAI;AACvB,YAA0B,AAAmB,cAAtC,AAAa,YAAD,wBAAU,AAAU,SAAD,WACd,aAApB,AAAa,YAAD,yBAAW,AAAU,SAAD;IACtC;wBAEoC;;AAClC,UAAc,uBAAV,SAAS,eACT,qDAAqB,SAAS,EAAE,2CAChC,AAAU,SAAD;AACX;AAC8C,eAApB;UAAS,eAAS,aAAT,gBAAS;;AAEJ,QAAxC,AAAU,SAAD,UAAU;AACA,QAAnB,gBAAU,SAAS;AACJ,QAAf,AAAQ;AAC8B,QAAtC,AAAQ,AAAgB,mCAAM;;AAIL,QAAzB,sBAAe,SAAS;AAmBtB,QAdF,AAAY,yBAAI,0CACF,AAAsB,iDACnB;;AACuC,YAApD,gBAAU,0BAAoB;AAC9B;AACqB,4DAAe;AAED,mBADjC,wBAAiB;cAAM,qBAAgB,aAAhB,mCACnB,AAAa,YAAD;;AAEe,YAAjC,AAAY,4BAAS;AACkB,YAAvC,AAAY,0BAAO,AAAQ;AACZ,YAAf,AAAQ;AAC8B,YAAtC,AAAQ,AAAgB,mCAAM;;;IAItC;0BAayC;;AACzB,uBAAa,AAAO,MAAD;AACpB;AACN;AAEP,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAkB,oCAAQ,IAAA,AAAC,CAAA;AAC1B,wBAAY,AAAiB,gCAAC,CAAC;AAClD,uBAAK,AAAU,SAAD;AACZ;;AAGY,4BAAgB,AAAU,SAAD;AAC1B,kCACW,aAApB,AAAc,aAAD,uBAAS,AAAc,aAAD;AAE5B,mBAAO,qDAAqB,SAAS,EAAE,MAAM;AAC7C,wBAAY,AAAoB,mBAAD,GAAG,cAAc;AAC3D,sBAAI,IAAI,KAAI,SAAS;AACW,UAA9B,qBAAqB,SAAS;AACM,UAApC,iBAAiB,mBAAmB;AACzB,4BAAc,AAAc,AAAM,AAAoB,aAA3B,UAAU,AAAW,UAAD,UACtD,AAAc,AAAO,aAAR,WAAW,AAAW,UAAD;AACtC,cAAI,WAAW;AAEb;;;;AAKN,UAAI,kBAAkB,IAAI;AACxB;AAC2C,eAAzC,wBAAiB;UAAM,sBAAgB,aAAhB,uBAAgB;;AAEG,QAA5C,AAAkB,kCAAO,kBAAkB;AAC3C;AAE8B,UADJ,AAAS,yDAC7B,AAAkB;;AAExB;AACgD,gBAAtB;UAAS,kBAAW,aAAX,mBAAW;;AAEZ,QAAlC,AAAmB,kBAAD,UAAU,MAAM;AAClC,cAAO,mBAAkB;;AAG3B;AACiD,eAAvB;QAAS,oBAAY,aAAZ,qBAAY;;AAE5B,mBAAS,4BAAa,MAAM;AAC/C;AAIgE,eAH9D,wBAAiB;;QACb,+BAA0B,aAA1B,gCAA6B;QAC7B,mCAC6B,aAA3B,AAAO,MAAD,qCAAuB,AAAO,MAAD;;;AAE3C,YAAO,OAAM;IACf;;kDApMgC,IAAW,IAAe,SAAa;IA+DlD,uBAAiB,iCAAqB;AA9DrD,6DAAM,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICvIzB;;;;;;IACG;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;;AAS6C,2BAAxD,wBAAe,0BAAqB;AAeK,MAAzC,AAAa,AAAM,2CAAgB;AAEsC,MAAzE,oBAAc,AAAa,kCAA6B,yCAAC,QAAQ;AACzC,wBAAmB;AAIrC,MAHN,AAAY,WAAD,eAAa;AAIO,MAA/B,AAAY,2BAAO,WAAW;AACX,yBACf,AAAqB,2CAAe;AACxC,UAAI,YAAY,IAAI;AACc,QAAhC,AAAY,2BAAO,YAAY;;AAEoC,QAA9D,AAAO,AAAQ,2BAAK,AAAyC,8CAAP;;AAE7D,YAAO;IACT;;AAGqC;IAAI;;;AAOb,WAH1B,AAAa;MACT,iBAAY,AACd,wBAD2B,WAAG,kBAAM,WAAG;MACrC,aACF,SADa,cAAM;MACjB,cAAsB,SAAV,eAAO;;IACzB;mBAG4C;;AAC1C,YAAO,AAAgB,AAAO,gBAAR,WAAW,cAAS,MAAM;IAClD;;+CApD2B,QAAa,IAAS,IAAS,OAAY;IAHrD;IACD;IAEW;IAAa;IAAS;IAAS;IAAY;AAAtE;;EAA6E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACC9D,wBAAmB,AAAO,AAAW;AACrC,yBAAoB,AAAO,AAAY;AACgB,MAApE,yBAA2B,qBAAS,KAAG,KAAG,WAAW,EAAE,YAAY;AACxB,MAA3C,+BAAiC;AACZ,MAArB,uBAAiB;IACnB;;AAGqC;IAAsB;;AAIzD,YAAO,2BAAqB;IAC9B;;IAGc;;wCA1BgB;AAAY,mDAAM,QAAQ;AACvB,IAA/B,oBAAqB;EACvB;;;;;;;;;;;;;;;;MR0CE;;;;;;;mCALmB;;;AACO,MAA1B,AAAiB,8BAAI;IACvB;;;;;;;;;;;;;;cAkJkC;AACwB,MAAxD,0BAAmB,aAAnB,wCAAsB,AAAgB,eAAD;AACiB,MAAtD,yBAAkB,aAAlB,uCAAqB,AAAgB,eAAD;AACI,MAAxC,kBAAW,aAAX,gCAAc,AAAgB,eAAD;AACqB,MAAlD,uBAAgB,aAAhB,qCAAmB,AAAgB,eAAD;AACkB,MAApD,wBAAiB,aAAjB,sCAAoB,AAAgB,eAAD;AACmC,MAAtE,iCAA0B,aAA1B,+CAA6B,AAAgB,eAAD;AAC8B,MAA1E,mCAA4B,aAA5B,iDAA+B,AAAgB,eAAD;AACgB,MAA9D,6BAAsB,aAAtB,2CAAyB,AAAgB,eAAD;IAC1C;;4CAjDwB;IAMpB,0BAAqB;IAIrB,yBAAoB;IAGpB,kBAAa;IAGb,uBAAkB;IAIlB,wBAAmB;IAInB,iCAA4B;IAO5B,mCAA8B;IAM9B,6BAAwB;IArCJ;;EAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmVlC;;sDAhDK;;;;EAgDL;;;;;;;;;;;;;;;;;QAi2BS;QACA;QACA;IAFA;IACA;IACA;;EACL;;;;;;;;;;;ISt0CgB;;;;;;;AAI2D,MAA3E,oBAAa,AAAO,AAAW,oCAAmB,mCAAgB;AACrC,MAA7B,+BAAyB;AACJ,MAArB,uBAAiB;IACnB;;AAKyD,MADvD,AAAuB,gCAAA,OAAvB,+BACY,yBAAkB,mCAAgB,iBADvB;AAEvB,YAAO;IACT;;;AAIE,WAAO,0BAAqB;MACxB,AAAM,6BAAkB;;IAC9B;;AAIkE,MAAhE,AAAY,AAAM,qCAAY,iCAA0B;IAC1D;WAG+B;;AACL,MAAlB,aAAO,UAAU;AAEvB,UAAI,AAAU,AAAW,UAAD,YAAU;AAChC;;AAGG,0BAAgB;AACrB,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAQ,wBAAQ,IAAA,AAAC,CAAA;AACnC,YAAI,AAAO,oBAAC,CAAC,KAAK,AAAW,AAAO,UAAR,gBAAS,CAAC;AAChB,UAApB,gBAAgB;AAChB;;;AAIJ,UAAI,aAAa;AACR,QAAP;;IAEJ;;4CAjDsC;IAAe;AAC/C,uDAAM,QAAQ;;EAAC;;;;;;;;;;;;;;;;;;;;;;ICDP;;;;;;IACD;;;;;;IACA;;;;;;;AAMX,YAA+D,UAAtD,sBAAW,qBAAQ,cAAK,wBAAU,cAAK,wBAAS,YAAG;IAC9D;;uCALyB,OAAY,OAAY;IAAxB;IAAY;IAAY;;EAAI;;;;;;;;;;;;;;;;;;;IAwB3B;;;;;;IAuEK;;;;;;;AA1EZ,kCAAc,AAAa,uBAAK;IAAI;;AAMrD,qBAAO;AACP,YAAO,AAAO,qBAAC;IACjB;qBAE+B;AAC7B,qBAAO;AAC4B,MAAnC,AAAO,oBAAC,0BAAsB,KAAK;IACrC;;AAK6B,YAAmB,cAAnB,6BAAsB;IAAC;cAG7B,OAAc,OAAc;AACjD,qBAAO;AACa,MAApB,2BAAkB,aAAlB,4BAAkB;AAMqC,MAAvD,AAAQ,2BAAY,0BAAoB,AAAQ;AACH,MAA7C,AAAQ,mBAAI,6BAAc,KAAK,EAAE,KAAK,EAAE,GAAG;AAE3C;AAC+C,QAA7C,WAA4C,SAApC,sBAAW,iCAAoB;;IAE3C;iBAG0B,OAAc,OAAc;AACpD,qBAAO;AACwC,MAA/C,oBAAe,6BAAc,KAAK,EAAE,KAAK,EAAE,GAAG;AAE9C;AACkD,QAAhD,WAA+C,SAAvC,sBAAW,oCAAuB;;IAE9C;0BAI0C;AACxC,qBAAO;AACP,YAAO,sBAAe;AACI,QAAxB,eAAU,MAAM,IAAI,GAAG;AACH,QAApB;;IAEJ;;AAIE,qBAAO;AAGP,YAAO,sBAAe;AACA,QAApB,2BAAkB,aAAlB,4BAAkB;AAClB,sBAAI;AACkB,UAApB;;AAGF;AACuC,UAArC,WAAoC,SAA5B,sBAAW,yBAAY;;;IAGrC;eAK8C;AAC3B,MAAjB,AAAU,qBAAI,EAAE;AAChB,YAAO;AAGwC,QAA7C,wBAAkB,cAAM,AAAU,wBAAO,EAAE;;IAE/C;qBAI4C;AAC1C,YAAA,AAA2C,wBAAN,oCAAW,QAAC,KAAM,AAAQ,QAAA;IACjE;;AAME,qBAAO;AACkB,kBAAa,uBACpC,YACiB,0CAAC,SAAS,AAAa;AAE1C,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAU,0BAAQ,IAAA,AAAC,CAAA;AAClB,QAAnB,AAAS,AAAG,sBAAF,CAAC,EAAE,KAAK;;AAGpB;AACoD,QAAlD,WAAiD,SAAzC,sBAAW,qCAAwB,KAAK;;IAEpD;uBAGiC;AAAgB,wBAAW;;;AAIvC,kBAAQ,mBAAa,AAAQ;AAChD,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAQ,wBAAQ,IAAA,AAAC,CAAA;AACf,oBAAQ,AAAO,oBAAC,CAAC;AACuB,QAA5D,AAAK,KAAA,QAAC,CAAC,EAAI,AAAmB,6BAAG,CAAC,GAAG,AAAW,gBAAP,KAAK,IAAI,AAAU,gBAAN,KAAK;;AAE7D,YAAgD,UAAvC,sBAAW,mBAAO,AAAM,KAAD,QAAM,SAAM;IAC9C;;8CA9H6B;;IA+EE,kBAAgC;IA9EtC,2BAAE;IACb,gBAAiB,6BAAC,6BAAc,MAAM,MAAM,gBAAgB;AAF1E;;EAE4E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBCRpC;AAAd;AACf;AAET;AACyD,UAAvD,YAAW,MAAM,AAAa,YAAD,MAAM;;cACH;AAAhC;AACA,gBAAI,AAAE,AAAW,CAAZ,gBAAe;AAEiD,cAD9D,AAAO,AACP,2BAAK,AAAwD,+CAApB,AAAE,CAAD,QAAK;AACpD;;AAEO,cAAP;;;;;AAIJ,YAAI,AAAS,QAAD,IAAI;AAE6C,UAD3D,WAAM,4BACF;;AAGc,4CAChB,AAAK,oBAAO,AAAK,oBAAO,AAAS,AAAO,QAAR;AACpC,YAAI,AAAa,YAAD,IAAI;AAEyC,UAD3D,WAAM,4BACF;;AAGN,sBAAI;AACgC,UAAlC,0BAAoB;;AAEsB,UAA1C,0BAAoB;;AAKtB,yBAAI,sBAA+B;AAEuC,UADxE,AACK,sCAAc,UAAU,AAAsB,kBAAhB,yBAAc,KAAoB;;AAGvE,sBAAwC,aAAY;AAA1B,2BAA1B;AACe,0CAAS,AAAU,UAAA,QAAC;AACb,4CAAa,AAAU,UAAA,QAAC;AAE5C,mBAAa,gBAAiB,WAAU;AACX,yDAAY,aAAa;AACvC,2CAAQ,AAAS,SAAA,QAAC;AACL,8BAA8B;AACxD,qBAAY,aAAc,AAAU,UAAD;AACjC,kBAAI,UAAU,KAAI;AACoC,gBAApD,AAAW,WAAA,QAAC,UAAU,EAA8B,SAAvB,AAAS,SAAA,QAAC,UAAU;;;AAIc,YADnE,AAAkB,sCACd,MAAM,EAAE,AAAyC,kBAAlC,AAAa,YAAD,aAAa,KAAK,KAAE,KAAI,WAAW;;;MAGxE;;;AAImC,MAAjC,yBAAmB;AAEiD,MADpE,AAAiB,6CACI,AAAoB,kBAAd,uBAAY;IACzC;;AAI8B;;AACgB,QAA5C,kDAAM,OAAmB;AACkB,QAA3C,mDAAM,OAAkB;MAC1B;;;AAI0B,MAAxB,0BAAoB;AACG,MAAvB,yBAAmB;AACnB,oBAAI;AACyB,QAAtB,AAAS,AAAM;;IAExB;;;IArFa;IACA;;EAqFf;;;;;;;;;;;;;;;;;AAOI,oBAAI;AACF,cAAoB;;AAEpB,cAAO;;IAEX;kBAKS,QACA,OACa;AAMpB,UAAkB,YAAd,sBAA+B;AACb,QAApB,SAAS,AAAW,eAAR,MAAM;;AAGpB;AACsB,uBAAgB,kBAAS,MAAM,EAAE,KAAK,EAAE,WAAW;AAOpE,QANH,AAAoB,gCAAI,AACnB,AACA,QAF2B,0BAEtB,QAAC,KAAW,AAAS,AAAM,wBAAI,QAAQ,uCAAY,QAAS;AAEF,YAD7D,AAAO,AACP,2BAAK,AAAuD,uDAAb,MAAM,uBAAK,CAAC;AAChE,kBAAO;;;YAEF;AAEoD,QADtD,AAAO,AACP,2BAAK,AAAgD,gDAAb,MAAM,uBAAK,CAAC;;IAE7D;;AAKE,YAAc,8BAAK;IACrB;;;IA5CyB,4BAAoC;;EAU7C;;;;;;;;;;;;;;;kBAqDP,QACA,OACa;AAEQ,sBAAiB;AACR,MAArC,AAAU,AAAM,SAAP,oBAAkB;AACU,MAArC,AAAU,AAAM,SAAP,sBAAoB;AACI,MAAjC,AAAU,AAAM,SAAP,oBAAkB;AACc,MAAzC,AAAU,AAAM,SAAP,sBAAoB;AAC7B,UAAI,AAAW,WAAA,QAAC,YAAY;AACsB,QAAhD,AAAU,AAAM,SAAP,qBAAmB,AAAW,WAAA,QAAC;;AAE1C,UAAI,AAAW,WAAA,QAAC,aAAa;AACuB,QAAlD,AAAU,AAAM,SAAP,sBAAoB,AAAW,WAAA,QAAC;;AAEf,MAA5B,AAAU,SAAD;AAE2B,MAA/B,AAAS,AAAK,4BAAO,SAAS;AACzB,2BAAiB,AAAU,SAAD;AAEgB,MAApD,AAAU,AAAM,SAAP,sBAAoB,AAAuB,eAApB,MAAM;AAEhB,sBAAY;AAEzB;AAET,eAAK;AACH,YAAI,AAAU,SAAD,kBAAgB,cAAc;AACvB,UAAlB,AAAU,SAAD;AACW,UAApB,AAAU,SAAD;;AAET,wBAAa,AAAM,AAA2B,mCAAhB,cAAc,OAAI;AAEU,YADxD,AAAU,SAAD,eACL,mBAAU,AAAwC,6CAAP,MAAM;;AAEX,YAA1C,gBAAM,oDAAwB,WAAW;;;;;AAKrB,yBAA+B;AAChB,MAAzC,AAAY,YAAA,QAAC,eAAiB,AAAW,eAAR,MAAM;AACZ,MAA3B,AAAY,YAAA,QAAC,OAAS,KAAK;AAC3B,UAAI,AAAW,WAAA,QAAC,YAAY;AACuB,QAAjD,AAAY,YAAA,QAAC,cAAgB,AAAW,WAAA,QAAC;;AAE3C,UAAI,AAAW,WAAA,QAAC,aAAa;AACwB,QAAnD,AAAY,YAAA,QAAC,eAAiB,AAAW,WAAA,QAAC;;AAE/B,gCAAsB,AAAa,AAC3C,AACA,YAF0C,2BACtC,QAAQ,QAAwC,SAA7B,IAAI,oBAAI,AAAY,YAAA,QAAC,IAAI,KAAE,+BAC7C;AACc,0BAAqB;AACd,MAA/B,AAAc,aAAD,QAAQ;AAC0C,MAA/D,AAAc,aAAD,eAAa,AAAqC,2BAAtB,mBAAmB;AACpB,MAAnC,AAAS,AAAK,8BAAO,aAAa;AAKvC,UAAI,AAAO,AAAc,MAAf,4BAAwB;AACd,QAAlB,AAAU,SAAD;AACT;;AAG6B,MAA/B,iBAA0B;AACb,MAAb,AAAW,WAAA;AAE8B,MAAzC,AAAoB,gCAAI,AAAU,SAAD;IACnC;;;AA/E+B;;EAAG;;;;MAGd,uCAAW;;;MAET,4CAAgB;;;MAChB,kDAAsB;;;;;;;;;;;ICpJ9C;;8CAZK;;;;EAYL;;;;;;;;;;;;;;;;EAeA;;;;MAXmB,kBAAE;;;MACF,mBAAG;;;MACH,mBAAG;;;MACH,kBAAE;;;MACF,kBAAE;;;MAGF,mBAAG;;;MACH,qBAAK;;;MAEL,sBAAM;;;;;;;IAOb;;;;;;IACU;;;;;;;yCAHC,OAAY;IAAZ;IAAY;;EAAK;;;;;;;;;;;;;;;;;ICE5B;;;;;;;AAqBiD;IAAO;;AAOhE,qBAAK;AAC+B,QAAlC,oCAA8B;AAI5B,QAHF,wBAAkB;AACmB,UAAnC,oCAA8B;AACX,UAAnB;;;IAGN;;;AAMsB,WAApB;0BAAY;IACd;;AAMI,MAFF,AAAQ,wBAAQ,SAAyB,OAAsB;AAC9C,QAAf,AAAM,KAAD;;AAE8C,MAArD,gBAAmD;IACrD;;AAcE,oBAAI,AAAO,AAAa;AACL,QAAjB;AACA;;AAEF,UAAmB,aAAf,AAAQ,uCAAS;AACQ,4BAAgB,AAAQ,AAAO;AAGxD,QAFF,AAAc,aAAD,QAAM,SAAgB,GAAkB,MACjC,aAAX,AAAE,CAAD,0BAAY,AAAE,CAAD;AAE8B,QAArD,gBAAmD;AACnD,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAc,aAAD,YAAS,IAAA,AAAC,CAAA;AACpB,sBAAQ,AAAa,aAAA,QAAC,CAAC;AACvB,UAArB,AAAM,KAAD;AACL,cAAI,AAAE,CAAD,gBAAG;AAEsB,YAA5B,AAAO,qBAAC,AAAM,KAAD,QAAU,KAAK;;AAGb,YAAf,AAAM,KAAD;;;;IAIb;mBAGoC;AACR,MAA1B,AAAW,0BAAO,OAAO;IAC3B;sBAQyD;;AACxC,kBAAQ,AAAO,qBAAC,KAAK;AACpC,UAAI,AAAM,KAAD,IAAI;AACX,sBAAI;AAC+B,UAAjC,AAAY;;AAEsC,QAApD,cAAQ,eAAO,KAAC,KAAK,QAAI,8BAAe,KAAK,EAAE,OAAhC;AACa,QAA5B;;AAEA,sBAAI;AAC8B,UAAhC,AAAY;;;AAGL,MAAX,AAAM,KAAD;AACL,YAAO,MAAK;IACd;;;;QA/H6B;IAqBV,mBAA0B,iBAAI;IAcJ,gBACA;IAExC,oCAA8B;IAtCN;AAQX,SAPhB,AAAW;IACP,gBAAW;IACX,kBAAa;IACb,gBAAW;IACX,WAAM;IACN,YAAO;IACP,aAAQ;IACR,cAAS;;AACwB,IAAhC,AAAS,AAAK,4BAAO;AACS,IAAnC,4CAA2B;EAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;UA6HsC;AACxB,MAAZ;AACmE,MAAnE,6CAAe,iDAAiC,kBAAkB;IACpE;;AAQI,YAA0B;IAAQ;;AAKlC,YAA6B;IAAQ;wBAWe;AAStD,qBAAK,AAAO,AAAa,iDACrB,mFACA,qFAAyB,SAAS;AACpC,cAAO;;AAET,YAAO;IACT;;;AAKyB,WAAvB;0BAAc;AACK,MAAnB,6CAAe;IACjB;oCAEqD;AAKrB,kBAAQ,AAAU,SAAD;AAC/C,YAAO,AAAU,AACY,UADb,gBAAe,QAC3B,AAAM,AAAW,KAAZ,eAAe,QACpB,AAAM,AAAY,KAAb,gBAAgB;IAC3B;YAIkB,WACQ;AAExB,YAAO,8CAAgB;AACO,kBAAQ,AAAU,SAAD;AAC1B,kBACM,AAAa,6DAAkB,KAAK;AAE/D,oBAAI;AACF,YAAI,AAAU,AAAW,SAAZ,gBAAe;AACO,UAAjC,AAAY;;AAEsB,UAAlC,AAAY;;;AAIE,mBAAS,AAAM,KAAD,aAAa,SAAS,EAAE,WAAW;AACnE,UAAI,MAAM,IAAI;AACZ,cAAO,OAAM;;AAGmC,MAAlD,SAAS,iBAAW,SAAS,EAAE,WAAW,EAAE,KAAK;AACR,MAAzC,AAAM,KAAD,kBAAkB,SAAS,EAAE,MAAM;AACxC,YAAO,OAAM;IACf;yBAakB,WACQ;UACpB;UACA;UACG;UACU;AAEa,kBAAQ,AAAU,SAAD;AAC1B,kBACM,AAAa,6DAAkB,KAAK;AAE/D,YAAO,AAAM,MAAD,sBACV,AAAU,SAAD,cACT,WAAW,UACJ,KAAK,OACP,GAAG,eACK,WAAW,iBACT,aAAa;IAEhC;;;;EAuBF;;;;;;;;;MAzIsB,0CAAY;;;;MAiBpB,oEAAsC;YAAG;;;;;;;;;;AAkIjD;0BAAU,6CAAI;IAA2B;iBAM3B,WACQ,aACT;;AAEa,MAA5B,AAAM,KAAD,aAAa,SAAS;AACd,sBAAY,AAAU,SAAD;AAEL,MAA7B,AAAM,KAAD,YAAY,WAAW;AAEV;AAEP,wBAAuC,YAA1B,SAAS,eAAT,OAAW,cAAS,eAApB,OAA6B;AACrD,qBAAK,UAAU,KAAqC,aAAjC,AAAM,AAAqB,KAAtB,6CAA+B,AAAY,WAAD;AACG,QAAnE,SAAS,kCAA4B,KAAK,EAAE,SAAS,EAAE,WAAW;;AAIlE,cAAkB,UAAX,UAAU,KAAI,AAAY,WAAD;AACkC,QAAlE,SAAS,iCAA2B,KAAK,EAAE,SAAS,EAAE,WAAW;;AAEjD,MAAlB,AAAM,KAAD;AACL,YAAO,OAAM;IACf;0BAG6C,WAAe,OAAW;AACrE,YAAO,AAAU,SAAD,gBAAe;AACD,kBAAQ,AAAU,SAAD;AAC1B,kBACM,AAAa,6DAAkB,KAAK;AAElD,iBAAO,AAAU,AAAW,SAAZ,yBAAsB,KAAK,EAAE,GAAG;AAC1C,+BAAqB,AAAU,SAAD,iBAAgB,IAAI;AAEhC,MAArC,AAAM,KAAD,2CAAa,kBAAkB;AACT,MAA3B,AAAM,KAAD;AACgB,uBAAa,AAAM,KAAD;AACrB,MAAlB,AAAM,KAAD;AACL,YAAO,AAAW,WAAD;IACnB;6BAGyD,WAC7B,aAAuB;AACjD,YAAO,AAAU,AAAW,SAAZ,gBAAe,yBAAM;AAEP,kBAAQ,AAAU,SAAD;AAC1B,kBACM,AAAa,6DAAkB,KAAK;AACnC,MAA5B,AAAM,KAAD,aAAa,SAAS;AACjB,qBAAW,AAAM,KAAD,SAAS,WAAW,EAAE,MAAM;AACpC,MAAlB,AAAM,KAAD;AACL,YAAU,kCAAqB,QAAQ;IACzC;kCAe6D,OAC5C,WAAmC;AACrC,kBAAQ,AAAY,WAAD;AACnB,8BAAoB,AAAM,AAAuB,KAAxB;AAC/B,8BAAoB,AAAM,AAAqB,KAAtB;AACnB,+BAAqB,AAAM,KAAD;AAC1B,mBAAS,AAAM,AAAqB,KAAtB;AAGyC,MADpE,oBACI,4DAA2B,iBAAiB,EAAE,iBAAiB;AACtD,gCAAyC,aAAnB,kBAAkB;AACrD,YAAO,kCACL,AAAY,WAAD,uBACG,aACP,KAAK,UACJ,MAAM,iBACC,MAAM,cACT,MAAM,qBACC,iBAAiB,qBACjB,iBAAiB,sBAChB,kBAAkB,uBACjB,mBAAmB,SACjC;IAEX;iCAU4D,OACxC,WAAmC;AAExC,kBAAQ,AAAY,WAAD;AACnB,8BAAoB,AAAM,AAAuB,KAAxB;AAC/B,8BAAoB,AAAM,AAAqB,KAAtB;AACnB,+BAAqB,AAAM,KAAD;AAE1B,0BAAgB,AAAM,AAAsB,KAAvB;AAE3B;AACA;AACG,qBAAW,AAAU,AAAgB,SAAjB;AAC9B,UAAI,AAAS,QAAD,IAAI;AACQ,QAAtB,SAAS,aAAa;;AAGwB,QAA9C,aAAa,AAAM,AAAqB,KAAtB;AACqC,QAAvD,SAAS,sBAAS,aAAa,EAAW,aAAT,QAAQ,iBAAG,UAAU;;AAIY,MADpE,oBACI,4DAA2B,iBAAiB,EAAE,iBAAiB;AACnE,YAAyB,aAAlB,iBAAiB,kBAAI,iBAAiB;AAChC,gCAAyC,aAAnB,kBAAkB;AACrD,YAAO,kCACL,AAAY,WAAD,uBACG,cACP,KAAK,UACJ,MAAM,cACF,UAAU,iBACP,aAAa,qBACT,iBAAiB,qBACjB,iBAAiB,sBAChB,kBAAkB,uBACjB,mBAAmB,SACjC;IAEX;sCAaW,mBAA0B;AACnC,UAAsB,aAAlB,iBAAiB,kBAAI,iBAAiB;AACxC,cAAO,kBAAiB;;AAG1B,UAAsB,AAAoB,aAAtC,iBAAiB,iBAAG,iBAAiB,IAAG;AAC1C,cAAO,kBAAiB;;AAIoB,MAD9C,WAAM,mBAAU,iCAAqB,iBAAiB,2BAClD,iCAAqB,iBAAiB;IAC5C;;;;EACF;;;;;;;;;;;;MAzKmC,0CAAS;;;;;;;;;;;;;AAkLtC;0BAAU,gDAAI;IAA8B;iBAS9B,WACQ,aACT;AAEF,iBAAO,AAAU,SAAD;AACC,kBAAQ,AAAU,SAAD;AAC/C,YAAO,IAAI,IAAI;AAG0B,MAAzC,AAAe,6BAAO,AAAM,KAAD;AACL,4BAClB,+BAAgB,uBAAgB,IAAI,EAAE,KAAK,EAAE,AAAY,WAAD;AAC/B,mCACzB,sCAAuB,uBAAgB,IAAI,EAAE,KAAK;AACzB,mCACzB,sCAAuB,uBAAgB,IAAI,EAAE,KAAK;AAMjD,6BAAmB;AAGpB,cAAI;AACR,cAAQ,gBAAgB;AACA,kBAAM,qBAAc,IAAI,EAAE,CAAC;AAEtB,QAA3B,AAAgB,eAAD,QAAQ,GAAG;AACQ,QAAlC,AAAuB,sBAAD,QAAQ,GAAG;AACC,QAAlC,AAAuB,sBAAD,QAAQ,GAAG;AAEpB,QAAb,IAAI,AAAI,GAAD;AACP,YAAa,YAAT,AAAI,GAAD,OAAuB;AACL,UAAvB,mBAAmB;;;AAIb,sBAAY,AAAgB,AAAM,eAAP;AACxB,uBAAa,AAAM,AAAqB,KAAtB;AAClB,0BAA0B,aAAV,SAAS,iBAAG,UAAU;AAEtC,mBAAS,AAAM,AAAS,KAAV,aAAa,OAClC,aAAa,GACb,AAAoC,mBAA3B,SAAS,EAAE,AAAM,KAAD,0BAAa,UAAU;AAE9B,mBAAS,iCAC/B,AAAY,WAAD,uBACG,AAAU,SAAD,KAAI,uBACP,AAAM,KAAD,0CACqB,aAAzB,AAAM,KAAD,mDAClB,MAAM,iBACC,aAAa,cAChB,UAAU,qBAGH,AAAuB,sBAAD,2BAGtB,AAAuB,sBAAD,eAClC,AAAY,WAAD,eACX,AAAgB,eAAD;AAExB,YAAO,OAAM;IACf;0BAG6C,WAAe,OAAW;AACrE,YAAO,AAAU,SAAD,gBAAe;AAClB,iBAAO,AAAU,SAAD;AACC,kBAAQ,AAAU,SAAD;AACN,MAAzC,AAAe,6BAAO,AAAM,KAAD;AAC3B,YAAO,0BACL,uBACA,AAAU,SAAD,mBACT,IAAI,EACJ,KAAK,EACL,GAAG;IAEP;6BAGyD,WAC7B,aAAuB;AAEjD;IACF;;;IA3FoC,wBAC3B,AAAgB;;EA2F3B;;;;;;;;;;;;;;MA9FsC,6CAAS;;;;;;;;;;;;;;;;;;;IAoLhC;;;;;;;;AAOgB;mBAAqB,OAArB,6BACzB,mBAAY,AAAe,AAA6B,kCAAjB,AAAO;IAAgB;;AAE1C,YAAA,AAAO,2BAAY;IAAI;;AACpB,YAAA,AAAO,AAAS,2BAAG;IAAI;WAMtB;AACf,wBAAuB,AAA2B,YAApC,AAAI,GAAD,OAAuB,mCACtC,YAAT,AAAI,GAAD,OAAuB;AACpB,qBAAW,AAAI,GAAD;AACd,iCACN,wBAAiB,cAAO,mBAAa,QAAQ;AAIjD,wBAAQ;AACO,wBAAY,yBACvB,uBACA,eACA,cACA,kBACA,oBAAoB;AAKtB,YAAc,aAAV,SAAS,kBAAI;AACf;;AAKS,6BAAiB,AAAY,qBAAG;AAIhC,yBAAa,yBACY,UAA/B,+BAAe,wBACC,AAAI,aAAjB,AAAM,uBAAS,MAAK,AAAO;AAEnC,YAAI,UAAU,cAAI;AAGH,+BAA2B,aAAV,iCAAY;AAChC,8BAAgB,kBACxB,cAAc,EACd,cACA,kBACA,oBAAoB;AAEiD,UAAvE,AAAM,iBAAI,AAAM,AAAqC,yBAA3B,kBAAY,aAAa,iBAAI,AAAO;cACzD,KAAI,cAAc;AACb,8BACN,kBAAY,kBAAW,cAAO,kBAAY,oBAAoB;AAClE,cAAI,AAAc,aAAD,IAAI,oBAAoB;AAMvC;;AAEmC,UAArC,8BAAuB,aAAa;AACT,UAA3B,oBAAc,aAAa;;AAIQ,UAAnC,8BAAuB;;;AAI3B,oBAAI;AACF;;AAGF,UAAI,WAAW;AACmB,QAAhC,8BAAuB,QAAQ;;AAEX,MAAtB,oBAAc,QAAQ;IACxB;;UAEkC;AACtB,iCAAuB,wBAC/B,cACA,kBACA,OAAO;AAGmD,MAA5D,AAAM,iBAAI,AAAM,yBAAU,kBAAY,oBAAoB;AACtC,MAApB,mBAAa,OAAO;AACpB,UAAI,AAAM,AAAO,uBAAG,AAAO;AACF,QAAvB,yBAAmB;;IAEvB;kBAOuB,UAAiB,MAAU,OAAW;AAC3D,YAAO,AAAE,AAAwB,kBAArB,KAAK,KAAU,aAAN,KAAK,iBAAG,GAAG,KAAQ,aAAJ,GAAG,KAAI,AAAK,IAAD;AAE3C,0BAAM,oBAAc,KAAK,GAAS,aAAN,KAAK,IAAG;AACpC,iBAAO,GAAG;AACd;AACY,kBAAmB,EAAR,aAAJ,GAAG,iBAAG,IAAI,KAAK;AACnB,oBACT,yBAAkB,uBAAgB,eAAQ,IAAI,EAAE,KAAK,EAAE,GAAG;AAC9D,YAAU,aAAN,KAAK,iBAAG,QAAQ;AACT,UAAT,MAAM,GAAG;cACJ,KAAU,aAAN,KAAK,iBAAG,QAAQ;AACf,UAAV,OAAO,GAAG;;AAEM,UAAhB,MAAM,OAAO,GAAG;;eAEN,AAAM,aAAX,IAAI,iBAAG,GAAG,IAAG;AAGtB,YAAO,IAAG;IACZ;;yCA3IqB,gBAAqB,OAAY,QAAa;IAQtD,cAAgB;IAEzB,mBAAa;IACb,oBAAc;IACb,yBAAmB;IAEjB;IAdc;IAAqB;IAAY;IAAa;;EAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwJtE;;;;;;WAQqB;AAChB,qBAAW,AAAI,GAAD;AACd,iCACN,wBAAiB,cAAO,qBAAe,QAAQ;AACtC,kBAAQ,yBACjB,uBAAgB,eAAQ,cAAO,qBAAe,oBAAoB;AACtE,UAAU,aAAN,KAAK,iBAAG;AACG,QAAb,aAAQ,KAAK;;AAES,MAAxB,sBAAgB,QAAQ;IAC1B;;gDAzB4B,gBAAqB,OAAY;IAOtD,gBAAQ;IACX,sBAAgB;IARQ;IAAqB;IAAY;;EAAO;;;;;;;;;;;;;;;;;;;IAsC7D;;;;;;WAQqB;AAC1B,UAAa,YAAT,AAAI,GAAD,OAAuB;AAC5B;;AAGQ,wBAAc,AAAI,GAAD;AACjB,uCAA6B,wBACrC,cACA,wBACA,WAAW;AAGA,sBAAY,yBACvB,uBACA,eACA,cACA,wBACA,0BAA0B;AAE5B,UAAc,aAAV,SAAS,iBAAG;AACG,QAAjB,aAAQ,SAAS;;AAEW,MAA9B,yBAAmB,WAAW;IAChC;;gDAtC4B,gBAAqB,OAAY;IAOtD,gBAAQ;IACX,yBAAmB;IARK;IAAqB;IAAY;;EAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvyB5C;IAAU;;AAGO;IAAiB;;AAGZ;IAAe;;AAKzD,YAAuB,4CAAa;IAAK;;;AAMzB,gEAAoB;oBAApB,OAA6B;IAAE;;;AAG9B,gEAAoB;oBAApB,OAA8B;IAAC;;;AAQvB,gEAAoB;oBAApB,OAAqC;IAAC;;;AAKzC,gEAAoB;oBAApB,OAAkC;IAAC;;AAInC;IAAC;;;AAGK,gEAAoB;oBAApB,OAAyC;IAAC;;;AAG1C,gEAAoB;oBAApB,OAAyC;IAAC;;;AAGzC,gEAAoB;oBAApB,OAA0C;IAAE;;;AAIzE,gEAAoB;oBAApB,OAA2C;IAAE;;AAGnB;IAAkB;;;AAWrB;iCAAoB;IAAK;WAGhB;AAClC,UAAgB,YAAZ,WAAW,EAAI;AACjB;;AAGiE,MAAnE,2BAAqB,AAAoB,kCAAQ,MAAM,WAAW;AAChC,MAAlC,6BAAuB,WAAW;AAElC,UAAI,AAAgB,kCAAY;AACc,QAA5C,2BAAoC,aAAf,qCAAiB;;AAEZ,QAA1B,2BAAqB;;AAGvB,oBAAI,AAAmB,0CAAgB,WAAW,IAAI;AACpD,gBAAQ;;;AAEwD,YAA5D,qBAAuD,CAArB,aAAlB,AAAY,WAAD,uBAAS,2BAAqB;AACzD;;;;AAEoD,YAApD,qBAAiC,aAAlB,AAAY,WAAD,uBAAS;AACnC;;;;AAIS,YAFT,qBAA8B,YAAf,sBAAmC,wBAC1B,aAAlB,AAAY,WAAD,uBAAS,0BACpB;AACN;;;;AAIS,YAFT,qBAA8B,YAAf,sBAAmC,wBAC1B,aAAlB,AAAY,WAAD,uBAAS,0BACpB;AACN;;;;AAEkB,YAAlB,qBAAe;AACf;;;;IAGR;;AAIE;IACF;;AAaO;AACL,oBAA2B;AACW,QAApC,sBAAsB,gBAAU;;AAII,QAFpC,sBACuB,UADD,AAAmB,0CACrC,oBAAc,QACd,AAAgB,AAAS,kCAAG;;AAGlC,YACuC,WADhC,mBAAmB,KACtB,AAAgB,AAAW,oCAAG,QAC9B,AAAgB,AAAY,qCAAG;IACrC;;AAGuB,yCAAsB;IAAI;6BAOG;AAClD,qBAAO,AAMN;AALC,yBAAI,KAAK,EAAI;AAEqD,UADhE,WAAM,mBAAU,qDACZ;;AAEN,cAAO;;AAET,YAAO;IACT;qBAIM,OACA;UACc;UACD;AAEjB,YAAO,cAAc,IAAI;AACzB,YAAO,aAAa,IAAI;AACxB,UAAI,AAAW,oBAAG;AAChB,cAAmB;;AAGX,mBAAS,AAAW;AAE9B,UAAU,aAAN,KAAK,IAAG,KAAS,aAAJ,GAAG,IAAG,KAAW,aAAN,KAAK,IAAG,MAAM,IAAQ,aAAJ,GAAG,IAAG,MAAM;AACxD,cAAmB;;AAGrB,YAAO,AAAoB,gDACzB,MACA,oCACO,KAAK,OACP,GAAG,eACK,mCACE;IAEnB;qBAEmC;AACjC,YAAO,4CACM,SAAS,4CACF,AAAkB,gCAAM,wBAC1B,8BACT,yBACI,iCACI,kCACH;IAEhB;yBAG+C;AAC7C,UAAI,AAAW,oBAAG;AAChB,cAAO,oCAA8B,MAAM;;AAEhC,eAAe,aAAV,AAAO,MAAD,oBAAM;AACD,qBAAW;AAEpC,gBAAM;AACN,iBAAO,AAAW;AACtB;AACY,sBAAuB,EAAZ,AAAI,GAAD,GAAG,IAAI,IAAK;AACvB,oBAAQ,AAAS,QAAD,uBAAuB,MAAM,GAAG,OAAO;AACpE,YAAU,aAAN,KAAK,IAAG,EAAE;AACC,UAAb,MAAM,OAAO;cACR,KAAU,aAAN,KAAK,IAAG,EAAE;AACL,UAAd,OAAO,OAAO;;AAEM,UAApB,MAAM,OAAO,OAAO;;eAEf,AAAK,AAAM,IAAP,GAAG,GAAG,GAAG;AAEtB,UAAI,AAAI,GAAD,KAAI,IAAI;AAEb,cAAU,kCAAqB,IAAI,YAA4B;;AAGpD,qBAAW,AAAS,QAAD,uBAAuB,MAAM,GAAG,GAAG;AACtD,sBAAY,AAAS,QAAD,uBAAuB,MAAM,GAAG,IAAI;AAErE,UAAI,AAAG,AAAW,EAAZ,gBAAG,QAAQ,IAAa,aAAV,SAAS,IAAG,EAAE;AAEhC,cAAU,kCAAqB,GAAG,YAA4B;;AAG9D,cAAU,kCAAqB,IAAI,YAA4B;;IAEnE;kCAEwD;AACtD,YAAO,8BAAwB,yBAC3B;AACyB,qBAAW;AACxC,YAAO,AAAS,SAAD,0BACX,MAAM,4BAAsB,MAAM;IACxC;oBAG8B;AAC5B,UAAI,AAAW,oBAAG;AAChB,cAAY,oBAAC,MAAM,EAAE,MAAM;;AAGnB,kBAAoB,kCAAe,kBAAY,MAAM;AACrD,gBAAkB,kCAAe,kBAAY,MAAM;AAC7D,YAAY,oBAAC,KAAK,EAAE,GAAG;IACzB;;;QAtR6B;QACO;QACjB;QACE;QACI;QACI;QACR;IAkCH;IAwCb,2BAAqB;IAEF;IAIjB,qBAAe;UA/ER,AAAU,AAA0B,SAA3B,IAAI,QAAQ,AAAM,KAAD,IAAI,QACjC,SAAS,IAAI,QAAQ,KAAK,IAAI;IACjB,0BAAE,gBAAgB;IACpB,wBAAE,cAAc;IACrB,mBAAE,SAAS;IACX,mBAAE,SAAS;IACP,uBAAE,aAAa;IACvB,eAAE,KAAK;IACF,oBAAE,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmT5B,oBAAI;AAGF,sBAAO;AACL,gBAAO;;;AAGX,UAAI,AAAY,qBAAG,QAAQ,AAAY;AACrC;;AAEF,YAAO;IACT;;;AAGE,UAAI,AAAY,qBAAG,QAAQ,AAAY,AAAQ,8BAAG;AAEhD,cAAO;;AAET,UAAkC,YAA9B,AAAY,sCAAqB;AAEnC,cAAO,AAAY;;AAIrB,YAAO,uBAAS,AAAY,6BAAiB,0BAAR,OAAW;IAClD;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAEkB,0DAAa,KAAK;AAC7C,YAAkB,AAQoB,aAR/B,kBAAc,AAAW,UAAD,iBACZ,YAAf,sBAAkB,AAAW,UAAD,qBAChB,YAAZ,mBAAe,AAAW,UAAD,kBACd,YAAX,kBAAc,AAAW,UAAD,iBACxB,AAAU,mBAAG,AAAW,UAAD,eACvB,AAAY,qBAAG,AAAW,UAAD,iBACzB,AAAU,mBAAG,AAAW,UAAD,eACvB,AAAQ,iBAAG,AAAW,UAAD,aACrB,AAAU,mBAAG,AAAW,UAAD,eACf,YAAR,eAAW,AAAW,UAAD;IAC3B;;AAII,2BAAc,mBAAa,iBAAW,eAAS,iBAAW;IAAQ;;;AAIpE,oBAAI;AACF,cAAO,qBACH,0BAAyB,6BAAX,OAAc,uBAAc,OAC1C,8BAAiC,mCAAf,OAAkB,wBAAc,OAClD,2BAA2B,kCAAZ,OAAe,yBAAc,OAC5C,0BAAyB,iCAAX,OAAc,yBAAc,OAC1C,yBAAuB,gCAAV,OAAa,yBAAc,OACxC,2BAA2B,kCAAZ,OAAe,yBAAc,OAC5C,gBAAa,AAAkB,mBAAL,OAAO,AAAU,kCAAgB,KAAK,iBAAc,OAC9E,cAAW,AAAgB,iBAAL,OAAU,AAAQ,AAAsB,gCAAN,KAAG,MAAK,iBAAc,OAC9E,gBAAa,AAAkB,mBAAL,OAAO,AAAiB,gBAAb,mBAAS,OAAM,iBAAc,OAClE,uBAAmB,8BAAR,OAAW,yBACtB;;AAEJ,cAAa;;IAEjB;;;QA3Ge;QACI;QACb;QACG;QACA;QACA;QACO;QACD;QACC;QACP;QACG;IACK,mBAAE,SAAS;IACP,uBAAE,aAAa;IAClB,oBAAE,UAAU;IACb,mBAAE,SAAS;IACZ,kBAAE,QAAQ;IACR,oBAAE,UAAU;IACd,kBAAE,QAAQ;IACZ,gBAAE,MAAM;wBAEJ,+BAAE,UAAU;IACd,kBAAE,QAAQ;IACZ,gBAAE,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JpB,oBAAI;AAGF,sBAAO;AACL,gBAAO;;;AAGX,UAAI,AAAY,qBAAG,QAAQ,AAAY;AACrC;;AAEF,YAAO;IACT;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAEa,qDAAa,KAAK;AACxC,YAAc,AAe4C,aAfnD,eAAU,AAAW,UAAD,cACX,YAAZ,mBAAe,AAAW,UAAD,kBACR,YAAjB,wBAAoB,AAAW,UAAD,uBACb,YAAjB,wBAAoB,AAAW,UAAD,uBAClB,YAAZ,mBAAe,AAAW,UAAD,kBACd,YAAX,kBAAc,AAAW,UAAD,iBACV,YAAd,qBAAiB,AAAW,UAAD,oBAC3B,AAAY,qBAAG,AAAW,UAAD,iBACzB,AAAU,mBAAG,AAAW,UAAD,eACvB,AAAe,wBAAG,AAAW,UAAD,oBAC5B,AAAa,sBAAG,AAAW,UAAD,kBAC1B,AAAQ,iBAAG,AAAW,UAAD,aACb,YAAR,eAAW,AAAW,UAAD,cACT,YAAZ,mBAAe,AAAW,UAAD,kBACb,YAAZ,mBAAe,AAAW,UAAD,4BACzB,8BAAuB,gBAAU,AAAW,UAAD,0BAC3C,gCACI,2BAAqB,AAAW,UAAD;IACzC;;AAGoB,2BACd,eACA,mBACA,wBACA,wBACA,mBACA,kBACA,qBACA,mBACA,2BACA,iBACA,sBACA,oBACA,eACA,eACA,mBACA,mBACA;IACD;;;AAIH,oBAAI;AACF,cAAO,gBACH,qBAAU,AAAe,iBAAL,OAAO,gBAAS,iBAAc,OAClD,2BAA2B,8BAAZ,OAAe,uBAAc,OAC5C,gCAAqC,qCAAjB,OAAoB,wBAAc,OACtD,gCAAqC,uCAAjB,OAAoB,yBAAc,OACtD,2BAA2B,kCAAZ,OAAe,yBAAc,OAC5C,0BAAyB,iCAAX,OAAc,yBAAc,OAC1C,6BAA+B,oCAAd,OAAiB,yBAAc,OAChD,0BAAqC,UAAtB,gCAAyB,qBAAe,OAAO,oBAAc,iBAAc,OAC1F,kCAA4E,UAArD,gCAAyB,6BAAuB,kBAAQ,AAAoB,0CAAa,4BAAsB,iBAAc,OACpJ,gBAAa,AAAkB,mBAAL,OAAO,AAAU,kCAAgB,KAAK,iBAAc,OAC9E,qBAAkB,AAAuB,wBAAL,OAA4B,SAAlB,wBAAe,MAAK,iBAAc,OAChF,mBAAgB,AAAqB,sBAAL,OAA0B,SAAhB,sBAAa,MAAK,iBAAc,OAC1E,cAAW,AAAgB,iBAAL,OAAU,AAAQ,AAAsB,gCAAN,KAAG,MAAK,iBAAc,OAC9E,uBAAmB,8BAAR,OAAW,yBAAc,OACpC,2BAA2B,kCAAZ,OAAe,yBAAc,OAC5C,2BAA2B,kCAAZ,OAAe,yBAAc,OAC5C,wBAAqB,+BAAT,OAAY,yBACxB;;AAEJ,cAAa;;IAEjB;;;;QAzJW;QACS;QACT;QACc;QAChB;QACO;QACD;QACG;QACT;QACM;QACN;QACA;QACA;QACA;QACG;QACD;QACA;QACO;QACK;UAEb,AAAM,AAAQ,KAAT,IAAI,QAAQ,AAAW,UAAD,IAAI,yBAC/B,mDACA;IACG,gBAAE,KAAK;IACF,oBAAE,UAAU;IACP,yBAAE,eAAe;IACjB,yBAAE,eAAe;IACtB,oBAAE,UAAU;IACb,mBAAE,SAAS;IACR,sBAAE,YAAY;IAGN,8BAAE,UAAU,IAAI;IAC1B,qBAAa,KAAX,UAAU,QAAV,OAAc;IAER,4BAAE,kBAAkB;IAC9B,kBAAE,QAAQ;IACL,uBAAE,aAAa;IACjB,qBAAE,WAAW;IAClB,gBAAE,MAAM;IACR,gBAAE,MAAM;IACJ,oBAAE,UAAU;IACZ,oBAAE,UAAU;IACf,iBAAE,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAkLC;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAEc,sDAAa,KAAK;AACzC,YAAO,AAAY,AAMmC,sBANhC,AAAW,UAAD,iBAC5B,AAAU,mBAAG,AAAW,UAAD,eACvB,AAAQ,iBAAG,AAAW,UAAD,aACrB,AAAS,kBAAG,AAAW,UAAD,cACV,YAAZ,mBAAe,AAAW,UAAD,kBACd,YAAX,kBAAc,AAAW,UAAD,iBACN,YAAlB,yBAAqB,AAAW,UAAD,kCAC/B,gCACI,2BAAqB,AAAW,UAAD;IACzC;;AAGoB,2BACd,mBACA,2BACA,iBACA,eACA,gBACA,mBACA,kBACA;IACD;;;QAxDI;QACM;QACN;QACA;QACA;QACO;QACD;QACR;IACW,oBAAE,UAAU;IACJ,4BAAE,kBAAkB;IAC9B,kBAAE,QAAQ;IACZ,gBAAE,MAAM;IACP,iBAAE,OAAO;IACN,oBAAE,UAAU;IACb,mBAAE,SAAS;IACJ,0BAAE,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;cA2Ed;AACX,MAAf,AAAK,iBAAI,KAAK;IAChB;;AAG4B;IAAiB;;AAIP;IAAkB;mBAK/C,OACA,QACiB;UACjB;UACA;UACS;AAGU,MAA1B,WAAM;IACR;;AAagC,MAA9B,AAAK,iBAAI;IACX;YAMoB;AACJ,MAAd,AAAK,iBAAI,IAAI;IACf;;;AASE,WAAO;0BAAwB;IACjC;;AAmBW;AACS;AACT;AACc;AACT,uBAAa,AAAgB;AAC9B,sBAAY,AAAgB;AACzB;AACT,uBAAa,AAAgB;AAC7B,qBAAW,AAAgB;AACf,sBAAY,AAAgB;AACxB,0BAAgB,AAAgB;AAChD;AACA;AACA;AACG,mBAAS,AAAgB;AAC1B;AACA;AAEL,cAAI;AAMR,aAAO,AAAE,CAAD,gBAAG,AAAK,wBAAkB,0BAAR,AAAI,kBAAC,CAAC;AACR,kDAAQ,AAAI,kBAAC,CAAC;AACpC,YAAI,AAAM,KAAD,aAAW;AACE,UAApB,QAAQ,AAAM,KAAD;;AAEf,YAAI,AAAM,KAAD,iBAAgB;AACO,UAA9B,aAAa,AAAM,KAAD;;AAEpB,YAAI,AAAM,KAAD,sBAAqB;AACY,UAAxC,kBAAkB,AAAM,KAAD;;AAEzB,YAAI,AAAM,KAAD,sBAAqB;AACY,UAAxC,kBAAkB,AAAM,KAAD;;AAEzB,YAAI,AAAM,KAAD,iBAAgB;AACO,UAA9B,aAAa,AAAM,KAAD;;AAEpB,YAAI,AAAM,KAAD,gBAAe;AACM,UAA5B,YAAY,AAAM,KAAD;;AAEnB,YAAI,AAAM,KAAD,mBAAkB;AACS,UAAlC,eAAe,AAAM,KAAD;;AAEtB,YAAI,AAAM,KAAD,iBAAgB;AACO,UAA9B,aAAa,AAAM,KAAD;;AAEpB,YAAI,AAAM,KAAD,eAAc;AACK,UAA1B,WAAW,AAAM,KAAD;;AAElB,YAAI,AAAM,KAAD,oBAAmB;AACU,UAApC,gBAAgB,AAAM,KAAD;;AAEvB,YAAI,AAAM,KAAD,kBAAiB;AACQ,UAAhC,cAAc,AAAM,KAAD;;AAErB,YAAI,AAAM,KAAD,aAAY;AACG,UAAtB,SAAS,AAAM,KAAD;;AAEhB,YAAI,AAAM,KAAD,aAAY;AACG,UAAtB,SAAS,AAAM,KAAD;;AAEhB,YAAI,AAAM,KAAD,iBAAgB;AACO,UAA9B,aAAa,AAAM,KAAD;;AAEpB,YAAI,AAAM,KAAD,iBAAgB;AACO,UAA9B,aAAa,AAAM,KAAD;;AAEjB,QAAH,IAAA,AAAC,CAAA;;AAGmB,4BAAkB,uCAC/B,KAAK,cACA,UAAU,mBACL,eAAe,mBACf,eAAe,cACpB,UAAU,aACX,SAAS,gBACN,YAAY,cACd,UAAU,YACZ,QAAQ,iBACH,aAAa,eACf,WAAW,UAChB,MAAM,UACN,MAAM,cACF,UAAU,cACV,UAAU;AAGf;AACT,UAAI,UAAU,IAAI;AACE,QAAlB,QAAQ,UAAU;;AAEA,QAAlB,QAAW;AACX,YAAI,KAAK,IAAI;AACQ,UAAnB,AAAM,KAAD,SAAS,KAAK;;;AAIvB,UAAI,AAAE,CAAD,iBAAI,AAAK;AAG2C,QADvD,0CACa,gCAA0B,eAAe;AACtD,cAAO,mDACa,yCACF,oDACF,UAAU,cACV,UAAU,aACX,SAAS,YACV,QAAQ,cACN,MAAM,YACR,AAAgB,iDACX,aAAa,eACf,WAAW,cACZ,kCAA2B,UAAU,EAAE,eAAe,aACxD,AAAgB,+CAEjB,WACJ,KAAK,aACD,SAAS,iBACL,aAAa,cAChB,AAAgB,eAAD;;AAI/B,YAAY,OAAR,AAAI,kBAAC,CAAC;AAGR,cAAO;;AAIU,4BAAkB;AACrC,aAAO,AAAE,CAAD,gBAAG,AAAK,wBAAkB,OAAR,AAAI,kBAAC,CAAC;AACA,QAA9B,AAAgB,eAAD,OAAO,AAAI,kBAAC,CAAC;AACzB,QAAH,IAAA,AAAC,CAAA;;AAKH,aAAO,AAAE,CAAD,gBAAG,AAAK,sBAAQ,IAAA,AAAC,CAAA;AACvB,yBAAI,AAAI,kBAAC,CAAC,GAAK;AACb,gBAAO;;;AAIE,sBAAY,AAAgB,eAAD;AACY,MAApD,AAAY,8BAAW,yBAAmB,SAAS;AAEI,MADvD,0CACa,gCAA0B,eAAe;AAGtD,UAAI,AAAgB,eAAD,iBAAgB;AAEsB,QADvD,+CACa,gCAA0B,eAAe;;AAExD,YAAO,mDACa,yCACF,oDACF,UAAU,cACV,UAAU,aACX,SAAS,YACV,QAAQ,cACN,MAAM,YACR,AAAgB,iDACX,aAAa,eACf,WAAW,cACZ,kCAA2B,UAAU,EAAE,eAAe,aACxD,AAAgB,+CAEjB,SAAS,SACb,KAAK,aACD,SAAS,iBACL,aAAa,cAChB,AAAgB,eAAD;IAE/B;;AAIsB,yBAAwB;AAC5C,YAAQ;AACJ,yBAAA,AAAa,YAAD,iBAAc,AAAa,YAAD,UAAQ;;;AAClD,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAK,sBAAQ,IAAA,AAAC,CAAA;AAClB,iBAAK,AAAI,kBAAC,CAAC;AACzB,YAAO,0BAAH,EAAE;AACmB,6CAAO,AAAY,iCAAc;AACQ,UAAhE,0CAAkC,IAAI,SAAS,EAAE,UAAU;AAC3D,cAAI,AAAG,EAAD,iBAAgB;AACmC,YAAvD,+CAAuC,IAAI,SAAS,EAAE;;AAEd,UAA1C,AAAY,8CAAO,AAAc,cAAA,KAAI,IAAI;AACnB,UAAtB,AAAa,YAAD,OAAK,IAAI;cAChB,KAAO,OAAH,EAAE;AACiC,UAA5C,AAAY,kDAAW,AAAc,cAAA,KAAI,EAAE;cACtC,KAAI,eAAU,EAAE,EAAE;AACE,UAAzB,AAAa,YAAD;;AAEyD,UAArE,WAAM,8BAAiB,AAA6C,sDAAH,EAAE;;;AAIvE,YAAO,mDACa,yCACF,oDACF,AAAgB,gDAChB,AAAgB,+CACjB,AAAgB,6CACjB,AAAgB,8CACd,AAAgB,0CAClB,AAAgB,4CAChB,AAAgB,+CAEjB,aACJ,iBACI,AAAgB,kDACZ,AAAgB,mDACnB;IAEhB;;gDA5T4C;IANrB,kDAAoB,AAAY,iCAAc;IAEjD,aAAgB;IA8BhC;IAIS,2BAA6B;IA9B2B,wBAAE,KAAK;AAE7D;AACb,QAAI,AAAM,KAAD,iBAAgB;AACO,MAA9B,oBAA4B;AAC5B,UAAI,AAAM,AAAY,KAAb,8BAA4B;AACiB,QAApD,AAAkB,iBAAD,OAAK,AAAM,AAAY,KAAb;;AAE7B,UAAI,AAAM,AAAY,KAAb,sCAAoC;AACoB,QAA/D,AAAkB,iBAAD,UAAQ,AAAM,AAAY,KAAb;;;AAIqB,IADvD,+CACa,gCAA0B;EACzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAtBoB,kDAAoB;YAAG;;;;;;;;;;;;;;;;;ICtoBvB;;;;;;IACD;;;;;;IACN;;;;;;IACA;;;;;;IACA;;;;;;IACH;;;;;;IACG;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;;AAYX,oBAAI;AAGF,sBAAO;AACL,gBAAO;;;AAGX,UAAI,AAAW,mBAAG,QAAQ,AAAW;AACnC;;AAEF,YAAO;IACT;;;AAO4B;mBAAe,OAAf,uBAAmB;IAAqB;;AAG/C,mBAAS;AAG5B,UAAI,kBAAa;AACqD,QAApE,AAAO,MAAD,OAAiB,YAAV,gBAA0B,uBAAS,WAAW;;AAEjB,QAA1C,AAAO,MAAD;;AAES,MAAjB,AAAO,MAAD,OAAO;AAGb,UAAI,mBAAc;AACyB,QAAzC,AAAO,MAAD,OAAO,uBAAgB;;AAEc,QAA3C,AAAO,MAAD;;AAES,MAAjB,AAAO,MAAD,OAAO;AAEb,UAAI,iBAAY;AACgB,QAA9B,AAAO,MAAD,OAAO,AAAS;AACJ,QAAlB,AAAO,MAAD,OAAO;;AAE4B,QAAzC,AAAO,MAAD;;AAES,MAAjB,AAAO,MAAD,OAAO;AAC6C,MAA1D,AAAO,MAAD,OAAO,+BAAwB;AAErC,YAAO,AAAO,OAAD;IACf;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAEqB,6DAAa,KAAK;AAChD,YAAkB,AAQsB,aARjC,iBAAc,AAAW,UAAD,gBACjB,YAAV,gBAAa,AAAW,UAAD,eACvB,AAAW,mBAAG,AAAW,UAAD,eACxB,AAAS,iBAAG,AAAW,UAAD,aACtB,AAAW,mBAAG,AAAW,UAAD,eACxB,AAAS,iBAAG,AAAW,UAAD,aACtB,AAAc,sBAAG,AAAW,UAAD,kBAC3B,AAAY,oBAAG,AAAW,UAAD,gBACzB,AAAW,mBAAG,AAAW,UAAD,eACxB,AAAS,iBAAG,AAAW,UAAD;IAC5B;;;AAGoB;mBAAgB,OAAhB,wBAAoB,cAClC,iBACA,gBACA,iBACA,eACA,iBACA,eACA,oBACA,kBACA,iBACA;IACD;;AAIH,oBAAI;AACF,wBAAS,sBAAW,2BAAc,mBAAU,2BAAc,kBAAS,MAC/D,2BAAe,mBAAU,0BAAa,iBAAQ,MAC9C,2BAAe,mBAAU,MACzB,yBAAa,iBAAQ,MACrB,8BAAkB,sBAAa,MAC/B,4BAAgB,oBAAW,MAC3B,2BAAe,mBAAU,MACzB,yBAAa,iBAAQ,MACrB;;AAEJ,cAAa;;IAEjB;;;QAtIO;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAgBH;IAqBG;IA9CA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAqJ8B,MAA8B;AAC5D,YAAO,IAAI,IAAI;AACf,YAAO,mBAAY;AACnB,qBAAO,AAAK,IAAD,yBAAwB,KAAK;AACxC,qBAAO,AAYN;AAXY,kCAAkD,UAA5B,AAAS,AAAW,yCAChD,AAAS,AAAW,AAAO,wCAAG,KACD,aAA1B,AAAS,AAAW;AAC5B,aAAK,mBAAmB;AAKR,UAJd,WAAM,mBACF,mEACA,mDAAuC,AAAS,+BAAU,eAC1D,+DACA;;AAEN,cAAO;;AAGe,MAAxB;AACa,sBAAY,AAAK,IAAD;AAC7B,UAAI,SAAS,IAAI;AAKf,YAAI,AAAU,SAAD,YAAU;AAIS,UAA9B,AAAS,yBAAqB,SAAZ,SAAS;;AAEF,UAAzB,AAAS,yBAAO,SAAS;;;AAKR,uCAAO,AAAK,AAAkB,IAAnB,4BAAyB;AAChB,QAAvC,AAAS,AAAS,oCAAO,AAAK,IAAD;;IAEjC;gBAGwB;AACE,MAAxB;AAC+B,MAA/B,AAAS,AAAM,gCAAQ,QAAQ;IACjC;;AAGkC,MAAhC,kCAA4B;IAC9B;;AAI0B,MAAxB;AACmB,MAAnB,AAAS,yBAAO;IAClB;eAGwC;;AAaD,WAZrC,AAAS;MACL,gBAAW,AAAM,AAAiB,KAAlB,aAAa,OAAqC,SAA3B,AAAM,AAAS,KAAV,uBAAkB,OAAM;MACpE,kBAAa,+BAAwB,AAAM,KAAD;MAC1C,kBACE,AAAM,AAAmB,KAApB,eAAe,OAAO,uBAAgB,AAAM,KAAD,eAAe;MACjE,iBAAY,AAAM,AAChB,KADe,cAAc,OACX,YAAhB,AAAM,KAAD,YAA2B,uBAAS,WAAW,WACpD;MACJ,qBACE,AAAM,AAAsB,KAAvB,kBAAkB,OAAkC,SAAxB,AAAM,KAAD,kBAAe,OAAM;MAC7D,mBACE,AAAM,AAAoB,KAArB,gBAAgB,OAAgC,SAAtB,AAAM,KAAD,gBAAa,OAAM;MACzD,sBAAiB,AAAM,KAAD;;AAC1B,UAAI,AAAM,KAAD,eAAe;AACiC,QAAvD,AAAS,AAAM,qCAA8B,cAAjB,AAAM,KAAD;;AAEX,MAAxB;IACF;iBAImC;AACL,MAA5B,AAAY,WAAD,UAAQ;AACK,MAAxB;IACF;;;AAGI;mBAA0B,OAA1B,kCAA8B,AAAS;IAAuB;;AAG9C,YAAA,AAAuB;IAAK;;AAG3B,YAAA,AAAuB;IAAM;;wCArG9B;IAGA;IAHA;;EAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmJC;;;;;;IAOX;;;;;;IAwBE;;;;;;IAKN;;;;;;IAKA;;;;;;;;AAdX;mBAA0B,OAA1B,kCAA8B,AAAO,AAAwB;IAAM;;AAuBrE,UAAI,AAAsB,+BAAG;AACQ,QAAnC,wBAAuB;AACwC,QAA/D,8BAAwB,8BAAoB;AACV,QAAlC;AAC8B,QAA9B,AAAgB,+BAAO;;AAEzB,YAAO;IACT;;AAMoB;IAAS;;AAShB,MAAX,kBAAS,aAAT,mBAAS;IACX;;AAIe,MAAb,kBAAY;IACd;;AAK4B;IAAgB;;;AAczB,WAVjB,AAAgB;MACZ,kBAAa;MACb,gBAAW;MACX,WAAM;MACN,YAAO;MACP,eAAU;MACV,qBAAgB;MAChB,kBAAa;MACb,cAAS;MACT,cAAS;MACT,eAAU;;AAEwB,MAAtC,AAAqB,qCAAW;AAGsB,MAAtD,AAAqB,AAAS,AAAM,0DAAa;AAEC,MAAlD,AAAqB,uCAAa;AACU,MAA5C,AAAa,iCAAe;IAC9B;;;AAamB,WATjB,AAAkB;MACd,kBAAa;MACb,gBAAW;MACX,WAAM;MACN,YAAO;MACP,eAAU;MACV,qBAAgB;MAChB,cAAS;MACT,cAAS;MACT,eAAU;;AAE0B,MAAxC,AAAuB,uCAAW;AAUP,YAN3B,AAAuB,AAAS;MAC5B,aAAO;MACP,gBAAU;MAIV,mBAAa;;AAEwC,MAAzD,AAAkB,iCAAO,AAAuB;AACF,MAA9C,AAAa,iCAAe;IAC9B;;;AAamB,WAVjB,AAAiB;MACb,kBAAa;MACb,gBAAW;MACX,WAAM;MACN,YAAO;MACP,eAAU;MACV,qBAAgB;MAChB,kBAAa;MACb,cAAS;MACT,cAAS;MACT,eAAU;;AAEyB,MAAvC,AAAsB,sCAAW;AACF,yBAC3B,AAAsB,AAAS;AAGJ,YAF/B,YAAY;MACR,gBAAU;MACV,qBAAe;;AAKnB,UAAI,AAAM,AAAS,uBAAG;AACgB,QAApC,AAAa,YAAD,gBAAc;;AAQG,eAH7B,YAAY;QACR,oBAAa;QACb,kBAAW;QACX,sBAAe;;;AAG+B,MAApD,AAAsB,wCAAa;AACU,MAA7C,AAAa,iCAAe;IAC9B;;;AAamB,WAVjB,AAAgB;MACZ,kBAAa;MACb,gBAAW;MACX,WAAM;MACN,YAAO;MACP,eAAU;MACV,qBAAgB;MAChB,kBAAa;MACb,cAAS;MACT,cAAS;MACT,eAAU;;AAEwB,MAAtC,AAAqB,qCAAW;AAGsB,MAAtD,AAAqB,AAAS,AAAM,0DAAa;AAGT,MAAxC,AAAqB;AAE6B,MAAlD,AAAqB,uCAAa;AACU,MAA5C,AAAa,iCAAe;IAC9B;gBAQiC;AAC/B,YAAO,SAAS,IAAI;AACpB,qBAAO,AAON;AANC,YAAI,oBAAc;AAGsD,UAFtE,WAAM,mBACF,mCAAuB,wCAAc,0BACrC,2CAA+B,oBAAU;;AAE/C,cAAO;;AAET,qBAAO,AAAU,SAAD,yBAAwB;AAClB,MAAtB,mBAAa,SAAS;IACxB;eAMwC;AACjB,MAArB;AAC0B,MAA1B;AACmC,MAAnC,4BAAuB,WAAW;IACpC;;AAOE,WAAO,WAAC;AACR,YAAO,oBAAc;AAMrB,UAAI,AAAW,AAAW,iCAAG;AACa,QAAxC,AAAqB;;AAE6B,QAAlD,AAAqB,qCAAW,kBAAY;;IAEhD;;AAOE,WAAO,WAAC;AACR,YAAO,oBAAc;AAE+B,MAApD,AAAuB,uCAAW,kBAAY;IAChD;2BAKoD;AAClD,WAAO,WAAC;AACR,YAAO,oBAAc;AAE8B,MAAnD,AAAsB,sCAAW,kBAAY;AAKoB,MAAjE,AAAsB,uCAA0C,SAAT,aAAlB,AAAY,WAAD,UAAS,OAAI;IAC/D;YAIoC,aAAuB;AACtB,MAAnC,4BAAuB,WAAW;AAEX,eAAK,AAAsB;AAC5B,sBAAuB;AAIF,MAA3C,wBAAkB,AAAG,EAAD,aAAa,SAAS;AAE1C,eAAS,IAAqB,aAAjB,AAAU,SAAD,aAAU,GAAG,AAAE,CAAD,IAAI,GAAG,IAAA,AAAC,CAAA;AAC1B,mBAAO,AAAS,SAAA,QAAC,CAAC;AAGf,yCAAS,AAAK,IAAD;AACN,qBAAS,AAAO,MAAD;AAC5B,iBAAK,AAAO,MAAD;AACX,iBAAK,AAAO,MAAD;AACxB,YAAO,aAAH,EAAE,kBAAI,AAAO,MAAD,YACT,aAAH,EAAE,iBAAG,AAAO,MAAD,aACR,aAAH,EAAE,kBAAI,AAAO,MAAD,WACT,aAAH,EAAE,iBAAG,AAAO,MAAD;AAGT,6BAAe;AACnB,mBAAS,YAAY,GAAG,AAAU,SAAD,GAAG,CAAC,EAAE,YAAA,AAAS,SAAA;AACE,YAAhD,eAAA,AAAa,YAAD,GAAI,AAAS,AAAY,AAAK,SAAjB,QAAC,SAAS;;AAErC,gBAAO,aAAY;;;AAGvB,YAAO;IACT;wBAE2C,OAAuB;AAChE,eAAe,OAAQ,MAAK;AAC1B,YAAI,AAAK,AAAS,IAAV;AACa,UAAnB,AAAU,SAAD,OAAK,IAAI;;AAEpB,sBAAI,AAAK,IAAD;AACuC,UAA7C,wBAAkB,AAAK,IAAD,aAAa,SAAS;;;IAGlD;;;AASE,YAAO,oBAAc;AAWrB,UAAI,AAAW,AAAW,gCAAG;AAIiB,aAH5C;QACI,YAAS,AAAqB;QAC9B,YAAS,AAAuB;QAChC,YAAS,AAAsB;;;AAEpB,MAAjB,mBAAa;IACf;yBAOS,WACiB;;UACpB;UACA;UACG;UACU;AAEjB,WAAO,WAAC;AACR,YAAa,AAAK,aAAX,KAAK,KAAI,KAAW,aAAN,KAAK,KAAI,AAAU,SAAD;AACvC,YAAW,AAAK,aAAT,GAAG,KAAI,KAAS,aAAJ,GAAG,KAAI,AAAU,SAAD;AACnC,YAAa,aAAN,KAAK,kBAAI,GAAG;AAEN,mBAAS,AAAU,SAAD,aAAW,GAAG,KAAK;AACrC,sBAAY,AAAU,SAAD,aAAW,KAAK,EAAE,GAAG;AAC1C,kBAAQ,AAAU,SAAD,aAAW,GAAG;AAErB,4BAAiB,wBAAe,YAAO,SAAS;AAGnB,MAApD,AAAY,4BAAS,AAAsB;AAItB,YAHrB,AAAsB;MAClB,iBAAW,MAAM;MACjB,aAAO,SAAS;MAChB,iBAAW,KAAK;;AACuC,MAA3D,AAAsB,uCAAoC,SAArB,AAAY,WAAD,UAAO;AAGvB,wBAAc,AAAU,SAAD;AAChC,kBAAoB;AAE3C,eAAyB,OAAQ,YAAW;AAOxC,QANF,AAAM,KAAD,OAAgB,yBACT,aAAV,AAAK,IAAD,wBAAQ,WAAW,GACvB,AAAK,IAAD,QACO,aAAX,AAAK,IAAD,yBAAS,WAAW,GACxB,AAAK,IAAD,WACJ,aAAa;;AAKmC,MAApD,AAAY,4BAAS,AAAsB;AAC3C,YAAO,MAAK;IACd;;;AAOE,qBAAO,AAMN;AALC,YAAI,oBAAc;AAE0C,UAD1D,WAAM,mBAAU,sDACZ;;AAEN,cAAO;;AAEe,MAAxB,AAAgB;AACU,MAA1B,AAAkB;AACO,MAAzB,AAAiB;AACQ,WAAzB;0BAAiB;AACjB,qBAAO,AAGN;AAFwB,QAAvB,yBAAmB;AACnB,cAAO;;IAEX;qBAesC,WAA6B;;AACpD,sBAAY,AAAU,SAAD;AACJ,6BACG,KAA7B,8BAAkB,SAAS,QAAV,sBAAY,cAAuB,qCAAnC;AACI,MAAzB,AAAgB,eAAD,OAAK,IAAI;AACxB,UAA2B,aAAvB,AAAgB,eAAD;AACU,QAA3B,AAAgB,eAAD,YAAU;;AAEJ,MAAvB,AAAS,qBAAI,SAAS;AACtB,UAAoB,aAAhB,AAAS;AAEX,iBAAS,IAAI,GAAG,AAAE,CAAD,QAAsB,IAAA,AAAC,CAAA;AACD,UAArC,AAAkB,iCAAO,AAAQ,sBAAC,CAAC;;AAEK,QAA1C,AAAS,6BAAY;;IAEzB;gBAGoB,WAAmC;AACxC,sBAAY,AAAU,SAAD;AAClC,UAAI,AAAU,SAAD,IAAI;AAEf,cAAO;;AAEqB,4BAC1B,AAAiB,+BAAC,SAAS;AAC/B,UAAI,AAAgB,eAAD,IAAI;AACrB,cAAO;;AAEC,gBAAM,AAAgB,eAAD;AAC/B,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,GAAG,GAAE,IAAA,AAAC,CAAA;AACA,mBAAO,AAAe,eAAA,QAAC,CAAC;AAChD,YAAI,AAAK,AAAgB,IAAjB,oBAAoB,AAAY,WAAD;AACrC,gBAAO,KAAI;;;AAGf,YAAO;IACT;;wCA1coB,OAAY;IALT,eAAc;IAG9B;IAiBe,wBAAuB;IACxB,6BACjB,8BAAoB;IAGF,0BAAyB;IAChC,+BACX,8BAAoB;IAGF,yBAAwB;IAC/B,8BACX,8BAAoB;IAGR;IACD;IAkBX,kBAAY;IAoBX,yBAAmB;IAsHR;IA6NqB,0BACA;IAElB,iBAAmB;IA3ZlB;IAAY;AACI,IAAlC;AAI8B,IAA9B,AAAgB,+BAAO;AACa,IAApC;AACmC,IAAnC;EACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoZiB,iCAAW;;;MAEX,uCAAiB;;;MAIjB,0CAAoB;;;;;;;;;;;;;;;;IAgDxB;;;;;;IAGF;;;;;;IAGE;;;;;;IAGA;;;;;;IAMA;;;;;;IAMA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAIM;;;;;;;2CAGZ;QACU;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAVV;IACU;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;UACJ,eAAe,IAAI;UACnB,YAAY,IAAI;UAChB,KAAK,IAAI;UACT,MAAM,IAAI;UACV,aAAa,IAAI;UACjB,iBAAiB,IAAI;UACrB,iBAAiB,IAAI;UACrB,kBAAkB,IAAI;UACtB,mBAAmB,IAAI;;EAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICp0B3C;;kDAJK;;;;EAIL;;;;;;;;;;;;;;;;;;;MAiBY;;;;;;MAEA;;;;;;MAEF;;;;;;cAQsB;AAC5B,YAAU,aAAN,KAAK,iBAAG;AACV,gBAAyB;;AAE3B,YAAU,aAAN,KAAK,iBAAG;AACV,gBAAyB;;AAE3B,cAAyB;MAC3B;;iCAtBwB,OAAY,KAAU;MAAtB;MAAY;MAAU;;IAAS;;;;;;;;;;;;;;;;;;;;;;;;;;MAuC3B;;;;;;WAEjB;AACC,oBAAQ,oBAAc,KAAK;AACrC,cAAO,AAAM,MAAD,KAAI,CAAC,IAAI,OAAO,AAAM,AAAQ,mBAAP,KAAK;MAC1C;sBAEsB;AAChB,kBAAM;AACN,kBAAM,AAAO;AACjB,eAAO,AAAI,GAAD,gBAAG,GAAG;AACJ,oBAAM,AAAI,GAAD,GAAgB,CAAP,aAAJ,GAAG,IAAG,GAAG,eAAK;AAChB,sBAAQ,AAAM,mBAAC,GAAG;AACxC,kBAAQ,AAAM,KAAD,SAAS,KAAK;;;AAEV,cAAb,MAAM,AAAI,GAAD,GAAG;AACZ;;;;AAES,cAAT,MAAM,GAAG;AACT;;;;AAEA,oBAAO,IAAG;;;;AAGhB,cAAO,EAAC;MACV;;;MA3BiC;;IAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICjB1C;;6CAnBK;;;;EAmBL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICjCA;;oDANK;;;;EAML;;;;;;;;;;;;;0BAKmC,MAAU;AACvC,gDAAoC,oCAAS,IAAI,EAAE,KAAK;IAAC;0BAI5B,MAAU;AACvC,gDAAoC,qCAAU,IAAI,EAAE,KAAK;IAAC;2BAGxC,WACb,MACH;AAEA;AAAM;AAAK;AACf,UAAc,YAAV,SAAS,EAAwB;AAC3B,QAAR,OAAO;AACA,QAAP,MAAM;AACe,QAArB,MAAM,AAAK,AAAO,IAAR,UAAU;;AAEX,QAAT,OAAO,CAAC;AACD,QAAP,MAAM;AACW,QAAjB,MAAM,AAAK,IAAD;;AAGR,cAAI,KAAK;AACb,aAAS,aAAF,CAAC,kBAAI,GAAG,KAAM,aAAF,CAAC,kBAAI,GAAG;AAChB,QAAT,IAAE,aAAF,CAAC,iBAAI,IAAI;AACT,sBAAI,4BAAS,IAAI,EAAE,CAAC;AAClB;;;AAGJ,YAAO,EAAC;IACV;oBAI4B,MAAU;AAIpC,UAAU,aAAN,KAAK,KAAI,KAAW,aAAN,KAAK,KAAI,AAAK,IAAD;AAC7B,cAAO;;AAIT,oBAAI,qCAAkB,AAAK,IAAD,cAAkB,aAAN,KAAK,IAAG;AAC5C,cAAO;;AAGU,2BAAiB,uBAAgB,IAAI,EAAE,KAAK;AAClD,0BAAgB,uBAAgB,IAAI,EAAQ,aAAN,KAAK,IAAG;AAI3D,UAAkB,YAAd,aAAa,EAAiB,2BAAqB,YAAf,cAAc,EAAiB,yBACrE,MAAO;AAIT,oBAAI,0BACF,aAAa,EACA,6BACA,wBACA;AAEb,cAAO;;AAIT,oBAAI,0BACF,cAAc,EACD,6BACA,wBACA;AAEb,cAAO;;AAQT,UAAkB,YAAd,aAAa,EAAiB,kCACf,YAAf,cAAc,EAAiB;AACjC,cAAO;;AAMT,oBAAI,0BACF,cAAc,EACD,4BACA,4BACA;AAIb,cAAO;;AAIL,cAAI;AACR,uBAAO,0BACL,aAAa,EACA,4BACA,4BACA;AAEV,QAAH,IAAA,AAAC,CAAA;AACD,YAAU,AAAI,AAAI,aAAd,KAAK,IAAG,CAAC,GAAG,IAAI;AAElB,gBAAO;;AAE2C,QAApD,gBAAgB,uBAAgB,IAAI,EAAQ,AAAI,aAAV,KAAK,IAAG,CAAC,GAAG;;AAKpD,oBAAI,+BAAY,aAAa,gBAAK,+BAAY,cAAc;AAC1D,cAAO;;AAOL,cAAI;AACK;AACb;AACK,QAAH,IAAA,AAAC,CAAA;AAC2C,QAA5C,YAAY,uBAAgB,IAAI,EAAQ,aAAN,KAAK,IAAG,CAAC;yBACpC,0BACP,SAAS,EACI,4BACA,4BACA;AAIF;AACb;AACK,QAAH,IAAA,AAAC,CAAA;AAC8C,QAA/C,WAAW,uBAAgB,IAAI,EAAQ,AAAI,aAAV,KAAK,IAAG,CAAC,GAAG;yBACtC,0BACP,QAAQ,EACK,4BACA,4BACA;AAKf,oBAAI,+BAAY,aAAa,gBACzB,0BACE,cAAc,EACD,+BACA,+BACA,+CAEf,+BAAY,SAAS;AACvB,cAAO;;AAIT,oBAAI,+BAAY,QAAQ,gBACpB,0BACE,aAAa,EACA,+BACA,+BACA,+CAEf,+BAAY,cAAc;AAC5B,cAAO;;AAIT,UAAkB,YAAd,aAAa,EAAiB,qCACf,YAAf,cAAc,EAAiB;AACjC,cAAO;;AAIT,UAAkB,YAAd,aAAa,EAAiB,qCACf,YAAf,cAAc,EAAiB,oCACrB,YAAV,SAAS,EAAiB;AAC5B,cAAO;;AAIT,UAAa,YAAT,QAAQ,EAAiB,qCACX,YAAd,aAAa,EAAiB,oCACf,YAAf,cAAc,EAAiB;AACjC,cAAO;;AAMT,UAAkB,YAAd,aAAa,EAAiB,gCACf,YAAf,cAAc,EAAiB;AACjC,cAAO;;AAIT,oBAAI,+BAAY,aAAa,MAAoB,YAAf,cAAc,EAAiB,8BAC/D,MAAO;AAGT,UAAkB,YAAd,aAAa,EAAiB,0CAAW,+BAAY,cAAc,IACrE,MAAO;AAIT,UAAa,YAAT,QAAQ,EAAiB,0CACzB,0BACE,aAAa,EACA,4BACA,+BACA,qCAEA,YAAf,cAAc,EAAiB;AACjC,cAAO;;AAIT,UAAkB,YAAd,aAAa,EAAiB,0CAC9B,0BACE,cAAc,EACD,4BACA,+BACA,qCAEL,YAAV,SAAS,EAAiB;AAC5B,cAAO;;AAKT,UAAkB,YAAd,aAAa,EAAiB,iCACf,YAAf,cAAc,EAAiB;AACjC,cAAO;;AAKT,oBAAI,0BACE,aAAa,EACA,6BACA,kCACA,6BACA,8BACA,sCAEA,YAAf,cAAc,EAAiB;AACjC,cAAO;;AAIT,UAAkB,YAAd,aAAa,EAAiB,+CAC9B,0BACE,cAAc,EACD,6BACA,kCACA,6BACA;AAEjB,cAAO;;AAcT,YAAO;IACT;6BAEkC;AAChC,YAAsB,EAAT,aAAN,KAAK,IAAG,WAAU;IAC3B;kBAGe,OACA,SACA,SACA,SACA,SACA;;;;AAEb,UAAU,YAAN,KAAK,EAAI,OAAO;AAClB,cAAO;;AAET,UAAU,YAAN,KAAK,EAAI,OAAO;AAClB,cAAO;;AAET,UAAI,OAAO,IAAI,QAAc,YAAN,KAAK,EAAI,OAAO;AACrC,cAAO;;AAET,UAAI,OAAO,IAAI,QAAc,YAAN,KAAK,EAAI,OAAO;AACrC,cAAO;;AAET,UAAI,OAAO,IAAI,QAAc,YAAN,KAAK,EAAI,OAAO;AACrC,cAAO;;AAET,YAAO;IACT;uBAEqC;AACnC,YAAO,2BAAO,QAAQ,EAAe,6BAAsB;IAC7D;;;;EACF;;;;;;;ICjQe;;;;;;IAGH;;;;;;IAGA;;;;;;;AAb0B,YAAiB,2CAC/C,QAAQ,WACR,iBAAiB,iBACjB,mBAAmB;IACpB;;AAYe,YAAW,AAAK,cAAhB,oBAAc,KAAkB,aAAb,sBAAgB;IAAC;;AAGpC,2BAAc,WAAM,iBAAY;IAAa;;UAGxC;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAI,oBAAqB,iBAAN,KAAK;AACtB,cAAO;;AAEU,kDAAa,KAAK;AACrC,YAAO,AAAK,AAC4B,cADzB,AAAW,UAAD,SACrB,AAAW,mBAAG,AAAW,UAAD,eACxB,AAAa,qBAAG,AAAW,UAAD;IAChC;;AAIE,uBAAO,4BACD,AACF,6BADkB,aAAI,uBAAS,mBAAU,uBAAU,qBAAY,MACvD;IACd;;;QAjEmB;QAAW;QAAqB;IAAhC;IAAW;IAAqB;;EAAkB;8CAiBvB;kBACnC,mBAAE,AAAmB,mBAAA,QAAC;wBAChB,gBAAE,AAAmB,mBAAA,QAAC;0BACpB,gBAAE,AAAmB,mBAAA,QAAC;;EAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4D7D;;0CANK;;;;EAML;;;;;;;;;;;;;;;IA+BkB;;;;;;IAGL;;;;;;;;QAbJ;QACA;IADA;IACA;;EACL;oDAEkD;IACpC,mBAAE,kDAC8B,WAAtC,AAAyB,yBAAA,QAAC,uBAAa;yBAC/B,iBAAE,AAAyB,yBAAA,QAAC;;EAAc;;;;;;;;;;;;;;;;;IAoB9D;;4CATK;;;;EASL;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+B0B;;;;;;IAGP;;;;;;;AAQG,iBAAO,2BAAoB;AAC7C,YAAO,IAAI,IAAI;AACf,YAAO,KAAI;IACb;;AAYE,uBAAI,sBAA+B,6CAC/B,wBAAmC;AAErC;;AAEF,UAAI,mBAAc;AACU,QAA1B,AAAM,oBAAS;;IAEnB;WAWqB;;UACS;AAE5B,WAAO,WAAC;AAEoB,MAA5B,sBAAgB,WAAW;AACZ,MAAf,iBAAW;AACS,MAApB,kBAAY,QAAQ;AAUpB,UAAkB,YAAd,sBAA+B,+BACjB,YAAd,sBAA+B;AAK9B,QAJH,AAAe,2BAAI,AAAW,AAAO,gCAAO,QAAC;AAC3C,wBAAI;AACQ,YAAV;;;;AAKY,MAAlB,AAAW;AAEX,UAAI,2BAAqB;AACW,QAAlC,qBAAgB;;AAM+B,WAFjD;MACI,SAAS,AAAS,AAAkB,mDAAO;MAC3C,SAAI,AAAW,AAAQ,2CAAO;;IACpC;;AAME,qBAAO;AAES,MAAhB,iBAAW;AACa,MAAxB,0BAAoB;AAEpB,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAe,gCAAQ,IAAA,AAAC,CAAA;AAChB,QAA1B,AAAc,AAAI,4BAAH,CAAC;;AAEI,MAAtB,AAAe;AACI,MAAnB;IACF;sBAEwC;AACtC,cAAQ,AAAY,WAAD;;;AAEwB,UAAvC,kBAAa,AAAM;AACnB;;;;AAG0C,UAA1C,kBAAa,AAAM;AACnB;;;;AAIuD,UADvD,WAAM,8BACF,AAAkD,sCAAvB,AAAY,WAAD;;;AAET,MAAhC,AAAS,AAAK,4BAAO;IAC5B;;AAGqB,MAAnB,AAAW;AACM,MAAjB,kBAAa;IACf;;AAGoB,MAAlB,AAAW;IACb;oBAEkC;;AACA,MAAhC,0BAAoB,YAAY;AAChC,qBAAK,8BAAa,AAAa,YAAD;AAC5B;;AAGF,cAAQ;;;AAEoB,+CAAQ;AACD,UAA/B,AAAM,KAAD,SAAS,AAAa,YAAD;AAIzB,UAHD,AAAM,KAAD,mBACH,AAAa,YAAD,aACZ,AAAa,YAAD;AAEd;;;;AAG2B,qDAAW;AACJ,UAAlC,AAAS,QAAD,SAAS,AAAa,YAAD;AAI5B,UAHD,AAAS,QAAD,mBACN,AAAa,YAAD,aACZ,AAAa,YAAD;AAEd;;;;AAGgC,UAAhC,AAAY,4BAAS;AAC0B,UAA/C,AAAW,yBAAY,cAAK,AAAa,YAAD;AAGA,eAFnC,AAAO;UACR;UACA,YAAS,mBAAa,YAAY;;AACtC;;;AAKc,MAAlB,AAAW;IACb;sBAYiC;IAEjC;oBAE8B;AACe,MAA3C,0BAAoB;AACQ,MAA5B,gBAAU;IACZ;;AAIE,YAAO,mBAAc;AAER;AACb,cAAQ;;;AAEoB,sDAAe;AAKtC,UAJD,eAAe,mCACP,AAAa,YAAD,oBACN,AAAa,YAAD,+BACV,AAAa,YAAD;AAE5B;;;;AAG2B,4DAAkB;AAK5C,UAJD,eAAe,mCACP,AAAgB,eAAD,oBACT,AAAgB,eAAD,+BACb,AAAgB,eAAD;AAE/B;;;;AAQa,wCAAO,oBAAoB,iBAAY;AACpD,cAAiC,aAA7B,AAAW,AAAW,uCAAS;AAKvB,mCAAmB,mBACzB,AAAkB,oCAAY,AAAkB;AACvC,2BAAW,AAAkB;AAChC,gCAAgB,AAAS,AAAO,QAAR,UAAU,gBAAgB;AAElD,qCAAqB,AAAK,AAAO,IAAR,UAAU,aAAa;AAMzD,YAJD,eAAe,mCACP,IAAI,cACE,kBAAkB,gBAChB,kBAAkB;;AAGb,4BAAiB,AAAO;AAK5C,YAJD,eAAe,mCACP,IAAI,cACE,AAAU,SAAD,2BACP,AAAU,SAAD;;;;AAK/B,YAAO,YAAY,IAAI;AACvB,YAAO,aAAY;IACrB;mBAEqC;;AACnB,uBAAa,AAAW;AACxC,WAAY,AAAS;MACjB,YAAS,UAAU,EAAE,AAAa,YAAD;MACjC,UAAO,UAAU,EAAE,AAAa,YAAD;;IACrC;;4CA5PwB;IAGnB,iBAAW;IAEC;IACJ;IACK;IAEyB,uBACP;IAVZ;;EAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBA+RU;AAGtC,YAAO,mBAAc;AACrB,qBAAY,AAAS,AAAK,4BAAS;IACrC;;AAUmB,MAAjB,AAAW;IACb;;IAQA;sBAGiC;AACM,MAA/B,uBAAgB,cAAc;AAKjB,MAAnB;IACF;;sDAhDoB,OACD;QACW;IACN,0BAAE,gBAAgB;AACpC,iEAAM,KAAK;AAGf,UAAO,2BAAoB,UAAU,KAAK;AACd,IAAvB,kBAAa,UAAU;EAC9B;;;;;;;;;;;;;;;;;;;;;;AAsEE,UAAI,+BAAyB;AAC3B,cAAO;;AAET,YAAO;IACT;6BAMiD;AAC/C,oBAAI,kCAAc,oBAAoB,EAAI;AAC3B,QAAb;;AAE0C,MAA5C,8BAAwB,oBAAoB;IAC9C;;AAKgC,MAA9B,8BAAyB;IAC3B;;AAU0B;IAAU;oBAKN;AACX,iBAA+B,iCAAiB,IAAI;AACrE,cAAQ,AAAK,IAAD;;;AAEG,gCACP,AAAkB,mBAAL,wBAAQ,iBAA2B,WAAd,AAAK,IAAD,qBAAW;AACrD,cAAI,eAAe,cAAI;AACR,YAAb;;AAE2B,4BAA7B,gBAA0B,WAAd,AAAK,IAAD,qBAAW;AACO,iCAAlC,6BAA+B,WAAd,AAAK,IAAD,qBAAW;AAChC;;;;AAI8D,UAD9D,AACK,oCAA6B,iEAAY,AAAK,IAAD;AAClD;;;;AAGA,yBAAK;AACY,YAAf;;AAEF;;;;AAG4B,UAA5B,gDAAa,AAAK,IAAD;AACjB;;;;AAG6B,UAA7B,iDAAc,AAAK,IAAD;AAClB;;;;;AAIA,wBAAI;AACW,YAAb;;AAEF;;;IAEN;;AAGE,WAAO,WAAC;AACS,MAAjB,mBAAa;AAIZ,MAHD,AAAe,2BACM,0CAAY,4CACrB;IAEd;;AAGE,qBAAO;AACW,MAAlB,mBAAa;AACW,MAAxB,AAAe;IACjB;;AAGkC;IAAa;;AAI7C,YAAO,uBAAiB;AACxB,YAA4F,UAAlF,AAAc,kCAAW,eAAG,AAAc,gCAAS,iBAAK,AAAc;IAClF;oBAEwC;AACtC,qBAAO,AAAM,KAAD,eAAa;AACzB,qBAAO,AAAM,KAAD,eAAa;AACzB,qBAAO,AAAM,KAAD,eAAa;AACzB,qBAAO,AAAM,KAAD,eAAa;AAEf,2CAAiB,AAAK,KAAA,QAAC;AACvB,+CAAqB,AAAK,KAAA,QAAC;AAYpC,MAPD,sBAAgB,6CACkB,AAAM,+BAAC,kBAAkB,gCAC/C,AAAK,KAAA,QAAC,yBACQ,AAAM,2BAAC,cAAc,kCACjC,AAAK,KAAA,QAAC,4BAEd,8DAAsC,AAAK,KAAA,QAAC;IAEpD;;AAKI;IAAuB;mBAEY;AACrC,qBAAO,AAAuB,sBAAD,eAAa;AAC1C,qBAAO,AAAuB,sBAAD,eAAa;AAC1C,qBAAO,AAAuB,sBAAD,eAAa;AAEvB,0BAAc,yCACX,AAAsB,sBAAA,QAAC;AAK5C,MAJD,gCAA0B,oEACjB,AAAsB,sBAAA,QAAC,sCACtB,AAAsB,sBAAA,QAAC,uBACR,8CAAS,aAAa;AAG/C,UAAI,AAAe,kCAAc;AACsB,QAArD,iCAA2B,AAAe;;IAE9C;iCAE6C;AAU1C,MATE,AAAO,4BACR,qBACwB,iCACtB,0BAAW,sCAA+C,CACxD,iBACA,AAAa,YAAD;IAKpB;iCAOiD;AAC/C,UAAI,iCAA2B,UACX,YAAd,sBAA+B,gCACb,YAAhB,wBAAmC;AACrB,QAApB,cAAS,UAAU;;IAEvB;aAS+B;;AAChB,yBACT,iCAA0B,AAAwB;AAM1B,WAL5B,AAAW,UAAD;MACN,aACF,SADa,AAAwB,uCAAM;MACzC,cACF,SADc,AAAwB,wCAAO;MAC3C,iBAAY,AAAc;MAC1B,YAAO;MACP,iBAAY,YAAY;;IAC9B;;AAG0B,kBAAa;AACL,MAAhC,iCAA0B,KAAK;AACE,MAAjC,iCAA2B,KAAK;AAChC,YAAO,MAAK;IACd;;AAG6B,qBAAgB;AACR,MAAnC,iCAA0B,QAAQ;AACE,MAApC,iCAA2B,QAAQ;AACnC,YAAO,SAAQ;IACjB;;;IAxNmB;IAWA;IA0Bf;IAKC,mBAAa;IAKG;IA2DP;IAgCY;AAtIyB,IAAjD,+BAAyB,kCAAmB;EAC9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0OoB,wCAAoB,gBAAW;IAAc;;;QAfhD;QACA;QACA;QACA;QACV;IAJU;IACA;IACA;IACA;IACV;;EACL;;;;;;;;;;;;;;;;;QAqBe;QACA;QACA;IAFA;IACA;IACA;;EACf;;;;;;;;;;;;;AChxByB;IAAU;qBAIJ;AACjB,cAAY;AACb,wBAAc,AAAE,CAAD,aAAa,KAAK;AAC9C,UAAI,AAAY,WAAD,KAAI;AACjB,cAAO;;AAET,YAAO,EAAC;IACV;UAGc,KAAS;AAAQ,YAAK,AAAK,cAAT,GAAG,IAAG,iBAAK,GAAG;;UAG7B,KAAS;AACxB,YAAY,AAAM,aAAV,GAAG,KAAI,KAAW,aAAJ,GAAG,iBAAG;AAC5B,YAAY,AAAM,aAAV,GAAG,KAAI,KAAW,aAAJ,GAAG,iBAAG;AAE5B,YAAO,AAAU,0BAAC,WAAM,GAAG,EAAE,GAAG;IAClC;aAGkB,KAAS,KAAY;AACrC,YAAY,AAAM,aAAV,GAAG,KAAI,KAAW,aAAJ,GAAG,iBAAG;AAC5B,YAAY,AAAM,aAAV,GAAG,KAAI,KAAW,aAAJ,GAAG,iBAAG;AAEG,MAA/B,AAAU,yBAAC,WAAM,GAAG,EAAE,GAAG,GAAK,CAAC;IACjC;eAIe,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA;;AACX,WAAQ;MACJ,aAAU,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAClE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;;IAAC;oBAGb;;AAAW,WAAQ;MACrD,aACE,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,IACP,AAAM,MAAA,QAAC,KACP,AAAM,MAAA,QAAC,KACP,AAAM,MAAA,QAAC,KACP,AAAM,MAAA,QAAC,KACP,AAAM,MAAA,QAAC,KACP,AAAM,MAAA,QAAC;;IAAI;;;AAMa,WAAQ;MAAQ;;IAAa;gBAG9B;;AAAU,WAAQ;MAAQ,WAAQ,KAAK;;IAAC;oBAGpC;AACjB,cAAY;AACb,wBAAc,AAAE,CAAD,aAAa,KAAK;AAC9C,UAAI,AAAY,WAAD,KAAI;AACqD,QAAtE,WAAoB,6BAAM,KAAK,EAAE,SAAS;;AAE5C,YAAO,EAAC;IACV;qBAGiC;;AAAY,WAAQ;MACjD,AAAU,uBAAC,IAAM;MACjB,gBAAa,OAAO;;IAAC;qBAGQ;;AAAY,WAAQ;MACjD,AAAU,uBAAC,IAAM;MACjB,gBAAa,OAAO;;IAAC;qBAGQ;;AAAY,WAAQ;MACjD,AAAU,uBAAC,IAAM;MACjB,gBAAa,OAAO;;IAAC;uBAGW;;AAAgB,WAAQ;MACxD;MACA,kBAAe,WAAW;;IAAC;6BAGU,GAAU,GAAU;;AACzD,WAAQ;MACJ;MACA,qBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC;;IAAC;2BAGK,GAAU,GAAU;;AACvD,WAAQ;MACJ,AAAU,uBAAC,IAAM;MACjB,AAAU,uBAAC,IAAM,CAAC;MAClB,AAAU,uBAAC,GAAK,CAAC;MACjB,AAAU,uBAAC,GAAK,CAAC;;;cAYd,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA;AACa,MAAtB,AAAU,yBAAC,IAAM,KAAK;AACA,MAAtB,AAAU,yBAAC,IAAM,KAAK;AACA,MAAtB,AAAU,yBAAC,IAAM,KAAK;AACA,MAAtB,AAAU,yBAAC,IAAM,KAAK;AACA,MAAtB,AAAU,yBAAC,IAAM,KAAK;AACA,MAAtB,AAAU,yBAAC,IAAM,KAAK;AACF,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,AAAU,yBAAC,GAAK,IAAI;IACtB;YAGqB;AACD,uBAAa,AAAI,GAAD;AACH,MAA/B,AAAU,yBAAC,IAAM,AAAU,UAAA,QAAC;AACG,MAA/B,AAAU,yBAAC,IAAM,AAAU,UAAA,QAAC;AACG,MAA/B,AAAU,yBAAC,IAAM,AAAU,UAAA,QAAC;AACG,MAA/B,AAAU,yBAAC,IAAM,AAAU,UAAA,QAAC;AACG,MAA/B,AAAU,yBAAC,IAAM,AAAU,UAAA,QAAC;AACG,MAA/B,AAAU,yBAAC,IAAM,AAAU,UAAA,QAAC;AACC,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;AACE,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;AACE,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;AACE,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;AACE,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;AACE,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;AACE,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;AACE,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;AACE,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;AACE,MAA7B,AAAU,yBAAC,GAAK,AAAU,UAAA,QAAC;IAC7B;;AAGqB;IAAC;SAGC;AAAM,YAAA,AAAU,0BAAC,CAAC;IAAC;SAGpB;UAAU;AACb,MAAjB,AAAU,yBAAC,CAAC,EAAI,CAAC;;IACnB;;AAGmB,YAAQ,qBAAK;IAAK;aAGZ;AACL,uBAAa,AAAI,GAAD;AACL,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACI,MAA/B,AAAU,UAAA,QAAC,IAAM,AAAU,yBAAC;AACG,MAA/B,AAAU,UAAA,QAAC,IAAM,AAAU,yBAAC;AACG,MAA/B,AAAU,UAAA,QAAC,IAAM,AAAU,yBAAC;AACG,MAA/B,AAAU,UAAA,QAAC,IAAM,AAAU,yBAAC;AACG,MAA/B,AAAU,UAAA,QAAC,IAAM,AAAU,yBAAC;AACG,MAA/B,AAAU,UAAA,QAAC,IAAM,AAAU,yBAAC;AAC5B,YAAO,IAAG;IACZ;cAGuB,GAAW,GAAgB;;;AACzC;AACA;AACA;AAEP,UAAM,kBAAF,CAAC;AACK,QAAR,KAAK,AAAE,CAAD;AACE,QAAR,KAAK,AAAE,CAAD;AACE,QAAR,KAAK,AAAE,CAAD;YACD,KAAM,OAAF,CAAC;AACJ,QAAN,KAAK,CAAC;AACA,QAAN,KAAK,CAAC;AACA,QAAN,KAAK,CAAC;;AAEK,eAAmB,AAAK,AACd,AACA,aAFL,AAAU,yBAAC,mBAAK,EAAE,IAClB,aAAd,AAAU,yBAAC,mBAAK,EAAE,IACJ,aAAd,AAAU,yBAAC,mBAAK,EAAE,IACH,aAAf,AAAU,yBAAC;AACF,eAAmB,AAAK,AACd,AACA,aAFL,AAAU,yBAAC,mBAAK,EAAE,IAClB,aAAd,AAAU,yBAAC,mBAAK,EAAE,IACJ,aAAd,AAAU,yBAAC,mBAAK,EAAE,IACH,aAAf,AAAU,yBAAC;AACF,eAAmB,AAAK,AACd,AACC,aAFN,AAAU,yBAAC,mBAAK,EAAE,IAClB,aAAd,AAAU,yBAAC,mBAAK,EAAE,IACH,aAAf,AAAU,yBAAC,oBAAM,EAAE,IACJ,aAAf,AAAU,yBAAC;AACF,eAAmB,AAAK,AACd,AACC,aAFN,AAAU,yBAAC,mBAAK,EAAE,IAClB,aAAd,AAAU,yBAAC,mBAAK,EAAE,IACH,aAAf,AAAU,yBAAC,oBAAM,EAAE,IACJ,aAAf,AAAU,yBAAC;AACI,MAAnB,AAAU,yBAAC,IAAM,EAAE;AACA,MAAnB,AAAU,yBAAC,IAAM,EAAE;AACA,MAAnB,AAAU,yBAAC,IAAM,EAAE;AACA,MAAnB,AAAU,yBAAC,IAAM,EAAE;IACrB;UAGmB,GAAW,GAAU;;;;AAC/B;AACA;AACA;AAEP,UAAM,kBAAF,CAAC;AACK,QAAR,KAAK,AAAE,CAAD;AACE,QAAR,KAAK,AAAE,CAAD;AACE,QAAR,KAAK,AAAE,CAAD;YACD,KAAM,OAAF,CAAC;AACJ,QAAN,KAAK,CAAC;AACK,QAAX,MAAO,KAAF,CAAC,QAAD,OAAK,CAAC;AACA,QAAX,MAAO,MAAF,CAAC,SAAD,OAAK,CAAC;;AAEM,aAAnB;WAAW;MAAD,gBAAI,aAAJ,gCAAO,EAAE;AACA,aAAnB;YAAW;MAAD,iBAAI,aAAJ,iCAAO,EAAE;AACA,aAAnB;aAAW;MAAD,kBAAI,aAAJ,kCAAO,EAAE;AACA,aAAnB;aAAW;MAAD,kBAAI,aAAJ,kCAAO,EAAE;AACA,aAAnB;aAAW;MAAD,kBAAI,aAAJ,kCAAO,EAAE;AACA,aAAnB;aAAW;MAAD,kBAAI,aAAJ,kCAAO,EAAE;AACA,aAAnB;aAAW;MAAD,kBAAI,aAAJ,kCAAO,EAAE;AACA,aAAnB;aAAW;MAAD,kBAAI,aAAJ,kCAAO,EAAE;AACA,aAAnB;aAAW;MAAD,kBAAI,aAAJ,kCAAO,EAAE;AACA,aAAnB;aAAW;MAAD,kBAAI,aAAJ,kCAAO,EAAE;AACC,cAApB;aAAW;MAAD,mBAAK,aAAL,mCAAQ,EAAE;AACA,cAApB;aAAW;MAAD,mBAAK,aAAL,mCAAQ,EAAE;AACA,cAApB;cAAW;MAAD,oBAAK,aAAL;AACU,cAApB;cAAW;MAAD,oBAAK,aAAL;AACU,cAApB;cAAW;MAAD,oBAAK,aAAL;AACU,cAApB;cAAW;MAAD,oBAAK,aAAL;IACZ;WAIuB,GAAW,GAAU;;;;AAAO;MAAS,SAAM,CAAC,EAAE,CAAC,EAAE,CAAC;;IAAC;;AAIrD,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACI,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;IACnB;;AAIqB,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACI,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;AACG,MAApB,AAAU,yBAAC,IAAM;IACnB;;;AAGwB;MAAS;;IAAW;;AAGnC;AACa,MAApB,OAAO,AAAU,yBAAC;AACW,MAA7B,AAAU,yBAAC,GAAK,AAAU,yBAAC;AACP,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,OAAO,AAAU,yBAAC;AACW,MAA7B,AAAU,yBAAC,GAAK,AAAU,yBAAC;AACP,MAApB,AAAU,yBAAC,GAAK,IAAI;AACC,MAArB,OAAO,AAAU,yBAAC;AACY,MAA9B,AAAU,yBAAC,IAAM,AAAU,yBAAC;AACR,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,OAAO,AAAU,yBAAC;AACW,MAA7B,AAAU,yBAAC,GAAK,AAAU,yBAAC;AACP,MAApB,AAAU,yBAAC,GAAK,IAAI;AACC,MAArB,OAAO,AAAU,yBAAC;AACY,MAA9B,AAAU,yBAAC,IAAM,AAAU,yBAAC;AACR,MAApB,AAAU,yBAAC,GAAK,IAAI;AACC,MAArB,OAAO,AAAU,yBAAC;AACa,MAA/B,AAAU,yBAAC,IAAM,AAAU,yBAAC;AACP,MAArB,AAAU,yBAAC,IAAM,IAAI;IACvB;;AAIe,uBACK,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAClD,uBACK,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAClD,uBACK,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAClD,uBACK,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAClD,uBACK,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAClD,uBACK,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAClD,yBAA6B,AAAa,AACxB,aADH,AAAU,yBAAC,MAAK,UAAU,GACpC,aAAd,AAAU,yBAAC,MAAK,UAAU,GACX,aAAf,AAAU,yBAAC,OAAM,UAAU;AAClB,yBAA6B,AAAa,AACxB,aADH,AAAU,yBAAC,MAAK,UAAU,GACpC,aAAd,AAAU,yBAAC,MAAK,UAAU,GACX,aAAf,AAAU,yBAAC,OAAM,UAAU;AAClB,yBAA6B,AAAa,AACvB,aADJ,AAAU,yBAAC,MAAK,UAAU,GACnC,aAAf,AAAU,yBAAC,OAAM,UAAU,GACZ,aAAf,AAAU,yBAAC,OAAM,UAAU;AAClB,yBAA6B,AAAa,AACvB,aADJ,AAAU,yBAAC,MAAK,UAAU,GACnC,aAAf,AAAU,yBAAC,OAAM,UAAU,GACZ,aAAf,AAAU,yBAAC,OAAM,UAAU;AAC/B,YAAO,AAAc,AAAiB,AACJ,AACA,EAF1B,YAAY,gBAAG,AAAU,yBAAC,OAC9B,AAAa,YAAD,gBAAG,AAAU,yBAAC,OAC1B,AAAa,YAAD,gBAAG,AAAU,yBAAC,OAC1B,AAAa,YAAD,gBAAG,AAAU,yBAAC;IAChC;UAG2B;AACzB,UAAQ,OAAJ,GAAG;AACL,cAAO,aAAO,GAAG;;AAEnB,UAAQ,kBAAJ,GAAG;AACL,cAAO,mBAAa,GAAG;;AAEzB,UAAQ,kBAAJ,GAAG;AACL,cAAO,iBAAW,GAAG;;AAEC,MAAxB,WAAM,2BAAc,GAAG;IACzB;yBAIqC;AACjB,uBAAa,AAAI,GAAD;AACrB,cAAmB,AAAiB,AACb,AACA,aAFlB,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MAC1B,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACb,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,mBAC5B,AAAU,yBAAC;AACF,cAAmB,AAAiB,AACb,AACA,aAFlB,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MAC1B,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACb,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,mBAC5B,AAAU,yBAAC;AACF,cAAmB,AAAiB,AACb,AACC,aAFnB,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MAC1B,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACZ,aAAf,AAAU,yBAAC,oBAAM,AAAU,UAAA,QAAC,mBAC7B,AAAU,yBAAC;AACF,cAAI,AAAI,OACD,AAAiB,AACG,AACC,aAFnC,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACV,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACZ,aAAf,AAAU,yBAAC,oBAAM,AAAU,UAAA,QAAC,mBAC7B,AAAU,yBAAC;AACE,MAArB,AAAU,UAAA,QAAC,GAAK,AAAE,CAAD,GAAG,CAAC;AACA,MAArB,AAAU,UAAA,QAAC,GAAK,AAAE,CAAD,GAAG,CAAC;AACA,MAArB,AAAU,UAAA,QAAC,GAAK,AAAE,CAAD,GAAG,CAAC;AACrB,YAAO,IAAG;IACZ;;AAGI,YAAA,AAAU,AAAI,AAkBQ,0BAlBX,OAAM,OAEjB,AAAU,AAAI,yBAAH,OAAM,OACjB,AAAU,AAAI,yBAAH,OAAM,OACjB,AAAU,AAAI,yBAAH,OAAM,OACjB,AAAU,AAAI,yBAAH,OAAM,OAEjB,AAAU,AAAI,yBAAH,OAAM,OACjB,AAAU,AAAI,yBAAH,OAAM,OACjB,AAAU,AAAI,yBAAH,OAAM,OACjB,AAAU,AAAI,yBAAH,OAAM,OAEjB,AAAU,AAAI,yBAAH,OAAM,OACjB,AAAU,AAAK,yBAAJ,QAAO,OAClB,AAAU,AAAK,yBAAJ,QAAO,OAClB,AAAU,AAAK,yBAAJ,QAAO,OAElB,AAAU,AAAK,yBAAJ,QAAO,OAClB,AAAU,AAAK,yBAAJ,QAAO,OAClB,AAAU,AAAK,yBAAJ,QAAO;IAAG;;AAIV,cAAI,AAAU,yBAAC;AACf,cAAI,AAAU,yBAAC;AACf,cAAI,AAAU,yBAAC;AAC5B,YAAO,oBAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;IACxB;WAEoB,MAAa;AAClB,gBAAM,AAAK,IAAD;AACL,wBAAc,AAAK,IAAD;AACvB,cAAmB,aAAf,AAAW,WAAA,QAAC,mBAAK,GAAG;AACxB,cAAmB,aAAf,AAAW,WAAA,QAAC,mBAAK,GAAG;AACxB,cAAmB,aAAf,AAAW,WAAA,QAAC,mBAAK,GAAG;AACxB,cAAI,SAAS,KAAK;AAClB,cAAI,SAAS,KAAK;AAClB,cAAI,AAAI,MAAE,CAAC;AACX,gBAAM,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AACnB,gBAAM,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,GAAG,AAAE,CAAD,GAAG,CAAC;AACvB,gBAAM,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,GAAG,AAAE,CAAD,GAAG,CAAC;AACvB,gBAAM,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,GAAG,AAAE,CAAD,GAAG,CAAC;AACvB,gBAAM,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AACnB,gBAAM,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,GAAG,AAAE,CAAD,GAAG,CAAC;AACvB,gBAAM,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,GAAG,AAAE,CAAD,GAAG,CAAC;AACvB,gBAAM,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,GAAG,AAAE,CAAD,GAAG,CAAC;AACvB,gBAAM,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AACnB,eACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG;AACtD,eACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG;AACtD,eACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAkB,aAAf,AAAU,yBAAC,OAAM,GAAG;AACvD,eACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAkB,aAAf,AAAU,yBAAC,OAAM,GAAG;AACvD,eACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG;AACtD,eACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG;AACtD,eACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAkB,aAAf,AAAU,yBAAC,OAAM,GAAG;AACvD,eACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAkB,aAAf,AAAU,yBAAC,OAAM,GAAG;AACvD,eACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG;AACtD,gBACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG;AACtD,gBACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAkB,aAAf,AAAU,yBAAC,OAAM,GAAG;AACvD,gBACK,AAAM,AAAsB,aAA1C,AAAU,yBAAC,MAAK,GAAG,GAAiB,aAAd,AAAU,yBAAC,MAAK,GAAG,GAAkB,aAAf,AAAU,yBAAC,OAAM,GAAG;AAClD,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACC,MAAnB,AAAU,yBAAC,GAAK,GAAG;AACC,MAApB,AAAU,yBAAC,IAAM,GAAG;AACA,MAApB,AAAU,yBAAC,IAAM,GAAG;IACtB;YAEoB;AACL,qBAAW,SAAS,KAAK;AACzB,qBAAW,SAAS,KAAK;AACzB,eAAmB,AAAW,aAAzB,AAAU,yBAAC,MAAK,QAAQ,GAAiB,aAAd,AAAU,yBAAC,MAAK,QAAQ;AACxD,eAAmB,AAAW,aAAzB,AAAU,yBAAC,MAAK,QAAQ,GAAiB,aAAd,AAAU,yBAAC,MAAK,QAAQ;AACxD,eAAmB,AAAW,aAAzB,AAAU,yBAAC,MAAK,QAAQ,GAAiB,aAAd,AAAU,yBAAC,MAAK,QAAQ;AACxD,eAAmB,AAAW,aAAzB,AAAU,yBAAC,MAAK,QAAQ,GAAiB,aAAd,AAAU,yBAAC,MAAK,QAAQ;AACxD,eAAmB,AAAY,aAA1B,AAAU,yBAAC,MAAK,CAAC,QAAQ,GAAiB,aAAd,AAAU,yBAAC,MAAK,QAAQ;AACzD,eAAmB,AAAY,aAA1B,AAAU,yBAAC,MAAK,CAAC,QAAQ,GAAiB,aAAd,AAAU,yBAAC,MAAK,QAAQ;AACzD,eAAmB,AAAY,aAA1B,AAAU,yBAAC,MAAK,CAAC,QAAQ,GAAiB,aAAd,AAAU,yBAAC,MAAK,QAAQ;AACzD,eAAmB,AAAY,aAA1B,AAAU,yBAAC,MAAK,CAAC,QAAQ,GAAiB,aAAd,AAAU,yBAAC,MAAK,QAAQ;AACpD,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;IACpB;mBAG4B;AACR,qBAAW,AAAE,CAAD;AACjB,cAAI,AAAQ,QAAA,QAAC;AACb,cAAI,AAAQ,QAAA,QAAC;AACb,cAAI,AAAQ,QAAA,QAAC;AACR,MAAlB,AAAU,yBAAC,IAAM,CAAC;AACA,MAAlB,AAAU,yBAAC,IAAM,CAAC;AACA,MAAlB,AAAU,yBAAC,IAAM,CAAC;IACpB;sBAG8B,GAAU,GAAU;AAC9B,MAAlB,AAAU,yBAAC,IAAM,CAAC;AACA,MAAlB,AAAU,yBAAC,IAAM,CAAC;AACA,MAAlB,AAAU,yBAAC,IAAM,CAAC;IACpB;;AAIS;AACa,MAApB,OAAO,AAAU,yBAAC;AACW,MAA7B,AAAU,yBAAC,GAAK,AAAU,yBAAC;AACP,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,OAAO,AAAU,yBAAC;AACW,MAA7B,AAAU,yBAAC,GAAK,AAAU,yBAAC;AACP,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,OAAO,AAAU,yBAAC;AACW,MAA7B,AAAU,yBAAC,GAAK,AAAU,yBAAC;AACP,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,OAAO,AAAU,yBAAC;AACW,MAA7B,AAAU,yBAAC,GAAK,AAAU,yBAAC;AACP,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,OAAO,AAAU,yBAAC;AACW,MAA7B,AAAU,yBAAC,GAAK,AAAU,yBAAC;AACP,MAApB,AAAU,yBAAC,GAAK,IAAI;AACA,MAApB,OAAO,AAAU,yBAAC;AACW,MAA7B,AAAU,yBAAC,GAAK,AAAU,yBAAC;AACP,MAApB,AAAU,yBAAC,GAAK,IAAI;IACtB;;AAGmB,8BAAY;IAAK;gBAGT;AACP,uBAAa,AAAI,GAAD;AACrB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBAAU,AAAM,aAAV,GAAG,iBAAG,GAAG,IAAO,aAAJ,GAAG,iBAAG,GAAG;AAC3B,gBACT,AAAI,AAAM,AAAY,AAAY,AAAY,AAAY,GAAvD,GAAG,GAAG,GAAG,AAAI,GAAD,GAAG,GAAG,GAAG,AAAI,GAAD,GAAG,GAAG,GAAG,AAAI,GAAD,GAAG,GAAG,GAAG,AAAI,GAAD,GAAG,GAAG,GAAG,AAAI,GAAD,GAAG,GAAG;AACzE,UAAI,AAAI,GAAD,KAAI;AACG,QAAZ,aAAQ,GAAG;AACX,cAAO;;AAEI,mBAAS,AAAI,MAAE,GAAG;AAC6B,MAA5D,AAAU,yBAAC,GAAyC,CAA/B,AAAM,AAAY,aAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACC,MAA7D,AAAU,yBAAC,GAA0C,CAApC,AAAK,AAAM,AAAY,cAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACD,MAA5D,AAAU,yBAAC,GAAyC,CAA/B,AAAM,AAAY,aAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACC,MAA7D,AAAU,yBAAC,GAA0C,CAApC,AAAK,AAAM,AAAY,cAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACA,MAA7D,AAAU,yBAAC,GAA0C,CAApC,AAAK,AAAM,AAAY,cAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACD,MAA5D,AAAU,yBAAC,GAAyC,CAA/B,AAAM,AAAY,aAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACC,MAA7D,AAAU,yBAAC,GAA0C,CAApC,AAAK,AAAM,AAAY,cAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACD,MAA5D,AAAU,yBAAC,GAAyC,CAA/B,AAAM,AAAY,aAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACA,MAA5D,AAAU,yBAAC,GAAyC,CAA/B,AAAM,AAAY,aAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACC,MAA7D,AAAU,yBAAC,GAA0C,CAApC,AAAK,AAAM,AAAY,cAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACA,MAA7D,AAAU,yBAAC,IAA0C,CAA/B,AAAM,AAAY,aAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACC,MAA9D,AAAU,yBAAC,IAA2C,CAApC,AAAK,AAAM,AAAY,cAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACA,MAA9D,AAAU,yBAAC,IAA2C,CAApC,AAAK,AAAM,AAAY,cAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACD,MAA7D,AAAU,yBAAC,IAA0C,CAA/B,AAAM,AAAY,aAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACC,MAA9D,AAAU,yBAAC,IAA2C,CAApC,AAAK,AAAM,AAAY,cAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AACD,MAA7D,AAAU,yBAAC,IAA0C,CAA/B,AAAM,AAAY,aAAtB,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,GAAO,aAAJ,GAAG,IAAG,GAAG,IAAI,MAAM;AAC7D,YAAO,IAAG;IACZ;;AAGe,gBAAM;AACnB,UAAI,AAAI,GAAD,KAAI;AACT,cAAO;;AAEI,mBAAS,AAAI,mBAAE,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAE6D,MADpE,KAAK,AAAO,MAAD,IACQ,AAAiB,aAA/B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,OAAoB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAEG,MADpE,KAAK,AAAO,MAAD,IACQ,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAEG,MADnE,KAAK,AAAO,MAAD,IACQ,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAEI,MADpE,KAAK,AAAO,MAAD,IACQ,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAEI,MADpE,KAAK,AAAO,MAAD,IACQ,AAAiB,aAA/B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,OAAoB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAEE,MADnE,KAAK,AAAO,MAAD,IACQ,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAEG,MADnE,KAAK,AAAO,MAAD,IACQ,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAEG,MADnE,KAAK,AAAO,MAAD,IACQ,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAEG,MADnE,KAAK,AAAO,MAAD,IACQ,AAAgB,aAA9B,AAAU,yBAAC,mBAAK,AAAU,yBAAC,MAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAC9C,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACA,MAAlB,AAAU,yBAAC,GAAK,EAAE;AACC,MAAnB,AAAU,yBAAC,IAAM,EAAE;AACnB,YAAO,IAAG;IACZ;iBAGyB;AACV,cAAI,SAAS,OAAO;AACpB,cAAI,SAAS,OAAO;AACd,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACC,MAAjB,AAAU,yBAAC,GAAK,CAAC;AACA,MAAjB,AAAU,yBAAC,GAAK,CAAC;AACE,MAAnB,AAAU,yBAAC,GAAK;AACE,MAAlB,AAAU,yBAAC,GAAK,CAAC,CAAC;AACA,MAAlB,AAAU,yBAAC,IAAM,CAAC;AACC,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACI,MAApB,AAAU,yBAAC,IAAM;IACnB;iBAGyB;AACV,cAAI,SAAS,OAAO;AACpB,cAAI,SAAS,OAAO;AAChB,MAAjB,AAAU,yBAAC,GAAK,CAAC;AACE,MAAnB,AAAU,yBAAC,GAAK;AACE,MAAlB,AAAU,yBAAC,GAAK,CAAC,CAAC;AACC,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACC,MAAjB,AAAU,yBAAC,GAAK,CAAC;AACE,MAAnB,AAAU,yBAAC,GAAK;AACE,MAAlB,AAAU,yBAAC,IAAM,CAAC;AACC,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACI,MAApB,AAAU,yBAAC,IAAM;IACnB;iBAGyB;AACV,cAAI,SAAS,OAAO;AACpB,cAAI,SAAS,OAAO;AAChB,MAAjB,AAAU,yBAAC,GAAK,CAAC;AACA,MAAjB,AAAU,yBAAC,GAAK,CAAC;AACE,MAAnB,AAAU,yBAAC,GAAK;AACE,MAAlB,AAAU,yBAAC,GAAK,CAAC,CAAC;AACD,MAAjB,AAAU,yBAAC,GAAK,CAAC;AACE,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACI,MAApB,AAAU,yBAAC,IAAM;AACE,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACI,MAApB,AAAU,yBAAC,IAAM;IACnB;aAGsB;AACP,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACZ,uBAAa,AAAI,GAAD;AACrB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACjB,gBAAM,AAAU,UAAA,QAAC;AACuC,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACC,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACC,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACE,MAAtE,AAAU,yBAAC,IAAW,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACA,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACC,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACC,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACE,MAAtE,AAAU,yBAAC,IAAW,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACA,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACC,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACE,MAAtE,AAAU,yBAAC,IAAW,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACC,MAAtE,AAAU,yBAAC,IAAW,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACA,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACC,MAArE,AAAU,yBAAC,GAAU,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACE,MAAtE,AAAU,yBAAC,IAAW,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;AACC,MAAtE,AAAU,yBAAC,IAAW,AAAO,AAAc,AAAc,aAAvC,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG,IAAS,aAAJ,GAAG,iBAAG,GAAG;IACvE;eAG2B;;AAAQ;MAAS,YAAS,GAAG;;IAAC;sBAG1B;AAChB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACZ,uBAAa,AAAI,GAAD;AAIT,MAHzB,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAIG,MAHzB,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACC,aAFV,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAkB,AACb,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,OAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAIG,MAHzB,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAIG,MAHzB,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACC,aAFV,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAkB,AACb,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,OAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAIG,MAHzB,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAIG,MAHzB,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAiB,AACb,AACC,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAkB,AACb,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,OAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAIG,MAHzB,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAIG,MAHzB,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAiB,AACb,AACC,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAkB,AACb,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,OAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;IACxB;sBAG+B;AAChB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACjB,gBAAM,AAAU,yBAAC;AACZ,uBAAa,AAAI,GAAD;AAIR,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACC,aAFV,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAiB,AACb,AACC,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACC,aAFV,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAiB,AACb,AACC,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAiB,AACb,AACC,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAiB,AACb,AACC,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,GAAU,AAAiB,AACZ,AACA,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MACzB,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAiB,AACb,AACC,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;AAII,MAH1B,AAAU,yBAAC,IAAW,AAAiB,AACb,AACC,aAFT,GAAG,iBAAG,AAAU,UAAA,QAAC,MAC1B,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,MACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC,OACb,aAAJ,GAAG,iBAAG,AAAU,UAAA,QAAC;IACxB;YAGwB;AACJ,uBAAa,AAAI,GAAD;AACrB,cAAmB,AAAiB,AACb,aADlB,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MAC1B,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACb,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACnB,cAAmB,AAAiB,AACb,aADlB,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MAC1B,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACb,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACnB,cAAmB,AAAiB,AACb,aADlB,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MAC1B,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACZ,aAAf,AAAU,yBAAC,oBAAM,AAAU,UAAA,QAAC;AAChB,MAAjB,AAAU,UAAA,QAAC,GAAK,CAAC;AACA,MAAjB,AAAU,UAAA,QAAC,GAAK,CAAC;AACA,MAAjB,AAAU,UAAA,QAAC,GAAK,CAAC;AACjB,YAAO,IAAG;IACZ;aAIyB,KAAc;;AACrC,UAAI,AAAI,GAAD,IAAI;AACc,QAAvB,MAAc,oBAAK,GAAG;;AAEN,QAAhB,AAAI,GAAD,SAAS,GAAG;;AAEjB,YAAO,cAAQ,GAAG;IACpB;eAI2B;AACP,uBAAa,AAAI,GAAD;AACrB,cAAmB,AAAiB,AACb,AACA,aAFlB,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MAC1B,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACb,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,mBAC5B,AAAU,yBAAC;AACF,cAAmB,AAAiB,AACb,AACA,aAFlB,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MAC1B,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACb,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,mBAC5B,AAAU,yBAAC;AACF,cAAmB,AAAiB,AACb,AACC,aAFnB,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MAC1B,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC,MACZ,aAAf,AAAU,yBAAC,oBAAM,AAAU,UAAA,QAAC,mBAC7B,AAAU,yBAAC;AACE,MAAjB,AAAU,UAAA,QAAC,GAAK,CAAC;AACA,MAAjB,AAAU,UAAA,QAAC,GAAK,CAAC;AACA,MAAjB,AAAU,UAAA,QAAC,GAAK,CAAC;AACjB,YAAO,IAAG;IACZ;iBAK6B,KAAc;;AACzC,UAAI,AAAI,GAAD,IAAI;AACc,QAAvB,MAAc,oBAAK,GAAG;;AAEN,QAAhB,AAAI,GAAD,SAAS,GAAG;;AAEjB,YAAO,iBAAW,GAAG;IACvB;kBAG6B,OAAY;;AAC7B,cAAI,MAAM;AACU,MAA9B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,IAAM,AAAU,yBAAC;AACG,MAA9B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,IAAM,AAAU,yBAAC;AACG,MAA9B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,IAAM,AAAU,yBAAC;AACG,MAA9B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,IAAM,AAAU,yBAAC;AACG,MAA9B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,IAAM,AAAU,yBAAC;AACG,MAA9B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,IAAM,AAAU,yBAAC;AACC,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;AACE,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;AACE,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;AACE,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;AACE,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;AACE,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;AACE,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;AACE,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;AACE,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;AACE,MAA5B,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG,GAAK,AAAU,yBAAC;IAC5B;kBAGgC,OAAY;;AAChC,cAAI,MAAM;AACU,MAA9B,AAAU,yBAAC,IAAM,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACG,MAA9B,AAAU,yBAAC,IAAM,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACG,MAA9B,AAAU,yBAAC,IAAM,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACG,MAA9B,AAAU,yBAAC,IAAM,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACG,MAA9B,AAAU,yBAAC,IAAM,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACG,MAA9B,AAAU,yBAAC,IAAM,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACC,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACE,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACE,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACE,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACE,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACE,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACE,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACE,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACE,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;AACE,MAA5B,AAAU,yBAAC,GAAK,AAAK,KAAA,QAAG,aAAF,CAAC,IAAG;IAC5B;;;IAz+B4B,oBAAE,yCAAY;;EAAG;;IAqDhB;;EAAW;wCAIV,QAAY;IACzB,oBAAc,4BAAK,MAAM,EAAE,MAAM,EAAE;;EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAu7B5B;IAAU;eAGb,GAAW,GAAW;;AAIlB,WAH1B,MAAM;MACF,OAAI,sBAAS,AAAE,CAAD,IAAI,AAAE,CAAD;MACnB,OAAI,sBAAS,AAAE,CAAD,IAAI,AAAE,CAAD;MACnB,OAAI,sBAAS,AAAE,CAAD,IAAI,AAAE,CAAD;;IACzB;eAGwB,GAAW,GAAW;;AAIlB,WAH1B,MAAM;MACF,OAAI,sBAAS,AAAE,CAAD,IAAI,AAAE,CAAD;MACnB,OAAI,sBAAS,AAAE,CAAD,IAAI,AAAE,CAAD;MACnB,OAAI,sBAAS,AAAE,CAAD,IAAI,AAAE,CAAD;;IACzB;eAIwB,KAAa,KAAY,GAAW;;AAIvB,WAHnC,MAAM;MACF,OAAU,aAAN,AAAI,GAAD,MAAO,aAAF,CAAC,KAAU,aAAN,AAAI,GAAD,mBAAK,AAAI,GAAD;MAC5B,OAAU,aAAN,AAAI,GAAD,MAAO,aAAF,CAAC,KAAU,aAAN,AAAI,GAAD,mBAAK,AAAI,GAAD;MAC5B,OAAU,aAAN,AAAI,GAAD,MAAO,aAAF,CAAC,KAAU,aAAN,AAAI,GAAD,mBAAK,AAAI,GAAD;;IAClC;eAGuB,GAAU,GAAU;;AACvC,WAAQ;MAAQ,aAAU,CAAC,EAAE,CAAC,EAAE,CAAC;;IAAC;eAMX;;AAAU,WAAQ;MAAQ,SAAM,KAAK;;IAAC;gBAGpC;;AAAU,WAAQ;MAAQ,WAAQ,KAAK;;IAAC;kBAYjC;;AACb,MAArB,AAAI,GAAD,IAAC,OAAJ,MAAa,oBAAT;AACJ,YAAO,oBAAQ,AAAI,GAAD,eAAe,AAAI,GAAD,eAAe,AAAI,GAAD;IACxD;cAGsB,GAAU,GAAU;AACvB,MAAjB,AAAU,yBAAC,GAAK,CAAC;AACA,MAAjB,AAAU,yBAAC,GAAK,CAAC;AACA,MAAjB,AAAU,yBAAC,GAAK,CAAC;IACnB;;AAIqB,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;AACG,MAAnB,AAAU,yBAAC,GAAK;IAClB;YAGqB;AACD,yBAAe,AAAM,KAAD;AACP,MAA/B,AAAU,yBAAC,GAAK,AAAY,YAAA,QAAC;AACE,MAA/B,AAAU,yBAAC,GAAK,AAAY,YAAA,QAAC;AACE,MAA/B,AAAU,yBAAC,GAAK,AAAY,YAAA,QAAC;IAC/B;UAGkB;AACG,MAAnB,AAAU,yBAAC,GAAK,GAAG;AACA,MAAnB,AAAU,yBAAC,GAAK,GAAG;AACA,MAAnB,AAAU,yBAAC,GAAK,GAAG;IACrB;SAGuB;AAAM,YAAA,AAAU,0BAAC,CAAC;IAAC;SAGpB;UAAU;AACb,MAAjB,AAAU,yBAAC,CAAC,EAAI,CAAC;;IACnB;eAIkB;;AAChB,UAAI,AAAM,KAAD,KAAI;AACF,QAAT;;AAEO,gBAAI;AACX,YAAI,AAAE,CAAD,KAAI;AACP;;AAEW,QAAb,IAAU,aAAN,KAAK,iBAAG,CAAC;AACK,aAAlB;aAAW;QAAD,cAAI,aAAJ,8BAAO,CAAC;AACA,cAAlB;cAAW;QAAD,gBAAI,aAAJ,gCAAO,CAAC;AACA,eAAlB;eAAW;QAAD,kBAAI,aAAJ,kCAAO,CAAC;;IAEtB;;AAGqB,uBAAU;IAAQ;;AAI9B;AAC4B,MAAnC,MAAoB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AACG,MAApC,MAAI,aAAJ,GAAG,IAAkB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AACE,MAApC,MAAI,aAAJ,GAAG,IAAkB,aAAd,AAAU,yBAAC,mBAAK,AAAU,yBAAC;AAClC,YAAO,IAAG;IACZ;;;AAIe,cAAI;AACjB,UAAI,AAAE,CAAD,KAAI;AACP,cAAO;;AAEI,cAAI,AAAI,mBAAE,CAAC;AACN,WAAlB;WAAW;MAAD,cAAI,aAAJ,iBAAO,CAAC;AACA,YAAlB;YAAW;MAAD,gBAAI,aAAJ,mBAAO,CAAC;AACA,aAAlB;aAAW;MAAD,kBAAI,aAAJ,qBAAO,CAAC;AAClB,YAAO,EAAC;IACV;;;AAGwB,WAAQ,oBAAK;MAAO;;IAAW;kBAGzB;;AAGb,WAFf,GAAG;MACC,WAAQ;MACR;;AACJ,YAAO,IAAG;IACZ;eAG0B;AAAQ,uBAAU,uBAAkB,GAAG;IAAE;sBAGlC;AACb,uBAAa,AAAI,GAAD;AACrB,eAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AAChC,eAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AAChC,eAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AAE7C,YAAO,AAAG,AAAK,AAAU,GAAhB,GAAG,EAAE,GAAG,AAAG,EAAD,GAAG,EAAE,GAAG,AAAG,EAAD,GAAG,EAAE;IACpC;YAGuB;AACH,yBAAe,AAAM,KAAD;AACtC,UAAI,AAAU,AAAI,yBAAH,MAAM,AAAY,YAAA,QAAC,MAC9B,AAAU,AAAI,yBAAH,MAAM,AAAY,YAAA,QAAC,MAC9B,AAAU,AAAI,yBAAH,MAAM,AAAY,YAAA,QAAC;AAChC,cAAO;;AAGI,cAAe,aAAX,SAAI,KAAK,MAAY,aAAP,4BAAS,AAAM,KAAD;AAE7C,YAAO,WAAU,AAAE,CAAD,SAAO,CAAC,KAAK;IACjC;QAGmB;AACC,yBAAe,AAAM,KAAD;AAC/B;AAC8B,MAArC,MAAoB,aAAd,AAAU,yBAAC,mBAAK,AAAY,YAAA,QAAC;AACG,MAAtC,MAAI,aAAJ,GAAG,IAAkB,aAAd,AAAU,yBAAC,mBAAK,AAAY,YAAA,QAAC;AACE,MAAtC,MAAI,aAAJ,GAAG,IAAkB,aAAd,AAAU,yBAAC,mBAAK,AAAY,YAAA,QAAC;AACpC,YAAO,IAAG;IACZ;oBAG6B;AACT,uBAAa,AAAI,GAAD;AACrB,cAAI,AAAU,yBAAC;AACf,cAAI,AAAU,yBAAC;AACf,cAAI,AAAU,yBAAC;AACf,cAAI,AAAI,OACF,AAAI,AACG,AACC,aAFtB,AAAU,UAAA,QAAC,mBAAK,CAAC,IACA,aAAd,AAAU,UAAA,QAAC,mBAAK,CAAC,IACF,aAAf,AAAU,UAAA,QAAC,oBAAM,CAAC,iBAClB,AAAU,UAAA,QAAC;AAKd,MAJL,AAAU,yBAAC,GAGa,CAHO,AAAI,AACT,AACA,aAFT,AAAU,UAAA,QAAC,mBAAK,CAAC,IACZ,aAAd,AAAU,UAAA,QAAC,mBAAK,CAAC,IACH,aAAd,AAAU,UAAA,QAAC,mBAAK,CAAC,iBACjB,AAAU,UAAA,QAAC,QACf,CAAC;AAKA,MAJL,AAAU,yBAAC,GAGa,CAHO,AAAI,AACT,AACA,aAFT,AAAU,UAAA,QAAC,mBAAK,CAAC,IACZ,aAAd,AAAU,UAAA,QAAC,mBAAK,CAAC,IACH,aAAd,AAAU,UAAA,QAAC,mBAAK,CAAC,iBACjB,AAAU,UAAA,QAAC,QACf,CAAC;AAKA,MAJL,AAAU,yBAAC,GAGa,CAHO,AAAI,AACT,AACC,aAFV,AAAU,UAAA,QAAC,mBAAK,CAAC,IACZ,aAAd,AAAU,UAAA,QAAC,mBAAK,CAAC,IACF,aAAf,AAAU,UAAA,QAAC,oBAAM,CAAC,iBAClB,AAAU,UAAA,QAAC,QACf,CAAC;IACP;;AAIO,uBAAa;AACiC,MAAnD,aAAa,AAAW,UAAD,IAAI,AAAU,AAAI,yBAAH;AACa,MAAnD,aAAa,AAAW,UAAD,IAAI,AAAU,AAAI,yBAAH;AACa,MAAnD,aAAa,AAAW,UAAD,IAAI,AAAU,AAAI,yBAAH;AACtC,YAAO,WAAU;IACnB;;AAIO,kBAAQ;AACuB,MAApC,QAAQ,AAAM,KAAD,IAAI,AAAU,AAAI,yBAAH;AACQ,MAApC,QAAQ,AAAM,KAAD,IAAI,AAAU,AAAI,yBAAH;AACQ,MAApC,QAAQ,AAAM,KAAD,IAAI,AAAU,AAAI,yBAAH;AAC5B,YAAO,MAAK;IACd;QAGiB;AACG,uBAAa,AAAI,GAAD;AACW,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACE,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACE,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;IAC7C;cAGuB,KAAY;AACf,uBAAa,AAAI,GAAD;AACoB,MAAtD,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,MAAmB,aAAd,AAAU,UAAA,QAAC,mBAAK,MAAM;AACA,MAAtD,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,MAAmB,aAAd,AAAU,UAAA,QAAC,mBAAK,MAAM;AACA,MAAtD,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,MAAmB,aAAd,AAAU,UAAA,QAAC,mBAAK,MAAM;IACxD;QAGiB;AACG,uBAAa,AAAI,GAAD;AACW,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACE,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACE,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;IAC7C;aAGsB;AACF,uBAAa,AAAI,GAAD;AACW,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACE,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACE,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;IAC7C;WAGoB;AACA,uBAAa,AAAI,GAAD;AACW,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACE,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;AACE,MAA7C,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,AAAU,UAAA,QAAC;IAC7C;UAGkB;AACmB,MAAnC,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,GAAG;AACA,MAAnC,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,GAAG;AACA,MAAnC,AAAU,yBAAC,GAAmB,aAAd,AAAU,yBAAC,mBAAK,GAAG;IACrC;WAGsB;;AAAQ;MAAS,SAAM,GAAG;;IAAC;;AAG9B,YAAQ,qBAAK;IAAK;aAGZ;AACL,uBAAa,AAAI,GAAD;AACL,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AACE,MAA7B,AAAU,UAAA,QAAC,GAAK,AAAU,yBAAC;AAC3B,YAAO,IAAG;IACZ;kBAGgC,OAAY;;AACT,MAAjC,AAAK,KAAA,QAAQ,aAAP,MAAM,IAAG,GAAK,AAAU,yBAAC;AACE,MAAjC,AAAK,KAAA,QAAQ,aAAP,MAAM,IAAG,GAAK,AAAU,yBAAC;AACE,MAAjC,AAAK,KAAA,QAAQ,aAAP,MAAM,IAAG,GAAK,AAAU,yBAAC;IACjC;UAEa;;AAAQ;WAAW;YAAK,GAAG;MAAT;;IAAS;UAC3B;;AAAQ;WAAW;YAAK,GAAG;MAAT;;IAAS;UAC3B;;AAAQ;WAAW;YAAK,GAAG;MAAT;;IAAS;;AAExB,YAAA,AAAU,0BAAC;IAAE;;AACb,YAAA,AAAU,0BAAC;IAAE;;AACb,YAAA,AAAU,0BAAC;IAAE;;;IA/QD,oBAAE,yCAAY;;EAAE;;IASf;;EAAW;wCAIV,QAAY;IACzB,oBAAc,4BAAK,MAAM,EAAE,MAAM,EAAE;;EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClkBtB,YAAc;IAAI;;AAEjB,YAAc;IAAI;;AAiBtB,YAAc;IAAI;;AAcjB;IAAgB;;AAOZ;IAAsB;;AAYX;IAAyB;iCAE5B;AACJ,MAApC,kCAA4B,QAAQ;IACtC;;AAIqC;IAAmB;;AAYR;IAA4B;oCAE/B;AACJ,MAAvC,qCAA+B,QAAQ;IACzC;;AAkBqC;IAAiB;yBAEpB;AACJ,MAA5B,0BAAoB,QAAQ;IAC9B;;AAeE,UAAI,kBAAY,kBAAQ,AAAS;AAC/B,cAAO,AAAS;;AAElB,YAAO;IACT;;AAgB4B;IAAQ;;AAaA;IAAgB;wBAEnB;AACJ,MAA3B,yBAAmB,QAAQ;IAC7B;;AAUE,UAAI,AAA6B,mCAAG;AAE4B,QAD9D,WAAM,mBACF;;AAEwB,MAA9B,AAA4B;IAC9B;;AAqBkC;IAAa;qBAEhB;AACL,MAAxB,sBAAgB,QAAQ;IAC1B;;AAkBuC;IAAgB;wBAEnB;AACP,MAA3B,yBAAmB,QAAQ;IAC7B;;AAgBgC;IAAY;oBAEf;AACJ,MAAvB,qBAAe,QAAQ;IACzB;;AAWqD;IAAoB;4BAEvB;AACjB,MAA/B,6BAAuB,QAAQ;IACjC;;AA2CI,YAA4B,AAAS;IAAgB;;AAMX;IAA0B;kCAE7B;AACJ,MAArC,mCAA6B,QAAQ;IACvC;;AAUiD;IAAkB;0BAErB;AACf,MAA7B,2BAAqB,QAAQ;IAC/B;;AAOI;IAA+B;uCAEa;AACJ,MAA1C,wCAAkC,QAAQ;IAC5C;;AAeiD;IAAkB;0BAErB;AACf,MAA7B,2BAAqB,QAAQ;IAC/B;oBASqC;AACyB,MAAhC,AAAS,qDAAgB,MAAM;IAC7D;;AAkBmD;IAAsB;WA4BvD;AAChB;AAC0B,kDAAa,KAAK;AACJ,QAAtC,AAAY,uBAAK,AAAW,UAAD;;AAE6B,QAAjD,AAAY,+BAAY,AAAM,KAAD;;IAExC;;AASoC;IAAsB;wBAI1B;IAAO;;;IAnYhC,yBAAmB;IAOrB,+BAAyB;IAYjB;IAQF,4BAAiC;IAY/B;IAsBA;IAwCA;IAYA;IAwCC;IAsBE;IAoBH;IAea;IAqDb;IAcW;IAWX;IAmBW;IAiCF;IAoCE,oBAAqB,QAChC,0BAAkB,uBAAQ,QAAiB;AACC,MAA1C,AAAY,+BAAY,AAAO,MAAD;AACD,MAApC,AAAO,AAAU,MAAX,sBAAsB;6BAE9B;IAIC;;EAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAlUsB,eAAK;;;;;;IC1lBjB;;;;;;;AAhDuB;IAAiB;kCAKN;AACxC,qBAAO,AAGN;AAF0B,QAAzB,0BAAoB,KAAK;AACzB,cAAO;;IAEX;;AAMO,qBAAW;AAEhB,qBAAO,AAMN;AALC,YAAI,yCAAoC;AACU,UAAhD,sBAAgB;AACD,UAAf,WAAW;;AAEb,cAAO;;AAGT,WAAK,QAAQ;AACD,+BAAwB,AAAO;AAC/B,gCAAyB,AAAO;AAC1C,YAAI,gBAAgB,IAAI,oCACpB,iBAAiB,IAAI;AACsB,UAA7C,mCAA6B,gBAAgB;AACE,UAA/C,oCAA8B,iBAAiB;AAI9C,UAHD,sBAAmB,gBACjB,AAAiB,gBAAD,eAChB,AAAkB,iBAAD;;;AAKvB,YAAO;IACT;;AAc8B,YAAA,AAAgB;IAAM;;AAGrB,YAAA,AAAgB;IAAW;gCAMb;AACA,MAA3C,AAAgB,yCAAmB,QAAQ;IAC7C;yBAI4B;AACa,MAAvC,AAAgB,mCAAa,SAAS;IACxC;wBAIS,MACE,MAC0B;AAGnC,oBAAI,uCAAwB;AAC1B;;AAEF;AACoD,QAAlD,WAAM,AAA2C,kDAAN,IAAI;;AAEjD,cAAQ,IAAI;;;AAER,gBAAU,0BAAuB;AACpB,oBAAM,AAAK,oBAAO,AAAK,AAAO,IAAR;AAOjC,UANC,AAAoB,AAAU,4BAAL,GAAG,kBAAO,QAAU;AACF,YAA5C,8BAAwB,QAAQ,EAAE,SAAS;0CACjC,QAAS;AAEqC,cADnD,AAAO,AACP,2BAAK,AAA6C,mDAAN,KAAK;AACf,cAAvC,8BAAwB,QAAQ,EAAE;;AAEpC;;;;AAGkB;AACD,wBAAU,AAAM,KAAD,kBAAkB,IAAI;AACtD,kBAAQ,AAAQ,OAAD;;;AAKT,cAHF,AAAgB,AAAO,6CAAK,QAAC;AAEqB,gBADhD,8BACI,QAAQ,EAAE,AAAM,KAAD,uBAAuB;;AAE5C;;;;AAEa,4CAAO,AAAQ,OAAD;AAC0B,cAArD,AAAY,2BAAQ,iCAA2B,IAAI;AACnD;;;;AAE2B,4DAAY,AAAQ,OAAD;AACN,cAAxC,AAAY,+CAAS,AAAS,kBAAC;AAC+B,cAA9D,AAAY,iCAAiB,iCAAM,AAAS,kBAAC;AAC7C;;;AAEJ;;;;AAGiC,UAAjC,AAAY,mCAAgB,IAAI;AAChC;;;;AAGsC,UAAtC,8BAAuB,IAAI,EAAE,QAAQ;AACrC;;;;AAI8C,UAA9C,AAA2B,gDAAc,IAAI;AAC7C;;;IAWN;iCAEsC;AACpC,cAAQ,IAAI;;;AAER;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;;IAEN;8BAMqC,UAC1B;AAIP,MAHF,AACoC,uBAAN,oCAAW,QAAC;AAC1B,QAAd,AAAQ,QAAA,CAAC,IAAI;;IAEjB;;;IA/JO,0BAAoB;IA+BnB,sBAAwB;IAC5B,mCAA6B,CAAC;IAC9B,oCAA8B,CAAC;IAG3B;IAIa,wBAAkB;;;EAwHzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0EzEjFgD;AACZ,IAAlC,AAAqB,kCAAI,QAAQ;EACnC;;AAUE,kBAAI;AACF;;AAgBA,IANF,4BAA4B,2BAA2B,SAAC,GAAG;AACzD,eAAqB,WAAY;AACrB,QAAV,AAAQ,QAAA;;AAEV,sDACuC,8CAAO;;AAGvB,IAAzB,4BAAqB;AAIV,IAAX;AAEK,8BAAsB;AA+B1B,IA9BE,kCAA+B;AAGhC,WAAK,mBAAmB;AACI,QAA1B,sBAAsB;AAwBpB,QAvBG,AAAO,oCAAsB,QAAK;AAEV,UAA3B,sBAAsB;AAOZ,wCAA+C,CAApB,AAAK,oBAAE,WAAW;AAEvD,cAAO,AAAO,0BAAgB;AAEsC,YAD/D,AACE,uBAAa,qCAAuB,uBAAuB;;AAGlE,cAAO,AAAO,yBAAe;AAKJ,YAApB,AAAO;;;;;AAMG,IAAZ;EACX;4DI8tBwC;AACtC,QAAI,AAAU,SAAD,IAAI;AACf,YAAO;;AAET,YAAQ,SAAS;;;AAEb,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;;AAKP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAGuD,QAD9D,WAAM,gCACF,AAAyD,2DAAV,SAAS;;;EAElE;4DAEwC;AACtC,QAAI,AAAU,SAAD,IAAI;AACf,YAAO;;AAET,YAAQ,SAAS;;;AAEb,cAAO;;;;AAEP,cAAO;;;;;AAGP,cAAO;;;EAEb;8DAE0C;AACxC,UAAO,UAAU,IAAI;AACrB,YAAQ,UAAU;;;AAEd,cAAO;;;;AAEP,cAAO;;;;;AAGP,cAAO;;;EAEb;8CASqD,WAChC,SAAmB,QAAgB;;AACzC;AAAM;AACM,mBAAyB;AACxC,cAAM,AAAU,SAAD;AACzB,aAAS,YAAY,GAAG,AAAU,SAAD,gBAAG,GAAG,GAAE,YAAA,AAAS,SAAA;AAC3B,kBAAQ,AAAS,SAAA,QAAC,SAAS;AACzB,uBAAkB;AACzC,UAAI,AAAK,IAAD,IAAI;AACO,QAAjB,OAAO,UAAU;;AAEyB,QAA1C,AAAY,0BAAO,UAAU,EAAE,UAAU;;AAEpB,MAAvB,aAAa,UAAU;AACT,iBAAO,AAAM,KAAD;AAClB,6BAAmB,AAAM,KAAD;AAChC,UAAI,IAAI,IAAI;AACG,0BAAc,AAAK,IAAD;AAClB,0BAAc,AAAK,IAAD;AAEQ,QADvC,yBAAmB,AAAiB,gBAAD,UAC/B,aAAU,WAAW,EAAE,WAAW;AAMO,cAL7C,AAAW,UAAD;QACN,iBAAW;QACX,kBAAY,6BAAsB,gBAAgB;QAClD,wBAAkB;QAClB,cACF,SADwB,aAAX,AAAK,IAAD,uBAAS,WAAW,KAAC;QACpC,eAAyC,SAAjB,aAAZ,AAAK,IAAD,wBAAU,WAAW,KAAC;;YACrC,KAAI,AAAM,KAAD,UAAU;AACT,wBAAY,AAAM,KAAD;AACnB,oCACN,AAAU,SAAD,cAAW,iBAAK,AAAU,SAAD,cAAW,iBAC7C,AAAU,SAAD,cAAW,iBAAK,AAAU,SAAD,cAAW;AACvC,0BAAc,AAAU,SAAD;AACvB,0BAAc,AAAU,SAAD;AAEG,QADvC,2BAAmB,AAAiB,gBAAD,UAC/B,eAAU,WAAW,EAAE,WAAW;AAOY,eANlD,AAAW,UAAD;QACN,sBAAe,YAAY;QAC3B,kBAAW;QACX,mBAAY,6BAAsB,gBAAgB;QAClD,yBAAkB;QAClB,eACF,SAD6B,aAAhB,AAAU,SAAD,uBAAS,WAAW,KAAC;QACzC,gBAA8C,SAAjB,aAAjB,AAAU,SAAD,wBAAU,WAAW,KAAC;;YAC1C,KAAI,AAAM,KAAD,SAAS;AAC6C,QAApE,AAAW,AAAM,UAAP,qBAAmB,6BAAsB,gBAAgB;AACtD,0BAAc,0BAAmB,AAAM,KAAD;AAChC,0BACF,kBAAK,WAAW,kBAAiB;AAEU,QAD5D,AAAY,mCACR,UAAU,EAAE,aAAa,AAA8B,0BAAhB,yBAAc;AAEW,QADpE,AAAY,mCACR,UAAU,EAAE,qBAAqB,AAA8B,0BAAhB,yBAAc;AACxC,QAAzB,AAAS,QAAD,OAAK,WAAW;;AAMP,gCAA2B;AAIjB,aAH7B,AAAoB,mBAAD;MACf,mBACE,mCAAsB,AAAiB,gBAAD,UAAU,kBAAU,KAAG;MAC/D,yBAAkB;;AACgB,MAAtC,AAAW,UAAD,UAAQ,mBAAmB;AACL,MAAhC,aAAa,mBAAmB;;AAGF,IAAhC,AAAK,AAAM,IAAP,oBAAkB;AACiB,IAAvC,AAAY,0BAAO,UAAU,EAAE,OAAO;AAGuC,WAF7E,AAAQ,OAAD;IACH,yBAAkB;IAClB,mBAAY,6BAAsB,gBAAgB,EAAE,AAAO,MAAD,KAAK,AAAO,MAAD;;AACzE,WAAqB,uBAAC,IAAI;IAAG,cAAO,QAAQ;;EAC9C;gEAGY,WAAkB,SAAgB;AAC5C,UAAO,8BACH,2BAAoB,SAAS,EAAK,kBAAO,OAAO,EAAE,OAAO;EAC/D;;ACjiCe,iBAAc,AAAO,AAAU;AAC5C,QAAI,AAAO,MAAD,KAAI;AACZ,YAAqB;UAChB,KAAI,AAAO,MAAD,KAAI;AACnB,YAAqB;UAChB,KAAI,AAAO,MAAD,KAAI;AAGnB,YAAqB;;AAImC,IAA1D,WAAM;AAEN,UAAqB;EACvB;;AAqCe,mBAAgB,AAAO,AAAU;AAE9C,QAAI,AAAS,QAAD,cAAY;AACtB,YAAuB;UAClB,KAAI,AAAS,AAAc,QAAf,4BAAwB,aACvC,AAAS,AAAc,QAAf,4BAAwB,WAChC,AAAS,AAAc,QAAf,4BAAwB;AAClC,YAAuB;UAClB,KAAI,AAAS,AAAc,QAAf,4BAAwB;AACzC,YAAuB;UAClB,KAAI,AAAS,QAAD,cAAY;AAC7B,YAAuB;UAClB,KAAI,AAAS,QAAD,cAAY;AAC7B,YAAuB;;AAEvB,YAAuB;;EAE3B;gDC9E4B,KAAY;QAAe;AACrD,QAAI,AAAI,GAAD,yBAAa,cAAc;AAChC,YAAO,IAAG;;AAEZ,UAAO,AAAI,IAAD,cAAY,OAAO,IAAI,GAAG,GAAiB,SAAZ,OAAO,aAAC,GAAG;EACtD;wEKpByC,MAAyB,UACzD,OAAW,QAAY,QAAY;;;;;AACxB,qCACd,AAAU,4BAAW,wBAAmC,yBAAC,IAAI;AACnD,gBAAQ,uBAAQ,OAAO;AAClB,gBAAQ,4BAAa,KAAK;AAC9B,IAAf,AAAQ,QAAA,CAAC,KAAK;EAChB;;A+DGwB,6BAAqB;AACZ;AAe7B,IAdF,mBAAmB,AAAY,AAAgB,AAAO,mDAAO,QAAC;AACnC,MAAzB,AAAiB,gBAAD;AACE,8BAAgC,kBAAuB,0CACvE,cAAc,SAAQ,MAAa,eAAgC,aAAjB,wCAAmB,IAAI;AAEzD,0BACX,qCAAY,AAAO,gBAAC,mBAA2B,CAAC,iBAAiB;AACtD,oDAAuB,AAAc,aAAD,YAAY;AAMhE,MALF,AAAqB,oBAAD,YAAY,QAAiB,CAC/C,QAAa;AACG,UAAd,mBAAY,EAAE;AACe,UAA7B,AAAmB,kBAAD;;;AAIxB,UAAO,AAAmB,mBAAD;EAC3B;0CC7B+B;AAC7B,UAAU,sCAAS,AAAS,sBAAC,cACjB,sBAAC,AAAK,IAAD,OAAO,AAAK,IAAD,MAAM,AAAK,IAAD,QAAQ,AAAK,IAAD;EACpD;4CAEyC;AACd,kBAAa;AACpB,IAAlB,AAAQ,OAAD,UAAU;AACI,IAArB,AAAO,OAAA,MAAC,GAAK,AAAM,KAAD;AACG,IAArB,AAAO,OAAA,MAAC,GAAK,AAAM,KAAD;AAClB,UAAO,QAAO;EAChB;4CAEiC;AACjB,kBAAa,qCAAS,AAAS,sBAAC;AAE9C,QAAI,AAAM,KAAD,WAAW;AACG,sDAAe,AAAM,KAAD;AAEuB,MADxD,WAAR,OAAO,iBACH,aAA0B,wBAAC,AAAa,YAAD;;AAG7C,QAAI,AAAM,KAAD,UAAU;AACuC,MAAhD,WAAR,OAAO,iBAAY,YAAiB,mBAAC,AAAM,AAAM,KAAP;;AAGhC;AACZ,YAAQ,AAAM,KAAD;;;AAEuC,uBAAhD,mBAAsC,WAAvB,AAAS,sBAAC,wBAAc;AACvC;;;;AAE8C,uBAA9C,mBAAsC,WAAvB,AAAS,sBAAC,wBAAc;AACvC;;;AAEuD,IAAnD,WAAR,OAAO,iBAAY,YAAyB,wBAAC,YAAY;AAE7C;AACZ,YAAQ,AAAM,KAAD;;;AAEoC,sBAA7C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG2C,sBAA3C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG2C,sBAA3C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG+C,sBAA/C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG+C,sBAA/C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG6C,sBAA7C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG6C,sBAA7C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG8C,sBAA9C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG8C,sBAA9C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG+C,sBAA/C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG+C,sBAA/C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG2C,sBAA3C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG4C,sBAA5C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGgD,sBAAhD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG8C,sBAA9C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG+C,sBAA/C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG8C,sBAA9C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG+C,sBAA/C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGkD,sBAAlD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGiD,sBAAjD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGiD,sBAAjD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGiD,sBAAjD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGkD,sBAAlD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGiD,sBAAjD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGgD,sBAAhD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG2C,sBAA3C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGkD,sBAAlD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAG6C,sBAA7C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAGkD,sBAAlD,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;AAEJ,QAAI,WAAW,IAAI;AAC6C,MAAtD,WAAR,OAAO,iBAAY,gBAA6B,wBAAC,WAAW;;AAGD,IAArD,WAAR,OAAO,iBAAY,gBAAsB,oBAAC,AAAM,KAAD;AAE/C,QAAI,AAAM,KAAD,iBAAgB;AAC0C,MAAzD,WAAR,OAAO,iBAAY,kBAA0B,sBAAC,AAAM,KAAD;;AAGrD,QAAI,AAAM,KAAD,eAAe;AACH,sBAAY,AAAM,AAAW,KAAZ;AACvB,kBAAQ,AAAM,AAAW,KAAZ;AAEd;AACZ,cAAQ,SAAS;;;AAEiC,wBAA9C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAE6C,wBAA7C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAE6C,wBAA7C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;;AAE6C,wBAA7C,mBAAoC,WAAtB,AAAS,sBAAC,uBAAa;AACrC;;;AAGc,4CAAe,AAC5B,4BAAW,sBAA+B,CAAC,WAAW,EAAE,KAAK,EAAE;AACJ,MAAxD,WAAR,OAAO,iBAAY,iBAA8B,wBAAC,YAAY;;AAGhE,8BAAO,OAAO;EAChB;8CAW4C;AACjB,mBAAc;AACpB,IAAnB,AAAS,QAAD,UAAU;AAClB,aAAS,IAAI,GAAG,AAAE,CAAD,GAAG,GAAK,IAAF,AAAE,CAAC,GAAH;AACX,yBAAe,AAA4B,2CAAC,CAAC;AACvD,UAAiB,aAAb,YAAY,iBAAG,AAAQ,OAAD;AACW,QAAnC,AAAQ,QAAA,MAAC,CAAC,EAAI,AAAO,OAAA,QAAC,YAAY;;AAEjB,QAAjB,AAAQ,QAAA,MAAC,CAAC,EAAI;;AAElB,UAAO,SAAQ;EACjB;8CAGc,UACL,MACE,OACF,WACF;AAKK,0BAAQ,mBAAmB,IAAG,IAAO;AAEjC,iBAAS,AAAK,IAAD;AACd,kBAAuC,CAAhB,aAAZ,AAAO,MAAD,sBAAQ,AAAO,MAAD,WAAU;AACzC,kBAAqB,aAAX,AAAO,MAAD,QAAO;AAErB,uBACF,sBAAsC,CAAhB,aAAZ,AAAM,KAAD,4BAAgC,GAAG,GAAG;AAGxD,kBAAU,mBAAS,AAAM,KAAD,MAAM,mBAAS,AAAM,KAAD,QAAQ,AAAM,KAAD;AACzD,kBAAU,mBAAS,AAAM,KAAD,MAAM,mBAAS,AAAM,KAAD,QAAQ,AAAM,KAAD;AACtD,oBAAY,AAAI,AAAsB,OAAnB,AAAQ,OAAD,GAAG,OAAO,IAAI;AACxC,wBAA6B,AAAa,aAAzB,AAAM,KAAD,iBAAsB;AAC5C,sBACoD,CAA5D,AAAI,MAAuC,CAApC,AAAS,CAAR,UAAU,AAAQ,UAAE,aAAa,IAAI,aAAa,IACvD,aAAa;AACd,qBACuD,CAAzD,AAAS,WAAmC,CAAhC,AAAU,CAAT,WAAW,AAAO,SAAE,SAAS,IAAI,SAAS,IAAI,SAAS;AAClB,IAAvD,aAAwC,CAA1B,AAAW,UAAD,GAAG,WAAW,UAAQ,KAAK;AAEtC,yBACiC,CAAzC,AAAc,aAAD,IAAI,AAAI,MAAE,AAAI,MAAE,SAAS,WAAS,KAAK;AAE5C,qBAAa,AAAW,UAAD,IAAI,AAAI,MAAE,cAAc;AAC/C,qBAAa,AAAW,UAAD,GAAG,cAAc;AACxC,wBAAgB,AAAW,UAAD,GAAG,UAAU;AAErC,oBAAqB,sBACX,CAAtB,AAAW,UAAD,GAAG,oBACc,CAA3B,AAAc,aAAD,gBAAG,AAAM,KAAD,kBACQ,CAA7B,AAAc,aAAD,gBAAG,AAAM,KAAD,oBACO,CAA5B,AAAc,aAAD,gBAAG,AAAM,KAAD;AAWtB,IARF,AAAS,QAAD,YAAY,cAAuB,CACzC,AAAK,IAAD,WAAQ,6BACoB,sBAAC,KAAG,KAAG,SAAS,KAAE,6BAClB,sBAAC,OAAO,EAAE,OAAO,EAAE,UACnD,KACA,AAAa,YAAD,QACZ,AAAU,SAAD,QACT,KAAK;EAET;4DxEzMoC,WAAqB;AACvD,QAAW,YAAP,MAAM,EAAc;AACtB,YAAO,UAAS;;AAIJ,6BAAqB,AAAU,SAAD;AACW,IAAvD,AAAmB,kBAAD,WAAW,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK;AACnD,UAAO,mBAAkB;EAC3B;gEA4JkB,WACN;;QACF;AAER,mBAAO,AAAU,SAAD;AAEG,+CAAmB,AAAU,AAAkB,SAAnB,4BAAyB;AAEzC,yBAAiB,AAAiB,gBAAD;AAO9B,SANlC,cAAc;IACV,gBAAW;IACX,kBAAa;IACb,oBAAe;IACf,gBAAW;IACX,cACF,SADc,AAAU,SAAD,WAAQ;IAC7B,aAA8B,SAAnB,AAAU,SAAD,UAAO;;AAE/B,QAAI,SAAS,IAAI;AAIoD,YAHnE,cAAc;MACV,wBAAkB;MAClB,kBACE,6BAAsB,2BAAoB,SAAS,EAAE,MAAM;;;AAGrC,gBAAQ,AAAU,SAAD;AAG/C,QAAI,AAAM,KAAD,aAAa,SACjB,AAAM,AAAS,KAAV,aAAa,QAAQ,AAAM,AAAS,KAAV,cAAa;AAGlB,aAF7B,cAAc;MACV,oBAAa;MACb,sBAAe;;;AAErB,UAAO,iBAAgB;EACzB;kDyBpQ4B;AAC1B,UAAa,AAAO,aAAb,KAAK,KAA2B,YAAhB,AAAK,KAAA,QAAC,WAAa;EAC5C;oDAK6B;AAC3B,UAAa,AAAO,aAAb,KAAK,KAA4B,YAAjB,AAAK,KAAA,QAAC,YAAc;EAC7C;gDEwD4B;EAAO;gDChDT;;AACxB,QAAI,AAAY,sBAAG;AACJ,MAAb;;AAGW,kBAAmB,SAAP,MAAM;AAC/B,kBAAI,AAAW,mCAAc,AAAW,AAAK,AAAQ,qCAAG,OAAO;AAC1B,WAAnC,AAAW;MAAK,oBAAe,aAAf,qBAAkB;;AAEE,MAApC,AAAW,wBAAI,2BAAY,OAAO;;AAGpC,QAAsB,aAAlB,AAAW,8BAAS;AACiC,MAAvD,oBAAa,AAAW,4BAA0B,aAAlB,AAAW,8BAAS;;AAGZ,IAA1C,AAAc,8BAAO,AAAW,yBAAK;AAGvB,IAAd,WAAM,OAAO;EACf;;;AAGoD,IAAlD,qBAA2B,iBAAI;AACgB,IAA/C,AAAY,kCAAa,eAAe;AAYrB,SAXnB,AAAY;IACR,gBAAW;IACX,YAAO;IACP,aAAQ;IACR,cAAS;IACT,cAAS;IACT,uBAAkB;IAClB,aAAQ;IACR,gBAAW;IACX,kBAAa;IACb,gBAAW;IACX,cAAS;;AAEwC,IAArD,uBAA6B,iBAAI;AACgB,IAAjD,AAAc,oCAAa,eAAe;AAG1B,UAFhB,AAAc;IACV,iBAAW;IACX,eAAS;;AACoB,IAAjC,AAAY,4BAAO;AAEmB,IAAjC,AAAS,AAAK,4BAAO;EAC5B;;QAW6B;QAAW;AACtC,QAAI,KAAK,IAAI;AACC,MAAZ,WAAM,KAAK;;AAEI,gBACM,AAAW,AAAY,cAA/B,+CAAqC;AACpD,QAAI,SAAS,IAAI;AACc,MAA7B,QAAQ,AAAM,KAAD,QAAM,SAAS;;AAEa,IAA3C,WAAM,AAA0B,0BAAP,KAAK,SAAO;EACvC;0DASqD;;AAChC;AAKN,sBACT,gBAAO;AACE,wBAAgB,gBAAO;AACjB,iBAAiB;AACjB,kBAAkB;AACrC,aAAY,OAAQ,OAAM;AACZ,kBAAQ,AAAY,WAAD,YAAY,IAAI;AAC/C,UAAI,KAAK,IAAI;AACX,cAAO,AAAM,AAAW,KAAZ,gBAAe;AAC3B,sBAAI,AAAiB,gBAAD,YAAU,AAAM,KAAD,OAAO;AAC5B,6BAAe,AAAc,aAAD,YAAY,AAAM,KAAD,OAAO;AAChE,cAAI,YAAY,IAAI,QAAQ,AAAa,AAAS,YAAV,OAAO,OAAM;AAEZ,YADvC,AAAQ,OAAD,OACH,AAAkC,sBAAvB,AAAa,YAAD,OAAO;;AAEM,YAAxC,AAAQ,OAAD,OAAK,AAA2B,sBAAhB,AAAM,KAAD,OAAO;;AAErC;;;AAGY,MAAhB,AAAO,MAAD,OAAK,IAAI;;AAEjB,QAAI,AAAQ,AAAO,OAAR,cAAW;AACmC,MAAvD,AAAO,MAAD,OAAK,AAA2C,qCAAjB,AAAQ,OAAD,aAAQ;UAC/C,KAAmB,aAAf,AAAQ,OAAD,aAAU;AACP,wBAAM,AAA4B,6BAAT,OAAO,cAAY;AAC/D,UAAiB,aAAb,AAAM,KAAD,aAAU;AAC4B,QAA7C,AAAK,KAAA,QAAc,aAAb,AAAM,KAAD,aAAU,GAAK,AAAmB,kBAAZ,AAAM,KAAD;;AAExC,UAAiB,aAAb,AAAM,KAAD,aAAU;AACuD,QAAxE,AAAO,MAAD,OAAK,AAA4D,sBAAjD,AAAQ,OAAD,aAAQ,2BAAe,AAAM,KAAD,QAAM,SAAM;;AAEE,QAAvE,AAAO,MAAD,OAAK,AAA2D,sBAAhD,AAAQ,OAAD,aAAQ,2BAAe,AAAM,KAAD,QAAM,QAAK;;;AAGxE,UAAO,OAAM;EACf;gDAE4B;AAC1B,UAAmD,UAAlC,iBAAP,MAAM,KAAa,gBAAW,cAAP,MAAM,KAAU;EACnD;wC6ChJuB,MAAmB;QAC9B;QAAoB;AAC9B,aAAa,UAAW,AAAK,KAAD;AAC1B,eAAiB,UAAW,AAAQ,QAAD;AACjC,gBAAQ,AAAQ,OAAD;;;AAEE,8CAAS,OAAO;AAC4B,YAAzD,AAAG,EAAD,OAAO,AAA+C,gBAAjC,aAAT,AAAO,MAAD,mBAAK,OAAO,KAAC,eAAY,aAAT,AAAO,MAAD,mBAAK,OAAO;AACtD;;;;AAEa,8CAAS,OAAO;AAC4B,YAAzD,AAAG,EAAD,OAAO,AAA+C,gBAAjC,aAAT,AAAO,MAAD,mBAAK,OAAO,KAAC,eAAY,aAAT,AAAO,MAAD,mBAAK,OAAO;AACtD;;;;AAEoB,oDAAQ,OAAO;AAE2D,YAD9F,AAAG,EAAD,OAAO,gBAAc,aAAT,AAAM,KAAD,oBAAM,OAAO,KAAC,eAAY,aAAT,AAAM,KAAD,oBAAM,OAAO,KAAC,eACvC,aAAT,AAAM,KAAD,oBAAM,OAAO,KAAC,eAAY,aAAT,AAAM,KAAD,oBAAM,OAAO,KAAC,eAAY,aAAT,AAAM,KAAD,oBAAM,OAAO,KAAC,eAAY,aAAT,AAAM,KAAD,oBAAM,OAAO;AAC3F;;;;AAEuB,kEAAmB,OAAO;AAGuB,YAFxE,AAAG,EAAD,OACE,gBAAyB,aAApB,AAAiB,gBAAD,oBAAM,OAAO,KAAC,eAAuB,aAApB,AAAiB,gBAAD,oBAAM,OAAO,KAAC,eAC7C,aAApB,AAAiB,gBAAD,oBAAM,OAAO,KAAC,eAAuB,aAApB,AAAiB,gBAAD,oBAAM,OAAO;AACrE;;;;AAEa,YAAb,AAAG,EAAD,OAAO;AACT;;;;AAEc,gDAAU,OAAO;AAG/B,gBAA4C,AAAgB,CAAtC,aAAjB,AAAQ,OAAD,0BAAY,AAAQ,OAAD,uBAAgB,AAAE,2BAAc;AAWlC,cAV3B,qBACI,EAAE,EACQ,aAAV,AAAQ,OAAD,mBAAK,OAAO,GACT,aAAV,AAAQ,OAAD,mBAAK,OAAO,GACnB,AAAQ,OAAD,UACP,AAAQ,OAAD,UACP,AAAQ,OAAD,WACP,oBACA,KACA,AAAQ,OAAD,mCACW;AAUI,cAT1B,qBACI,EAAE,EACQ,aAAV,AAAQ,OAAD,mBAAK,OAAO,GACT,aAAV,AAAQ,OAAD,mBAAK,OAAO,GACnB,AAAQ,OAAD,UACP,AAAQ,OAAD,UACP,AAAQ,OAAD,WACP,wBAEA,AAAQ,OAAD;;AAWe,cAT1B,qBACI,EAAE,EACQ,aAAV,AAAQ,OAAD,mBAAK,OAAO,GACT,aAAV,AAAQ,OAAD,mBAAK,OAAO,GACnB,AAAQ,OAAD,UACP,AAAQ,OAAD,UACP,AAAQ,OAAD,WACP,AAAQ,OAAD,aACP,AAAQ,OAAD,WACP,AAAQ,OAAD;;AAEb;;;;AAEmB,0DAAe,OAAO;AAC1B,wBAAQ,AAAa,YAAD;AAC5B,uBAAkB,aAAX,AAAM,KAAD,sBAAQ,OAAO;AAC3B,wBAAoB,aAAZ,AAAM,KAAD,uBAAS,OAAO;AAC7B,sBAAgB,aAAV,AAAM,KAAD,qBAAO,OAAO;AACzB,yBAAsB,aAAb,AAAM,KAAD,wBAAU,OAAO;AACtC,gBAAI,AAAK,IAAD,GAAG,KAAK;AACF,cAAZ,OAAO,KAAK;AACgB,cAA5B,QAAmB,aAAX,AAAM,KAAD,sBAAQ,OAAO;;AAE9B,gBAAI,AAAI,GAAD,GAAG,MAAM;AACF,cAAZ,MAAM,MAAM;AACgB,cAA5B,SAAmB,aAAV,AAAM,KAAD,qBAAO,OAAO;;AAEjB,4BAAY,AAAM,AAAU,KAAX;AACjB,4BAAY,AAAM,AAAU,KAAX;AACjB,4BAAY,AAAM,AAAU,KAAX;AACjB,4BAAY,AAAM,AAAU,KAAX;AACjB,4BAAY,AAAM,AAAU,KAAX;AACjB,4BAAY,AAAM,AAAU,KAAX;AACjB,4BAAY,AAAM,AAAU,KAAX;AACjB,4BAAY,AAAM,AAAU,KAAX;AAES,YAAvC,AAAG,EAAD,OAAO,AAA6B,gBAAxB,AAAK,IAAD,GAAG,SAAS,IAAC,eAAE,GAAG;AAEI,YAAxC,AAAG,EAAD,OAAO,AAA8B,gBAAzB,AAAM,KAAD,GAAG,SAAS,IAAC,eAAE,GAAG;AAEiB,YADtD,qBAAc,EAAE,EAAE,AAAM,KAAD,GAAG,SAAS,EAAE,AAAI,GAAD,GAAG,SAAS,EAAE,SAAS,EAC3D,SAAS,EAAE,KAAG,AAAI,yBAAW,AAAI,yBAAW;AAEL,YAA3C,AAAG,EAAD,OAAO,AAAiC,gBAA7B,KAAK,mBAAG,AAAO,MAAD,GAAG,SAAS,IAAC;AAEE,YAD1C,qBAAc,EAAE,EAAE,AAAM,KAAD,GAAG,SAAS,EAAE,AAAO,MAAD,GAAG,SAAS,EAAE,SAAS,EAC9D,SAAS,EAAE,KAAG,KAAG,AAAI,yBAAW;AAEM,YAA1C,AAAG,EAAD,OAAO,AAAgC,gBAA3B,AAAK,IAAD,GAAG,SAAS,IAAC,eAAE,MAAM;AAES,YADhD,qBAAc,EAAE,EAAE,AAAK,IAAD,GAAG,SAAS,EAAE,AAAO,MAAD,GAAG,SAAS,EAAE,SAAS,EAC7D,SAAS,EAAE,KAAG,AAAI,4CAAoB;AAEH,YAAvC,AAAG,EAAD,OAAO,AAA6B,gBAAzB,IAAI,mBAAG,AAAI,GAAD,GAAG,SAAS,IAAC;AAWnC,YAVD,qBACE,EAAE,EACF,AAAK,IAAD,GAAG,SAAS,EAChB,AAAI,GAAD,GAAG,SAAS,EACf,SAAS,EACT,SAAS,EACT,wBAEA,AAAI,yBACJ;AAEF;;;;AAEkB,wDAAc,OAAO;AAC5B,iCAAmC,aAAlB,AAAY,WAAD,UAAS;AACnC,uBAAe,aAAR,OAAO,iBACtB,cAAc,GACK,aAAd,AAAY,WAAD,mBAAK,AAAY,WAAD,UAC3B,AAAY,WAAD;AACR,wBACT,cAAc,GAAG,cAAC,AAAY,WAAD,UAAS,AAAY,WAAD;AAC1C,+BAAkC,aAAnB,AAAY,WAAD,WAAU;AAClC,sBAAc,aAAR,OAAO,iBACrB,YAAY,GACO,aAAd,AAAY,WAAD,mBAAK,AAAY,WAAD,WAC3B,AAAY,WAAD;AACR,yBACT,YAAY,GAAG,cAAC,AAAY,WAAD,WAAU,AAAY,WAAD;AAC3B,YAAzB,AAAG,EAAD,OAAO,AAAe,gBAAX,IAAI,mBAAE,GAAG;AACa,YAAnC,AAAG,EAAD,OAAO,AAAyB,gBAApB,AAAK,IAAD,gBAAG,KAAK,KAAC,eAAE,GAAG;AACc,YAA9C,AAAG,EAAD,OAAO,AAAoC,gBAA/B,AAAK,IAAD,gBAAG,KAAK,KAAC,eAAG,AAAI,GAAD,gBAAG,MAAM,KAAC;AACP,YAApC,AAAG,EAAD,OAAO,AAA0B,gBAAtB,IAAI,mBAAG,AAAI,GAAD,gBAAG,MAAM,KAAC;AACR,YAAzB,AAAG,EAAD,OAAO,AAAe,gBAAX,IAAI,mBAAE,GAAG;AACtB;;;;AAEyD,YAAzD,WAAM,gCAAmB,AAA+B,mCAAR,OAAO;;;;;EAIjE;gDAKiB,IACN,IACA,IACA,SACA,SACA,UACA,YACA,UACF;QACC;AACK,sBAAc,SAAS,QAAQ;AAC/B,sBAAc,SAAS,QAAQ;AAC/B,YAAI,AAAqB,SAAZ,UAAU,iBAAI,OAAO;AAClC,YAAI,AAAqB,SAAZ,UAAU,iBAAI,OAAO;AAElC,kBAAa,aAAH,EAAE,KAAI,AAAY,AAAI,WAAL,GAAG,CAAC,GAAG,AAAY,WAAD,GAAG,CAAC;AACjD,kBAAa,aAAH,EAAE,KAAI,AAAY,AAAI,WAAL,GAAG,CAAC,GAAG,AAAY,WAAD,GAAG,CAAC;AAEjD,aAAK,AAAmB,SAAV,QAAQ,iBAAI,OAAO;AACjC,aAAK,AAAmB,SAAV,QAAQ,iBAAI,OAAO;AAEjC,gBAAW,aAAH,EAAE,KAAI,AAAY,AAAK,WAAN,GAAG,EAAE,GAAG,AAAY,WAAD,GAAG,EAAE;AACjD,gBAAW,aAAH,EAAE,KAAI,AAAY,AAAK,WAAN,GAAG,EAAE,GAAG,AAAY,WAAD,GAAG,EAAE;AAEjD,gBAAiB,aAAT,QAAQ,iBAAG,UAAU;AAC/B,mBAAW,AAAM,AAAM,KAAP;AAEd,sBAAuB,AAAU,aAAnB,QAAQ,wBAAa;AAChD,kBAAI,gBAAgB;AACc,MAAhC,AAAG,EAAD,OAAO,AAAsB,gBAAlB,OAAO,mBAAE,OAAO;;AAGkC,IADjE,AAAG,EAAD,OAAO,gBAAI,OAAO,mBAAE,OAAO,mBAAE,WAAW,mBACnC,QAAQ,GAAG,IAAI,KAAE,yBAAG,aAAa,IAAG,IAAI,KAAE,eAAE,KAAK,mBAAE,KAAK;EACjE;kE5CpJW,MAC0B;AAEjB;AACD,kBAAU,AAAM,KAAD,kBAAkB,IAAI;AAEtD,YAAQ,AAAQ,OAAD;;;AAE2B,QAAtC,2BAAoB,OAAO,EAAE,QAAQ;AACrC;;;AAEU,IAAd,AAAQ,QAAA,CAAC;EACX;4DAGe,YAA+C;AAChC,+BAAO,AAAW,UAAD;AACnC,6BAAK,AAAI,IAAA,QAAC;AACP,sCAAW,AAAI,IAAA,QAAC;AACX;AAGlB,mBAAK,AAAqB,AAAqB,gEAAY,QAAQ;AAI/D,MAHF,AAAQ,QAAA,CAAC,AAAM,KAAD,4BACN,iCACG,AAAgD,kDAAV,QAAQ;AAEzD;;AAGiB,kBACf,AAAqB,AAAoB,AAAU,yDAAT,QAAQ,EAAE,EAAE;AAEV,IAAhD,AAAqB,AAAa,kDAAC,EAAE,EAAI,OAAO;AACL,IAA3C,AAAQ,QAAA,CAAC,AAAM,KAAD,uBAAuB;EACvC;4EC6E2C;AACzC,QAAU,qBAAN,KAAK;AACiB,yBAAe,KAAK;AAC5C,YAAO,AAAa,AAAO,aAAR,YAAW;UAGzB,KAAU,mBAAN,KAAK;AACQ,uBAAa,KAAK;AACxC,YAAO,AAAW,AAAO,WAAR,YAAW;;AAI9B;EACF;wEA8QuC;AAC3B,aAAK,AAAa,YAAD;AACjB,gBACsD,CAAvC,CAAN,aAAb,YAAY,IAAG,EAAE;AACvB,UAAO,sCAAuB,EAAE,gBAAgB,KAAK;EACvD;oEAEkD,MAAa,SACpD,SAAa,SAAgB,WAAe;AACrD,kBAAmB,AAAS,AAAkB,2DAAS,QAAQ;AAC7D;;AAEqD,IAAxC,AAAS,AAAkB,sDAAI,QAAQ;AAoBhD,IAlBN,AAAK,IAAD,UACA,GACG,gCACwB,iCACd,iCAA0B,SAAS,SACnB,wCAGM,mCACzB,QAAQ,aACL,OAAO,aACP,OAAO,WACT,OAAO,YACN,kBACG,kBACA,mBACC,mBACA;EAEtB;oFAGkB;AAQT,iBAAS,AAAM,KAAD;AACd,iBAAS,AAAM,KAAD;AACrB,YAAQ,AAAM,KAAD;;;AAEK,QAAd,SAAO,aAAP,MAAM,IAAI;AACI,QAAd,SAAO,aAAP,MAAM,IAAI;AACV;;;;AAEsC,QAAtC,SAAO,aAAP,MAAM,iBAAO,AAAO,AAAa;AACM,QAAvC,SAAO,aAAP,MAAM,iBAAO,AAAO,AAAa;AACjC;;;;;AAGA;;;AAGuB,eAAuB;AAEd,IADpC,+BAAwB,IAAI,EAAE,AAAM,AAAO,KAAR,aAAW,AAAM,AAAO,KAAR,aAAW,AAAM,KAAD,UAC/D,AAAM,KAAD;AAeP,IAdF,AAAK,IAAD,OAAQ,gCACe,mCACd,iCAA0B,AAAM,KAAD,mBACf,wCACM,oDAEtB,AAAM,AAAO,KAAR,wBACL,AAAM,AAAO,KAAR,sBACP,AAAM,KAAD,oBACJ,kBACG,kBACA,mBACC,MAAM,gBACN,MAAM;AAEtB,UAAO,KAAI;EACb;kEAEiC;AACjB,uBAAe;AACsB,IAAnD,oBAAoB,YAAY,EAAE,WAAW;AAM3C,IALF,mBAAkC,AAAS,AAAY,6DACnD,oBAA6B,CAC/B,SACA,oCAAgB,QAAiB,SAAU,AAAQ,QAAA,CAAC,KAAK,yBACzD,YAAY;EAEhB;wECmdqD;;AAC9B,oDAAe,AAAM,KAAD;AACzC,UAAgB,QACd,AAAM,KAAD,yBAAC,OAAW,kBACjB,AAAM,KAAD,sBAAC,OAAO,YACb,AAAM,KAAD,sBACL,AAAM,KAAD,2BAAC,OAAW,aACjB,AAAM,KAAD,cACL,AAAM,AAAM,KAAP,8BACL,YAAY,iBAAZ,OAAc,4CACd,AAAM,KAAD,4BAAC,OAAY,4CAClB,AAAM,KAAD,+BAAC,OAAe,qBACrB,AAAM,KAAD,6BAAC,OAAa;EAEvB;sEAE+C;AAC7C,UAAgB,EACd,AAAK,IAAD,OACJ,AAAK,IAAD,MACJ,AAAK,IAAD,QACJ,AAAK,IAAD;EAER;wEAEiD;AAC/C,UAAgB,EACd,AAAM,KAAD,OACL,AAAM,KAAD,MACL,AAAM,KAAD,QACL,AAAM,KAAD,SACL,AAAM,KAAD,YACL,AAAM,KAAD,YACL,AAAM,KAAD,YACL,AAAM,KAAD,YACL,AAAM,KAAD,YACL,AAAM,KAAD,YACL,AAAM,KAAD,YACL,AAAM,KAAD;EAET;8EGwoBiD;AACrC,cAAM,AAAK,IAAD;AACJ,uBAAoB;AACpB,eAAY,mBAAC;AACzB,kBAAU;AACd,aAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,GAAG,GAAE,IAAA,AAAC,CAAA;AAGd,iBAAO,AAAI,IAAA,QAAC,CAAC;AACnB,eAAK;AACL,eAAK,OAAO;AAChB,aAAO,AAAG,EAAD,IAAI,EAAE;AACH,kBAAgB,EAAT,AAAG,EAAD,GAAG,EAAE,IAAK;AAC7B,YAAoB,aAAhB,AAAI,IAAA,QAAC,AAAI,IAAA,QAAC,GAAG,mBAAK,IAAI;AACZ,UAAZ,KAAK,AAAI,GAAD,GAAG;;AAEC,UAAZ,KAAK,AAAI,GAAD,GAAG;;;AAKL,2BAAiB,EAAE;AAGa,MAA1C,AAAa,YAAD,OAAK,AAAI,IAAA,QAAC,AAAe,cAAD,GAAG;AACvC,UAAI,AAAe,cAAD,iBAAI,AAAK,IAAD;AACb,QAAX,AAAK,IAAD,OAAK,CAAC;;AAEc,QAAxB,AAAI,IAAA,QAAC,cAAc,EAAI,CAAC;;AAE1B,UAAI,AAAe,cAAD,GAAG,OAAO;AAGF,QAAxB,UAAU,cAAc;;;AAIZ,cAAM,gBAAU,OAAO;AACnC,YAAI,AAAI,IAAA,QAAC,OAAO;AACpB,aAAS,IAAI,AAAQ,OAAD,GAAG,GAAG,AAAE,CAAD,IAAI,GAAG,IAAA,AAAC,CAAA;AACvB,MAAV,AAAG,GAAA,QAAC,CAAC,EAAI,CAAC;AACS,MAAnB,IAAI,AAAY,YAAA,QAAC,CAAC;;AAEpB,UAAO,IAAG;EACZ;kDYxrD8B;AAC5B,UAAO,MAAM,IAAI,yBAAM;AACvB,UAAwB,CAAhB,AAAO,AAAG,MAAJ,gBAAc,AAAO,AAAG,MAAJ,gCAC9B;AACJ,UAAO;EACT;oDAEiC;AAC/B,UAAO,OAAO,IAAI,yBAAM;AACxB,UAAO,AAAQ,AAAO,OAAR,cAAW,uBAAI;AAC7B,UAAO;EACT;4DAkDwC,QAAqB;AAC3D,QAAI,AAAW,UAAD,IAAI;AAChB,UAAI,AAAO,MAAD,cAAW,GACnB,AAC8D,WADxD,2BACF;;AAEN,UAAI,AAAO,MAAD,aAAW,AAAW,UAAD,WAC7B,AACkE,WAD5D,2BACF;;EAEV;;;AKtEyB,oBAAiB;AAQrB,SAPnB,AAAU,SAAD;IACL,gBAAW;IACX,WAAM;IACN,aAAQ;IACR,eAAU;IACV,aAAQ;IACR,uBAAkB;IAClB,eAAU;;AACd,UAAO,UAAS;EAClB;kDGyBiC;;AAC/B,QAAW,uBAAP,MAAM,eAAoB,AAAO,MAAD;AACL,MAA7B,AAAkB,+BAAI,MAAM;AAC5B,UAA6B,aAAzB,AAAkB;AACD,4BAAgB,AAAkB,oCAAS;AACvC,QAAvB,AAAc,aAAD;AACb;AACkD,eAAxB;UAAS,mBAAa,aAAb,oBAAa;;;AAGlD;AAE8B,QADJ,AAAS,yDAC7B,AAAkB;;;EAG5B;kEAgBW,IAAW,IAAe,SAAa;AAChD,UAAO,yCAAyB,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK;EACxD;gEAKW,IAAW,IAAe,SAAa;AAChD,UAAO,wCAAwB,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK;EACvD;4CN1BgC;AAC9B,kBAAI,AAAY;AACd,UAAuB,aAAnB,AAAY,+BAAS;AAQrB,QAJF,AAAY,0BAAK,SAAe,GAAiB;AAClC,sBAA4B,aAApB,AAAE,AAAW,CAAZ,mCAAqB,AAAE,AAAW,CAAZ;AAC/B,sBAA4B,aAApB,AAAE,AAAW,CAAZ,mCAAqB,AAAE,AAAW,CAAZ;AAC5C,gBAAO,AAAM,MAAD,aAAW,KAAK;;;AAIhC,eAAmB,UAAW;AACL,QAAvB,AAAQ,OAAD;;AAEsB,MAA/B,qBAA6B;;AAI/B,kBAAI,AAAkB;AACpB,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAkB,oCAAQ,IAAA,AAAC,CAAA;AACtB,8BAAkB,AAAiB,gCAAC,CAAC;AAC5D,uBAAO,AAAgB,eAAD;AAC8B,QAApD,AAAgB,eAAD,SAA+B;;AAER,MAAxC,2BAAsC;;AAExC;AACmD,MAAjD,+BAAwB,KAAK,EAAE;AACQ,MAAvC,wCAAiC,KAAK;;AAExC,mBAAO,AAQN;AAPoB,6BAA2B;AACT,MAArC,AAAM,KAAD,eAAe,gBAAgB;AACpC,oBAAI,AAAiB,gBAAD;AAE6C,QAD/D,WAAM,+CACC,AAAiB,AAA8B,gBAA/B,oBAAK,QAAQ,KAAM,AAAU,kBAAJ,CAAC;;AAEnD,YAAO;;AAGT,aAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAiB,mCAAQ,IAAA,AAAC,CAAA;AACZ,MAAhC,AAAgB,AAAI,+BAAH,CAAC,UAAU;;AAEgB,IAA9C,0BAA4C;AAE5C;AAC0D,MAAxD,uBAAsD;;AAExD,mBAAO,AAGN;AAFoB,MAAnB,2BAAiB,aAAjB,4BAAiB;AACjB,YAAO;;EAEX;;AAUoB,IAAlB,wBAAiB;AACQ,IAAzB,AAAkB;EACpB;sDAiBqD;AACnD;AAE0F,MADxF,WAAM,mBACF;;AAEN,UAAO,AAAc,oCAAY,OAAO,EAAE,cAAM,kCAAmB,OAAO;EAC5E;sFAgEqD;;AACzC,uBAAoB,AAAO;AAMG,IAAxC,AAAsB,mCAAI;AAE1B,WAAoC,aAA7B,AAAsB,yCAAuB,aAAb,YAAY;AAChB,MAAjC,AAAsB,wCAAS;;AAGjC,QAAI,AAA6B,uCAAG;AACT,sCAAiC,+BACjD,YAAY;AAQF,WALnB,AAA0B,yBAAD;MACrB,gBAAW;MACX,YAAO;MACP,WAAM;MACN,cAAS;MACT,eAAU;;AACoD,MAAlE,sCAA+B,AAA0B,yBAAD;AACJ,MAA/C,AAAS,AAAK,4BAAO,yBAAyB;;AAO3C,UAJV;IACI,gBAAY;IACZ;IACA,SAAK,GAAG,GAAG,YAAY;IACvB;;AAES,8BACc,aAAlB,AAAO,uCAAkB,AAAO;AAC5B,+BACe,aAAnB,AAAO,wCAAmB,AAAO;AAC7B,kCACT,AAAoB,mBAAD,GAAG,oBAAoB;AAEpC,4BAAoB,AAAM,AAAY,AAAsB,KAAnC,8CAA8B;AAEjE,aAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAsB,wCAAQ,IAAA,AAAC,CAAA;AACD,qBAC5C,AAAqB,oCAAC,CAAC;AACF,mBAAS,kCAAmB;AACjD,uBAAa;AACjB,eAAwB,kBAAmB,AAAS,SAAD;AAChB,QAAjC,AAAO,MAAD,WAAW,eAAe;AAChC,YAA4B,2BAAxB,AAAgB,eAAD;AACM,uDAAU,AAAgB,eAAD;AACV,UAAtC,aAAA,AAAW,UAAD,gBAAI,AAAQ,OAAD;;;AAIZ,wBAAqC,aAAvB,AAAO,MAAD,oBAAmB,UAAU;AACjD,8BACoB,aAA7B,AAAO,MAAD,uCAAyB,iBAAiB;AACvC,iCAC0B,aAAnC,AAAO,MAAD,gCAA+B,uBAAuB;AACnD,8BACiB,aAA1B,AAAO,MAAD,oCAAsB,AAAqB,AAAI,oCAAH,CAAC;AAS3C,aANZ;MACI;MACA,mBAAc;MACd;MACA,YAAmB,IAAE,CAAC;MACtB,YAAmB,IAAE,CAAC,EAAY,MAAG,AAAE,IAAE,WAAW;MACpD;;AASQ,aANZ;MACI;MACA,mBAAc;MACd;MACA,YAAmB,IAAE,CAAC,EAAE,AAAE;MAC1B,YAAmB,IAAE,CAAC,EAAY,MAAG,AAAE,IAAE,iBAAiB;MAC1D;;AASQ,aANZ;MACI;MACA,mBAAc;MACd;MACA,YAAmB,IAAE,CAAC,EAAE,AAAE;MAC1B,YAAmB,IAAE,CAAC,EAAY,MAAG,AAAE,IAAE,oBAAoB;MAC7D;;AASQ,aANZ;MACI;MACA,mBAAc;MACd;MACA,YAAmB,IAAE,CAAC,EAAE,AAAE;MAC1B,YAAmB,IAAE,CAAC,EAAY,MAAG,AAAE,IAAE,iBAAiB;MAC1D;;;AAS2C,WANjD;IACI,YAAO;IACP,iBAAY;IACZ,gBAAS,gBAAgB,GAAa,KAAE;IACxC,gBAAS,kBAAkB,GAAG,AAAE,AAAY,SAAE;IAC9C,gBAAS,qBAAqB,GAAG,AAAE,AAAY,SAAE;IACjD,gBAAS,eAAe,GAAG,AAAE,AAAY,SAAE;;AAE/C,aAAS,IAAI,GAAG,AAAE,CAAD,OAAc,IAAA,AAAC,CAAA;AAOlB,aANZ;MACI,iBAAY;MACZ,mBAAc;MACd;MACA,YAAO,GAAiB,MAAY,KAAE,CAAC;MACvC,YAAO,YAAY,EAAgB,MAAY,KAAE,CAAC;MAClD;;;EAER;oEAG4C,OAAW;;AACjD,uBAAe;AACf,qBAAa;AAEb,4BAAoB;AACpB,2BAAmB;AACnB,gCAAwB;AACxB,2BAAmB;AACnB,gCAAwB;AAExB,yBAAiB;AACjB,wBAAgB;AAEhB,6BAAqB;AACrB,4BAAoB;AAEpB,qCAA6B;AAEjC,aAAK,uBAAwC;AAClB,kBAAQ,wBAAiB,OAAO;AACzD,YAAO,KAAK,IAAI;AAE8B,MAA9C,qBAAA,AAAmB,kBAAD,gBAAI,AAAM,KAAD;AACiB,MAA5C,oBAAA,AAAkB,iBAAD,gBAAI,AAAM,KAAD;AAC+B,MAAzD,6BAAA,AAA2B,0BAAD,gBAAI,AAAM,KAAD;AAEnC,UAAY,mCAAR,OAAO;AACQ,QAAjB,eAAA,AAAa,YAAD,GAAI;AACc,QAA9B,aAAA,AAAW,UAAD,gBAAI,AAAM,KAAD;AAEnB,YAAoB,oBAAhB,AAAQ,OAAD;AACO,UAAhB,iBAAA,AAAc,cAAA;AACmB,UAAjC,gBAAA,AAAc,aAAD,gBAAI,AAAM,KAAD;;AAGxB,YAAoB,uBAAhB,AAAQ,OAAD;AACU,UAAnB,oBAAA,AAAiB,iBAAA;AACmB,UAApC,mBAAA,AAAiB,gBAAD,gBAAI,AAAM,KAAD;;AAGe,QAA1C,mBAAA,AAAiB,gBAAD,gBAAI,AAAM,KAAD;AAC+B,QAAxD,wBAAA,AAAsB,qBAAD,gBAAI,AAAM,KAAD;AAC4B,QAA1D,wBAAA,AAAsB,qBAAD,gBAAI,AAAM,KAAD;;AAGa,MAA7C,AAAQ,OAAD,eAAe,sBAAsB;;;AAGH,IAA3C,AAAM,KAAD,eAAe,sBAAsB;AAEvB,cAAM;AAmBwC,SAlBjE,GAAG;IACC,WACE,AAAsE,4CAAtC,WAAW;IAC7C,WAAQ,AAAwC,iCAAnB,kBAAkB;IAC/C,WAAQ,AAAqC,+BAAlB,iBAAiB;IAC5C,WAAQ,AAAiD,kCAA3B,0BAA0B;IACxD,WAAQ,AAAyB,wBAAb,YAAY;IAChC,WAAQ,AAAwB,yBAAX,UAAU;IAC/B,WAAQ,AAAkD,kCAA3B,AAAa,YAAD,GAAG,UAAU;IACxD,WAAQ;IACR,WAAQ,AAA2B,yBAAd,aAAa;IAClC,WAAQ,AAAuD,kCAAhC,AAAe,cAAD,GAAG,aAAa;IAC7D,WAAQ,AAAqC,+BAAlB,iBAAiB;IAC5C,WAAQ,AAA8B,yBAAjB,gBAAgB;IACrC,WAAQ,AAA6D,kCAAtC,AAAkB,iBAAD,GAAG,gBAAgB;IACnE,WAAQ,AAA6B,wBAAjB,gBAAgB;IACpC,WAAQ,AAAqC,2BAAtB,qBAAqB;IAC5C,WAAQ,AAA4C,kCAAtB,qBAAqB;IACnD,WAAQ,AAAoD,qCAA1B,AAAkB;;AAsCtD,IAlCF,wBAAkB;;AACS,2BAChB,AAAS,+CAAiB;AAChB,uBAAa;AACtB,uBAAa,AAClB,AACA,AAIF,cANkC,4CAEvB,QAAoB;AACtB,qBAAiB,aAAR,AAAE,CAAD,uBAAS,AAAE,CAAD;AACuC,QAArE,AAAW,UAAD,SAAS,AAAiD,oBAAxC,AAAE,CAAD,UAAO,iBAAK,AAAE,CAAD,WAAQ,iBAAI,MAAM;AAC5D,cAAO,OAAM;iDACP,GAAG,SAAK,OAAW,WAAiB,aAAN,KAAK,iBAAG,MAAM;AACvC,gCACc,aAAlB,AAAO,uCAAkB,AAAO;AAC5B,iCACe,aAAnB,AAAO,wCAAmB,AAAO;AAC7B,oCACT,AAAoB,mBAAD,GAAG,oBAAoB;AACjC,6BAA8B,aAAX,UAAU,IAAG,uBAAuB;AACvD,8BACT,AAA4F,0BAA9E,mBAAmB,qBAAI,oBAAoB,qBAAI,uBAAuB;AAC3E,mCACsD,SAA7D,UAAU,WAAI,AAAiB,gBAAD,mBAAiB,KAAG;AAKkB,WAJ1E,GAAG;MACC,WAAQ,AAAsC,0BAAvB,AAAe,cAAD;MACrC,WAAQ,UAAU;MAClB,WAAQ,AAAwD,eAA5C,sBAAsB,UAAG,iBAAiB;MAC9D,WAAQ;;AACD,oCACP,AAAiB,gBAAD;AACpB,UAAI,uBAAuB;AAE4D,QADrF,WACI,AAAgF,2CAAvC,AAAiB,gBAAD,mBAAiB,KAAG;;AAEzE,MAAV,WAAM,GAAG;;EAEb;gDYpYqC,MAAU;;AAO7C,WAAe,cAAH,KAAL,KAAK,uCAAK,AAAK,IAAD;AACT,iBAAa,aAAN,KAAK,IAAG,AAAK,IAAD,UAAU,AAAK,IAAD,cAAY,KAAK,IAAI;AACtD,iBAAa,aAAN,KAAK,IAAG,IAAI,AAAK,IAAD,cAAkB,aAAN,KAAK,IAAG,KAAK;AAI1D,UAAI,AAAK,IAAD,WAAoB,AAAK,IAAD;AAC9B,cAAO,gCAAgB,KAAK,EAAgB;;AAQ9C,UAAI,AAAK,IAAD,WAAmB,AAAK,IAAD;AAC7B;;AAEF,UAAI,AAAK,IAAD,WAAmB,AAAK,IAAD,WAAmB,AAAK,IAAD;AACpD,cAAO,gCAAgB,KAAK,EAAgB;;AAK9C,UAAI,AAAK,IAAD,WACJ,AAAK,IAAD,WACJ,AAAK,IAAD,WACJ,AAAK,IAAD,WACJ,AAAK,IAAD;AACN;;AAGF,UAAU,aAAN,KAAK,KAAI,AAAK,IAAD;AACf,cAAO,gCAAgB,AAAK,IAAD,SAAuB;;AAGpD,UAAI,AAAK,IAAD,WAAsB,AAAK,IAAD;AAChC;;AAGF,UAAI,AAAK,IAAD,WACJ,AAAK,IAAD,UACJ,AAAK,IAAD;AACN,cAAO,gCAAgB,KAAK,EAAgB;;;AAGhD,UAAO,gCAAgB,AAAK,IAAD,SAAuB;EACpD;8DCvF8B;AAC1B,UAAA,AAAK,AAA0C,KAA3C,WAAsB,AAAK,IAAD,oBAAoB,yBAAkB,IAAI;EAAC;wDAClD;AACvB,UAAA,AAAK,AAAsC,KAAvC,WAAmB,AAAK,IAAD,WAAmB,AAAK,IAAD;EAAe;wDA8kBrC,gBACN,OACjB,MACH,OACA;;AAEJ,UAAO,AAAE,AAAyB,kBAAtB,KAAK,KAAU,aAAN,KAAK,kBAAI,GAAG,KAAQ,aAAJ,GAAG,KAAI,AAAK,IAAD;AAEhD,QAAI,AAAM,KAAD,IAAI,GAAG;AACd,YAAO;;AAGT,QAAI,AAAM,KAAD,IAAI,qBACT,AAAI,GAAD,IAAI,mBACP,AAAK,IAAD,IAAI,oBACG,YAAX,mBAAc,KAAK;AACrB,YAAO;;AAES,IAAlB,oBAAa,KAAK;AACJ,IAAd,kBAAW,GAAG;AACE,IAAhB,mBAAY,IAAI;AACE,IAAlB,oBAAa,KAAK;AAEL,yBAAoC,KAApB,AAAM,KAAD,sBAAC,OAAiB;AACvC,cACT,AAAM,AAAK,KAAN,KAAI,KAAK,AAAI,GAAD,KAAI,AAAK,IAAD,UAAU,IAAI,GAAG,AAAK,IAAD,aAAW,KAAK,EAAE,GAAG;AAC1D,gBAC6B,aAAtC,AAAe,AAAiB,cAAlB,aAAa,GAAG,WAAwB,aAAd,aAAa,IAAG,AAAI,GAAD;AAM/D,UAAO,qBAAa,mBAAY,KAAK;EACvC;4CAE0B;AACxB,UAAqB,AAAQ,EAAf,aAAN,KAAK,IAAG,iBAAe;EACjC;sDAO4B,MAAU,OAAW,KAAmB;AAClE,UAAO,AAAE,AAAyB,kBAAtB,KAAK,KAAU,aAAN,KAAK,kBAAI,GAAG,KAAQ,aAAJ,GAAG,KAAI,AAAK,IAAD;AAEhD,WAAa,aAAN,KAAK,iBAAG,GAAG,eAAI,AAAS,SAAA,CAAC,AAAK,IAAD,cAAgB,aAAJ,GAAG,IAAG;AAC/C,MAAL,MAAG,aAAH,GAAG;;AAEL,UAAO,IAAG;EACZ;oDC6UqC;AACnC,QAAI,AAAW,UAAD,IAAI;AAChB,YAAO;;AAET,UAAO,+CAAsC,AAAW,UAAD;EACzD;;QAEiC;AAC/B,YAAQ,eAAe;;;AAEnB,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;AAGX,sBAAO,AAIN;AADE,MAFD,WAAM,4BACJ,AAAwD,4CAAxB,eAAe;;AAInD,UAAO;EACT;;;QAO6B;QACI;QACV;AAErB,UAAO,OAAO,IAAI;AAClB,UAAO,KAAK,IAAI;AAEe,mBAAW,AAAQ,OAAD;AACjD,QAAI,AAAc,aAAD,IAAI;AACnB,UAAI,AAAM,KAAD,gBAAe;AAE6C,QADnE,AAAS,QAAD,eAAa,2BACjB,AAAM,KAAD,eAAkC,KAArB,AAAM,KAAD,wBAAC,OAAmC;;AAEjE,UAAI,AAAM,KAAD,iBAAgB;AACqB,QAA5C,AAAS,QAAD,gBAAoC,SAAnB,AAAM,KAAD;;AAEhC,UAAI,AAAM,KAAD,oBAAmB;AACoC,QAA9D,AAAS,QAAD,eAAa,2BAAoB,AAAM,KAAD;;AAEhD,UAAI,AAAM,KAAD,eAAc;AAC6B,QAAlD,AAAS,QAAD,cAA0C,SAA3B,AAAM,AAAU,KAAX,yBAAmB;;AAEjD,UAAI,AAAM,KAAD,iBAAgB;AACiC,QAAxD,AAAS,QAAD,gBAAc,uBAAgB,AAAM,KAAD;;AAE7C,UAAI,AAAM,KAAD,gBAAe;AAE2C,QADjE,AAAS,QAAD,eACa,YAAjB,AAAM,KAAD,cAA4B,uBAAS,WAAW;;AAE3D,UAAI,AAAM,KAAD,0BAAyB;AACyC,QAAzE,AAAS,QAAD,gBAAc,+BAAwB,AAAM,KAAD;;;AAGrD,uBAAI,AAAM,KAAD,cAAe,AAAc,aAAD;AAEgC,QADnE,AAAS,QAAD,eAAa,2BACjB,AAAM,KAAD,eAAkC,MAArB,AAAM,KAAD,yBAAC,OAAmC;;AAEjE,UAAI,AAAM,KAAD,iBAAgB,AAAM,KAAD;AACgB,QAA5C,AAAS,QAAD,gBAAoC,SAAnB,AAAM,KAAD;;AAEhC,uBAAI,AAAM,KAAD,kBAAmB,AAAc,aAAD;AACuB,QAA9D,AAAS,QAAD,eAAa,2BAAoB,AAAM,KAAD;;AAEhD,UAAI,AAAM,KAAD,eAAc,AAAc,aAAD;AAEiC,QADnE,AAAS,QAAD,cACJ,AAAM,AAAkB,KAAnB,eAAc,OAAsC,SAA5B,AAAM,AAAU,KAAX,yBAAmB,OAAM;;AAEjE,uBAAI,AAAM,KAAD,eAAgB,AAAc,aAAD;AACoB,QAAxD,AAAS,QAAD,gBAAc,uBAAgB,AAAM,KAAD;;AAE7C,uBAAI,AAAM,KAAD,cAAe,AAAc,aAAD;AAGzB,QAFV,AAAS,QAAD,eAAa,AAAM,AACvB,KADsB,gBAAe,OACjB,YAAjB,AAAM,KAAD,cAA4B,uBAAS,WAAW,WACtD;;AAER,UAAI,AAAM,KAAD,iBAAgB,AAAc,aAAD;AAC4B,QAAhE,AAAS,QAAD,gBAAc,+BAAwB,AAAM,KAAD;;;EAGzD;;;QAS6B;QACD;QACV;QACX;AAEL,UAAO,OAAO,IAAI;AAClB,UAAO,KAAK,IAAI;AACX,2BAAmB;AACO,mBAAW,AAAQ,OAAD;AACjD,QAAI,AAAc,aAAD,IAAI;AACJ,mBAAiC,YAAzB,AAAM,KAAD,4BAAC,OAAa,kBAAb,OAAsB,AAAM,KAAD;AACxD,UAAI,KAAK,IAAI;AACyB,QAApC,AAAS,QAAD,WAAS,AAAM,KAAD;;AAExB,UAAI,AAAM,KAAD,eAAc;AAC6B,QAAlD,AAAS,QAAD,cAA0C,SAA3B,AAAM,AAAU,KAAX,yBAAmB;;AAEjD,UAAI,AAAM,KAAD,iBAAgB;AACiC,QAAxD,AAAS,QAAD,gBAAc,uBAAgB,AAAM,KAAD;;AAE7C,UAAI,AAAM,KAAD,gBAAe;AAE2C,QADjE,AAAS,QAAD,eACa,YAAjB,AAAM,KAAD,cAA4B,uBAAS,WAAW;;AAI3D,oBAAI,MAAM,gBAAQ;AAChB,YAAI,AAAM,KAAD,iBAAgB;AACyC,UAAhE,AAAS,QAAD,gBAAc,+BAAwB,AAAM,KAAD;;;AAGrD,YAAI,AAAM,KAAD,0BAAyB;AAEuB,UADvD,AAAS,QAAD,gBACJ,+BAAwB,AAAM,KAAD;;;AAGrC,UAAI,AAAM,KAAD,oBAAmB;AAC0B,QAApD,AAAS,QAAD,mBAA4C,SAAxB,AAAM,KAAD,oBAAgB;;AAEnD,UAAI,AAAM,KAAD,kBAAiB;AACwB,QAAhD,AAAS,QAAD,iBAAwC,SAAtB,AAAM,KAAD,kBAAc;;AAE/C,UAAI,AAAM,KAAD,iBAAgB;AACA,QAAvB,mBAAmB;;;AAGrB,uBAAI,AAAM,KAAD,WAAW,AAAc,aAAD,2BAC7B,AAAM,KAAD,eAAgB,AAAc,aAAD;AACrB,qBAAiC,eAAzB,AAAM,KAAD,8BAAC,OAAa,qBAAb,OAAsB,AAAM,KAAD;AACnB,QAArC,AAAS,QAAD,mBAAS,KAAK,iBAAL,OAAO;;AAG1B,UAAI,AAAM,KAAD,eAAc,AAAc,aAAD;AAEiC,QADnE,AAAS,QAAD,cACJ,AAAM,AAAkB,KAAnB,eAAc,OAAsC,SAA5B,AAAM,AAAU,KAAX,yBAAmB,OAAM;;AAGjE,uBAAI,AAAM,KAAD,eAAgB,AAAc,aAAD;AACoB,QAAxD,AAAS,QAAD,gBAAc,uBAAgB,AAAM,KAAD;;AAG7C,uBAAI,AAAM,KAAD,cAAe,AAAc,aAAD;AAGzB,QAFV,AAAS,QAAD,eAAa,AAAM,AACvB,KADsB,gBAAe,OAClB,YAAjB,AAAM,KAAD,cAA4B,uBAAS,WAAW,WACrD;;AAER,UAAI,AAAM,KAAD,iBAAgB,AAAc,aAAD;AAC4B,QAAhE,AAAS,QAAD,gBAAc,+BAAwB,AAAM,KAAD;;AAErD,UAAI,AAAM,KAAD,oBAAmB,AAAc,aAAD;AACa,QAApD,AAAS,QAAD,mBAA4C,SAAxB,AAAM,KAAD,oBAAgB;;AAEnD,UAAI,AAAM,KAAD,kBAAiB,AAAc,aAAD;AACW,QAAhD,AAAS,QAAD,iBAAwC,SAAtB,AAAM,KAAD,kBAAc;;AAE/C,uBAAI,AAAM,KAAD,eAAgB,AAAc,aAAD,+BAClC,AAAM,KAAD,oBAAqB,AAAc,aAAD,oCACvC,AAAM,KAAD,oBAAqB,AAAc,aAAD;AAClB,QAAvB,mBAAmB;;;AAIvB,QAAI,gBAAgB;AAClB,UAAI,AAAM,KAAD,iBAAgB;AACV,6BACT,kCAA2B,AAAM,KAAD,eAAc,AAAM,KAAD;AACvD,YAAI,cAAc,IAAI;AACoB,UAAxC,AAAS,QAAD,oBAAkB,cAAc;AACzB,gCAAkB,AAAM,KAAD;AACtC,cAAI,eAAe,IAAI;AACuC,YAA5D,AAAS,QAAD,yBAAuB,AAAgB,eAAD;;;;;EAKxD;;;QAK6B;QACD;QACV;AAED,wBAAgB,AAAM,KAAD;AACpC,QAAI,AAAc,aAAD,IAAI;AACnB,UAAI,aAAa,IAAI;AAEgD,QADnE,AAAY,mCACR,OAAO,EAAE,oBAAoB,AAAc,AAAM,aAAP;;;AAGhD,uBAAI,aAAa,EAAI,AAAc,aAAD;AAEoC,QADpE,AAAY,mCACR,OAAO,EAAE,0BAAoB,AAAc,aAAD,qBAAC,OAAO;;;EAG5D;0EAIsB,YAAmC;AACpC,sBAAc;AACjC,QAAI,UAAU,IAAI;AAChB,oBAAI,AAAW,UAAD,UAA4B;AACT,QAA/B,AAAY,WAAD,OAAO;;AAEpB,oBAAI,AAAW,UAAD,UAA4B;AACV,QAA9B,AAAY,WAAD,OAAO;;AAEpB,oBAAI,AAAW,UAAD,UAA4B;AACN,QAAlC,AAAY,WAAD,OAAO;;;AAGtB,QAAI,eAAe,IAAI;AAC0C,MAA/D,AAAY,WAAD,OAAO,mCAA4B,eAAe;;AAE/D,qBAAO,AAAY,WAAD,YAAW,OAAO,AAAY,WAAD;EACjD;4EAE0D;AACxD,YAAQ,eAAe;;;AAEnB,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;EAEb;4DAS4C;AAC1C,QAAI,AAAc,aAAD,IAAI;AACnB,YAAO;;AAET,UAAO,gCAAwB,AAAc,aAAD;EAC9C;oEAEmC;AACjC,YAAQ,kBAAkB;;;AAEtB,cAAO;;;;AAEP,cAAO;;;AAGX,sBAAO,AAIN;AADE,MAFD,WAAM,4BACJ,AAA6D,+CAA1B,kBAAkB;;AAIzD,UAAO;EACT;4DASwC,OAAwB;AAC9D,YAAQ,KAAK;;;AAET,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,cAAO;;;;AAEP,gBAAQ,aAAa;;;AAEjB,kBAAO;;;;AAEP,kBAAO;;;AAEX;;;;AAEA,gBAAQ,aAAa;;;AAEjB,kBAAO;;;;AAEP,kBAAO;;;AAEX;;;AAEsD,IAA1D,WAAM,4BAAe,AAAoC,0CAAN,KAAK;EAC1D;+CAO4B,GAAW;AACrC,QAAI,AAAE,CAAD,IAAI;AACP,YAAO,AAAE,EAAD,IAAI;;AAEd,QAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,aAAW,AAAE,CAAD;AAC5B,YAAO;;AAET,aAAS,QAAQ,GAAG,AAAM,KAAD,gBAAG,AAAE,CAAD,YAAS,QAAA,AAAM,KAAD,GAAI;AAC7C,uBAAI,AAAC,CAAA,QAAC,KAAK,GAAK,AAAC,CAAA,QAAC,KAAK;AACrB,cAAO;;;AAGX,UAAO;EACT;oDGjzCoC,MAAU;AAC5C,QAAU,aAAN,KAAK,IAAG,KAAW,aAAN,KAAK,KAAI,AAAK,IAAD;AAC5B,YAAO;;AAET,UAAO,AAAO,oBAAK,AAAK,IAAD,cAAY,KAAK;EAC1C;kDEf4B;EAAI;wEAMgB;;AACf,uBAAe,AAAW,UAAD;AAgB3B,SAf7B,YAAY;IACR,kBAAa;IACb,oBAAe;IACf,gBAAW;IACX,WAAM;IACN,YAAO;IACP,eAAU;IACV,eAAU;IACV,aAAQ;IACR,uBAAkB;IAClB,kBAAa;IACb,eAAU;IACV,cAAS;IACT,cAAS;IACT,kBAAa;IACb,uBAAkB;;AAGgC,IAAtD,AAAa,YAAD,eAAa,eAAe;AAExC;AAGkC,YAFhC,YAAY;MACR,cAAQ;MACR,gBAAU;;;EAElB;oEAsFyC;AACvC,YAAQ,SAAS;;;AAEb,cAAiB;;;;;AAIjB,cAAiB;;;EAEvB;4DAuCiD;AAC/C,QAAe,qBAAX,UAAU;AACZ,YAAmB;;AAErB,QAAe,wBAAX,UAAU;AACZ,YAAmB;;AAER,0BAAkB,AAAW,UAAD;AACzC,QAAI,eAAe,IAAI,QACnB,AAAgB,eAAD,iBACf,eAAe,KAAI;AACrB,YAAmB;;AAErB,UAAO;EACT;yCO1JoC;AACf,oBAAU;AAChB,gBAAQ,AAAU,UAAA,CAAC,QAAG;AACjC,UAAI,AAAE,CAAD,IAAI;AAC+C,QAAtD,AAAU,SAAD,eAAe,mBAAU;;AAEb,QAArB,AAAU,SAAD,UAAU,CAAC;;;AAGxB,QAAI,KAAK,IAAI;AACW,MAAtB,WAAM,mBAAU,KAAK;;AAEvB,UAAO,AAAU,UAAD;EAClB;gEAGqC;AACnC,UAAO,kCAA0B,AAAO,MAAD;EACzC;kFAGgD;AAC9C,UAAO,AAAO,AAAO,MAAR,cAAW;AACN,YAAI,MAAM;AAC5B,UAAO,AAAC,AAAI,AAcK,EAdT,QAAC,OAAM,OACX,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAK,CAAL,QAAC,QAAO,OACT,AAAC,AAAK,CAAL,QAAC,QAAO,OACT,AAAC,AAAK,CAAL,QAAC,QAAO,OACT,AAAC,AAAK,CAAL,QAAC,QAAO,OACT,AAAC,AAAK,CAAL,QAAC,QAAO,OACT,AAAC,AAAK,CAAL,QAAC,QAAO;EACf;wEAG6C;AAC3C,UAAO,AAAO,AAAO,MAAR,cAAW;AACN,YAAI,MAAM;AAC5B,QAAI,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAI,CAAJ,QAAC,OAAM,OACR,AAAC,AAAK,CAAL,QAAC,QAAO,OACT,AAAC,AAAK,CAAL,QAAC,QAAO,OAGT,AAAC,AAAK,CAAL,QAAC,QAAO,OACT,AAAC,AAAK,CAAL,QAAC,QAAO;AACE,eAAK,AAAC,CAAA,QAAC;AACP,eAAK,AAAC,CAAA,QAAC;AACpB,YAAO,AAA6B,yBAAhB,EAAE,IAAC,kBAAM,EAAE,IAAC;;AAEhC,YAAO,AAAiJ,wBAArI,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,MAAG,eAAG,AAAC,CAAA,QAAC,OAAI,eAAG,AAAC,CAAA,QAAC,OAAI,eAAG,AAAC,CAAA,QAAC,OAAI,eAAG,AAAC,CAAA,QAAC,OAAI,eAAG,AAAC,CAAA,QAAC,OAAI,eAAG,AAAC,CAAA,QAAC,OAAI;;EAE1J;gDAa8B,WAAmB;AAC/C,UAAO,sBAAc,SAAS,EAAE,AAAK,IAAD,OAAO,AAAK,IAAD,MAAM,AAAK,IAAD,QAAQ,AAAK,IAAD;EACvE;gDAOY,WAAkB,MAAa,KAAY,OAAc;AACnE,UAAO,IAAI,IAAI;AACf,UAAO,GAAG,IAAI;AACd,UAAO,KAAK,IAAI;AAChB,UAAO,MAAM,IAAI;AAkBC,oBAAY,yCAAY;AAGvB,IAAnB,AAAS,SAAA,QAAC,GAAK,IAAI;AACD,IAAlB,AAAS,SAAA,QAAC,GAAK,GAAG;AACD,IAAjB,AAAS,SAAA,QAAC,IAAM;AAGI,IAApB,AAAS,SAAA,QAAC,GAAK,KAAK;AACF,IAAlB,AAAS,SAAA,QAAC,GAAK,GAAG;AACD,IAAjB,AAAS,SAAA,QAAC,IAAM;AAGG,IAAnB,AAAS,SAAA,QAAC,GAAK,IAAI;AACE,IAArB,AAAS,SAAA,QAAC,GAAK,MAAM;AACJ,IAAjB,AAAS,SAAA,QAAC,IAAM;AAGI,IAApB,AAAS,SAAA,QAAC,GAAK,KAAK;AACC,IAArB,AAAS,SAAA,QAAC,GAAK,MAAM;AACJ,IAAjB,AAAS,SAAA,QAAC,IAAM;AAEF,sBAAsB,mCAAgB,SAAS;AACrB,IAAxC,AAAY,WAAD,mBAAmB,SAAS;AAEvC,UAAe,sBACb,sBAAS,sBAAS,sBAAS,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC,KAAK,AAAS,SAAA,QAAC,KAC9D,AAAS,SAAA,QAAC,KACd,sBAAS,sBAAS,sBAAS,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC,KAAK,AAAS,SAAA,QAAC,KAC9D,AAAS,SAAA,QAAC,KACd,sBAAS,sBAAS,sBAAS,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC,KAAK,AAAS,SAAA,QAAC,KAC9D,AAAS,SAAA,QAAC,KACd,sBAAS,sBAAS,sBAAS,AAAS,SAAA,QAAC,IAAI,AAAS,SAAA,QAAC,KAAK,AAAS,SAAA,QAAC,KAC9D,AAAS,SAAA,QAAC;EAElB;wDAO+B,MAAc;AAC3C,UAAiB,AAEa,cAFvB,AAAK,IAAD,uBAAS,AAAM,KAAD,UACZ,aAAT,AAAK,IAAD,sBAAQ,AAAM,KAAD,SACN,aAAX,AAAK,IAAD,wBAAU,AAAM,KAAD,WACP,aAAZ,AAAK,IAAD,yBAAW,AAAM,KAAD;EAC1B;0DASkC;QACtB;QAAoB;AACX,IAAnB,wBAAe,aAAf,yBAAkB;AACJ,iBAAS,AAAK,IAAD;AACR,aAAK;AAES,IADjC,AAAG,EAAD,OAAO,2BAAe,AAAO,MAAD,UAAO,0BAAY,AAAO,MAAD,WAAQ,QAC3D;AACc,IAAlB,AAAG,EAAD,OAAO;AAEI,iBAAS,AAAwB,qBAAf;AACE,IAAjC,AAAG,EAAD,OAAO,AAAuB,kBAAR,MAAM;AAEM,IAApC,AAAG,EAAD,OAAO;AAC8C,IAAvD,iBAAU,IAAI,EAAE,EAAE,YAAW,OAAO,WAAW,OAAO;AACV,IAA5C,AAAG,EAAD,OAAO;AACT,UAAO,AAAG,GAAD;EACX;0EAiBwC;AACtC,UAAsC,aAA/B,oBAAoB,CAAC,EAAE,SAAW;EAC3C;oEAYsC;AACjB;AAOnB,kBAAI,AAAgB,eAAD,YAAU,IAAI;AAC/B,YAAO,KAAI;;AAEb,UAAO,AAAS,iBAAN,IAAI;EAChB;4CCjQyB;AACvB,UAAO,IAAI,IAAI,yBAAM;AACrB,SACI,EAAE,AAAK,AAAK,IAAN,iBACF,AAAK,AAAM,IAAP,kBACJ,AAAK,AAAI,IAAL,gBACJ,AAAK,AAAO,IAAR,oCACR;AACJ,UAAO;EACT;8CAE2B;AACzB,UAAO,KAAK,IAAI,yBAAM;AACtB,SACI,EAAE,AAAM,AAAK,KAAN,iBACH,AAAM,AAAM,KAAP,kBACL,AAAM,AAAI,KAAL,gBACL,AAAM,AAAO,KAAR,oCACT;AACJ,UAAO;EACT;gDAE6B;AAC3B,UAAO,MAAM,IAAI,yBAAM;AACvB,UAAwB,CAAhB,AAAO,AAAG,MAAJ,gBAAc,AAAO,AAAG,MAAJ,gCAC9B;AACJ,UAAO;EACT;kDAEgC;AAC9B,UAAO,OAAO,IAAI,yBAAM;AACxB,UAAO,AAAQ,AAAO,OAAR,cAAW,uBAAI;AAC7B,UAAO;EACT;gDAE6B;AAC3B,UAAO,MAAM,IAAI,yBAAM;AACvB,UAAuB,CAAf,AAAO,AAAE,MAAH,eAAa,AAAO,AAAE,MAAH,+BAC7B;AACJ,UAAO;EACT;;;;AzElBmC;0BAAe,wBAAI;IAAsB;;;AAoDxE;0BAAiB,0BAAI;IAAwB;;A8CgDG;IAAiB;;A0BrB9D,cyBAAkB;YAAG;;;MAEE,2BAAoB;YAAoB;;MK7EtD,qBAAc;;;;MAkDZ,uBAAgB;;;;MInEnB,mBAAY;;;MiECd,0BAAmB;;;MAIjB,uBAAgB;;;MA6BjB,gBAAS;;;;MAGF,yBAAkB;;;;MC6JrB,mCAA4B;;;MhDqU1B,kBAAW;YAAG;;MCvgBf,0BAAmB;;;MAElB,mBAAY;YAAiB,wCAAC,UAAU;;;MACxC,oBAAa;YAAiB,wCAAC,WAAW;;;MCHjD,sBAAe;8BACtB,oBAAuB,qCAAY,AAAO,gBAAC,YAAW;;MED7C,kBAAW;;;;MACX,oBAAa;;;;MACR,iBAAU;YAAgB;;;MC4BjB,2BAAoB;YAAwB;;MC7B5D,6BAAsB;;;MAgJvB,2BAAoB;;;MACpB,6BAAsB;;;MAqNtB,qBAAc;;;MCtWb,8BAAuB;;;MCAD,iCAA0B;YAC5B;;MEEpB,+BAAwB;;;MAiKC,qBAAc;YAA6B,4DACxE,2BAAe,QAAiB,UAAW,6BAAc,MAAM,sCAC/D,wBAAY,QAAiB,UAAW,0BAAW,MAAM,mCACzD,2BAAe,QAAiB,UAAW,6BAAc,MAAM,sCAC/D,sBAAU,QAAiB,UAAW,wBAAS,MAAM,iCACrD,uBAAW,QAAiB,UAAW,yBAAU,MAAM,kCACvD,uBAAW,QAAiB,UAAW,yBAAU,MAAM,kCACvD,mBAAO,QAAiB,UAAW,gCAAiB,MAAM,yCAC1D,wBAAY,QAAiB,UAAW,0BAAW,MAAM;;MoBpKtD,wBAAiB;;;MAGF,wBAAiB;YAAiB;;MAsBvC,kBAAW;YAAkB;;;MA4BzB,8BAAuB;;;;MN1DpC,gCAAyB;;;MAKzB,iCAA0B;;;MAMhC,0BAAmB;YAAG;;;MAQd,yCAAkC;;;MAK3C,wBAAiB;YAAG;;;MAEM,uBAAgB;YAA4B;;;MA6FnD,wBAAiB;YAAqB;;;MAGnB,oBAAa;YACb;;;MAEM,4BAAqB;YACtB;;;MAuEjB,mCAA4B;;;;MUzM/C,8BAAuB;;;MCArB,sBAAe;;;MACf,mBAAY;;;MACZ,qBAAc;;;MA2OhB,6BAAsB;YAAQ,AAAS,wBAAS;;MEvO9C,yBAAkB;;;MA0kB3B,iBAAU;YAAG,EAAC;;;MACd,eAAQ;YAAG,EAAC;;;MACT,gBAAS;YAAG;;;MACK,iBAAU;;;;MAC3B,iBAAU;YAAG;;;MI3iBsB,aAAM;;;MExCrC,+BAAwB;;;MAygBX,kBAAW;YAAG;;MO1UlC,qBAAc;YAAG;;;MJ/LV,kCAA2B;;;MAwLnB,aAAM;YAAG;;;;;;;;;;IM7J5B;;sCAzBK;;;;EAyBL;;;;;;;;;;;;;;;;;IAYA;;mCANK;;;;EAML;;;;;;;;;;;;;;;;;;;IAWA;;uCATK;;;;EASL;;;;;;;;;;;;;;8BAKe,MACE;QACA;QACD;QACF;UACC,IAAI,IAAI;UACR,SAAS,IAAI;;EAAK;8BAGlB,MACC;QACA;QACF;QACC;UACA,IAAI,IAAI;UACR,SAAS,IAAI;;EAAK;;;;;IAsB1B;;;;;;;AAVH;AACE,cAAc;;AAEd,cAAuB;;IAE3B;mBAQ2C;AACzC,WAAO,WAAC;AACS,MAAjB,gBAAW,MAAM;AACE,MAAnB,sBAAe;AAC2B,MAA1C,iBAAiB,+BAAgB;AACjC,YAAO;IACT;;AASwB;IAAY;;AAYlC,qBAAK;AACH,cAAO;;AAEW,MAApB,sBAAe;AACf,YAAe,mBAAE,gBAAS;IAC5B;;;IApCuB;IAClB;IACA,sBAAe;;EAJD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FH,MAAd,AAAQ;IACV;cA+GoB,QAAc;AAChC,YAAO,KAAK,IAAI;AAChB,UAAI,AAAO,MAAD,IAAI;AACkB,QAA9B,8BAAwB,KAAK;;AAE7B,uBAAO,mBAAmB,MAAM;AACP,QAAzB,iBAAW,MAAM,EAAE,KAAK;;IAE5B;8BAEmC;AACI,MAArC,AAAQ,sCAAuB,KAAK;IACtC;iBAEqB,QAAc;AACD,MAAhC,AAAQ,yBAAU,MAAM,EAAE,KAAK;IACjC;;AAUmB,MAAjB,AAAQ;IACV;;AAQsB,YAAA,AAAQ;IAAS;cAIjB,IAAW;AACN,MAAzB,AAAQ,yBAAU,EAAE,EAAE,EAAE;IAC1B;UAQkB,IAAY;;;AAAQ,0BAAO,EAAE,GAAK,KAAH,EAAE,QAAF,OAAM,EAAE;IAAC;aAEvC,IAAW;AACP,MAArB,AAAQ,qBAAM,EAAE,EAAE,EAAE;IACtB;WAGmB;AACM,MAAvB,AAAQ,sBAAO,OAAO;IACxB;SAMiB,IAAW;AACN,MAApB,AAAQ,oBAAK,EAAE,EAAE,EAAE;IACrB;cAI2B;AACzB,YAAO,OAAO,IAAI;AAClB,UAAI,AAAQ,OAAD,cAAW;AACkC,QAAtD,WAAM,2BAAc;;AAEH,MAAnB,iBAAW,OAAO;IACpB;iBAE4B;AACA,MAA1B,AAAQ,yBAAU,OAAO;IAC3B;aAamB;UACP;UAAgC;AAC1C,qBAAO,mBAAmB,IAAI;AAC9B,YAAO,MAAM,IAAI;AACjB,YAAO,WAAW,IAAI;AACc,MAApC,gBAAU,IAAI,EAAE,MAAM,EAAE,WAAW;IACrC;gBAEoB,MAAa,QAAa;AACtB,MAAtB,AAAQ,wBAAS,IAAI;IACvB;cAUqB;UAAa;AAChC,qBAAO,oBAAoB,KAAK;AAChC,YAAO,WAAW,IAAI;AACQ,MAA9B,iBAAW,KAAK,EAAE,WAAW;IAC/B;iBAEsB,OAAY;AACR,MAAxB,AAAQ,yBAAU,KAAK;IACzB;aAWmB;UAAY;AAC7B,YAAO,IAAI,IAAI;AACf,YAAO,WAAW,IAAI;AACM,MAA5B,gBAAU,IAAI,EAAE,WAAW;IAC7B;gBAEoB,MAAW;AACmB,MAAhD,AAAQ,wBAAS,IAAI,gBAAe,WAAW;IACjD;cAKqB,OAAiB;AACpC,YAAO,KAAK,IAAI;AAChB,YAAO,SAAS,IAAI;AACQ,MAA5B,iBAAW,KAAK,EAAE,SAAS;IAC7B;iBAEsB,OAAiB;AACF,MAAnC,AAAQ,yBAAU,KAAK,EAAE,SAAS;IACpC;aAMqB,IAAW,IAAU;AACxC,qBAAO,qBAAqB,EAAE;AAC9B,qBAAO,qBAAqB,EAAE;AAC9B,YAAO,KAAK,IAAI;AACQ,MAAxB,gBAAU,EAAE,EAAE,EAAE,EAAE,KAAK;IACzB;gBAEsB,IAAW,IAAU;AACV,MAA/B,AAAQ,wBAAS,EAAE,EAAE,EAAE,EAAE,KAAK;IAChC;cAMqB;AACnB,YAAO,KAAK,IAAI;AACC,MAAjB,iBAAW,KAAK;IAClB;iBAEsB;AACI,MAAxB,AAAQ,yBAAU,KAAK;IACzB;aAImB,MAAY;AAC7B,qBAAO,mBAAmB,IAAI;AAC9B,YAAO,KAAK,IAAI;AACM,MAAtB,gBAAU,IAAI,EAAE,KAAK;IACvB;gBAEoB,MAAY;AACD,MAA7B,AAAQ,wBAAS,IAAI,EAAE,KAAK;IAC9B;cAIqB,OAAa;AAChC,qBAAO,oBAAoB,KAAK;AAChC,YAAO,KAAK,IAAI;AACQ,MAAxB,iBAAW,KAAK,EAAE,KAAK;IACzB;iBAEsB,OAAa;AACF,MAA/B,AAAQ,yBAAU,KAAK,EAAE,KAAK;IAChC;eAOsB,OAAa,OAAa;AAC9C,qBAAO,oBAAoB,KAAK;AAChC,qBAAO,oBAAoB,KAAK;AAChC,YAAO,KAAK,IAAI;AACgB,MAAhC,kBAAY,KAAK,EAAE,KAAK,EAAE,KAAK;IACjC;kBAEuB,OAAa,OAAa;AACR,MAAvC,AAAQ,0BAAW,KAAK,EAAE,KAAK,EAAE,KAAK;IACxC;aAKmB,MAAY;AAC7B,qBAAO,mBAAmB,IAAI;AAC9B,YAAO,KAAK,IAAI;AACM,MAAtB,gBAAU,IAAI,EAAE,KAAK;IACvB;gBAEoB,MAAY;AACD,MAA7B,AAAQ,wBAAS,IAAI,EAAE,KAAK;IAC9B;eAMuB,GAAU,QAAc;AAC7C,qBAAO,qBAAqB,CAAC;AAC7B,YAAO,KAAK,IAAI;AACa,MAA7B,kBAAY,CAAC,EAAE,MAAM,EAAE,KAAK;IAC9B;kBAEwB,GAAU,QAAc;AACV,MAApC,AAAQ,0BAAW,CAAC,EAAE,MAAM,EAAE,KAAK;IACrC;YAYkB,MAAa,YAAmB,YAAiB,WACzD;AACR,qBAAO,mBAAmB,IAAI;AAC9B,YAAO,KAAK,IAAI;AAIL,iBAAO;AAClB,oBAAI,SAAS;AAEwD,QADnE,AAAK,IAAD,QACyB,CAAd,aAAV,AAAK,IAAD,sBAAQ,AAAK,IAAD,WAAU,KAA8B,CAAf,aAAT,AAAK,IAAD,qBAAO,AAAK,IAAD,YAAW;;AAE5D,wBAAc,WAAC,SAAS;AAC7B,UAAe,aAAX,UAAU,KAAI;AAC8B,QAA9C,AAAK,IAAD,OAAO,IAAI,EAAE,UAAU,EAAE,oBAAK,WAAW;AAC7B,QAAhB,aAAW,aAAX,UAAU;AAC8B,QAAxC,AAAK,IAAD,OAAO,IAAI,EAAE,UAAU,EAAE,oBAAK;AAClB,QAAhB,aAAW,aAAX,UAAU;AACS,QAAnB,cAAc;AACG,QAAjB,aAAW,aAAX,UAAU;;AAEZ,aAAkB,aAAX,UAAU;AAC8B,QAA7C,AAAK,IAAD,OAAO,IAAI,EAAE,UAAU,qBAAM,WAAW;AAC5B,QAAhB,aAAW,aAAX,UAAU;AAC6B,QAAvC,AAAK,IAAD,OAAO,IAAI,EAAE,UAAU,qBAAM;AACjB,QAAhB,aAAW,aAAX,UAAU;AACS,QAAnB,cAAc;AACG,QAAjB,aAAW,aAAX,UAAU;;AAEyC,MAArD,AAAK,IAAD,OAAO,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW;AACpD,oBAAI,SAAS;AACC,QAAZ,AAAK,IAAD;;AAEuB,MAA7B,AAAQ,wBAAS,IAAI,EAAE,KAAK;IAC9B;aAKmB,MAAY;AAC7B,YAAO,IAAI,IAAI;AACf,YAAO,KAAK,IAAI;AACM,MAAtB,gBAAU,IAAI,EAAE,KAAK;IACvB;gBAEoB,MAAY;AACD,MAA7B,AAAQ,wBAAS,IAAI,EAAE,KAAK;IAC9B;cAIqB,OAAc,GAAS;AAC1C,YAAO,KAAK,IAAI;AAChB,qBAAO,qBAAqB,CAAC;AAC7B,YAAO,KAAK,IAAI;AACW,MAA3B,iBAAW,KAAK,EAAE,CAAC,EAAE,KAAK;IAC5B;iBAEsB,OAAc,GAAS;AACT,MAAlC,AAAQ,yBAAU,KAAK,EAAE,CAAC,EAAE,KAAK;IACnC;kBAWyB,OAAY,KAAU,KAAW;AACxD,YAAO,KAAK,IAAI;AAChB,qBAAO,mBAAmB,GAAG;AAC7B,qBAAO,mBAAmB,GAAG;AAC7B,YAAO,KAAK,IAAI;AACsB,MAAtC,qBAAe,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK;IACvC;qBAE0B,OAAY,KAAU,KAAW;AACZ,MAA7C,AAAQ,6BAAc,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK;IAC9C;kBAeyB,OAAY,QAAa,KAAW;AAC3D,YAAO,KAAK,IAAI;AAChB,qBAAO,mBAAmB,MAAM;AAChC,qBAAO,mBAAmB,GAAG;AAC7B,YAAO,KAAK,IAAI;AAGhB,YAAmB,AAAe,aAA3B,AAAM,KAAD,uBAAS,AAAO,MAAD,wBAAU,AAAI,GAAD;AACxC,YAAoB,AAAgB,aAA7B,AAAM,KAAD,wBAAU,AAAO,MAAD,yBAAW,AAAI,GAAD;AAG/B,uBAAkB,qBAC3B,KACA,KACA,AAAO,MAAD,OACN,AAAO,MAAD;AAEG,wBAAmB,qBAC5B,AAAO,MAAD,QACN,KACY,aAAZ,AAAM,KAAD,uBAAS,AAAO,MAAD,SACpB,AAAO,MAAD;AAEG,0BAAqB,qBAC9B,KACA,AAAO,MAAD,SACN,AAAO,MAAD,OACO,aAAb,AAAM,KAAD,wBAAU,AAAO,MAAD;AAEZ,2BAAsB,qBAC/B,AAAO,MAAD,QACN,AAAO,MAAD,SACM,aAAZ,AAAM,KAAD,uBAAS,AAAO,MAAD,SACP,aAAb,AAAM,KAAD,wBAAU,AAAO,MAAD;AAGZ,uBAAa,AAAW,UAAD,OAAO,AAAI,GAAD;AAGjC,sBAAiB,qBAC1B,AAAW,UAAD,QACV,AAAW,UAAD,SACA,aAAV,AAAI,GAAD,WAA2B,aAAjB,AAAW,UAAD,uBAAS,AAAY,WAAD,UAChC,aAAX,AAAI,GAAD,YAA6B,aAAlB,AAAW,UAAD,wBAAU,AAAc,aAAD;AAGE,MAAnD,mBAAc,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK;AAEvC,wBAAmB,qBAC5B,AAAU,SAAD,QACT,AAAI,GAAD,MACH,AAAY,WAAD,QACX,AAAY,WAAD;AAEwC,MAArD,mBAAc,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK;AAEzC,0BAAqB,qBAC9B,AAAI,GAAD,OACH,AAAU,SAAD,SACT,AAAc,aAAD,QACb,AAAc,aAAD;AAE0C,MAAzD,mBAAc,KAAK,EAAE,aAAa,EAAE,aAAa,EAAE,KAAK;AAE7C,2BAAsB,qBAC/B,AAAU,SAAD,QACT,AAAU,SAAD,SACT,AAAe,cAAD,QACd,AAAe,cAAD;AAE2C,MAA3D,mBAAc,KAAK,EAAE,cAAc,EAAE,cAAc,EAAE,KAAK;AAkBzD,MAfD,mBACE,KAAK,EACA,qBACH,AAAW,UAAD,QACV,AAAW,UAAD,MACV,AAAY,WAAD,OACX,AAAY,WAAD,UAER,qBACH,AAAW,UAAD,QACV,AAAW,UAAD,MACV,AAAY,WAAD,OACX,AAAY,WAAD,UAEb,KAAK;AAmBN,MAfD,mBACE,KAAK,EACA,qBACH,AAAW,UAAD,OACV,AAAW,UAAD,SACV,AAAc,aAAD,QACb,AAAc,aAAD,OAEV,qBACH,AAAW,UAAD,OACV,AAAW,UAAD,SACV,AAAc,aAAD,QACb,AAAc,aAAD,OAEf,KAAK;AAIuC,MAA9C,mBAAc,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK;AAkB5C,MAfD,mBACE,KAAK,EACA,qBACH,AAAY,WAAD,OACX,AAAY,WAAD,SACX,AAAe,cAAD,QACd,AAAe,cAAD,OAEX,qBACH,AAAY,WAAD,OACX,AAAY,WAAD,SACX,AAAe,cAAD,QACd,AAAe,cAAD,OAEhB,KAAK;AAmBN,MAfD,mBACE,KAAK,EACA,qBACH,AAAc,aAAD,QACb,AAAc,aAAD,MACb,AAAe,cAAD,OACd,AAAe,cAAD,UAEX,qBACH,AAAc,aAAD,QACb,AAAc,aAAD,MACb,AAAe,cAAD,OACd,AAAe,cAAD,UAEhB,KAAK;IAET;gBAIyB;AACvB,YAAO,OAAO,IAAI;AAEQ,MAA1B,WAAM;IACR;kBAsB6B,WAAkB;AAC7C,YAAO,SAAS,IAAI;AACpB,qBAAO,qBAAqB,MAAM;AACD,MAAjC,qBAAe,SAAS,EAAE,MAAM;IAClC;qBAE8B,WAAkB;AACN,MAAxC,AAAQ,6BAAc,SAAS,EAAE,MAAM;IACzC;eAU0B,WAAwB,QAAc;AAC9D,YAAO,SAAS,IAAI;AACpB,YAAO,MAAM,IAAI;AACjB,YAAO,KAAK,IAAI;AACU,MAA1B,WAAM;IACR;kBAW6B,WAAuB,QAAc;AAChE,YAAO,SAAS,IAAI;AACpB,YAAO,MAAM,IAAI;AACjB,YAAO,KAAK,IAAI;AAChB,UAAI,AAAO,AAAO,MAAR,mBAAU,OAAK;AAC4C,QAAnE,WAAM,2BAAc;;AAEI,MAA1B,WAAM;IACR;iBAE2B,UAAoB,WAAiB;AAC9D,YAAO,QAAQ,IAAI;AACnB,YAAO,KAAK,IAAI;AAChB,YAAO,SAAS,IAAI;AACM,MAA1B,WAAM;IACR;cAOqB,OAAyB,YAAuB,OACrD,QAAkB,WAAgB,UAAgB;AAChE,YAAO,KAAK,IAAI;AAChB,YAAO,UAAU,IAAI;AACrB,YAAO,KAAK,IAAI;AAChB,YAAO,MAAM,IAAI;AACjB,YAAO,SAAS,IAAI;AACpB,YAAO,KAAK,IAAI;AAEN,sBAAY,AAAM,KAAD;AAC3B,UAAI,AAAW,UAAD,aAAW,SAAS;AACmC,QAAnE,WAAM,2BAAc;;AAEtB,oBAAI,AAAO,MAAD,kBAAe,AAAO,MAAD,aAAW,SAAS;AAE+B,QADhF,WAAM,2BACF;;AAIoB,MAA1B,WAAM;IACR;iBAiBwB,OAAmB,eAA2B,OACxD,QAAkB,WAAgB,UAAgB;AAC9D,YAAO,KAAK,IAAI;AAChB,YAAO,aAAa,IAAI;AACxB,YAAO,KAAK,IAAI;AAChB,YAAO,MAAM,IAAI;AACjB,YAAO,SAAS,IAAI;AACpB,YAAO,KAAK,IAAI;AAEN,sBAAY,AAAM,KAAD;AAC3B,UAAI,AAAc,aAAD,aAAW,SAAS;AACmC,QAAtE,WAAM,2BAAc;;AAEtB,UAAI,AAAU,SAAD,UAAG,OAAK;AAEmD,QADtE,WAAM,2BACF;;AAEN,UAAI,MAAM,IAAI,QAAsB,aAAd,AAAO,MAAD,aAAU,MAAK,SAAS;AAE+C,QADjG,WAAM,2BACF;;AAIoB,MAA1B,WAAM;IACR;eASS,MAAY,OAAc,WAAgB;AACjD,YAAO,IAAI,IAAI;AACf,YAAO,KAAK,IAAI;AAChB,YAAO,mBAAmB,IAAI;AACiC,MAA/D,AAAQ,0BAAW,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,mBAAmB;IAChE;;4BAzxBuB,UAAgB;;IAdhB;UAcoC,QAAQ,IAAI;AACrE,kBAAI,AAAS,QAAD;AAE2D,MADrE,WAAM,2BACF;;AAEmB,IAAzB,AAAS,QAAD,IAAC,OAAT,WAAkB,kBAAT;AACkC,IAA3C,iBAAU,AAAS,QAAD,gBAAgB,QAAQ;EAC5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAszB6B;;;;;;IAClB;;;;;;YAbe,OAAW;AAAW;IAAI;;IAIpC;;AAMgB;IAAC;;4BAnBlB,iBAAsB;IAAtB;IAAsB;;EAAS;;;;;;;;;;;;;;;;;;;;;;;IA+ChD;;yCAlBK;;;;EAkBL;;;;;;;;;;;;;;;;;;;;;IA6DA;;0CArDK;;;;EAqDL;;;;;;;;;;;;;;;;;;;;;IAoB6B;;;;;;IAoCd;;;;;;;AAlCyB,uBAAA,AAAS,2BAAU,OAAO,AAAS;IAAI;;;AAEnC;iCAAiB;IAAQ;;;AAG3C,8DAAiB;oBAAjB,OAA6B;IAAG;;;AAGhC,8DAAiB;oBAAjB,OAA6B;IAAG;;AAOtD;AACE,cAAc;;AAEd,cAAY;;IAEhB;uBAmB4B,GAAU;AACF,MAAlC,AAAS,oBAAW,uBAAQ,CAAC,EAAE,CAAC;AACV,MAAtB,wBAAiB,CAAC,EAAE,CAAC;IACvB;wBAG6B,GAAU;AACT,MAA5B,AAAgB,kCAAW,CAAC;AACA,MAA5B,AAAgB,kCAAW,CAAC;IAC9B;WAGmB,GAAU;AACN,MAArB,uBAAgB,CAAC,EAAE,CAAC;AACc,MAAlC,AAAU,uBAAW,sBAAO,CAAC,EAAE,CAAC;IAClC;mBAG2B,IAAW;AACvB,iBAAiB,aAAV,iCAAY,EAAE;AACrB,iBAAiB,aAAV,iCAAY,EAAE;AACP,MAA3B,uBAAgB,IAAI,EAAE,IAAI;AACc,MAAxC,AAAU,uBAAW,sBAAO,IAAI,EAAE,IAAI;IACxC;WAImB,GAAU;AAC3B,oBAAI,AAAS;AACK,QAAhB,YAAO,KAAK;;AAEoB,MAAlC,AAAU,uBAAW,sBAAO,CAAC,EAAE,CAAC;AACV,MAAtB,wBAAiB,CAAC,EAAE,CAAC;IACvB;mBAI2B,IAAW;AACvB,iBAAiB,aAAV,iCAAY,EAAE;AACrB,iBAAiB,aAAV,iCAAY,EAAE;AAClC,oBAAI,AAAS;AACK,QAAhB,YAAO,KAAK;;AAE0B,MAAxC,AAAU,uBAAW,sBAAO,IAAI,EAAE,IAAI;AACV,MAA5B,wBAAiB,IAAI,EAAE,IAAI;IAC7B;;AAGE,oBAAI,AAAS;AAC2B,QAAtC,AAAS,oBAAW,uBAAQ,KAAK;;IAErC;sBAK8B,IAAW,IAAW,IAAW;AACzC,MAApB;AACsD,MAAtD,AAAU,uBAAW,gCAAiB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AAC5B,MAAxB,wBAAiB,EAAE,EAAE,EAAE;IACzB;8BAMsC,IAAW,IAAW,IAAW;AACjD,MAApB;AAEoE,MADpE,AAAU,uBAAW,gCACd,aAAH,EAAE,iBAAG,mBAAc,aAAH,EAAE,iBAAG,mBAAc,aAAH,EAAE,iBAAG,mBAAc,aAAH,EAAE,iBAAG;AACT,MAAhD,wBAAoB,aAAH,EAAE,iBAAG,mBAAc,aAAH,EAAE,iBAAG;IACxC;YAMW,IAAW,IAAW,IAAW,IAAW,IAAW;AAC5C,MAApB;AAC2D,MAA3D,AAAU,uBAAW,6BAAc,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AACjC,MAAxB,wBAAiB,EAAE,EAAE,EAAE;IACzB;oBAOW,IAAW,IAAW,IAAW,IAAW,IAAW;AAC5C,MAApB;AAEoE,MADpE,AAAU,uBAAW,6BAAiB,aAAH,EAAE,iBAAG,mBAAc,aAAH,EAAE,iBAAG,mBACjD,aAAH,EAAE,iBAAG,mBAAc,aAAH,EAAE,iBAAG,mBAAc,aAAH,EAAE,iBAAG,mBAAc,aAAH,EAAE,iBAAG;AACT,MAAhD,wBAAoB,aAAH,EAAE,iBAAG,mBAAc,aAAH,EAAE,iBAAG;IACxC;YAOoB,IAAW,IAAW,IAAW,IAAW;AAC3C,kBACR,AAA+C,qBAAzC,kBAAW,kBAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAC9C,gBAAM,AAAM,KAAD;AACrB,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,GAAG,GAAE,IAAA,AAAE,CAAD,GAAI;AAEmC,QAD/D,uBACI,AAAK,AAAI,KAAJ,QAAC,CAAC,MAAM,AAAK,AAAI,KAAJ,QAAC,CAAC,MAAM,AAAK,AAAQ,KAAR,QAAC,AAAE,CAAD,GAAG,OAAO,AAAK,AAAQ,KAAR,QAAC,AAAE,CAAD,GAAG;;IAE7D;oBAQ4B,IAAW,IAAW,IAAW,IAAW;AACI,MAA1E,aAAkB,aAAV,iCAAY,EAAE,GAAY,aAAV,iCAAY,EAAE,GAAY,aAAV,iCAAY,EAAE,GAAY,aAAV,iCAAY,EAAE,GAAE,CAAC;IAC3E;UAmBS,MAAa,YAAmB,YAAiB;AACxD,qBAAO,mBAAmB,IAAI;AACjB,mBAAS,AAAK,IAAD;AACb,oBAAqB,aAAX,AAAK,IAAD,UAAS;AACvB,oBAAsB,aAAZ,AAAK,IAAD,WAAU;AACxB,mBAAS,AAAQ,AAAuB,OAAxB,GAAG,SAAS,UAAU,iBAAI,AAAO,MAAD;AAChD,mBAAS,AAAQ,AAAuB,OAAxB,GAAG,SAAS,UAAU,iBAAI,AAAO,MAAD;AAC7D,oBAAI,WAAW;AACkB,QAA/B,uBAAgB,MAAM,EAAE,MAAM;;AAER,QAAtB,YAAO,MAAM,EAAE,MAAM;;AAGyC,MADhE,AAAU,uBAAW,uBAAQ,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK,OAAO,EAAE,OAAO,EAAE,KACjE,UAAU,EAAa,aAAX,UAAU,iBAAG,UAAU,GAAE,AAAW,UAAD;AAGS,MAD5D,wBAAiB,AAAQ,AAAoC,OAArC,GAAG,SAAoB,aAAX,UAAU,iBAAG,UAAU,kBAAI,AAAO,MAAD,MACjE,AAAQ,AAAoC,OAArC,GAAG,SAAoB,aAAX,UAAU,iBAAG,UAAU,kBAAI,AAAO,MAAD;IAC1D;eAkBS;UACA;UACA;UACF;UACA;AAEL,qBAAO,qBAAqB,MAAM;AAClC,qBAAO,qBAAqB,MAAM;AAU3B,eAAK,AAAO,AAAE,MAAH;AACX,eAAK,AAAO,AAAE,MAAH;AAKP,wBAAc,AAAU,AAAa,oBAAV,AAAO,MAAD,OAAO,AAAU,oBAAG,AAAO,MAAD;AAKtE,UAAI,WAAW,IAAI,AAAG,AAAQ,EAAT,eAAY,KAAK,AAAG,AAAQ,EAAT,eAAY;AACA,QAAlD,AAAU,uBAAW,sBAAO,AAAO,MAAD,KAAK,AAAO,MAAD;AACP,QAAtC,wBAAiB,AAAO,MAAD,KAAK,AAAO,MAAD;AAClC;;AAMW,sBAAoC,CAAb,aAAV,iCAAY,AAAO,MAAD,QAAO;AACtC,sBAAoC,CAAb,aAAV,iCAAY,AAAO,MAAD,QAAO;AAGtC,0BAAwB,AAAW,iCAAT,QAAQ,IAAG;AAGrC,6BAAmB,SAAS,aAAa;AACzC,6BAAmB,SAAS,aAAa;AAGzC,mBACR,AAAiB,AAAa,gBAAd,GAAG,SAAS,GAAK,AAAiB,gBAAD,GAAG,SAAS;AACrD,mBACR,AAAkB,AAAa,CAA9B,gBAAgB,GAAG,SAAS,GAAK,AAAiB,gBAAD,GAAG,SAAS;AAI5D,qBAAW,AAAG,EAAD,GAAG,EAAE;AAClB,qBAAW,AAAG,EAAD,GAAG,EAAE;AACZ,yBAAe,AAAO,MAAD,GAAG,MAAM;AAC9B,yBAAe,AAAO,MAAD,GAAG,MAAM;AAEpC,uBAAc,AAAa,AAAY,YAAb,GAAG,QAAQ,GAAK,AAAa,YAAD,GAAG,QAAQ;AACxE,UAAI,AAAW,UAAD,GAAG;AACmB,QAAlC,aAAa,UAAU,UAAU;AACjB,QAAhB,KAAA,AAAG,EAAD,GAAI,UAAU;AACA,QAAhB,KAAA,AAAG,EAAD,GAAI,UAAU;AACE,QAAlB,WAAW,AAAG,EAAD,GAAG,EAAE;AACA,QAAlB,WAAW,AAAG,EAAD,GAAG,EAAE;;AAIP,2BACR,AAAS,AAAgB,QAAjB,GAAG,YAAY,GAAI,AAAS,QAAD,GAAG,YAAY;AAC1C,uBAAc,AAAS,AAAY,QAAb,GAAG,QAAQ,GAAI,cAAc;AACzD,wBAAc,UAAU,mBAAS,AAAW,UAAD,GAAG,cAAc,EAAE;AACrE,UAAa,YAAT,QAAQ,EAAI,SAAS;AACG,QAA1B,cAAc,CAAC,WAAW;;AAGf,oBAAU,AAAY,WAAD,IAAK,AAAG,AAAU,EAAX,GAAG,MAAM,GAAI,EAAE;AAC3C,oBAAU,AAAY,WAAD,IAAI,AAAe,EAAb,AAAG,EAAD,GAAG,MAAM,IAAI,EAAE;AAG5C,eAAK,AAAiB,AAAU,AACd,gBADG,GAAG,OAAO,GACxC,AAAiB,gBAAD,GAAG,OAAO,GACD,CAAb,aAAV,iCAAY,AAAO,MAAD,QAAO;AAClB,eAAK,AAAiB,AAAU,AACd,gBADG,GAAG,OAAO,GACxC,AAAiB,gBAAD,GAAG,OAAO,GACD,CAAb,aAAV,iCAAY,AAAO,MAAD,QAAO;AAIlB,yBAAkC,CAAlB,AAAO,MAAD,GAAG,OAAO,IAAI,EAAE;AACtC,yBAAkC,CAAlB,AAAO,MAAD,GAAG,OAAO,IAAI,EAAE;AAEtC,uBAAa,WAAW,YAAY,EAAE,YAAY;AAClD,uBAAiC,CAAnB,AAAQ,CAAP,MAAM,GAAG,OAAO,IAAI,EAAE;AACrC,uBAAiC,CAAnB,AAAQ,CAAP,MAAM,GAAG,OAAO,IAAI,EAAE;AAC3C,uBAAa,AAAmC,WAAxB,UAAU,EAAE,UAAU,IAAI,UAAU;AAEnE,oBAAI,SAAS,KAAI,AAAW,UAAD,GAAG;AACD,QAA3B,aAAA,AAAW,UAAD,GAAY,oBAAE;YACnB,gBAAK,SAAS,KAAI,AAAW,UAAD,GAAG;AACT,QAA3B,aAAA,AAAW,UAAD,GAAY,oBAAE;;AAI0B,MADpD,AAAU,uBAAW,uBAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,UAAU,EAClE,AAAW,UAAD,GAAG,UAAU,EAAE,AAAW,UAAD;AAED,MAAtC,wBAAiB,AAAO,MAAD,KAAK,AAAO,MAAD;IACpC;uBAiBS;UACA;UACA;UACF;UACA;AAEL,qBAAO,qBAAqB,WAAW;AACvC,qBAAO,qBAAqB,MAAM;AAKT,MAJzB,gBAAW,kBAAiB,aAAV,iCAAY,AAAY,WAAD,MAAe,aAAV,iCAAY,AAAY,WAAD,gBACzD,MAAM,YACJ,QAAQ,YACR,QAAQ,aACP,SAAS;IAC1B;YAIkB;AAChB,qBAAO,mBAAmB,IAAI;AACM,MAApC,uBAAgB,AAAK,IAAD,OAAO,AAAK,IAAD;AAE2C,MAD1E,AACK,uBAAW,2BAAY,AAAK,IAAD,OAAO,AAAK,IAAD,MAAM,AAAK,IAAD,QAAQ,AAAK,IAAD;IACnE;YAQkB;AAChB,qBAAO,mBAAmB,IAAI;AACjB,mBAAS,AAAK,IAAD;AACb,oBAAqB,aAAX,AAAK,IAAD,UAAS;AACvB,oBAAsB,aAAZ,AAAK,IAAD,WAAU;AAGU,MAA/C,uBAA0B,aAAV,AAAO,MAAD,OAAM,OAAO,EAAE,AAAO,MAAD;AAE+B,MAD1E,AAAU,uBAAW,uBACjB,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK,OAAO,EAAE,OAAO,EAAE,KAAK,KAAK,AAAE,uBAAW;IACrE;WAUiB,MAAa,YAAmB;AAC/C,qBAAO,mBAAmB,IAAI;AACjB,mBAAS,AAAK,IAAD;AACb,oBAAqB,aAAX,AAAK,IAAD,UAAS;AACvB,oBAAsB,aAAZ,AAAK,IAAD,WAAU;AAEU,MAD/C,uBAAgB,AAAQ,AAAuB,OAAxB,GAAG,SAAS,UAAU,iBAAI,AAAO,MAAD,MACnD,AAAQ,AAAuB,OAAxB,GAAG,SAAS,UAAU,iBAAI,AAAO,MAAD;AAEqB,MADhE,AAAU,uBAAW,uBAAQ,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK,OAAO,EAAE,OAAO,EAAE,KACjE,UAAU,EAAa,aAAX,UAAU,iBAAG,UAAU,GAAE,AAAW,UAAD;AAGS,MAD5D,wBAAiB,AAAQ,AAAoC,OAArC,GAAG,SAAoB,aAAX,UAAU,iBAAG,UAAU,kBAAI,AAAO,MAAD,MACjE,AAAQ,AAAoC,OAArC,GAAG,SAAoB,aAAX,UAAU,iBAAG,UAAU,kBAAI,AAAO,MAAD;IAC1D;eAS6B,QAAa;AACxC,YAAO,MAAM,IAAI;AACjB,oBAAI,AAAO,MAAD;AACR;;AAGsC,MAAxC,YAAO,AAAO,AAAM,MAAP,aAAW,AAAO,AAAM,MAAP;AAC9B,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAO,MAAD,YAAS,IAAA,AAAC,CAAA;AACrB,oBAAQ,AAAM,MAAA,QAAC,CAAC;AACH,QAA1B,YAAO,AAAM,KAAD,KAAK,AAAM,KAAD;;AAExB,oBAAI,KAAK;AACK,QAAZ,AAAK;;AAE2C,QAAhD,wBAAiB,AAAO,AAAK,MAAN,YAAU,AAAO,AAAK,MAAN;;IAE3C;aAKoB;AAClB,qBAAO,oBAAoB,KAAK;AAMqB,MAArD,uBAAgB,AAAM,AAAe,KAAhB,sBAAsB,AAAM,KAAD;AACP,MAAzC,AAAU,uBAAW,4BAAa,KAAK;IACzC;YAQkB,MAAa;UAAqB;AAClD,YAAO,IAAI,IAAI;AACf,qBAAO,qBAAqB,MAAM;AAClC,UAAI,OAAO,IAAI;AACb,uBAAO,sBAAsB,OAAO;AACmB,QAAvD,0BAAmB,IAAI,EAAE,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK,OAAO;;AAElB,QAApC,gBAAS,IAAI,EAAE,AAAO,MAAD,KAAK,AAAO,MAAD;;IAEpC;gBAEmB,MAAa,IAAW;AACzC,UAAI,AAAG,EAAD,KAAI,OAAO,AAAG,EAAD,KAAI;AACS,QAA9B,AAAS,uBAAO,AAAK,IAAD;;AAE4C,QAAhE,WAAM,gCAAmB;;IAE7B;0BAE6B,MAAa,IAAW,IAAgB;AACF,MAAjE,WAAM,gCAAmB;IAC3B;mBAQyB,MAAa;UAAqB;AACzD,YAAO,IAAI,IAAI;AACf,qBAAO,qBAAqB,MAAM;AAClC,UAAI,OAAO,IAAI;AACb,uBAAO,sBAAsB,OAAO;AACyB,QAA7D,gCAAyB,IAAI,EAAE,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK,OAAO;;AAEjB,QAA3C,uBAAgB,IAAI,EAAE,AAAO,MAAD,KAAK,AAAO,MAAD;;IAE3C;uBAE0B,MAAa,IAAW;AAChD,UAAI,AAAG,EAAD,KAAI,OAAO,AAAG,EAAD,KAAI;AACrB,cAAO,AAAK,AAAS,AAAO,IAAjB,uBAAoB;AACX,QAApB;AAC+C,QAA/C,AAAU,0BAAO,AAAK,AAAS,AAAO,IAAjB;AAE4C,QADjE,wBACI,AAAK,AAAS,AAAO,IAAjB,6BAA2B,AAAK,AAAS,AAAO,IAAjB;;AAE4B,QAAnE,WAAM,gCAAmB;;IAE7B;gCAGS,MAAa,IAAW,IAAgB;AACqB,MAApE,WAAM,gCAAmB;IAC3B;;AAKsB,MAApB;AAC0C,MAA1C,AAAU;AACsD,MAAhE,wBAAiB,AAAgB,+BAAQ,AAAgB;IAC3D;;AAMkB,MAAhB,AAAS;IACX;aAaqB;;AACnB,qBAAO,qBAAqB,KAAK;AACvB,yBAAe,AAAS;AAClC,UAAI,AAAa,YAAD,KAAI;AAClB,cAAO;;AAEI,mBAAS,AAAM,KAAD;AACd,mBAAS,AAAM,KAAD;AAC3B,UAAI,AAAa,YAAD,KAAI;AAEG,sBAAU,AAAQ,qBAAC;AACxC,YAAI,AAAQ,AAAS,AAAO,OAAjB,uBAAoB;AACJ,oBAAM,AAAQ,AAAQ,OAAT,iBAAU;AAChD,cAAQ,sBAAJ,GAAG;AACL,gBAAW,aAAP,MAAM,iBAAG,AAAI,GAAD,OAAa,aAAP,MAAM,IAAU,aAAN,AAAI,GAAD,mBAAK,AAAI,GAAD;AACzC,oBAAO;;AAET,gBAAW,aAAP,MAAM,iBAAG,AAAI,GAAD,OAAa,aAAP,MAAM,IAAU,aAAN,AAAI,GAAD,mBAAK,AAAI,GAAD;AACzC,oBAAO;;AAET,kBAAO;gBACF,KAAQ,uBAAJ,GAAG;AACA,wBAAQ,AAAI,GAAD;AACvB,gBAAW,aAAP,MAAM,iBAAG,AAAM,KAAD,SAAe,aAAP,MAAM,iBAAG,AAAM,KAAD;AACtC,oBAAO;;AAET,gBAAW,aAAP,MAAM,iBAAG,AAAM,KAAD,UAAgB,aAAP,MAAM,iBAAG,AAAM,KAAD;AACvC,oBAAO;;AAET,gBAAW,aAAP,MAAM,IAAe,aAAX,AAAM,KAAD,sBAAQ,AAAM,KAAD,eACrB,aAAP,MAAM,IAAc,aAAV,AAAM,KAAD,qBAAO,AAAM,KAAD;AAE7B,oBAAO,qBACH,MAAM,EACN,MAAM,EACK,aAAX,AAAM,KAAD,sBAAQ,AAAM,KAAD,aACR,aAAV,AAAM,KAAD,qBAAO,AAAM,KAAD,aACjB,AAAM,KAAD,YACL,AAAM,KAAD;kBACJ,KAAW,aAAP,MAAM,KAAiB,aAAZ,AAAM,KAAD,uBAAS,AAAM,KAAD,eAC9B,aAAP,MAAM,IAAc,aAAV,AAAM,KAAD,qBAAO,AAAM,KAAD;AAE7B,oBAAO,qBACH,MAAM,EACN,MAAM,EACM,aAAZ,AAAM,KAAD,uBAAS,AAAM,KAAD,aACT,aAAV,AAAM,KAAD,qBAAO,AAAM,KAAD,aACjB,AAAM,KAAD,YACL,AAAM,KAAD;kBACJ,KAAW,aAAP,MAAM,KAAiB,aAAZ,AAAM,KAAD,uBAAS,AAAM,KAAD,eAC9B,aAAP,MAAM,KAAkB,aAAb,AAAM,KAAD,wBAAU,AAAM,KAAD;AAEjC,oBAAO,qBACH,MAAM,EACN,MAAM,EACM,aAAZ,AAAM,KAAD,uBAAS,AAAM,KAAD,aACN,aAAb,AAAM,KAAD,wBAAU,AAAM,KAAD,aACpB,AAAM,KAAD,YACL,AAAM,KAAD;kBACJ,KAAW,aAAP,MAAM,IAAe,aAAX,AAAM,KAAD,sBAAQ,AAAM,KAAD,eAC5B,aAAP,MAAM,KAAkB,aAAb,AAAM,KAAD,wBAAU,AAAM,KAAD;AAEjC,oBAAO,qBACH,MAAM,EACN,MAAM,EACK,aAAX,AAAM,KAAD,sBAAQ,AAAM,KAAD,aACL,aAAb,AAAM,KAAD,wBAAU,AAAM,KAAD,aACpB,AAAM,KAAD,YACL,AAAM,KAAD;;AAEX,kBAAO;;;;AAIF,iBAAO,AAAO,AAAa,4BAAE,AAAO;AACN,MAAzC,AAAa,+BAAA,uBAAI,8BAAmB,IAAI,IAA3B;AAGqC,MADlD,AAAa,+BAAU,CAAmC,kBACtD,CAAmC;AAE+B,MADtE,AAAa,8BACT,MAAiD,MAA1C,oBAAS;AACT,mBAAS,AAAa,AAAI,uCAAc,MAAM,EAAE,MAAM;AAC3C,MAAtB,AAAa;AACb,YAAO,OAAM;IACf;UAIkB;AAChB,qBAAO,qBAAqB,MAAM;AACP,4BAAkC;AAC7D,eAA0B,UAAW;AACO,QAA1C,AAAgB,eAAD,OAAK,AAAQ,OAAD,OAAO,MAAM;;AAE1C,YAAY,oBAAO,eAAe,EAAE;IACtC;cAI2B;AACzB,qBAAO,sBAAsB,OAAO;AACV,MAA1B,WAAM;IACR;;AAoBO,4BAAkB;AAChB,iBAAO;AAAK,gBAAM;AAAK,kBAAQ;AAAK,mBAAS;AAC7C,iBAAO;AACP,iBAAO;AACP,iBAAO;AAAK,iBAAO;AAAK,iBAAO;AAAK,iBAAO;AAClD,eAAoB,UAAW;AAC7B,iBAAwB,KAAM,AAAQ,QAAD;AAC9B,2BAAa;AAClB,kBAAQ,AAAG,EAAD;;;AAEc,6CAAM,EAAE;AACF,cAA1B,OAAO,OAAO,OAAO,AAAI,GAAD;AACE,cAA1B,OAAO,OAAO,OAAO,AAAI,GAAD;AACxB;;;;AAEoB,6CAAM,EAAE;AACF,cAA1B,OAAO,OAAO,OAAO,AAAI,GAAD;AACE,cAA1B,OAAO,OAAO,OAAO,AAAI,GAAD;AACxB;;;;AAEqB,8CAAM,EAAE;AAEhB,uBAAK,AAAI,GAAD;AACR,uBAAK,AAAI,GAAD;AACR,2BAAS,SAAS,AAAI,GAAD;AACrB,2BAAS,SAAS,AAAI,GAAD;AACrB,0BAAW,aAAH,EAAE,IAAG,MAAM;AACnB,0BAAW,aAAH,EAAE,IAAG,MAAM;AACnB,0BAAW,aAAH,EAAE,IAAG,MAAM;AACnB,0BAAW,aAAH,EAAE,IAAG,MAAM;AAEnB,+BAAa,AAAM,KAAD,GAAG,KAAK;AAC1B,gCAAc,AAAO,CAAN,KAAK,GAAG,KAAK;AAC5B,8BAAY,AAAM,KAAD,GAAG,KAAK;AACzB,iCAAe,AAAM,KAAD,GAAG,KAAK;AAE5B,4BAAU,AAAI,GAAD;AACb,4BAAU,AAAI,GAAD;AAEnB,6BAAmB,aAAR,OAAO,IAAG,UAAU;AAC/B,6BAAmB,aAAR,OAAO,IAAG,SAAS;AACf,cAAtB,OAAO,OAAO,QAAQ;AACA,cAAtB,OAAO,OAAO,QAAQ;AAEU,cAAhC,WAAmB,aAAR,OAAO,IAAG,WAAW;AACC,cAAjC,WAAmB,aAAR,OAAO,IAAG,YAAY;AACF,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AAEC,cAA/B,WAAmB,aAAR,OAAO,IAAG,UAAU;AACD,cAA9B,WAAmB,aAAR,OAAO,IAAG,SAAS;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AAEE,cAAhC,WAAmB,aAAR,OAAO,IAAG,WAAW;AACC,cAAjC,WAAmB,aAAR,OAAO,IAAG,YAAY;AACF,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,cAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AAEF,cAA5B,OAAe,aAAR,OAAO,iBAAG,AAAI,GAAD;AACN,cAAd,OAAO,OAAO;AACd;;;;AAE8B,uDAAM,EAAE;AACzB,uBAAK,IAAI;AACT,uBAAK,IAAI;AACT,wBAAM,AAAI,GAAD;AACT,wBAAM,AAAI,GAAD;AACT,uBAAK,AAAI,GAAD;AACR,uBAAK,AAAI,GAAD;AAEE,cAAvB,OAAO,sBAAS,EAAE,EAAE,EAAE;AACC,cAAvB,OAAO,sBAAS,EAAE,EAAE,EAAE;AACC,cAAvB,OAAO,sBAAS,EAAE,EAAE,EAAE;AACC,cAAvB,OAAO,sBAAS,EAAE,EAAE,EAAE;AASf,0BAAW,AAAY,aAAf,EAAE,IAAI,AAAE,iBAAE,GAAG,iBAAI,EAAE;AAClC,kBAAI,AAAM,AAAM,KAAP;AACG,yBAAgB,CAAP,aAAH,EAAE,iBAAG,GAAG,KAAI,KAAK;AACjC,oBAAK,AAAG,EAAD,IAAI,KAAO,AAAG,EAAD,IAAI;AAEZ,+BAAS,AAAI,MAAE,EAAE;AACjB,iCAAY,AAAO,AAAS,AAAM,AAChB,MADA,GAAG,MAAM,gBAAG,EAAE,IACrC,AAAE,AAAK,AAAS,IAAZ,EAAE,GAAG,MAAM,gBAAG,GAAG,IACrB,AAAG,AAAK,EAAN,GAAG,EAAE,gBAAG,EAAE;AACP,iCAAY,AAAO,AAAS,AAAM,AAChB,MADA,GAAG,MAAM,gBAAG,EAAE,IACrC,AAAE,AAAK,AAAS,IAAZ,EAAE,GAAG,MAAM,gBAAG,GAAG,IACrB,AAAG,AAAK,EAAN,GAAG,EAAE,gBAAG,EAAE;AAEc,kBAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,kBAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,kBAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;AACC,kBAA/B,OAAO,sBAAS,IAAI,EAAE,QAAQ;;;AAIP,cAA3B,QAAW,AAAY,aAAf,EAAE,IAAI,AAAE,iBAAE,GAAG,iBAAI,EAAE;AAC3B,kBAAI,AAAM,AAAM,KAAP;AACG,yBAAgB,CAAP,aAAH,EAAE,iBAAG,GAAG,KAAI,KAAK;AACjC,oBAAK,AAAG,EAAD,IAAI,KAAO,AAAG,EAAD,IAAI;AACZ,gCAAU,AAAI,MAAE,EAAE;AAClB,kCAAa,AAAQ,AAAU,AAAM,AAClB,OADC,GAAG,OAAO,gBAAG,EAAE,IACxC,AAAE,AAAK,AAAU,IAAb,EAAE,GAAG,OAAO,gBAAG,GAAG,IACtB,AAAG,AAAK,EAAN,GAAG,EAAE,gBAAG,EAAE;AACP,kCAAa,AAAQ,AAAU,AAAM,AAClB,OADC,GAAG,OAAO,gBAAG,EAAE,IACxC,AAAE,AAAK,AAAU,IAAb,EAAE,GAAG,OAAO,gBAAG,GAAG,IACtB,AAAG,AAAK,EAAN,GAAG,EAAE,gBAAG,EAAE;AAEe,kBAAhC,OAAO,sBAAS,IAAI,EAAE,SAAS;AACC,kBAAhC,OAAO,sBAAS,IAAI,EAAE,SAAS;AACC,kBAAhC,OAAO,sBAAS,IAAI,EAAE,SAAS;AACC,kBAAhC,OAAO,sBAAS,IAAI,EAAE,SAAS;;;AAG1B,cAAT,OAAO,EAAE;AACA,cAAT,OAAO,EAAE;AACT;;;;AAE2B,oDAAM,EAAE;AACtB,2BAAS,IAAI;AACb,2BAAS,IAAI;AACb,yBAAO,AAAI,GAAD;AACV,yBAAO,AAAI,GAAD;AACV,yBAAO,AAAI,GAAD;AACV,yBAAO,AAAI,GAAD;AACV,yBAAO,AAAI,GAAD;AACV,yBAAO,AAAI,GAAD;AAGM,cAA7B,OAAO,sBAAS,MAAM,EAAE,IAAI;AACC,cAA7B,OAAO,sBAAS,MAAM,EAAE,IAAI;AACC,cAA7B,OAAO,sBAAS,MAAM,EAAE,IAAI;AACC,cAA7B,OAAO,sBAAS,MAAM,EAAE,IAAI;AAErB;AACA;AACA;AAAG;AAAG;AAIb,oBAAe,aAAP,MAAM,iBAAG,IAAI,KAAW,aAAL,IAAI,iBAAG,IAAI,KAAW,aAAL,IAAI,iBAAG,IAAI,KAC1C,aAAP,MAAM,iBAAG,IAAI,KAAW,aAAL,IAAI,iBAAG,IAAI,KAAW,aAAL,IAAI,iBAAG,IAAI;AAKX,gBAAxC,IAAI,AAAQ,AAAsB,cAA7B,MAAM,IAAI,AAAE,KAAQ,aAAL,IAAI,iBAAG,IAAI,kBAAK,IAAI;AACJ,gBAApC,IAAI,AAAE,KAAU,AAAa,aAApB,MAAM,IAAI,AAAE,iBAAE,IAAI,iBAAI,IAAI;AACjB,gBAAlB,IAAI,AAAQ,cAAP,MAAM,iBAAG,IAAI;AAKd,wBAAO,AAAK,aAAP,CAAC,iBAAG,CAAC,IAAK,AAAE,AAAI,iBAAF,CAAC,iBAAG,CAAC;AAE5B,oBAAK,AAAE,CAAD,IAAI,OAAS,AAAE,AAAM,CAAP;AAClB,sBAAI,AAAE,CAAD,KAAI;AAEG,4BAAI,AAAG,cAAF,CAAC,KAAI,AAAE,iBAAE,CAAC;AACf,iCAAS,AAAI,MAAE,CAAC;AAC1B,wBAAK,AAAE,CAAD,IAAI,OAAS,AAAE,CAAD,IAAI;AAIA,sBAHtB,WAAa,AAAO,AAAS,AAAU,AAAU,AACV,AACL,MAFf,GAAG,MAAM,GAAG,MAAM,gBAAI,MAAM,IACzC,AAAE,AAAS,AAAS,AAAK,IAArB,MAAM,GAAG,MAAM,GAAG,CAAC,gBAAI,IAAI,IAC/B,AAAE,AAAS,AAAI,AAAK,IAAhB,MAAM,GAAG,CAAC,GAAG,CAAC,gBAAI,IAAI,IAC3B,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,gBAAG,IAAI;AACU,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;AACC,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;;;AAIhB,oBAAhB,IAAI,UAAU,CAAC;AACX,4BAAa,CAAR,AAAG,cAAF,CAAC,IAAG,CAAC,KAAK,AAAE,iBAAE,CAAC;AACrB,iCAAS,AAAI,MAAE,CAAC;AACpB,wBAAK,AAAE,CAAD,IAAI,OAAS,AAAE,CAAD,IAAI;AAIA,sBAHtB,WAAa,AAAO,AAAS,AAAU,AAAU,AACV,AACL,MAFf,GAAG,MAAM,GAAG,MAAM,gBAAI,MAAM,IACzC,AAAE,AAAS,AAAS,AAAK,IAArB,MAAM,GAAG,MAAM,GAAG,CAAC,gBAAI,IAAI,IAC/B,AAAE,AAAS,AAAI,AAAK,IAAhB,MAAM,GAAG,CAAC,GAAG,CAAC,gBAAI,IAAI,IAC3B,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,gBAAG,IAAI;AACU,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;AACC,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;;AAGV,oBAAtB,IAAa,CAAR,AAAG,cAAF,CAAC,IAAG,CAAC,KAAK,AAAE,iBAAE,CAAC;AACL,oBAAhB,SAAS,AAAI,MAAE,CAAC;AAChB,wBAAK,AAAE,CAAD,IAAI,OAAS,AAAE,CAAD,IAAI;AAIA,sBAHtB,WAAa,AAAO,AAAS,AAAU,AAAU,AACV,AACL,MAFf,GAAG,MAAM,GAAG,MAAM,gBAAI,MAAM,IACzC,AAAE,AAAS,AAAS,AAAK,IAArB,MAAM,GAAG,MAAM,GAAG,CAAC,gBAAI,IAAI,IAC/B,AAAE,AAAS,AAAI,AAAK,IAAhB,MAAM,GAAG,CAAC,GAAG,CAAC,gBAAI,IAAI,IAC3B,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,gBAAG,IAAI;AAEU,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;AACC,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;;;;;AAOtC,oBAAe,aAAP,MAAM,iBAAG,IAAI,KAAW,aAAL,IAAI,iBAAG,IAAI,KAAW,aAAL,IAAI,iBAAG,IAAI,KAC1C,aAAP,MAAM,iBAAG,IAAI,KAAW,aAAL,IAAI,iBAAG,IAAI,KAAW,aAAL,IAAI,iBAAG,IAAI;AAKX,gBAAxC,IAAI,AAAQ,AAAsB,cAA7B,MAAM,IAAI,AAAE,KAAQ,aAAL,IAAI,iBAAG,IAAI,kBAAK,IAAI;AACJ,gBAApC,IAAI,AAAE,KAAU,AAAa,aAApB,MAAM,IAAI,AAAE,iBAAE,IAAI,iBAAI,IAAI;AACjB,gBAAlB,IAAI,AAAQ,cAAP,MAAM,iBAAG,IAAI;AAKd,wBAAO,AAAK,aAAP,CAAC,iBAAG,CAAC,IAAK,AAAE,AAAI,iBAAF,CAAC,iBAAG,CAAC;AAE5B,oBAAK,AAAE,CAAD,IAAI,OAAS,AAAE,AAAM,CAAP;AAClB,sBAAI,AAAE,CAAD,KAAI;AAEG,4BAAI,AAAG,cAAF,CAAC,KAAI,AAAE,iBAAE,CAAC;AACf,iCAAS,AAAI,MAAE,CAAC;AAC1B,wBAAK,AAAE,CAAD,IAAI,OAAS,AAAE,CAAD,IAAI;AAIA,sBAHtB,WAAa,AAAO,AAAS,AAAU,AAAU,AACV,AACL,MAFf,GAAG,MAAM,GAAG,MAAM,gBAAI,MAAM,IACzC,AAAE,AAAS,AAAS,AAAK,IAArB,MAAM,GAAG,MAAM,GAAG,CAAC,gBAAI,IAAI,IAC/B,AAAE,AAAS,AAAI,AAAK,IAAhB,MAAM,GAAG,CAAC,GAAG,CAAC,gBAAI,IAAI,IAC3B,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,gBAAG,IAAI;AACU,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;AACC,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;;;AAIhB,oBAAhB,IAAI,UAAU,CAAC;AACL,4BAAa,CAAR,AAAG,cAAF,CAAC,IAAG,CAAC,KAAK,AAAE,iBAAE,CAAC;AACrB,iCAAS,AAAI,MAAE,CAAC;AAC1B,wBAAK,AAAE,CAAD,IAAI,OAAS,AAAE,CAAD,IAAI;AAIA,sBAHtB,WAAa,AAAO,AAAS,AAAU,AAAU,AACV,AACL,MAFf,GAAG,MAAM,GAAG,MAAM,gBAAI,MAAM,IACzC,AAAE,AAAS,AAAS,AAAK,IAArB,MAAM,GAAG,MAAM,GAAG,CAAC,gBAAI,IAAI,IAC/B,AAAE,AAAS,AAAI,AAAK,IAAhB,MAAM,GAAG,CAAC,GAAG,CAAC,gBAAI,IAAI,IAC3B,AAAE,AAAI,AAAI,CAAT,GAAG,CAAC,GAAG,CAAC,gBAAG,IAAI;AACU,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;AACC,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;;AAGtB,6BAAc,CAAR,AAAG,cAAF,CAAC,IAAG,CAAC,KAAK,AAAE,iBAAE,CAAC;AACtB,kCAAU,AAAI,MAAE,EAAE;AAC5B,wBAAK,AAAG,EAAD,IAAI,OAAS,AAAG,EAAD,IAAI;AAIC,sBAHzB,WAAa,AAAQ,AAAU,AAAW,AAAU,AACV,AACL,OAFjB,GAAG,OAAO,GAAG,OAAO,gBAAI,MAAM,IAC5C,AAAE,AAAU,AAAU,AAAM,IAAxB,OAAO,GAAG,OAAO,GAAG,EAAE,gBAAI,IAAI,IAClC,AAAE,AAAU,AAAK,AAAM,IAAnB,OAAO,GAAG,EAAE,GAAG,EAAE,gBAAI,IAAI,IAC9B,AAAG,AAAK,AAAK,EAAX,GAAG,EAAE,GAAG,EAAE,gBAAG,IAAI;AACO,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;AACC,sBAA/B,OAAO,sBAAS,QAAQ,EAAE,IAAI;;;;;AAKtC;;;;AAEyB,kDAAM,EAAE;AACrB,cAAZ,OAAO,AAAI,GAAD;AACH,0BAAQ,AAAI,GAAD;AAClB,kBAAc,aAAV,AAAI,GAAD,UAAS;AACD,gBAAb,OAAK,aAAL,IAAI,iBAAI,KAAK;AACC,gBAAd,QAAQ,cAAC,KAAK;;AAET,wBAAM,AAAI,GAAD;AACT,2BAAS,AAAI,GAAD;AACnB,kBAAe,aAAX,AAAI,GAAD,WAAU;AACF,gBAAb,MAAI,aAAJ,GAAG,iBAAI,MAAM;AACG,gBAAhB,SAAS,cAAC,MAAM;;AAEA,cAAlB,OAAO,OAAO,IAAI;AACC,cAAnB,OAAY,aAAL,IAAI,iBAAG,KAAK;AACF,cAAjB,OAAO,OAAO,GAAG;AACE,cAAnB,OAAW,aAAJ,GAAG,iBAAG,MAAM;AACnB;;;;AAE0B,mDAAM,EAAE;AACtB,0BAAQ,AAAI,GAAD;AACC,cAAxB,OAAO,OAAO,AAAM,KAAD;AACY,cAA/B,OAAkB,aAAX,AAAM,KAAD,sBAAQ,AAAM,KAAD;AACF,cAAvB,OAAO,OAAO,AAAM,KAAD;AACY,cAA/B,OAAiB,aAAV,AAAM,KAAD,qBAAO,AAAM,KAAD;AACxB;;;;;AAGkB,cAAlB,aAAa;AACb;;;AAEJ,eAAK,UAAU;AACb,iBAAK,eAAe;AACP,cAAX,OAAO,IAAI;AACC,cAAZ,QAAQ,IAAI;AACF,cAAV,MAAM,IAAI;AACG,cAAb,SAAS,IAAI;AACS,cAAtB,kBAAkB;;AAES,cAA3B,OAAO,sBAAS,IAAI,EAAE,IAAI;AACG,cAA7B,QAAQ,sBAAS,KAAK,EAAE,IAAI;AACH,cAAzB,MAAM,sBAAS,GAAG,EAAE,IAAI;AACO,cAA/B,SAAS,sBAAS,MAAM,EAAE,IAAI;;;;;AAKtC,YAAO,gBAAe,GACX,qBAAS,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,IACjC;IACb;mBAQkC,WAAgB,OAAY;AAC5D,YAAO,KAAK,IAAI;AAChB,YAAO,KAAK,IAAI;AACU,MAA1B,WAAM;IACR;;UAMiC;AAC/B,YAAmB,uBAAE,MAAM,WAAW;IACxC;;AAQE,UAAI,AAAS,2BAAU;AACrB,cAAO;;AAEY,oBAAU,AAAQ,qBAAC;AACxC,UAAI,AAAQ,AAAS,OAAV,uBAAoB;AAC7B,cAAO;;AAEgB,oBAAU,AAAQ,AAAQ,OAAT,iBAAU;AACpD,YAAgB,wBAAR,OAAO,IAA2B,AAAQ,OAAD,SAAS;IAC5D;;AAOE,UAAI,AAAS,2BAAU;AACrB,cAAO;;AAEY,oBAAU,AAAQ,qBAAC;AACxC,UAAI,AAAQ,AAAS,OAAV,uBAAoB;AAC7B,cAAO;;AAEgB,oBAAU,AAAQ,AAAQ,OAAT,iBAAU;AACpD,YAAgB,uBAAR,OAAO,IACJ,qBAAS,AAAQ,OAAD,IAAI,AAAQ,OAAD,IAAI,AAAQ,OAAD,QAAQ,AAAQ,OAAD,WAC1D;IACR;;AAOE,UAAI,AAAS,2BAAU;AACrB,cAAO;;AAEY,oBAAU,AAAQ,qBAAC;AACxC,UAAI,AAAQ,AAAS,OAAV,uBAAoB;AAC7B,cAAO;;AAEgB,oBAAU,AAAQ,AAAQ,OAAT,iBAAU;AACpD,UAAY,kBAAR,OAAO;AACY,sBAAU,OAAO;AACtC,YAA4C,AAAgB,CAAtC,aAAjB,AAAQ,OAAD,0BAAY,AAAQ,OAAD,uBAAgB,AAAE,2BAAc;AAC7D,gBAAO,QAAO;;;AAGlB,YAAO;IACT;;AAKsB,+BAA8B;AAClD,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAS,yBAAQ,IAAA,AAAC,CAAA;AACqB,QAAzD,AAAmB,kBAAD,OAAK,AAAQ,AAAI,qBAAH,CAAC;;AAEnC,YAAO,mBAAkB;IAC3B;;AAIE,oBAAW;AACT,cAAO,AAA8B,oBAAtB,AAAS,qBAAK,SAAM;;AAEnC,cAAa;;IAEjB;;;IAvgCa,kBAAwB;IAZjB,kBAAkB;;EAAE;2BAMzB;IAMF,kBAAwB;sBALtB,qBAA4B,AAAO,MAAD;;EAAU;6BAO1C,UAAe;IAFnB,kBAAwB;IAEpB;IAAe;;EAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAzBf,oBAAY;;;;;;;;;;;IA2lC3B;;;;;;IACA;;;;;;;AAMU,wBAAM;IAAoB;wBAYZ;AACf,mBAAS,iBAAW,QAAQ;AAE9C,UAAI,AAAM,AAAI,MAAJ,QAAC,OAAM;AACf,cAAO;;AAEP,cAAO,oBACH,kBAAO,AAAM,MAAA,QAAC,IAAI,AAAM,MAAA,QAAC,KAAK,kBAAO,AAAM,MAAA,QAAC,IAAI,AAAM,MAAA,QAAC;;IAE/D;iBAE8B;AAAa,wBAAM;IAAoB;gBAO7C,OAAc;UAAW;AAC7C,wBAAM;IAAoB;;AAQT,wBAAM;IAAoB;;AAY3B,wBAAM;IAAoB;;AAGzB;IAAY;;+BAzDf,MAAW;IAAX;IAAW;;EAAY;;;;;;;;;;;;;;;;;;;;;;;;;AAzCJ;IAAS;;gCAN3B,MAAW;IACd,kBAAqB,6BAAa,qBAAE,IAAI,EAAE,WAAW;AADrE;;EACuE;;;;;;;;;;;;;;;;;AAgB7C,2CAAa,OAAO;IAAW;;;AAMvD,UAAe,YAAX,kBAAc;AACE,QAAlB,mBAAa;AACb,cAAO;YACF,KAA6B,mDAAzB,OAAa,kBAAe;AACrC,cAAO;;AAES,MAAlB,qBAAc;AACd,YAAO;IACT;;uCApB0B;IAGrB,mBAAa;IAHQ;;EAAY;;;;;;;;;;;;;;;;;;;;IAyHzB;;;;;;IAOA;;;;;;qBAfoB,UAAiB;AAChD,YAAO,oBAAQ,QAAQ,EAAE,kBAAO,SAAS,KAAK,GAAG,SAAS,KAAK;IACjE;;AA2BoB,cAAC,WAAW,AAAO,gBAAI,AAAO;IAAG;;6BArClC,UAAe;IAAf;IAAe;UACrB,QAAQ,IAAI;UACZ,MAAM,IAAI;;EAAK;;;;;;;;;;;;;;;;IA+DvB;;;;;;;AAnBI,MAAP;IACF;mBAG2C;AACvC,wBAAM,8BAAiB;IAAG;;AAEJ,wBAAM,8BAAiB;IAAG;;AAS5B;IAAI;;wCApBJ;IAcD;IAGlB,sBAAe;IAMf;AAvB2B,mDAAa,AAAK,oBAAE,IAAI;;EAAC;;;;;;;;;;;;;;;;;;;;;;ICzxEtC;;;;;;YAIO,OAAW;AACnC,UAAU,aAAN,KAAK,KAAI,KAAY,aAAP,MAAM,KAAI;AACkB,QAA5C,WAAM,mBAAU;;AAE2C,MAA7D,WAAM,8BAAiB;IAIzB;;IAOgB;;;IArBH;;EAAmB;;;;;;;;;;;;;;;;EAiC0B;;;;;;;EAOH;;;;;;;EAOE;;;;;;;EAOC;;;;;;;EAOD;;;;;;;EAOD;;;;;;;EAOI;;;;;;;EAOG;;;;;;;EAOJ;;;;;;;EAOG;;;;;;AAY5D;AACE,cAAc;;AAEd,cAAoB;;IAExB;;AAeE,qBAAO,AAeN;AAdC,YAAI,AAAc,kCAAU;AACb,gCAAkB,AAC1B,AAEA,AACA,sCAHU,QAAkC,WACjC,iBAAR,OAAO,yDAEL;AAMqC,UAL/C,WAAM,mBAAU,qDACZ,qEACA,mEACA,+DACA,gEACA,sCAA0B,eAAe;;AAE/C,cAAO;;AAET,0CAAO,AAAc;IACvB;;AAGwD,YAAA,AAAc;IAAI;oBAEhB;AAGxD,UAAI,AAAQ,OAAD,aAAa;AACtB,aAAoC,YAAZ,iBAAjB,AAAQ,OAAD,YAAiC,iBAAR,OAAO;AAC9C,uBAAO,AAAQ,AAAS,OAAV;AACqD,QAAnE,AAAQ,AAAS,OAAV,kBAA+C;;AAElC,MAAtB,qBAAc,OAAO;AACK,MAA1B,AAAc,2BAAI,OAAO;AACzB,YAAO,QAAO;IAChB;mBAEyC;AACjB,MAAtB,qBAAc,OAAO;IACvB;qBAE2C;AACL,MAApC,AAAgB,mCAAY,OAAO;IACrC;eAOoC,IAAW;UACxB;AACrB,yCAAO,oBAAoB,6DAAgB,QAAQ,GAAE,EAAE,EAAE,EAAE;IAC7D;kBAO+C;UACrB;AACxB,UAAI,AAAQ,OAAD,IAAI;AAC2C,QAAxD,WAAM,2BAAc;;AAEtB,UAAI,AAAQ,OAAD,cAAW;AACkC,QAAtD,WAAM,2BAAc;;AAEtB,4CAAO,oBAAoB,mEAAmB,QAAQ,GAAE,OAAO;IACjE;iBAQsC;UAC5B;UAAmD;AAC3D,YAAO,YAAY,IAAI;AACvB,wBAAO,YAAY,EAAS;AAC5B,2CAAO,oBAAoB,iEAAkB,QAAQ,GAAE,IAAI;IAC7D;kBAOyC;UAC/B;UAAmC;AAC3C,4CAAO,oBACI,kCAAmB,QAAQ,EAAE,KAAK,EAAE,YAAY;IAC7D;iBAOsC;UAC5B;UAAmD;AAC3D,YAAO,YAAY,IAAI;AACvB,wBAAO,YAAY,EAAS;AAC5B,2CAAO,oBAAoB,iEAAkB,QAAQ,GAAE,IAAI,EAAE,YAAY;IAC3E;gBAUmC;UACvB;UAAyC;AACnD,0CAAO,oBAAoB,+DAAiB,QAAQ,GAAE,KAAK,EAAE,MAAM;IACrE;oBAYmD;UACvB;AAC1B,YAAO,MAAM,IAAI;AACS,MAA1B,WAAM;IACR;uBAQyD;UAC1B;AAC7B,iDAAO,oBAAoB,6EAAwB,QAAQ,GAAE,MAAM;IACrE;mBASW,QAAa,UAAoB;UACjB;AACC,MAA1B,WAAM;IACR;;;UAeO;UACE;UACD;UACA;UACD;UACoB;AAEzB,gDAAO,oBAAoB,2EACzB,QAAQ,GACR,IAAI,EACJ,SAAS,EACT,AAAM,KAAD,SACc,YAAnB,WAAW,eAAX,OAAa,kBAAb,OAAsB,mBACtB,YAAY;IAEhB;gBAU6B;AACY,oEAAkB,aAAa;AACtE,YAAgC,UAAzB,AAAgB,eAAD,wBAAa,AAAgB,eAAD;AACvB,MAA3B,AAAgB,eAAD;AACe,MAA9B,qBAAc,eAAe;IAC/B;;AASE,qBAAO,AAAc;AACK,MAA1B,AAAc;IAChB;0BAyB+B,gBAAqB;AAEuB,MADzE,8BACI,cAAc,EAAE,AAAO,MAAD,OAAO,AAAO,MAAD,QAAQ,AAAO,MAAD,MAAM,AAAO,MAAD;IACnE;8BAQgC,gBAAuB,MAAa,OACzD,KAAY;AACrB,qBAAK;AAC0C,QAA7C,yDAAyC;AAEuB,QAD3D,AAAO,AACP,2BAAK;;IAEd;eAMS,QACC;UACH;UACA;AAED,kBAAQ;AACZ,oBAAI,aAAa;AACL,QAAV,QAAM,CAAN,KAAK,GAAI;;AAEX,oBAAI,cAAc;AACN,QAAV,QAAM,CAAN,KAAK,GAAI;;AAG8D,MADzE,mBACW,AAAgB,+BAAQ,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK,OAAO,EAAE,KAAK;IACzE;eAMoB;UACR;UACD;UACA;UACF;AACP,YAAO,MAAM,IAAI,yBAAM;AACoC,MAA3D,mBAAY,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK,KAAK,EAAE,MAAM,EAAE,SAAS;IAC5D;mBAGW,IAAW,IAAW,OAAc,QAAY;AAEzD,qBAAK;AACkE,QAArE,WAAM,gCAAmB;;IAE7B;oBAmBM;UACG;UACA;UACA;AAEP,YAAO,MAAM,IAAI,yBAAM;AACsC,MAA7D,wBAAiB,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK,KAAK,EAAE,MAAM,EAAE,MAAM;IAC9D;wBAGS,IACA,IACA,OACA,QACH;AAEoE,MAAxE,mBAAmB,qCAAsB,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM;IACxE;;UAKY;UACD;UACA;UACG;UACL;AACoE,MAA3E,sBAAe,AAAO,MAAD,KAAK,AAAO,MAAD,KAAK,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW;IAC5E;sBAE2B,IAAW,IAAW,OAAc,QACjD,WAAgB;AACF,MAA1B,WAAM;IACR;kCASuC;IAAgB;qCAkBZ;IAAe;mCAMjB;IAAe;;AAahC;AACtB,qBAAO,AAGN;AAFyB,QAAxB,SAAS;AACT,cAAO;;AAET,YAAO,OAAM;IACf;;;AAUwC,gEAAtC,OAAiB;oBAAjB,OAA8B;AACR,MAAtB,kCAAkB;AACY,MAA9B;IACF;;AAW2B,MAAzB,AAAgB;AAChB,UAAI,AAAgB,mCAAG;AACE,QAAvB,AAAgB;;AAEuB,QAAvC,AAAgB,8BAAO;;AAEU,MAAnC,mBAAmB;AACc,MAAjC,kCAAkB;AAClB,YAAa,iBAAE,AAAgB;IACjC;kBAI0B,OAAc,QAAe,UAC5C,YAAmB,aAAoB,WAAgB;AACtC,MAA1B,WAAM;IACR;;;IA9b6C,uBACP;AANqB,IAAzD,AAAc,2BAAW,8BAAe;EAC1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgQY,sDAAsC;YAAG;;;MA6IxB,+BAAe;;;;;;;;EAyD3B;;;;;IA8BD;kBAIU,OAAc,QAAe,UAC5C,YAAmB,aAAoB,WAAgB;AACtC,MAA1B,WAAM;IACR;eAIuB;AACK,MAA1B,WAAM;IACR;;+BA3BY,iBACQ,uBACA,0BACI;;EAAyB;+CAGrC,iBACQ,uBACA,0BACI;;EAAyB;;;;;;;;;;;;ICrlBpC;;;;;;IACA;;;;;;;AAWU,YAAI,AAAmB,cAAvB,uBAA8B,aAAJ;IAAsB;;AAQlD,YAAA,AAAI,AAAS,yBAAG,AAAI;IAAQ;UAStB;AAAU,YAAI,AAAY,cAAhB,0BAAM,AAAM,KAAD,UAAY,aAAJ,0BAAM,AAAM,KAAD;IAAI;WAU3C;AAAU,YAAI,AAAa,cAAjB,2BAAO,AAAM,KAAD,UAAY,aAAJ,2BAAO,AAAM,KAAD;IAAI;UAU/C;AAAU,YAAI,AAAY,cAAhB,0BAAM,AAAM,KAAD,UAAY,aAAJ,0BAAM,AAAM,KAAD;IAAI;WAU3C;AAAU,YAAI,AAAY,cAAhB,0BAAM,AAAM,KAAD,UAAY,aAAJ,2BAAO,AAAM,KAAD;IAAI;;UAOhD;AACvB,WAAU,iBAAN,KAAK;AACP,cAAO;;AAEQ,4CAAa,KAAK;AACnC,YAAO,AAAI,AAAkB,cAAf,AAAW,UAAD,SAAQ,AAAI,aAAG,AAAW,UAAD;IACnD;;AAGoB,2BAAW,WAAK;IAAI;;;AAIpC,YAAsE,UAApE,sBAAW,6CAAG,OAAK,qBAAgB,OAAG,gDAAI,OAAK,sBAAgB,OAAG;IAAE;;gCAjFpD,KAAU;IAAV;IAAU;;EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;yBAmHA,WAAmB;;AACrD,YAAO,mBACM,aAAT,QAAQ,IAAG,SAAS,SAAS,GAAY,aAAT,QAAQ,IAAG,SAAS,SAAS;IACnE;;AAKiB;IAAG;;AAKH;IAAG;;AAMG,uBAAa,AAAK,aAAR,wBAAK,WAAQ,aAAH,wBAAK;IAAG;;AAKrB,YAAG,AAAK,cAAR,wBAAK,WAAQ,aAAH,wBAAK;IAAE;;AA6BvB,wBAAW,SAAI;IAAG;UAkCtB,QAAe;AAC/B,+BAAU,aAAH,wBAAK,MAAM,GAAK,aAAH,wBAAK,MAAM;IAAC;cAcZ,YAAmB;AACvC,+BAAU,aAAH,wBAAK,UAAU,GAAK,aAAH,wBAAK,UAAU;IAAC;;AAQrB,+BAAO,cAAC,UAAI,cAAC;IAAG;UASd;AAAU,+BAAU,aAAH,wBAAK,AAAM,KAAD,MAAQ,aAAH,wBAAK,AAAM,KAAD;IAAI;UAS9C;AAAU,+BAAU,aAAH,wBAAK,AAAM,KAAD,MAAQ,aAAH,wBAAK,AAAM,KAAD;IAAI;UAS9C;AAAY,+BAAU,aAAH,wBAAK,OAAO,GAAK,aAAH,wBAAK,OAAO;IAAC;UAS9C;AAAY,+BAAU,aAAH,wBAAK,OAAO,GAAK,aAAH,wBAAK,OAAO;IAAC;WAO7C;AACtB,+BAAW,AAAY,cAAf,wBAAM,OAAO,8BAAkB,AAAY,cAAf,wBAAM,OAAO;IAAa;UAOzC;AAAY,+BAAO,AAAG,iBAAE,OAAO,GAAE,AAAG,iBAAE,OAAO;IAAC;UAYlD;AACjB,YAAK,sBAAS,SAAI,SAAI,AAAM,KAAD,QAAQ,AAAM,KAAD;IAAQ;gBAiB1B,GAAU,GAAU;AAC5C,YAAO,CAAC,IAAI;AACZ,UAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,cAAO;;AAET,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,AAAE,EAAD,MAAG,CAAC;;AAEd,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,AAAE,EAAD,MAAI,AAAI,mBAAE,CAAC;;AAErB,YAAO,mBAAO,cAAW,AAAE,CAAD,KAAK,AAAE,CAAD,KAAK,CAAC,GAAG,cAAW,AAAE,CAAD,KAAK,AAAE,CAAD,KAAK,CAAC;IACnE;;UAIyB;AACvB,WAAU,aAAN,KAAK;AACP,cAAO;;AAEI,wCAAa,KAAK;AAC/B,YAAO,AAAG,AAAiB,YAAd,AAAW,UAAD,OAAO,AAAG,WAAG,AAAW,UAAD;IAChD;;AAGoB,2BAAW,SAAI;IAAG;;;AAIlC,YAAA,AAA8D,kDAApD,OAAI,qBAAgB,OAAG,8CAAI,OAAI,sBAAgB,OAAG;IAAE;;4BApO9C,IAAW;AAAM,uCAAM,EAAE,EAAE,EAAE;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiE9B,cAAI;;;MASJ,kBAAQ;;;;;;;;AAiMR;IAAG;;AAGF;IAAG;;AAiBtB,UAAI,gBAAU;AACZ,cAAa,cAAN,2BAAQ;;AAEjB,UAAU,aAAN,cAAQ;AACV;;AAEF,UAAU,aAAN,cAAQ;AACV;;AAEF,YAAO;IACT;;AAgBoB,YAAM,AAAO,cAAb,eAAS,OAAc,aAAP,gBAAU;IAAG;UAkBhB;AAC/B,UAAU,WAAN,KAAK;AACP,cAAO,mBAAa,aAAN,2BAAQ,AAAM,KAAD,SAAe,aAAP,4BAAS,AAAM,KAAD;;AAEnD,UAAU,aAAN,KAAK;AACP,cAAO,iBAAW,aAAN,2BAAQ,AAAM,KAAD,MAAY,aAAP,4BAAS,AAAM,KAAD;;AAEpB,MAA1B,WAAM,2BAAc,KAAK;IAC3B;UASuB;AAAU,6BAAW,aAAN,2BAAQ,AAAM,KAAD,MAAY,aAAP,4BAAS,AAAM,KAAD;IAAI;UAOnD;AAAY,6BAAW,aAAN,2BAAQ,OAAO,GAAS,aAAP,4BAAS,OAAO;IAAC;UAOnD;AAAY,6BAAW,aAAN,2BAAQ,OAAO,GAAS,aAAP,4BAAS,OAAO;IAAC;WAOlD;AACpB,6BAAY,AAAY,cAAlB,2BAAS,OAAO,8BAAsB,AAAY,cAAnB,4BAAU,OAAO;IAAa;UAOhD;AAAY,6BAAK,AAAM,oBAAE,OAAO,GAAE,AAAO,qBAAE,OAAO;IAAC;;AAG/C,mCAAS,AAAM,oBAAO,AAAO;IAAM;;AAGpC,mCAAS,AAAM,oBAAO,AAAO;IAAM;YAUvC;AAAW,mBAAM;;cAMf;AAAW,+BAAiB,aAAV,AAAO,MAAD,OAAY,aAAN,cAAQ,KAAK,AAAO,MAAD;IAAI;aAOtD;AAAW,+BAAiB,aAAV,AAAO,MAAD,oBAAM,aAAO,AAAO,MAAD;IAAI;eAM7C;AACrB,+BAAO,AAAO,MAAD,KAAe,aAAV,AAAO,MAAD,OAAa,aAAP,eAAS;IAAI;WAO1B;AACjB,+BAAiB,aAAV,AAAO,MAAD,OAAY,aAAN,cAAQ,KAAe,aAAV,AAAO,MAAD,OAAa,aAAP,eAAS;IAAI;gBAMnC;AACtB,+BAAiB,aAAV,AAAO,MAAD,oBAAM,aAAiB,aAAV,AAAO,MAAD,OAAa,aAAP,eAAS;IAAI;eAO9B;AAAW,+BAAO,AAAO,MAAD,KAAe,aAAV,AAAO,MAAD,oBAAM;IAAO;iBAO9C;AACvB,+BAAiB,aAAV,AAAO,MAAD,OAAY,aAAN,cAAQ,KAAe,aAAV,AAAO,MAAD,oBAAM;IAAO;gBAO7B;AACtB,+BAAiB,aAAV,AAAO,MAAD,oBAAM,aAAiB,aAAV,AAAO,MAAD,oBAAM;IAAO;aAQ5B;AACnB,YAAiB,AAEI,cAFd,AAAO,MAAD,QAAO,OACN,aAAV,AAAO,MAAD,oBAAM,eACF,aAAV,AAAO,MAAD,QAAO,OACH,aAAV,AAAO,MAAD,oBAAM;IAClB;;AAGoB,6BAAK,aAAQ;IAAM;gBAiBjB,GAAQ,GAAU;AACtC,YAAO,CAAC,IAAI;AACZ,UAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,cAAO;;AAET,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,AAAE,EAAD,MAAG,CAAC;;AAEd,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,AAAE,EAAD,MAAI,AAAI,mBAAE,CAAC;;AAErB,YAAO,iBACH,cAAW,AAAE,CAAD,QAAQ,AAAE,CAAD,QAAQ,CAAC,GAAG,cAAW,AAAE,CAAD,SAAS,AAAE,CAAD,SAAS,CAAC;IACvE;;UAKyB;AACvB,WAAU,WAAN,KAAK;AACP,cAAO;;AAEE,sCAAa,KAAK;AAC7B,YAAO,AAAI,AAAkB,cAAf,AAAW,UAAD,SAAQ,AAAI,aAAG,AAAW,UAAD;IACnD;;AAGoB,2BAAW,WAAK;IAAI;;;AAIpC,YAAA,AAAmE,mDAA3D,OAAO,qBAAgB,OAAG,kDAAI,OAAQ,sBAAgB,OAAG;IAAE;;0BAvRrD,OAAc;AAAU,qCAAM,KAAK,EAAE,MAAM;;EAAC;2BAI/C;AAAU,qCAAM,AAAO,MAAD,QAAQ,AAAO,MAAD;;EAAQ;6BAQlC;AAAa,qCAAM,SAAS,EAAE,SAAS;;EAAC;gCAGrC;AAAS,qCAAM,KAAK;;EAAkB;iCAGrC;AAAU,4CAAuB,MAAM;;EAAC;iCAUxC;AAAU,qCAAa,aAAP,MAAM,IAAG,KAAY,aAAP,MAAM,IAAG;;EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoCtD,YAAI;;;MAQJ,gBAAQ;;;;;;;;;;;IA2Qb;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;;AAGO,YAAM,cAAN,2BAAQ;IAAI;;AAGX,YAAO,cAAP,4BAAS;IAAG;;AAIhB,6BAAK,YAAO;IAAO;;AAGjB,YAAA,AAAK,AAAkC,sBAAzB,AAAI,oBAAS,AAAM,sBAAS,AAAO;IAAK;;AAiBvE,YAAY,AAEiB,cAFtB,uBACC,aAAJ,sBACM,aAAN,wBACO,aAAP;IACN;;AAII,YAAA,AAAK,AAA2C,yBAA/B,AAAI,uBAAY,AAAM,yBAAY,AAAO;IAAQ;;AAIlD,YAAK,AAAS,cAAd,2BAAQ,eAAa,aAAJ,0BAAO;IAAM;UAMhC;AAChB,YAAY,sBAAc,aAAL,0BAAO,AAAO,MAAD,MAAS,aAAJ,yBAAM,AAAO,MAAD,MAAW,aAAN,2BAAQ,AAAO,MAAD,MAC3D,aAAP,4BAAS,AAAO,MAAD;IACrB;cAOsB,YAAmB;AACvC,YAAY,sBAAc,aAAL,0BAAO,UAAU,GAAM,aAAJ,yBAAM,UAAU,GAC9C,aAAN,2BAAQ,UAAU,GAAS,aAAP,4BAAS,UAAU;IAC7C;YAGoB;AAClB,YAAY,sBACH,aAAL,0BAAO,KAAK,GAAM,aAAJ,yBAAM,KAAK,GAAQ,aAAN,2BAAQ,KAAK,GAAS,aAAP,4BAAS,KAAK;IAC9D;YAGoB;AAAU,0BAAQ,cAAC,KAAK;IAAC;cAMzB;AAClB,YAAY,sBAAS,sBAAS,WAAM,AAAM,KAAD,QAAQ,sBAAS,UAAK,AAAM,KAAD,OAChE,sBAAS,YAAO,AAAM,KAAD,SAAS,sBAAS,aAAQ,AAAM,KAAD;IAC1D;oBAI0B;AACxB,YAAY,sBACV,sBAAS,WAAM,AAAM,KAAD,QACpB,sBAAS,UAAK,AAAM,KAAD,OACnB,sBAAS,YAAO,AAAM,KAAD,SACrB,sBAAS,aAAQ,AAAM,KAAD;IAE1B;aAGmB;AACjB,UAAU,aAAN,4BAAS,AAAM,KAAD,UAAqB,aAAZ,AAAM,KAAD,wBAAU;AACxC,cAAO;;AAET,UAAW,aAAP,6BAAU,AAAM,KAAD,SAAqB,aAAb,AAAM,KAAD,yBAAW;AACzC,cAAO;;AAET,YAAO;IACT;;AAI2B,mCAAS,AAAM,oBAAO,AAAO;IAAM;;AAIpC,mCAAS,AAAM,oBAAO,AAAO;IAAM;;AAKvC,+BAAO,WAAM;IAAI;;AAKf,+BAAY,aAAL,aAAa,aAAN,cAAQ,KAAK;IAAI;;AAKhC,+BAAO,YAAO;IAAI;;AAKhB,+BAAO,WAAU,aAAJ,YAAa,aAAP,eAAS;IAAI;;AAMpC,+BAAY,aAAL,aAAa,aAAN,cAAQ,KAAS,aAAJ,YAAa,aAAP,eAAS;IAAI;;AAKzC,+BAAO,YAAW,aAAJ,YAAa,aAAP,eAAS;IAAI;;AAKlC,+BAAO,WAAM;IAAO;;AAKlB,+BAAY,aAAL,aAAa,aAAN,cAAQ,KAAK;IAAO;;AAKnC,+BAAO,YAAO;IAAO;aAQ1B;AACnB,YAAiB,AAEI,cAFd,AAAO,MAAD,qBAAO,cACN,aAAV,AAAO,MAAD,oBAAM,eACF,aAAV,AAAO,MAAD,qBAAO,aACH,aAAV,AAAO,MAAD,oBAAM;IAClB;gBAiBsB,GAAQ,GAAU;AACtC,YAAO,CAAC,IAAI;AACZ,UAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,cAAO;;AAET,UAAI,AAAE,CAAD,IAAI,MACP,MAAY,sBAAgB,aAAP,AAAE,CAAD,sBAAQ,CAAC,GAAQ,aAAN,AAAE,CAAD,qBAAO,CAAC,GAAU,aAAR,AAAE,CAAD,uBAAS,CAAC,GAAW,aAAT,AAAE,CAAD,wBAAU,CAAC;AACvE,UAAI,AAAE,CAAD,IAAI;AACM,gBAAI,AAAI,mBAAE,CAAC;AACxB,cAAY,sBAAgB,aAAP,AAAE,CAAD,SAAQ,CAAC,EAAQ,aAAN,AAAE,CAAD,QAAO,CAAC,EAAU,aAAR,AAAE,CAAD,UAAS,CAAC,EAAW,aAAT,AAAE,CAAD,WAAU,CAAC;;AAEvE,YAAY,sBACV,cAAW,AAAE,CAAD,OAAO,AAAE,CAAD,OAAO,CAAC,GAC5B,cAAW,AAAE,CAAD,MAAM,AAAE,CAAD,MAAM,CAAC,GAC1B,cAAW,AAAE,CAAD,QAAQ,AAAE,CAAD,QAAQ,CAAC,GAC9B,cAAW,AAAE,CAAD,SAAS,AAAE,CAAD,SAAS,CAAC;IAEpC;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAI,oBAAqB,iBAAN,KAAK;AACtB,cAAO;;AAEE,sCAAa,KAAK;AAC7B,YAAO,AAAK,AAEkB,cAFf,AAAW,UAAD,SACrB,AAAI,YAAG,AAAW,UAAD,QACjB,AAAM,cAAG,AAAW,UAAD,UACnB,AAAO,eAAG,AAAW,UAAD;IAC1B;;AAGoB,2BAAW,WAAM,UAAK,YAAO;IAAO;;AAIpD,YAAA,AAAiI,oBAAhH,AAAK,4BAAgB,KAAG,OAAI,AAAI,2BAAgB,KAAG,OAAI,AAAM,6BAAgB,KAAG,OAAI,AAAO,8BAAgB,KAAG;IAAE;;+BAvR5G,MAAW,KAAU,OAAY;IAAjC;IAAW;IAAU;IAAY;UAC7C,IAAI,IAAI;UACR,GAAG,IAAI;UACP,KAAK,IAAI;UACT,MAAM,IAAI;;EAAK;+BAOD,MAAa,KAAY,OAAc;gCAC9C,IAAI,EAAE,GAAG,EAAO,aAAL,IAAI,iBAAG,KAAK,GAAM,aAAJ,GAAG,iBAAG,MAAM;EAAC;;QAKlC;QAAe;2CAEvB,MAAM,SACA,aAAP,MAAM,IAAG,WACD,aAAP,MAAM,IAAG;EAClB;;QAKiB;QAAe;QAAc;gCAEnC,aAAV,AAAO,MAAD,OAAY,aAAN,KAAK,IAAG,GACV,aAAV,AAAO,MAAD,OAAa,aAAP,MAAM,IAAG,GACX,aAAV,AAAO,MAAD,OAAY,aAAN,KAAK,IAAG,GACV,aAAV,AAAO,MAAD,OAAa,aAAP,MAAM,IAAG;EACtB;iCAIgB,GAAU;gCAEzB,sBAAS,AAAE,CAAD,KAAK,AAAE,CAAD,MAChB,sBAAS,AAAE,CAAD,KAAK,AAAE,CAAD,MAChB,sBAAS,AAAE,CAAD,KAAK,AAAE,CAAD,MAChB,sBAAS,AAAE,CAAD,KAAK,AAAE,CAAD;EACjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4BW,YAAI;;;MAEF,oBAAY;;;MAMd,eAAO;;;;;IAoNZ;;;;;;IAGA;;;;;;;AAeU,YAAO,0BAAW,cAAC,SAAG,cAAC;IAAE;UAOvB;AACrB,YAAO,0BAAa,aAAF,uBAAI,AAAM,KAAD,KAAM,aAAF,uBAAI,AAAM,KAAD;IAAG;UAOtB;AACrB,YAAO,0BAAa,aAAF,uBAAI,AAAM,KAAD,KAAM,aAAF,uBAAI,AAAM,KAAD;IAAG;UAOtB;AACrB,YAAO,0BAAa,aAAF,uBAAI,OAAO,GAAI,aAAF,uBAAI,OAAO;IAAC;UAOtB;AACrB,YAAO,0BAAa,aAAF,uBAAI,OAAO,GAAI,aAAF,uBAAI,OAAO;IAAC;WAOrB;AACtB,YAAO,0BAAc,AAAY,cAAd,uBAAK,OAAO,8BAAiB,AAAY,cAAd,uBAAK,OAAO;IAAa;UAOlD;AACrB,YAAO,0BAAW,AAAE,gBAAE,OAAO,GAAE,AAAE,gBAAE,OAAO;IAAC;gBAiBrB,GAAU,GAAU;AAC5C,YAAO,CAAC,IAAI;AACZ,UAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,cAAO;;AAET,UAAI,AAAE,CAAD,IAAI;AACP,cAAc,0BAAe,aAAJ,AAAE,CAAD,mBAAK,CAAC,GAAM,aAAJ,AAAE,CAAD,mBAAK,CAAC;;AAE3C,UAAI,AAAE,CAAD,IAAI;AACM,gBAAI,AAAI,mBAAE,CAAC;AACxB,cAAc,0BAAe,aAAJ,AAAE,CAAD,MAAK,CAAC,EAAM,aAAJ,AAAE,CAAD,MAAK,CAAC;;AAE3C,YAAc,0BACZ,cAAW,AAAE,CAAD,IAAI,AAAE,CAAD,IAAI,CAAC,GACtB,cAAW,AAAE,CAAD,IAAI,AAAE,CAAD,IAAI,CAAC;IAE1B;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAI,oBAAqB,iBAAN,KAAK;AACtB,cAAO;;AAEI,wCAAa,KAAK;AAC/B,YAAO,AAAW,AAAE,AAAK,WAAR,MAAM,UAAK,AAAW,AAAE,UAAH,MAAM;IAC9C;;AAGoB,2BAAW,QAAG;IAAE;;AAIlC,YAAO,AAAE,WAAG,SACN,AACF,qBADqB,AAAE,yBAAgB,KAAG,MACxC,uBAAqB,AAAE,yBAAgB,KAAG,OACrC,AAAE,yBAAgB,KAAG;IAClC;;iCAhI6B;oCAA0B,MAAM,EAAE,MAAM;EAAC;mCAGzC,GAAQ;IAAR;IAAQ;;EAAE;;;;;;;;;;;;;;;;;;;;;;;MAWnB,cAAI;;;;;;;;;;;;;;;;;;;IAgRX;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAMA;;;;;;IAGA;;;;;;IAMA;;;;;;IAGA;;;;;;IAMA;;;;;;IAGA;;;;;;;AAxBU,YAAO,0BAAW,gBAAW;IAAU;;AASvC,YAAO,0BAAW,gBAAW;IAAU;;AASvC,YAAO,0BAAW,gBAAW;IAAU;;AASvC,YAAO,0BAAW,gBAAW;IAAU;UAM3C;AACjB,YAAa,0BACA,aAAL,0BAAO,AAAO,MAAD,WACV,aAAJ,yBAAM,AAAO,MAAD,aACJ,aAAN,2BAAQ,AAAO,MAAD,cACN,aAAP,4BAAS,AAAO,MAAD,iBACZ,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA;IAEf;YAIqB;AACnB,YAAa,0BACA,aAAL,0BAAO,KAAK,QACT,aAAJ,yBAAM,KAAK,UACH,aAAN,2BAAQ,KAAK,WACL,aAAP,4BAAS,KAAK,cACD,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK;IAEhC;YAGqB;AAAU,0BAAQ,cAAC,KAAK;IAAC;;AAG1B,YAAM,cAAN,2BAAQ;IAAI;;AAGX,YAAO,cAAP,4BAAS;IAAG;;AAGX,YAAK,sBAAS,WAAM,UAAK,YAAO;IAAO;;AAS9C,uBAAa,sBAAS,gBAAW;AACjC,sBAAY,sBAAS,gBAAW;AAChC,wBAAc,sBAAS,gBAAW;AAClC,yBAAe,sBAAS,gBAAW;AAEhD,YAAY,sBACH,aAAL,aAAO,AAAW,UAAD,kBACb,aAAJ,YAAM,AAAU,SAAD,kBACT,aAAN,cAAQ,AAAY,WAAD,kBACZ,aAAP,eAAS,AAAa,YAAD;IAC3B;;AASe,uBAAa,sBAAS,gBAAW;AACjC,sBAAY,sBAAS,gBAAW;AAChC,wBAAc,sBAAS,gBAAW;AAClC,yBAAe,sBAAS,gBAAW;AAChD,YAAY,sBAAc,aAAL,aAAO,UAAU,EAAM,aAAJ,YAAM,SAAS,EAC7C,aAAN,cAAQ,WAAW,EAAS,aAAP,eAAS,YAAY;IAChD;;AAOe,sBAAY,sBAAS,gBAAW;AAChC,yBAAe,sBAAS,gBAAW;AAChD,YAAY,sBAAS,WAAU,aAAJ,YAAM,SAAS,EAAE,YAAc,aAAP,eAAS,YAAY;IAC1E;;AAOe,uBAAa,sBAAS,gBAAW;AACjC,wBAAc,sBAAS,gBAAW;AAC/C,YAAY,sBAAc,aAAL,aAAO,UAAU,EAAE,UAAW,aAAN,cAAQ,WAAW,EAAE;IACpE;;AAIoB,YAAK,AAAS,cAAd,2BAAQ,eAAa,aAAJ,0BAAO;IAAM;;AAI9C,YAAA,AAAK,AAA2C,yBAA/B,AAAI,uBAAY,AAAM,yBAAY,AAAO;IAAQ;;AAKpE,YAE2C,EAFnC,AAAU,mBAAG,OAAO,AAAU,mBAAG,SACpC,AAAU,mBAAG,OAAO,AAAU,mBAAG,SACjC,AAAU,mBAAG,OAAO,AAAU,mBAAG,SACjC,AAAU,mBAAG,OAAO,AAAU,mBAAG;IACxC;;AAIE,YAAgB,AAES,aAFlB,eAAY,kBACN,YAAT,eAAY,kBACH,YAAT,eAAY,mBACL,aAAN,eAAS,AAAI,mBAAE,mBAAoB,aAAP,gBAAU,AAAI,mBAAE;IACnD;;AAIE,YAAgB,AAGa,aAHtB,eAAY,kBACN,YAAT,eAAY,kBACH,YAAT,eAAY,kBACN,aAAN,eAAS,AAAI,mBAAE,mBACR,aAAP,gBAAU,AAAI,mBAAE;IACtB;;AAGqB,YAAA,AAAM,AAAU,eAAP,yBAAU;IAAS;;AAItB,mCAAS,AAAM,oBAAO,AAAO;IAAM;;AAIpC,mCAAS,AAAM,oBAAO,AAAO;IAAM;;AAIzD,YAAA,AAAK,AAUW,sBAThB,AAAI,oBACJ,AAAM,sBACN,AAAO,uBACP,AAAU,0BACV,AAAU,0BACV,AAAU,0BACV,AAAU,0BACV,AAAU,0BACV,AAAU,0BACV,AAAU,0BACV,AAAU;IAAK;;AAIE,+BAAY,aAAL,aAAa,aAAN,cAAQ,KAAS,aAAJ,YAAa,aAAP,eAAS;IAAI;cAI7C,KAAY,SAAgB,SAAgB;AACnD,gBAAc,aAAR,OAAO,iBAAG,OAAO;AACpC,UAAI,AAAI,GAAD,gBAAG,KAAK,KAAI,GAAG,KAAI;AACxB,cAAO,uBAAS,GAAG,EAAQ,aAAN,KAAK,IAAG,GAAG;;AAElC,YAAO,IAAG;IACZ;;AAQS,kBAAQ;AACqC,MAApD,QAAQ,cAAQ,KAAK,EAAE,gBAAW,gBAAW;AACM,MAAnD,QAAQ,cAAQ,KAAK,EAAE,gBAAW,gBAAW;AACO,MAApD,QAAQ,cAAQ,KAAK,EAAE,gBAAW,gBAAW;AACM,MAAnD,QAAQ,cAAQ,KAAK,EAAE,gBAAW,gBAAW;AAE7C,UAAU,aAAN,KAAK,IAAG;AACV,cAAa,yBACN,gBACC,kBACC,oBACC,wBACa,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK,cACP,aAAV,+BAAY,KAAK;;AAIhC,YAAa,yBACN,gBACC,kBACC,oBACC,wBACG,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA;IAEf;aASqB;AACnB,UAAa,aAAT,AAAM,KAAD,oBAAM,cACF,aAAT,AAAM,KAAD,qBAAO,eACH,aAAT,AAAM,KAAD,oBAAM,aACF,aAAT,AAAM,KAAD,qBAAO;AACd,cAAO;;AAGG,mBAAS;AAEd;AACA;AACA;AACA;AAGP,UAAa,aAAT,AAAM,KAAD,OAAW,aAAL,0BAAO,AAAO,MAAD,eACf,aAAT,AAAM,KAAD,OAAU,aAAJ,yBAAM,AAAO,MAAD;AACa,QAAtC,IAAa,AAAO,aAAhB,AAAM,KAAD,oBAAM,0BAAO,AAAO,MAAD;AACS,QAArC,IAAa,AAAM,aAAf,AAAM,KAAD,oBAAM,yBAAM,AAAO,MAAD;AACD,QAA1B,UAAU,AAAO,MAAD;AACU,QAA1B,UAAU,AAAO,MAAD;YACX,KAAa,aAAT,AAAM,KAAD,OAAY,aAAN,2BAAQ,AAAO,MAAD,eACvB,aAAT,AAAM,KAAD,OAAU,aAAJ,yBAAM,AAAO,MAAD;AACc,QAAvC,IAAa,AAAQ,aAAjB,AAAM,KAAD,oBAAM,2BAAQ,AAAO,MAAD;AACQ,QAArC,IAAa,AAAM,aAAf,AAAM,KAAD,oBAAM,yBAAM,AAAO,MAAD;AACD,QAA1B,UAAU,AAAO,MAAD;AACU,QAA1B,UAAU,AAAO,MAAD;YACX,KAAa,aAAT,AAAM,KAAD,OAAY,aAAN,2BAAQ,AAAO,MAAD,eACvB,aAAT,AAAM,KAAD,OAAa,aAAP,4BAAS,AAAO,MAAD;AACW,QAAvC,IAAa,AAAQ,aAAjB,AAAM,KAAD,oBAAM,2BAAQ,AAAO,MAAD;AACW,QAAxC,IAAa,AAAS,aAAlB,AAAM,KAAD,oBAAM,4BAAS,AAAO,MAAD;AACJ,QAA1B,UAAU,AAAO,MAAD;AACU,QAA1B,UAAU,AAAO,MAAD;YACX,KAAa,aAAT,AAAM,KAAD,OAAW,aAAL,0BAAO,AAAO,MAAD,eACtB,aAAT,AAAM,KAAD,OAAa,aAAP,4BAAS,AAAO,MAAD;AACU,QAAtC,IAAa,AAAO,aAAhB,AAAM,KAAD,oBAAM,0BAAO,AAAO,MAAD;AACY,QAAxC,IAAa,AAAS,aAAlB,AAAM,KAAD,oBAAM,4BAAS,AAAO,MAAD;AACJ,QAA1B,UAAU,AAAO,MAAD;AACU,QAA1B,UAAU,AAAO,MAAD;;AAEhB,cAAO;;AAGM,MAAf,IAAM,aAAF,CAAC,iBAAG,OAAO;AACA,MAAf,IAAM,aAAF,CAAC,iBAAG,OAAO;AAEf,UAAM,AAAI,AAAQ,aAAd,CAAC,iBAAG,CAAC,IAAK,aAAF,CAAC,iBAAG,CAAC,IAAG;AAClB,cAAO;;AAET,YAAO;IACT;gBAiBwB,GAAS,GAAU;AACzC,YAAO,CAAC,IAAI;AACZ,UAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,cAAO;;AAET,UAAI,AAAE,CAAD,IAAI;AACP,cAAa,0BACE,aAAP,AAAE,CAAD,sBAAQ,CAAC,QACL,aAAN,AAAE,CAAD,qBAAO,CAAC,UACC,aAAR,AAAE,CAAD,uBAAS,CAAC,WACD,aAAT,AAAE,CAAD,wBAAU,CAAC,cACG,aAAZ,AAAE,CAAD,2BAAa,CAAC,cACH,aAAZ,AAAE,CAAD,2BAAa,CAAC,cACH,aAAZ,AAAE,CAAD,2BAAa,CAAC,cACH,aAAZ,AAAE,CAAD,2BAAa,CAAC,cACH,aAAZ,AAAE,CAAD,2BAAa,CAAC,cACH,aAAZ,AAAE,CAAD,2BAAa,CAAC,cACH,aAAZ,AAAE,CAAD,2BAAa,CAAC,cACH,aAAZ,AAAE,CAAD,2BAAa,CAAC;;AAG9B,UAAI,AAAE,CAAD,IAAI;AACM,gBAAI,AAAI,mBAAE,CAAC;AACxB,cAAa,0BACE,aAAP,AAAE,CAAD,SAAQ,CAAC,OACL,aAAN,AAAE,CAAD,QAAO,CAAC,SACC,aAAR,AAAE,CAAD,UAAS,CAAC,UACD,aAAT,AAAE,CAAD,WAAU,CAAC,aACG,aAAZ,AAAE,CAAD,cAAa,CAAC,aACH,aAAZ,AAAE,CAAD,cAAa,CAAC,aACH,aAAZ,AAAE,CAAD,cAAa,CAAC,aACH,aAAZ,AAAE,CAAD,cAAa,CAAC,aACH,aAAZ,AAAE,CAAD,cAAa,CAAC,aACH,aAAZ,AAAE,CAAD,cAAa,CAAC,aACH,aAAZ,AAAE,CAAD,cAAa,CAAC,aACH,aAAZ,AAAE,CAAD,cAAa,CAAC;;AAG9B,YAAa,0BACL,cAAW,AAAE,CAAD,OAAO,AAAE,CAAD,OAAO,CAAC,QAC7B,cAAW,AAAE,CAAD,MAAM,AAAE,CAAD,MAAM,CAAC,UACxB,cAAW,AAAE,CAAD,QAAQ,AAAE,CAAD,QAAQ,CAAC,WAC7B,cAAW,AAAE,CAAD,SAAS,AAAE,CAAD,SAAS,CAAC,cAC7B,cAAW,AAAE,CAAD,YAAY,AAAE,CAAD,YAAY,CAAC,cACtC,cAAW,AAAE,CAAD,YAAY,AAAE,CAAD,YAAY,CAAC,cACtC,cAAW,AAAE,CAAD,YAAY,AAAE,CAAD,YAAY,CAAC,cACtC,cAAW,AAAE,CAAD,YAAY,AAAE,CAAD,YAAY,CAAC,cACtC,cAAW,AAAE,CAAD,YAAY,AAAE,CAAD,YAAY,CAAC,cACtC,cAAW,AAAE,CAAD,YAAY,AAAE,CAAD,YAAY,CAAC,cACtC,cAAW,AAAE,CAAD,YAAY,AAAE,CAAD,YAAY,CAAC,cACtC,cAAW,AAAE,CAAD,YAAY,AAAE,CAAD,YAAY,CAAC;IAErD;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAI,oBAAqB,iBAAN,KAAK;AACtB,cAAO;;AAEG,uCAAa,KAAK;AAC9B,YAAO,AAAK,AAU0B,cAVvB,AAAW,UAAD,SACrB,AAAI,YAAG,AAAW,UAAD,QACjB,AAAM,cAAG,AAAW,UAAD,UACnB,AAAO,eAAG,AAAW,UAAD,WACpB,AAAU,kBAAG,AAAW,UAAD,cACvB,AAAU,kBAAG,AAAW,UAAD,cACvB,AAAU,kBAAG,AAAW,UAAD,cACvB,AAAU,kBAAG,AAAW,UAAD,cACvB,AAAU,kBAAG,AAAW,UAAD,cACvB,AAAU,kBAAG,AAAW,UAAD,cACvB,AAAU,kBAAG,AAAW,UAAD,cACvB,AAAU,kBAAG,AAAW,UAAD;IAC7B;;AAGoB,2BAAW,WAAM,UAAK,YAAO,aAAQ,gBAAW,gBAChE,gBAAW,gBAAW,gBAAW,gBAAW,gBAAW;IAAU;;AAItD,iBAAU,AAAK,4BAAgB,KAAG,OACxC,AAAI,2BAAgB,KAAG,OACvB,AAAM,6BAAgB,KAAG,OACzB,AAAO,8BAAgB;AAC9B,UAAa,YAAT,eAAY,kBAAqB,YAAT,eAAY,kBAAqB,YAAT,eAAY;AAC9D,YAAI,AAAS,AAAE,mBAAG,AAAS,iBACzB,MAAO,AAA0D,sBAAxC,IAAI,UAAI,AAAS,AAAE,kCAAgB,KAAG;AACjE,cAAO,AAA6F,uBAA1E,IAAI,UAAI,AAAS,AAAE,kCAAgB,KAAG,OAAI,AAAS,AAAE,kCAAgB,KAAG;;AAEpG,YAAO,+BACD,IAAI,UACN,uBAAW,iBAAQ,OACnB,wBAAY,iBAAQ,OACpB,2BAAe,iBAAQ,OACvB,0BAAc,iBACd;IACN;;kCArlB8B,MAAa,KAAY,OAAc,QAC1D,SAAgB;mCAEd,GAAG,QACF,IAAI,SACH,KAAK,UACJ,MAAM,aACH,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO;EACnB;iCAKI,MAAa,KAAY,OAAc,QAAe;mCAEpD,GAAG,QACF,IAAI,SACH,KAAK,UACJ,MAAM,aACH,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD;EAClB;kCAIe,MAAa,SAAgB;mCAEtC,AAAK,IAAD,YACH,AAAK,IAAD,cACH,AAAK,IAAD,gBACH,AAAK,IAAD,oBACD,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO,aACP,OAAO;EACnB;yCAIsB,MAAa;mCAE7B,AAAK,IAAD,YACH,AAAK,IAAD,cACH,AAAK,IAAD,gBACH,AAAK,IAAD,oBACD,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD,eACN,AAAO,MAAD;EAClB;0CAOE,MACA,KACA,OACA;QACA;QACA;QACA;QACA;mCAEI,GAAG,QACF,IAAI,SACH,KAAK,UACJ,MAAM,aACH,AAAQ,OAAD,eACP,AAAQ,OAAD,eACP,AAAS,QAAD,eACR,AAAS,QAAD,eACR,AAAW,UAAD,eACV,AAAW,UAAD,eACV,AAAY,WAAD,eACX,AAAY,WAAD;EACvB;0CAMuB;QAClB;QACD;QACA;QACA;mCAEE,AAAK,IAAD,YACH,AAAK,IAAD,cACH,AAAK,IAAD,gBACH,AAAK,IAAD,oBACD,AAAQ,OAAD,eACP,AAAQ,OAAD,eACP,AAAS,QAAD,eACR,AAAS,QAAD,eACR,AAAW,UAAD,eACV,AAAW,UAAD,eACV,AAAY,WAAD,eACX,AAAY,WAAD;EACvB;;QAGA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAXA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;UACM,IAAI,IAAI;UACR,GAAG,IAAI;UACP,KAAK,IAAI;UACT,MAAM,IAAI;UACV,SAAS,IAAI;UACb,SAAS,IAAI;UACb,SAAS,IAAI;UACb,SAAS,IAAI;UACb,SAAS,IAAI;UACb,SAAS,IAAI;UACb,SAAS,IAAI;UACb,SAAS,IAAI;;EAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmDZ,aAAI;;;;;;;UA2cX;UACD;UACA;UACA;UACA;UACA;AACI,iBAAO,AAAmB,SAAV,QAAQ,iBAAI,KAAK;AACjC,iBAAO,AAAmB,SAAV,QAAQ,iBAAI,KAAK;AACjC,eAAgB,AAAkB,aAA7B,UAAU,IAAG,AAAM,CAAL,IAAI,gBAAG,OAAO,IAAG,AAAK,IAAD,gBAAG,OAAO;AAClD,eAAgB,AAAkB,aAA7B,UAAU,IAAG,AAAM,CAAL,IAAI,gBAAG,OAAO,IAAG,AAAK,IAAD,gBAAG,OAAO;AAC/D,YAAO,wBAAY,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;IACvC;;AAKmB,YAAA,AAAM,sBAAC;IAAE;;AAGT,YAAA,AAAM,sBAAC;IAAE;;AAKX,YAAA,AAAM,sBAAC;IAAE;;AAKT,YAAA,AAAM,sBAAC;IAAE;;iCAzDP,MAAa,MAAa,IAAW;;IAyCtC,gBAAS,yCAAY;AApCzB,SAJZ;IACI,UAAC,GAAK,IAAI;IACV,UAAC,GAAK,IAAI;IACV,UAAC,GAAK,EAAE;IACR,UAAC,GAAK,EAAE;;EACd;;;;;;;;;;;;;;;;;;IA0Da;;;;;;IACA;;;;;;;AAIS,8BAAM,cAAC,SAAG,cAAC;IAAE;UACX;AAAU,+BAAS,aAAF,uBAAI,AAAM,KAAD,KAAM,aAAF,uBAAI,AAAM,KAAD;IAAG;UAC1C;AAAU,8BAAQ,aAAF,uBAAI,AAAM,KAAD,MAAO,aAAF,uBAAI,AAAM,KAAD;IAAI;UAC9C;AAAU,YAAK,sBAAS,QAAG,QAAG,AAAM,KAAD,QAAQ,AAAM,KAAD;IAAQ;UAErD;AAAY,8BAAQ,aAAF,uBAAI,OAAO,GAAI,aAAF,uBAAI,OAAO;IAAC;UAC3C;AAAY,8BAAQ,aAAF,uBAAI,OAAO,GAAI,aAAF,uBAAI,OAAO;IAAC;WAC1C;AACrB,8BAAS,AAAY,cAAd,uBAAK,OAAO,8BAAiB,AAAY,cAAd,uBAAK,OAAO;IAAa;UACvC;AAAY,8BAAM,AAAE,gBAAE,OAAO,GAAE,AAAE,gBAAE,OAAO;IAAC;;AAG9C,+BAAO,QAAG;IAAE;gBAKT,GAAS,GAAU;AACzC,UAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,cAAO;;AAET,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,AAAE,EAAD,MAAG,CAAC;;AAEd,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,AAAE,EAAD,MAAI,AAAI,mBAAE,CAAC;;AAErB,YAAO,kBAAM,cAAW,AAAE,CAAD,IAAI,AAAE,CAAD,IAAI,CAAC,GAAG,cAAW,AAAE,CAAD,IAAI,AAAE,CAAD,IAAI,CAAC;IAC9D;;UAGyB;AACvB,WAAU,YAAN,KAAK;AACP,cAAO;;AAEG,uCAAa,KAAK;AAC9B,YAAO,AAAE,AAAgB,WAAb,AAAW,UAAD,MAAM,AAAE,UAAG,AAAW,UAAD;IAC7C;;AAGoB,2BAAW,QAAG;IAAE;;;AAIhC,YAAA,AAA2D,gDAAlD,OAAG,qBAAgB,OAAG,6CAAI,OAAG,sBAAgB,OAAG;IAAE;;2BAnD9C,GAAQ;IAAR;IAAQ;;EAAE;;;;;;;;;;;;;;;;;;;;;;;;;MAKR,eAAM;;;;;;;ECjuDT;;;;ICyEN;;;;;;;AADO;IAAM;;AAIN,YAAsB,EAArB,AAAW,0BAAE,oBAAW;IAAE;;AAGtB,YAAM,cAAN,cAAQ;IAAI;;AAGnB,YAAsB,EAArB,AAAW,wBAAE,mBAAW;IAAE;;AAGzB,YAAsB,EAArB,AAAW,qBAAE,mBAAW;IAAC;;AAG3B,YAAsB,EAArB,AAAW,mBAAE,mBAAW;IAAC;cAItB;AAClB,YAAa,uBAAS,CAAC,EAAE,UAAK,YAAO;IACvC;gBAIyB;AACvB,YAAe,AAAO,aAAf,OAAO,KAAI,OAAe,aAAR,OAAO,KAAI;AACpC,YAAO,gBAA4B,CAAjB,AAAM,qBAAE,OAAO;IACnC;YAIkB;AAChB,YAAa,uBAAS,YAAO,CAAC,EAAE,YAAO;IACzC;cAIoB;AAClB,YAAa,uBAAS,YAAO,UAAK,CAAC,EAAE;IACvC;aAImB;AACjB,YAAa,uBAAS,YAAO,UAAK,YAAO,CAAC;IAC5C;oCAG8C;AAC5C,UAAc,aAAV,SAAS,KAAI;AACf,cAAiB,cAAV,SAAS,IAAG;;AAErB,YAAO,UAA6B,CAAT,aAAV,SAAS,IAAG,SAAS,OAAO;IAC/C;;AAUe,cAAI,kCAA6B,aAAJ,YAAM;AACnC,cAAI,kCAA+B,aAAN,cAAQ;AACrC,cAAI,kCAA8B,aAAL,aAAO;AACjD,YAAO,AAAO,AAAI,AAAa,uBAAf,CAAC,IAAG,AAAO,sBAAE,CAAC,IAAG,AAAO,sBAAE,CAAC;IAC7C;gBAwBwB,GAAS,GAAU;AACzC,YAAO,CAAC,IAAI;AACZ,UAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,cAAO;;AAET,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,gBAAY,CAAC,EAAE,CAAC;;AAEzB,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,gBAAY,CAAC,EAAE,AAAI,mBAAE,CAAC;;AAE/B,YAAa,kCACX,AAAgC,AAAQ,cAA7B,AAAE,CAAD,QAAQ,AAAE,CAAD,QAAQ,CAAC,oBAAgB,GAAG,kBACjD,AAA4B,AAAQ,cAAzB,AAAE,CAAD,MAAM,AAAE,CAAD,MAAM,CAAC,oBAAgB,GAAG,kBAC7C,AAAgC,AAAQ,cAA7B,AAAE,CAAD,QAAQ,AAAE,CAAD,QAAQ,CAAC,oBAAgB,GAAG,kBACjD,AAA8B,AAAQ,cAA3B,AAAE,CAAD,OAAO,AAAE,CAAD,OAAO,CAAC,oBAAgB,GAAG;IAEnD;sBAU8B,YAAkB;AACpC,kBAAQ,AAAW,UAAD;AAC5B,UAAI,AAAM,KAAD,KAAI;AAEX,cAAO,WAAU;;AAET,qBAAW,AAAK,mBAAE,KAAK;AAC7B,sBAAY,AAAW,UAAD;AAC1B,UAAI,AAAU,SAAD,KAAI;AAEf,cAAa,uBACX,KACqD,EAA9C,AAAiB,aAAvB,KAAK,iBAAG,AAAW,UAAD,QAAO,AAAS,QAAD,gBAAG,AAAW,UAAD,SAAS,mBACC,EAAlD,AAAmB,aAAzB,KAAK,iBAAG,AAAW,UAAD,UAAS,AAAS,QAAD,gBAAG,AAAW,UAAD,WAAW,mBACL,EAAhD,AAAkB,aAAxB,KAAK,iBAAG,AAAW,UAAD,SAAQ,AAAS,QAAD,gBAAG,AAAW,UAAD,UAAU;;AAIlB,QAA1C,YAAmC,CAAZ,aAAV,SAAS,IAAG,QAAQ,GAAK;AAC5B,uBAAiB,aAAN,KAAK,iBAAG,SAAS;AACtC,cAAO,QAAQ,KAAI;AACnB,cAAa,uBACX,QAAQ,EAC8C,EAAtC,AAAQ,aAAvB,AAAW,UAAD,qBAAO,KAAK,IAAkB,aAAf,AAAW,UAAD,qBAAO,SAAS,KAAK,QAAQ,gBACP,EAAxC,AAAQ,aAAzB,AAAW,UAAD,uBAAS,KAAK,IAAoB,aAAjB,AAAW,UAAD,uBAAS,SAAS,KAAK,QAAQ,gBACb,EAAvC,AAAQ,aAAxB,AAAW,UAAD,sBAAQ,KAAK,IAAmB,aAAhB,AAAW,UAAD,sBAAQ,SAAS,KAAK,QAAQ;;IAGzE;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAEG,uCAAa,KAAK;AAC9B,YAAO,AAAM,eAAG,AAAW,UAAD;IAC5B;;AAGoB,YAAO,eAAP;IAAe;;AAKjC,UAAgB,AAAU,CAArB,0BAAa,0BAAW;AAC3B,cAAO;;AAEM,oBAAgC,CAAtB,AAAO,AAAO,2BAAJ,MAAM,OAAQ;AAC5B,iBAAK;AACP,QAAjB,AAAG,EAAD,OAAO;AACmC,QAA5C,AAAG,EAAD,OAA+B,CAAf,AAAO,aAAd,kBAAU,KAAM;AACd,QAAb,AAAG,EAAD,OAAO;AACkC,QAA3C,AAAG,EAAD,OAA8B,CAAd,AAAM,aAAb,kBAAU,IAAK;AACb,QAAb,AAAG,EAAD,OAAO;AAC2B,QAApC,AAAG,EAAD,OAAuB,CAAR,aAAP,iBAAS;AACN,QAAb,AAAG,EAAD,OAAO;AACiB,QAA1B,AAAG,EAAD,OAAO,AAAM,KAAD;AACD,QAAb,AAAG,EAAD,OAAO;AACT,cAAO,AAAG,GAAD;;IAEb;;AAQe,wBAAc,AAAkC,UAA1B,AAAO,8BAAc;AACxD,YAAO,AAAmD,OAA/C,AAAY,WAAD,aAAW,AAAY,AAAO,WAAR,UAAU;IACxD;;AAIE,oBAAW;AACT,cAAO,AAAqD,cAA1C,AAAM,AAAkB,2BAAJ,cAAY,GAAG,OAAK;;AAE1D,cAAa;;IAEjB;;2BA7OgB;IAAgB,iBAAQ,cAAN,KAAK,IAAG;;EAAU;gCAG3B,GAAO,GAAO,GAAO;IACjC,iBAGoB,EAHL,AAAO,AACF,AACD,CAFZ,aAAF,CAAC,IAAG,QAAS,KACL,CAAR,aAAF,CAAC,IAAG,QAAS,KACH,CAAR,aAAF,CAAC,IAAG,QAAS,IACH,CAAR,aAAF,CAAC,IAAG,QAAS,KACnB;;EAAU;gCAaK,GAAO,GAAO,GAAU;IACpC,iBAGoB,EAHe,AAAO,AACtB,AACD,CAFE,AAAM,CAAb,aAAR,OAAO,IAAG,MAAQ,kBAAK,QAAS,KACzB,CAAR,aAAF,CAAC,IAAG,QAAS,KACH,CAAR,aAAF,CAAC,IAAG,QAAS,IACH,CAAR,aAAF,CAAC,IAAG,QAAS,KACnB;;EAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoOtB;;sCAXK;;;;EAWL;;;;;;;;;;;;;;;;;IA0DA;;uCA7CK;;;;EA6CL;;;;;;;;;;;;;;;;;IAgBA;;0CAXK;;;;EAWL;;;;;;;;;;;;;;;;IAwdA;;sCAraK;;;;EAqaL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0EA;;iCAvEK;;;;EAuEL;;;;;;;;;;;;;;;;;;;;;;;;;;IAKY;;;;;;IACI;;;;;;IACP;;;;;;IACG;;;;;;IACC;;;;;;IACN;;;;;;IACC;;;;;;IACC;;;;;;IACI;;;;;;IACG;;;;;;IACF;;;;;;;;AAIV,WAAO;MACH,eAAY;MACZ,mBAAgB;MAChB,gBAAa;MACb,YAAS;MACT,iBAAc;MACd,WAAQ;MACR,iBAAc;MACd,iBAAc;MACd,WAAQ;MACR,gBAAa;MACb,eAAY;;IAClB;;;IA1BU;IACI;IACP;IACG;IACC;IACN,oBAAc;IACb;IACC;IACI;IACG;IACF;;EAiBd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0B6B,WAAA,AAAW;mBAAA,OAAuB;IAAO;kBAC5C;AACtB,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEgB,MAA5B,AAAW,6BAAY,KAAK;IAC9B;;;AAO2B,WAAA,AAAW;mBAAA,OAAuB;IAAI;cACzC;AACtB,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEY,MAAxB,AAAW,yBAAQ,KAAK;IAC1B;;;AAQ0B,WAAA,AAAW;mBAAA,OAAe;IAAG;oBAChC;AACrB,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEkB,MAA9B,AAAW,+BAAc,KAAK;IAChC;;AAO2B,YAAA,AAAW;IAAS;kBACvB;AACtB,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEgB,MAA5B,AAAW,6BAAY,KAAK;IAC9B;;AAO6B,YAAA,AAAW;IAAU;mBACxB;AACxB,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEiB,MAA7B,AAAW,8BAAa,KAAK;IAC/B;;AAMwB,YAAA,AAAW;IAAW;oBACzB;AACnB,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEkB,MAA9B,AAAW,+BAAc,KAAK;IAChC;;AAEmB,YAAA,AAAW;IAAK;cACnB;AACd,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEY,MAAxB,AAAW,yBAAQ,KAAK;IAC1B;;AAQE,YAAO;IACT;qBAEsB;IAAQ;;AAeT,YAAA,AAAW;IAAM;eACpB;AAChB,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEa,MAAzB,AAAW,0BAAS,KAAK;IAC3B;;AAM6B,YAAA,AAAW;IAAU;mBACxB;AACxB,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEiB,MAA7B,AAAW,8BAAa,KAAK;IAC/B;;AAQmC,YAAA,AAAW;IAAa;sBAC3B;AAC9B,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEoB,MAAhC,AAAW,iCAAgB,KAAK;IAClC;;AAQ+B,YAAA,AAAW;IAAW;oBACzB;AAC1B,oBAAI;AAC6B,QAA/B,mBAAa,AAAW;AACT,QAAf,gBAAU;;AAEkB,MAA9B,AAAW,+BAAc,KAAK;IAChC;;AAIE,YAAO;IACT;yBAE4B;AAC1B,YAAO,KAAK,IAAI;IAClB;;AA0BE,YAAO;IACT;oBAE4B;IAE5B;;AASgB,MAAd,gBAAU;AACV,YAAO;IACT;;AAIE,oBAAW;AACU,qBAAS;AACrB,wBAAY;AACG,QAAtB,AAAO,MAAD,OAAO;AACb,YAAU,YAAN,YAAuB;AACH,UAAtB,AAAO,MAAD,OAAe,SAAN;AACf,cAAI,oBAAe,QAAQ,qBAAe;AACX,YAA7B,AAAO,MAAD,OAAO,AAAe,eAAZ;;AAES,YAAzB,AAAO,MAAD,OAAO;AACf,cAAI,kBAAa,qBAAQ,gBAAuB,oBAC9C,AAAO,AAAoB,MAArB,OAAO,AAAa,eAAV;AACF,UAAhB,YAAY;;AAEd,yBAAI,kBAAe;AACwB,UAAzC,AAAO,MAAD,OAAU,AAAwB,SAAf,GAAC;AACV,UAAhB,YAAY;;AAEd,yBAAI,YAAS;AACX,cAAI,cAAS;AACqB,YAAhC,AAAO,MAAD,OAAS,AAAgB,SAAP,YAAC;;AAEW,YAApC,AAAO,MAAD,OAAU,AAAmB,SAAV,GAAC;AACZ,UAAhB,YAAY;;AAEG,QAAjB,AAAO,MAAD,OAAO;AACb,cAAO,AAAO,OAAD;;AAEb,cAAa;;IAEjB;;;IA1QU,mBAAa;IA4Bb;IA0FJ,eAAS;IA0GV,gBAAU;;EA2CjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MApJqB,2BAAkB;;;;;;;EA2J3B;;;;;kBA4BD,MACA,IACK,QACC,YACJ,UAEL;;;;AAEF,YAAO,+BAAe,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ;IAAC;kBA+BlC,QAAe,QAAoB,QAChD,YACL,UACG,SACL,OACA;;;;;;AACU,MAAnB,AAAY,WAAD,IAAC,OAAZ,cAAgB,MAAJ;AAC2B,MAAvC,uBAAoB,MAAM,EAAE,UAAU;AAGtC,UAAI,AAAM,KAAD,IAAI,QAAe,YAAN,KAAK,EAAI,MAAM,KAAI,AAAY,WAAD,KAAI;AACtD,cAAc,+BACV,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO;;AAEzD,cAA6B,aAAtB,MAAM,EAAW,gCACpB,KAAK,EAAW;AACpB,cAAc,gCAAgB,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EACpE,UAAU,EAAE,QAAQ,EAAE,OAAO;;IAErC;iBA6BS,QACK,QACC,YACJ,UACF,YACA,UACK;;;;;;AAEV,YAAO,8BACH,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO;IAAC;;;AApHvD;;EAAG;;;;;AAmJH,YAAA,AAAuB,gBAApB,cAAK,eAAO,eAAM;IAAE;;;;EAC9C;;;;;;;IAyCc;;;;;;IACI;;;;;;;UAGS;AACvB,WAAU,kBAAN,KAAK;AACP,cAAO;;AAES,6CAAa,KAAK;AACpC,YAAc,AAAqB,aAA5B,cAAU,AAAW,UAAD,aAAsB,YAAX,kBAAc,AAAW,UAAD;IAChE;;AAGoB,2BAAW,cAAQ;IAAW;;AAGqB,MAArE,WAAM,8BAAiB;IACzB;;AAGqB,uBAAO,4BACtB,AACF,0BADgB,gBAAM,gBAAG,oBAAU,MAC3B;IAAU;;kCA7CO,OAAiB;IACjC,iBAAE,KAAK;IACH,oBAAE,SAAS;;;oCAKU;IACzB,iBAAE;IACE,oBAAE;;EAAI;;IAKV,iBAAE;IACE,oBAAE;;EAAI;;IAKV,iBAAE;IACE,oBAAE;;EAAI;;;;;;;;;;;;;;;;;;;;IAiDzB;;sCApBK;;;;EAoBL;;;;;;;;;;;;;;;;;;;IAgCkB;;;;;;IACH;;;;;;;AAGc;IAAM;;AAGC;IAAM;;UAGf;AACvB,WAAU,iBAAN,KAAK;AACP,cAAO;;AAEQ,4CAAa,KAAK;AACnC,YAAc,AAAqB,aAA5B,cAAU,AAAW,UAAD,aAAW,AAAO,gBAAG,AAAW,UAAD;IAC5D;;AAGoB,2BAAW,cAAQ;IAAO;;;AAG5C,YAAgB,mCAAC,OAAQ,WAAO;IAClC;;AAGqB,YAAA,AAAwD,+BAAtC,gBAAM,OAAI,AAAO,+BAAgB,KAAG;IAAE;;iCA/BtE,QACA;IADA;IACA;UACM,MAAM,IAAI;UACV,MAAM,IAAI;;EAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0D9B;;0CAxBK;;;;EAwBL;;;;;;;;;;;;;;;;;;;IAyBoB;;;;;;IACE;;;;;;IACP;;;;;;IACA;;;;;;;;QAjBU;QAAmB;IAAnB;IAAmB;IAC5B,kBAAE;IACI,uBAAgB;;EAAG;oCAEf;QAAe;IAAf;IAAe;IAC1B,gBAAE;IACF,gBAAE;AAG8C,IAD3D,WAAM,gCACF;EAGN;;;;;;;;;;;;;;;;;;;;IAsCF;;4CA5BK;;;;EA4BL;;;;;;;;;;;;;;;;;;;IAaA;;wCAVK;;;;EAUL;;;;;;;;;;;;;gCAGkB,OAAY,QAAa,QAAa;IAAtC;IAAY;IAAa;IAAa;AAC9B,IAAtB,AAAS,iBAAA,OAAT,gBAAmB,aAAN,cAAQ,IAAZ;EACX;;;;;;;;;;;;AAuByB,kDAAuB;IAAgB;;AACrC;IAAC;;AAGT;IAAI;;;;EAPV;;;;;;;;;;;AAoBS;IAAC;;AAMI;IAAC;;AAQ1B,YAAO,yCAAgB;IACzB;qBAGgD;AAAa;IAAI;;IAIjD;;;;EAzBP;;;;;;;;;;;;;;;;;;IAwIG;;;;;;IAOC;;;;;;IAGA;;;;;;gCAQ6B;AACxC,YAAc,AAAU,cAAjB,MAAM,IAAG,UAAU;IAC5B;;AAKwB,4CAAqB;IAAW;;;AAYtD,WAAO;MACH,WAAQ;MACR,gBAAwB,uBAAe,qBAAQ;;IACrD;UAIoB;AAClB,YAAO,2BACE,oBACC,AAAO,iBAAE,MAAM,eACA,aAAX,gCAAa,MAAM;IAEnC;gBAqB0B,GAAU,GAAU;AAC5C,YAAO,CAAC,IAAI;AACZ,UAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,cAAO;;AAET,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,AAAE,EAAD,OAAO,CAAC;;AAElB,UAAI,AAAE,CAAD,IAAI;AACP,cAAO,AAAE,EAAD,OAAO,AAAI,mBAAE,CAAC;;AAExB,YAAO,2BACQ,cAAK,AAAE,CAAD,QAAQ,AAAE,CAAD,QAAQ,CAAC,WACtB,eAAK,AAAE,CAAD,SAAS,AAAE,CAAD,SAAS,CAAC,eAC7B,cAAW,AAAE,CAAD,aAAa,AAAE,CAAD,aAAa,CAAC;IAExD;oBAO0C,GAAgB,GAAU;AAClE,YAAO,CAAC,IAAI;AACZ,UAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,cAAO;;AAEO,MAAhB,AAAE,CAAD,IAAC,OAAF,IAAc,2BAAZ;AACc,MAAhB,AAAE,CAAD,IAAC,OAAF,IAAc,2BAAZ;AACiB,mBAAiB;AAC1B,yBAAe,mBAAS,AAAE,CAAD,WAAS,AAAE,CAAD;AAC7C,eAAS,IAAI,GAAG,AAAE,CAAD,GAAG,YAAY,EAAE,IAAA,AAAE,CAAD,GAAI;AACC,QAAtC,AAAO,MAAD,OAAY,eAAK,AAAC,CAAA,QAAC,CAAC,GAAG,AAAC,CAAA,QAAC,CAAC,GAAG,CAAC;AACtC,eAAS,IAAI,YAAY,EAAE,AAAE,CAAD,gBAAG,AAAE,CAAD,YAAS,IAAA,AAAE,CAAD,GAAI;AACb,QAA/B,AAAO,MAAD,OAAK,AAAC,AAAI,CAAJ,QAAC,CAAC,QAAQ,AAAI,mBAAE,CAAC;AAC/B,eAAS,IAAI,YAAY,EAAE,AAAE,CAAD,gBAAG,AAAE,CAAD,YAAS,IAAA,AAAE,CAAD,GAAI;AACnB,QAAzB,AAAO,MAAD,OAAK,AAAC,AAAI,CAAJ,QAAC,CAAC,QAAQ,CAAC;;AAEzB,YAAO,OAAM;IACf;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,WAAU,aAAN,KAAK;AACP,cAAO;;AAEI,wCAAa,KAAK;AAC/B,YAAa,AACmB,aADzB,YAAS,AAAW,UAAD,WACf,YAAP,aAAU,AAAW,UAAD,YACpB,AAAW,mBAAG,AAAW,UAAD;IAC9B;;AAGoB,2BAAW,YAAO,aAAQ;IAAW;;AAGpC,YAAA,AAA0C,0BAA7B,cAAK,gBAAG,eAAM,gBAAG,mBAAU;IAAE;;;QAjJxD;QACA;QACA;IAFA;IACA;IACA;UACM,KAAK,IAAI,yBAAM;UACf,MAAM,IAAI,yBAAM;UACL,aAAX,UAAU,KAAI,wBACjB;;EAAkD;;;;;;;;;;;;;;;;;;;;;;;;MAE3C,wBAAc;;;;;;;;;;;;;;;IC9uDjC;;0CA7BK;;;;EA6BL;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBA;;8CAfK;;;;EAeL;;;;;;;;;;;;;;;;;;;;;;IAYA;;8CATK;;;;EASL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCiB;;;;;;IAGK;;;;;;IAGI;;;;;;IAGA;;;;;;IAGd;;;;;;IAIG;;;;;;IAIA;;;;;;IAMH;;;;;;IAKC;;;;;;IAME;;;;;;IAKA;;;;;;IAKA;;;;;;IAMA;;;;;;IAKA;;;;;;IAQA;;;;;;IAGA;;;;;;IAGA;;;;;;IAIA;;;;;;IAIA;;;;;;IA2BA;;;;;;IAYA;;;;;;IAGH;;;;;;IAKG;;;;;;IAKA;;;;;;;AAGQ,YAA4C,UAA1C,sBAAW,kBAAK,kBAAS,mBAAM,kBAAS;IAAE;;AAI/D,sBAAS,sBAAW,MAChB,yBAAa,kBAAS,OACtB,sBAAU,eAAM,OAChB,oBAAQ,aAAI,OACZ,0BAAc,mBAAU,OACxB,sBAAU,eAAM,OAChB,yBAAa,kBAAS,OACtB,yBAAa,kBAAS,OACtB,uBAAW,gBAAO,OAClB,wBAAY,iBAAQ,OACpB,2BAAe,oBAAW,OAC1B,2BAAe,oBAAW,OAC1B,wBAAY,iBAAQ,OACpB,2BAAe,oBAAW,OAC1B,oBAAQ,aAAI,OACZ,2BAAe,oBAAW,OAC1B,2BAAe,oBAAW,OAC1B,yBAAa,kBAAS,OACtB,yBAAa,kBAAS,OACtB,2BAAe,oBAAW,OAC1B,oBAAQ,aAAI,OACZ,4BAAgB,qBAAY,OAC5B,4BAAgB,qBAAY,OAC5B,4BAAgB,qBAChB;IACN;;;QA/LO;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAvBA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkLsB;;;;;;;;QALM;;;EAA8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICzOlD;;;;;;;AA4LR,cAAQ;;;AAEJ,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;AAEX,YAAO;IACT;;;IApQ6B;;EAAM;;;;;;;;;;MAElB,6BAAU;;;MACV,mCAAgB;;;MAChB,oCAAiB;;;MACjB,qCAAkB;;;MAClB,kCAAe;;;MACf,oCAAiB;;;MACjB,kCAAe;;;MACf,kCAAe;;;MACf,sCAAmB;;;MACnB,sDAAmC;;;MACnC,uDAAoC;;;MACpC,sCAAmB;;;MACnB,8BAAW;;;MACX,6BAAU;;;MACV,+BAAY;;;MACZ,mDAAgC;;;MAChC,mDAAgC;;;MAChC,iCAAc;;;MACd,iCAAc;;;MACd,iDAA8B;;;MAC9B,kDAA+B;;;MASnB,sBAAG;;;MAIH,4BAAS;;;MAOT,6BAAU;;;MAQV,8BAAW;;;MAQX,2BAAQ;;;MAOR,6BAAU;;;MAMV,2BAAQ;;;MAKR,2BAAQ;;;MAMR,+BAAY;;;MASZ,+CAA4B;;;MAS5B,gDAA6B;;;MAY7B,+BAAY;;;MAIZ,uBAAI;;;MAGJ,sBAAG;;;MAGH,wBAAK;;;MAaL,4CAAyB;;;MAczB,4CAAyB;;;MAOzB,+BAAY;;;MASZ,0BAAO;;;MAQP,0CAAuB;;;MASvB,2CAAwB;;;MAOd,yBAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuGnC;;;;;;;AA8OR,cAAQ;;;AAEJ,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;AAEX,YAAO;IACT;;;IAhS2B;;EAAM;;;;;;;;;;MAtBhB,uCAAsB;;;MACtB,iCAAgB;;;MAChB,kCAAiB;;;MACjB,gCAAe;;;MACf,mCAAkB;;;MAClB,iCAAgB;;;MAChB,uCAAsB;;;MACtB,iCAAgB;;;MAChB,kDAAiC;;;MACjC,gCAAe;;;MACf,kCAAiB;;;MACjB,mCAAkB;;;MAClB,kCAAiB;;;MACjB,gCAAe;;;MACf,+BAAc;;;MACd,oCAAmB;;;MACnB,uCAAsB;;;MACtB,iCAAgB;;;MAChB,4CAA2B;;;MAC3B,mCAAkB;;;MAClB,kCAAiB;;;MAkBP,gCAAe;;;MAaf,0BAAS;;;MAQT,2BAAU;;;MAOV,yBAAQ;;;MAMR,4BAAW;;;MAKX,2BAAU;;;MAKV,0BAAS;;;MAQT,gCAAe;;;MAQf,0BAAS;;;MAMT,2CAA0B;;;MAQ1B,yBAAQ;;;MAMR,2BAAU;;;MAyBV,4BAAW;;;MAaX,2BAAU;;;MAkBV,yBAAQ;;;MAMR,wBAAO;;;MAWP,6BAAY;;;MAYZ,gCAAe;;;MAWf,0BAAS;;;MAST,qCAAoB;;;MAQpB,4BAAW;;;MAQD,uBAAM;;;;;;;UAsIrC;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACG;UACA;UACA;UACA;UACA;UACF;UACE;UACA;UACA;UACA;UACA;UACO;UACF;UACF;UACA;UACA;AAEV,UAAI,AAAU,SAAD,cAAW,IACtB,AAA+D,WAAzD,2BAAc;AA0BpB,MAzBF,AAAa,0BAAW,wCAClB,EAAE,SACC,KAAK,WACH,OAAO,qBACG,iBAAiB,uBACf,mBAAmB,kBACxB,cAAc,eACjB,WAAW,kBACR,cAAc,mBACb,eAAe,mBACf,eAAe,QAC1B,IAAI,SACH,KAAK,QACN,IAAI,SACH,KAAK,kBACI,cAAc,kBACd,cAAc,iBACf,aAAa,aACjB,SAAS,aACT,SAAS,aACT,SAAS,4BACM,wBAAwB,0BAC1B,sBAAsB,qBAC3B,iBAAiB,kBACpB,cAAc;IAElC;;UAGS;UAAW;UAAc;UAAU;IAE5C;;AAQE,YAAuB,8CACR;IAEjB;;;IAzHuC,sBACP;;EAHR;;;;;;;;;;;;;;;;;;;;;;;;ICnkB1B;;sCANK;;;;EAML;;;;;;;;;;;;;;;;;;;;;;IA2CA;;iDAtCK;;;;EAsCL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOY;;;;;;gBAoEwB,GAAc,GAAU;;AACxD,YAAO,CAAC,IAAI;AACZ,YAAO,AAAM,wCACT,AACK,AACA,eAFe,YAAT,CAAC,eAAD,OAAG,kBAAH,OAAY,AAAO,oCAAgB,eAAT,CAAC,iBAAD,OAAG,qBAAH,OAAY,AAAO,oCAAO,CAAC,oBAErD,GAAG;IACpB;;AAIE,YAUC,4BAAC;IACJ;;;IA5FwB;;EAAM;;;;;;;;;;MAMN,kBAAI;;;MAGJ,kBAAI;;;MAGJ,kBAAI;;;MAGJ,kBAAI;;;MAGJ,kBAAI;;;MAGJ,kBAAI;;;MAGJ,kBAAI;;;MAGJ,kBAAI;;;MAGJ,kBAAI;;;MAGJ,oBAAM;;;MAGN,kBAAI;;;MAGE,oBAAM;;;;;;;IA6KvB;;;;;;IAMH;;;;;;wBA7E2B;AACnC,YAAa,aAAN,KAAK,KAAI;AAChB,YAAa,aAAN,KAAK,KAAI;AAChB,YAAO,wBAAY,AAAuC,OAA5B,AAAW,cAAjB,KAAK,YAAoB,GAAG;IACtD;;UA4EyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAES,6CAAa,KAAK;AACpC,YAAO,AAAQ,AAAsB,iBAAnB,AAAW,UAAD,YAAY,AAAM,cAAG,AAAW,UAAD;IAC7D;;AAGoB,2BAAW,cAAS;IAAM;;AAGzB,YAAA,AAA+B,2BAAjB,gBAAO,gBAAG,cAAK;IAAE;;iCAhI7B,SAAe;;IAAf;IAAe;UACzB,OAAO,IAAI;UACX,AAAQ,AAAO,OAAR,YAAW;UAClB,KAAK,IAAI;UACH,aAAN,KAAK,KAAI;;EAAE;oCAGQ;kCAAgB,OAAO,EAAE;EAAE;qCAG1B;kCAAgB,OAAO,EAAE;EAAE;;IAa9C,iBAAE;IACJ,gBAAE;;EAAC;;IA0BD,iBAAE;IACJ,gBAAE;;EAAC;;IAcD,iBAAE;IACJ,gBAAE;;EAAC;;IAeD,iBAAE;IACJ,gBAAE;;EAAC;;IAeD,iBAAE;IACJ,gBAAE;;EAAC;;;;;;;;;;;;;;;;IAgEjB;;sCA7BK;;;;EA6BL;;;;;;;;;;;;;;;;;;;;;;IASA;;yCANK;;;;EAML;;;;;;;;;;;;;;;;;;;IAeY;;;;;;mBAR0C;AAC9C,iBAAO;AACX,eAAoB,aAAc,YAAW;AACnB,QAAxB,OAAK,CAAL,IAAI,gBAAI,AAAW,UAAD;;AAEpB,YAAsB,0BAAE,IAAI;IAC9B;aAK6B;AAC3B,YAAc,AAAe,eAArB,4BAAQ,AAAM,KAAD,oBAAW;IAClC;;UAeyB;AACvB,WAAU,qBAAN,KAAK;AACP,cAAO;;AAEY,gDAAa,KAAK;AACvC,YAAO,AAAM,gBAAG,AAAW,UAAD;IAC5B;;AAGoB,YAAM,eAAN;IAAc;;AAIhC,UAAI,AAAM,gBAAG;AACX,cAAO;;AAEU,mBAAiB;AACpC,WAAU,aAAN,4BAAQ,AAAU,yCAAS;AACN,QAAvB,AAAO,MAAD,OAAK;;AAEb,WAAU,aAAN,4BAAQ,AAAS,wCAAS;AACN,QAAtB,AAAO,MAAD,OAAK;;AAEb,WAAU,aAAN,4BAAQ,AAAY,2CAAS;AACN,QAAzB,AAAO,MAAD,OAAK;;AAEb,UAAI,AAAO,AAAO,MAAR,cAAW;AACnB,cAAO,AAA6B,8BAAX,AAAM,MAAA,QAAC;;AAElC,YAAO,AAAgD,uCAArB,AAAO,MAAD,QAAM,SAAM;IACtD;;;IA7D4B;;EAAM;;;;;;;;;;;;;;;MAmBN,sBAAI;;;MAGJ,2BAAS;;;MAGT,0BAAQ;;;MAGR,6BAAW;;;;;;;;IAoDzC;;gDAfK;;;;EAeL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+RA;;0CANK;;;;EAML;;;;;;;;;;;;;;;;;;IA0Be;;;;;;IAGA;;;;;;IAKA;;;;;;IAGA;;;;;;IAGO;;;;;;;AAGH,YAAK,sBAAS,WAAM,UAAK,YAAO;IAAO;;AAQtD,YAAkB,aAAV,gBAA2B,wBAAO,YAAO;IACnD;;AAQE,YAAkB,aAAV,gBAA2B,wBAAO,aAAQ;IACpD;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAEK,yCAAa,KAAK;AAChC,YAAO,AAAW,AAAK,AAGS,WAHf,SAAS,aACtB,AAAW,AAAI,UAAL,QAAQ,YAClB,AAAW,AAAM,UAAP,UAAU,cACpB,AAAW,AAAO,UAAR,WAAW,eACA,YAArB,AAAW,UAAD,YAAc;IAC9B;;AAGoB,2BAAW,WAAM,UAAK,YAAO,aAAQ;IAAU;;AAIjE,oBAAW;AACT,cAAO,AAAiJ,wBAA5H,AAAK,4BAAgB,KAAG,OAAI,AAAI,2BAAgB,KAAG,OAAI,AAAM,6BAAgB,KAAG,OAAI,AAAO,8BAAgB,KAAG,gBAAG,kBAAS;;AAExJ,YAAa;IACf;;mCAhFO,MACA,KACA,OACA,QACA;IAJA;IACA;IACA;IACA;IACA;;EACN;4BAGM,MACA,KACA,OACA,QACD;IAJC;IACA;IACA;IACA;IAEO,mBAAgB,AAAM,+BAAC,cAAc;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoHtD;;yCAxBK;;;;EAwBL;;;;;;;;;;;;;IAkCY;;;;;;IASS;;;;;;;UAGM;AACvB,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAEU,8CAAa,KAAK;AACrC,YAAO,AAAW,AAAO,AAAU,WAAlB,WAAW,eAA8B,YAApB,AAAW,UAAD,WAAa;IAC/D;;AAGoB,2BAAW,aAAQ;IAAS;;AAI9C,YAA2D,UAAlD,sBAAW,uBAAU,eAAM,0BAAa,iBAAQ;IAC3D;;;QArCO;QACA;IADA;IACA;UACM,MAAM,IAAI;UACV,QAAQ,IAAI;;EAAK;;;;;;;;;;;;;;IAoEjB;;;;;;;UAGY;AACvB,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAEkB,sDAAa,KAAK;AAC7C,YAAO,AAAW,AAAM,WAAP,UAAU;IAC7B;;AAGoB,YAAM,eAAN;IAAc;;AAGb,YAA6B,UAA3B,sBAAW,sBAAS,cAAK;IAAE;;;QAnC3C;;UACK,KAAK,IAAI;;EAAK;;;;;;;;;;;;;;;;;;IAiF5B;;2CA1CK;;;;EA0CL;;;;;;;;;;;;;;;;;;;;IAeA;;0CAXK;;;;EAWL;;;;;;;;;;;;;;;EA4GA;;;;eAmB0C;AACpC,YAAO,0EAAuB,KAAK;IAAC;;;;;;;;;;;;ICpkC1C;;qCA7BK;;;;EA6BL;;;;;;;;;;;;;;;;;;;;;IfgCA;;8CArCK;;;;EAqCL;;;;;;;;;;;;;;;;;;;;IAuBe;;;;;;IAIA;;;;;;IAIA;;;;;;IAIA;;;;;;;AAQX,YAAO,AAAuE,mCAAjD,aAAI,qBAAQ,YAAG,uBAAU,cAAK,wBAAW,eAAM;IAC9E;;;QAzB4B;QAAW;QAAU;QAAY;IAAjC;IAAW;IAAU;IAAY;;EAAQ;;;;;;;;;;;;;;;;MAmB1C,qBAAI;;;;;;;IAqHlB;;;;;;IAmLA;;;;;;IAsBA;;;;;;;AA1Mc,wDAAiC;IAAc;4CAGpB;AAGpD,cAAQ,YAAY;;;AAEhB,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO,aAAY;;;IAEzB;;AAmC0B,sDAA+B;IAAa;0CAGlB;AAGlD,cAAQ,UAAU;;;AAEd,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO,WAAU;;;IAEvB;;UAGyB;AACvB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,WAAU,aAAN,KAAK;AACP,cAAO;;AAEI,wCAAa,KAAK;AAC/B,YAAO,AAAa,AACoB,sBADjB,AAAW,UAAD,iBAC7B,AAAW,mBAAG,AAAW,UAAD,eACxB,AAAY,oBAAG,AAAW,UAAD;IAC/B;;AAGoB,2BAAW,mBAAc,iBAAY;IAAY;;AAIhD,gBAAM,0BAAa;AACtC,UAAI,mBAAc;AACS,QAAzB,AAAI,GAAD,OAAO,AAAc,eAAX;;AAEf,UAAI,sBAAgB;AACQ,QAA1B,AAAI,GAAD,OAAO,AAAe,eAAZ;;AAEf,YAAO,AAAI,IAAD;IACZ;;AAG0B;IAAG;;4BAvTtB,eACA;;IADA;IACA;UACM,aAAa,IAAI;UACjB,aAAa,KAAI;IACb,oBAAE;;EAAI;;QAmBd;QACF;QACE;IADF;UAEM,YAAY,IAAI;UAChB,YAAY,KAAI;IACT,uBAAE,YAAY;UACrB,UAAU,KAAI;UACd,WAAW,KAAI;IACT,sBAAE,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmxBtB;;;;;;;AAMuB,cAAuB,iBAAE,mBAAU;IAAC;;AAG5C,cAAoB,iBAAE,mBAAU;IAAC;;AAG5B,cAAyB,iBAAE,mBAAU;IAAC;;AAK/C,cAAgB,iBAAE,mBAAU;IAAC;;AAMzB,cAAoB,kBAAE,mBAAU;IAAC;;AAIrC,qBAAmB;AACtC,oBAAI;AACkC,QAApC,AAAS,QAAD,OAAK;;AAEf,oBAAI;AAC0B,QAA5B,AAAS,QAAD,OAAK;;AAEf,oBAAI;AAC+B,QAAjC,AAAS,QAAD,OAAK;;AAEf,oBAAI;AACsB,QAAxB,AAAS,QAAD,OAAK;;AAEf,oBAAI;AAC0B,QAA5B,AAAS,QAAD,OAAK;;AAEf,YAAO,AAAgC,oCAAT,QAAQ;IACxC;;UAGyB;AACvB,uBAAU,iBAAN,KAAK,GAAgB;AACvB,cAAO;;AAEmB,uDAAa,KAAK;AAC9C,YAAO,AAAO,iBAAG,AAAW,UAAD;IAC7B;;AAGoB,YAAO,eAAP;IAAe;;;IAjEA;;EAAO;;;;;;;;;;;;;;;;;;;MAEzB,+CAAsB;;;MACtB,4CAAmB;;;MACnB,iDAAwB;;;MACxB,wCAAe;;;MACf,4CAAmB;;;;;;;;;;IA2EtC;;uCAZK;;;;EAYL;;;;;;;;;;;;;;;AASuB;IAAO;;UAGJ;AAAU,YAAU,UAAM,KAAK;IAAC;;AAGpC,YAAM;IAAQ;;;IAVA;;EAAQ;;;;;;;;;;;;;;;;6BAeO;AACrB,MAA1B,WAAM;IACR;iCAEqD;AACzB,MAA1B,WAAM;IACR;;;;EACF;;;;iCAIoB,OAAgB,KAAc,KAAiB;;EAAQ;;;;4BAKlC;AACrC,YAAO,IAAI,IAAI,yBAAM;AACK,MAA1B,WAAM;IACR;gCAEyC,MAAa;AACpD,YAAO,IAAI,IAAI,yBAAM;AACrB,YAAO,IAAI,IAAI,yBAAM;AACK,MAA1B,WAAM;IACR;iCAEyC;AACvC,YAAO,IAAI,IAAI,yBAAM;AACK,MAA1B,WAAM;IACR;;;;EACF;;;;;;;;;;;IAyBA;;uCApBK;;;;EAoBL;;;;;;;;;;;;;;;;;;4BAwByC;AAAU,YAAA,AAAW,0BAAC,AAAM,KAAD;IAAO;mBAExC;AAC7B,kDAAuB,AAAW,yBAAC,AAAM,KAAD;IAAQ;;AAkBhD,YAAA,AAAqC,oBAAb,gCACxB,mBAAwB;IAAW;;AAOnC,YAAA,AAAsC,oBAAd,iCACxB,mBAAwB;IAAY;;AAUpC,YAAA,AAAsC,oBAAd,iCACxB,mBAAwB;IAAW;gBAIb;AAAa,YAAsC,UAAX,aAAxB,AAAS,QAAD,mBAAkB,SAAM;IAAG;;AAI3E,YAAmJ,UAA1I,sBAAW,8BAAkB,gBAAU,uBAAe,gCAAoB,gBAAU,wBAAgB,2BAAe,gBAAU,mBAAW;IACnJ;;iCAxDsB;UACT,AAAW,AAAO,UAAR,aAAsB,AAAO;IAClC,oBAAE,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;kDOorCH,IAAW,IAAW,SAAgB,SACxD,SAAgB;AACZ,aAAQ,aAAH,EAAE,iBAAG,OAAO;AACjB,aAAQ,aAAH,EAAE,iBAAG,OAAO;AAC9B,UAAS,AAAG,AAAM,AAAuB,AAAoC,GAAlE,GAAG,EAAE,IAAa,aAAR,OAAO,iBAAG,OAAO,KAAO,AAAG,AAAM,EAAP,GAAG,EAAE,IAAa,aAAR,OAAO,iBAAG,OAAO,KACtE;EACN;sCGrzEsB,OAAc,OACxB,OACD,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA;;;;;;;;;;;;;;;;;;;AACL,iBAAS;AACb,SAAe,CAAF,iBAAN,KAAK;AACyB,IAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,SAAe,CAAF,iBAAN,KAAK;AACyB,IAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,qBAAI,KAAK,EAAI;AACX,WAAe,CAAF,iBAAN,KAAK;AACyB,MAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,uBAAI,KAAK,EAAI;AACX,aAAe,CAAF,iBAAN,KAAK;AACyB,QAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,yBAAI,KAAK,EAAI;AACX,eAAe,CAAF,iBAAN,KAAK;AACyB,UAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,2BAAI,KAAK,EAAI;AACX,iBAAe,CAAF,iBAAN,KAAK;AACyB,YAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,6BAAI,KAAK,EAAI;AACX,mBAAe,CAAF,iBAAN,KAAK;AACyB,cAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,+BAAI,KAAK,EAAI;AACX,qBAAe,CAAF,iBAAN,KAAK;AACyB,gBAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,iCAAI,KAAK,EAAI;AACX,uBAAe,CAAF,iBAAN,KAAK;AACyB,kBAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,mCAAI,KAAK,EAAI;AACX,yBAAe,CAAF,iBAAN,KAAK;AACyB,oBAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,qCAAI,KAAK,EAAI;AACX,2BAAe,CAAF,iBAAN,KAAK;AACyB,sBAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,uCAAI,KAAK,EAAI;AACX,6BAAe,CAAF,iBAAN,KAAK;AACyB,wBAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,yCAAI,KAAK,EAAI;AACX,+BAAe,CAAF,iBAAN,KAAK;AACyB,0BAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,2CAAI,KAAK,EAAI;AACX,iCAAe,CAAF,iBAAN,KAAK;AACyB,4BAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,6CAAI,KAAK,EAAI;AACX,mCAAe,CAAF,iBAAN,KAAK;AACyB,8BAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,+CAAI,KAAK,EAAI;AACX,qCAAe,CAAF,iBAAN,KAAK;AACyB,gCAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,iDAAI,KAAK,EAAI;AACX,uCAAe,CAAF,iBAAN,KAAK;AACyB,kCAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,mDAAI,KAAK,EAAI;AACX,yCAAe,CAAF,iBAAN,KAAK;AACyB,oCAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,qDAAI,KAAK,EAAI;AACX,2CAAe,CAAF,iBAAN,KAAK;AACyB,sCAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;AAC5B,uDAAI,KAAK,EAAI;AACX,6CAAe,CAAF,iBAAN,KAAK;AACyB,wCAArC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAS,cAAN,KAAK;;;;;;;;;;;;;;;;;;;AAoBhE,UAAO,OAAM;EACf;kCAK8B;AACxB,iBAAS;AACb,QAAI,IAAI,IAAI;AACV,eAAY,MAAO,KAAI;AACrB,aAAa,CAAF,iBAAJ,GAAG;AACyB,QAAnC,SAAS,AAAG,AAAS,KAAP,MAAM,gBAAO,cAAJ,GAAG;;;AAG9B,UAAO,OAAM;EACf;;QMhIsB;AADgB;AAGpC,qBAAK;AACwE,QAApE,AAAO;;AAGgB,MAAhC;AAIA;AAC+B,QAA7B,MAAM;;AAGoC,MAA5C,AAAa,YAAD,IAAC,OAAb,mCAAa;AAC6B,MAA1C,MAAM,0BAAuB,YAAY;AACA,MAAzC,MAAM,AAAgB;AACtB;AACqD,QAAnD,MAAa,AAAmB;;AAGN,MAA5B,2BAAwB;IAC1B;;8DAYwD;AAArB;AACjC,YAAO,YAAY,IAAI,yBAAM;AAC7B,UAAiB,YAAb,YAAY,EAAI;AAClB;;AAG0B,MAA5B,mBAAgB,YAAY;AAE5B;AAC2D,QAAlD,AAAmB,oCAAA,4BAAW,sCAAX;;AAGe,MAA3C,AAAgB,6BAAA,qBAAW,kCAAX;AAEO,MAAvB,AAAgB;AAChB,UAAI,oBAAiB;AAC+B,QAAlD,MAAM,AAAgB,iCAAc;AAEpC;AAC8D,UAA5D,MAAa,AAAmB,wCAAc;;;AAIlD,oBAAI;AACsC,QAAxC,AAAgB;;IAEpB;;sCC7DsB,GAAO,GAAU;AACrC,QAAI,AAAE,CAAD,IAAI,QAAQ,AAAE,CAAD,IAAI;AACpB,YAAO;;AAEA,IAAT,AAAE,CAAD,IAAC,OAAF,IAAM,MAAJ;AACO,IAAT,AAAE,CAAD,IAAC,OAAF,IAAM,MAAJ;AACF,UAAS,cAAF,CAAC,IAAW,CAAL,aAAF,CAAC,iBAAG,CAAC,kBAAI,CAAC;EACxB;;ACS4B,IAA1B,WAAM;EACR;+CPjB2B;AACzB,UAAO,MAAM,IAAI,yBAAM;AACvB,UAAwB,CAAhB,AAAO,AAAG,MAAJ,gBAAc,AAAO,AAAG,MAAJ,gCAC9B;AACJ,UAAO;EACT;iDAGiC;AAC/B,UAAO,OAAO,IAAI,yBAAM;AACxB,UAAO,AAAQ,AAAO,OAAR,cAAW,uBAAI;AAC7B,UAAO;EACT;yDAEqC,QAAqB;AACxD,QAAI,AAAW,UAAD,IAAI;AAChB,UAAI,AAAO,MAAD,cAAW,GACnB,AAC8D,WADxD,2BACF;;AAEN,UAAI,AAAO,MAAD,aAAW,AAAW,UAAD,WAC7B,AACkE,WAD5D,2BACF;;EAEV;wCAEwB,GAAU;AAChC,UAAO,AAAE,EAAD,sBAA8B,AAAQ,CAAlB,aAAR,AAAE,CAAD,uBAAS,MAAM,qBAAgB,GAAG;EACzD;4DAkpD8C;QAClC;AACV,UAAO,2BAAgB,QAAwB,YAC3C,0BAAuB,IAAI,EAAE,QAAQ,EAAE;EAC7C;8DAMc,MAA6B,UAAqB;AAC9D;AACE,UAAI,AAAU,SAAD,IAAI;AACiC,QAAhD,iCAAiC,IAAI,EAAE,QAAQ;;AAGY,QAD3D,iCAAiC,IAAI,EAAE,QAAQ,EAAE,AAAU,SAAD,QACtD,AAAU,SAAD,SAAS,AAAU,SAAD,SAAS,AAAU,SAAD;;AAEnD,YAAO;;AAEO,eAAY,cAAc,CAAC,AAAK,IAAD;AACX,IAApC,AAAQ,QAAA,CAAQ,6BAAc,IAAI;AAClC,UAAO;EACT;wFAEsD;AACpD,UAAO,2BAAgB,QAAwB,YAC3C,iCAA8B,GAAG,EAAE,QAAQ;EACjD;4EAEyC,KAA4B;AACzB,IAA1C,AAAQ,QAAA,CAAQ,yBAAc,cAAJ,GAAG;AAC7B,UAAO;EACT;wDAMmC,MAA2B;AACnB,IAAzC,6BAA0B,IAAI,EAAE,QAAQ;EAC1C;oEAGc,MAA2B;AADH;AAExB,mBAAQ,MAAM,yBAAsB,IAAI;AACpC,uBAAY,MAAM,AAAM,KAAD;AACd,MAAzB,AAAQ,QAAA,CAAC,AAAU,SAAD;IACpB;;4DASqC,QAAY,OAAW,QAC5C,QAA6B;QACpC;AACU,oBACb,sBAAW,KAAK,EAAE,MAAM,EAAE,AAAO,MAAD,QAAQ,QAAQ;AAChC,sBAAc,0BAC9B,QAAwB,YACpB,0BAAuB,MAAM,EAAE,QAAQ,EAAE,SAAS;AAGG,IAF7D,AACK,AACA,WAFM,oBACD,QAAO,SAAU,AAAM,KAAD,8DACtB,QAAW,aAAc,AAAQ,QAAA,CAAC,AAAU,SAAD;EACvD;kGQ1uDuB;AACrB,QAAI,AAA+B,qCAAG;AACO,MAA3C,0CAAuC;AAIY,MADnD,oCAAiC,4CACR;;AAE3B,UAAO,AAA+B,sDAAc,QAAC,KAAM,AAAI,IAAA;EACjE;;QAasD;AAElC,IAAX;AAKsD,IAAtD,AAAO,4CAA8B,gBAAgB;AAEJ,IADjD,AAAO,iDACV,gBAAK,AAAI,mBAAE,gBAAgB,GAAE,AAAI,mBAAE,gBAAgB;AACnB,IAApC,kCAA+B;;AACY,IAA3C,0CAAuC;AAEvC,QAAI,iCAA8B;AAChC,YAAO;;AAIT,UAAO,iCACH,AACK,4CAD0C,gFACK;AACP,QAA/C,WAAM,mBAAU;MACjB;EACH;kDL0pCwC;QAAc;AACpD,kBAAW;AACmD,MAA5D,WAAM,8BAAiB;;AAEzB,gCAA0B;EAC5B;;;;AEvrCiC;IAAqB;;AA0ClD;IAAqC;6CAEK;AACC,MAA7C,2CAAwC,KAAK;AAC7C,oBAAI;AACS;AAE8B,QADlC,AAAO,iDACV,AAAY,WAAD,MAAG,AAAO;;IAE7B;;AAK+C;IAAa;;AAGT;IAAe;yBGnEtC;AACgB,MAAnC,AAAO,iCAAmB,SAAS;IAC5C;;AnBirCqB,YAAO;IAAM;;;MoB3qCvB,QAAK;;;MAIN,kBAAe;;;MV9BV,WAAQ;;;MMsBH,gBAAa;;;;MACX,kBAAe;;;;MAEhC,wBAAqB;YAAG;;;MAsDxB,wCAAqC;YAAG;;;MG/EhC,iCAA8B;;;;MAwB9B,6BAA0B;;;;MnBw7B1B,+BAA4B","file":"ui.ddc.js"}');
  // Exports:
  return {
    src__engine: engine,
    ui: ui
  };
});

//# sourceMappingURL=ui.ddc.js.map
